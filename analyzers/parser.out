Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AT
    BOOL
    BREAK
    CASE
    CLASS
    CLASS_C
    CLOSE_TAG
    COMENTARIOS
    CONCAT
    CONSTANT_ENCAPSED_STRING
    CONTINUE
    CURLY_OPEN
    DEFAULT
    DIR
    DIV_EQUAL
    DO
    DOC_COMENTARIOS
    DOUBLE
    ENCAPSED_AND_WHITESPACE
    EXIT
    FALSE
    FILE
    FLOAT
    FUNC_C
    GLOBAL
    GOTO
    HALT_COMPILER
    INT
    LINE
    METHOD_C
    MINUS_EQUAL
    MOD_EQUAL
    MUL_EQUAL
    NEW
    NOT
    NS_C
    NS_SEPARATOR
    NULL
    NUM_STRING
    OBJECT
    OPEN_TAG
    PLUS_EQUAL
    REQUIRE
    TRUE
    VAR
    VOID

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> imprimir
Rule 2     cuerpo -> asignacion
Rule 3     cuerpo -> asignacion_array
Rule 4     cuerpo -> funciones
Rule 5     cuerpo -> constante
Rule 6     cuerpo -> lectura
Rule 7     cuerpo -> operadores
Rule 8     cuerpo -> operador_logico
Rule 9     cuerpo -> condicion_booleana
Rule 10    cuerpo -> bwhile
Rule 11    cuerpo -> bfor
Rule 12    cuerpo -> bforeach
Rule 13    cuerpo -> btry
Rule 14    cuerpo -> operaciones_mat_par
Rule 15    cuerpo -> condicion_ifelse
Rule 16    imprimir -> ECHO valor SEMI
Rule 17    imprimir -> PRINT valor SEMI
Rule 18    imprimir -> PRINT LPAREN valor RPAREN SEMI
Rule 19    imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
Rule 20    valor -> numero
Rule 21    valor -> VARIABLE
Rule 22    valor -> STRING
Rule 23    valor -> NOMBRE
Rule 24    numero -> ENTERO
Rule 25    numero -> DECIMAL
Rule 26    operadores -> SUMA
Rule 27    operadores -> RESTA
Rule 28    operadores -> MULTIPLICACION
Rule 29    operadores -> DIVISION
Rule 30    operadores -> MODULO
Rule 31    operador_logico -> SMALLER
Rule 32    operador_logico -> GREATER
Rule 33    operador_logico -> IS_SMALLER_OR_EQUAL
Rule 34    operador_logico -> IS_GREATER_OR_EQUAL
Rule 35    condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
Rule 36    condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
Rule 37    condicion_else -> ELSE LBRACE cuerpo RBRACE
Rule 38    condicion_ifelse -> condicion_if
Rule 39    condicion_ifelse -> condicion_if condicion_else
Rule 40    condicion_ifelse -> condicion_if condicion_elseif
Rule 41    condicion_ifelse -> condicion_if condicion_elseif condicion_else
Rule 42    condicion_booleana -> AND
Rule 43    condicion_booleana -> OR
Rule 44    condicion_booleana -> XOR
Rule 45    condicion_booleana -> IS_EQUAL
Rule 46    condicion_booleana -> IS_NOT_EQUAL
Rule 47    condicion_booleana -> IS_IDENTICAL
Rule 48    condicion_booleana -> IS_NOT_IDENTICAL
Rule 49    condicion_booleana -> BOOLEAN_NOT
Rule 50    operaciones_mat -> valor operadores valor
Rule 51    operaciones_mat -> valor operadores operaciones_mat
Rule 52    operaciones_mat_par -> LPAREN valor operadores valor RPAREN
Rule 53    operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN
Rule 54    asignacion -> VARIABLE EQUALS valor SEMI
Rule 55    asignacion_array -> VARIABLE EQUALS array_def SEMI
Rule 56    constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI
Rule 57    constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
Rule 58    lectura -> READLINE LPAREN STRING RPAREN SEMI
Rule 59    lectura -> READLINE LPAREN RPAREN SEMI
Rule 60    proteccion -> PUBLIC
Rule 61    proteccion -> PRIVATE
Rule 62    proteccion -> PROTECTED
Rule 63    proteccion -> STATIC
Rule 64    funciones -> funcion_nparams
Rule 65    funciones -> proteccion funcion_nparams
Rule 66    funciones -> funcion_opreturn
Rule 67    funciones -> proteccion funcion_opreturn
Rule 68    funciones -> funcion_blank
Rule 69    funciones -> proteccion funcion_blank
Rule 70    param -> VARIABLE
Rule 71    param -> asignacion
Rule 72    funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
Rule 73    params_list -> params_list COMMA param
Rule 74    params_list -> param
Rule 75    funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
Rule 76    funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
Rule 77    funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
Rule 78    condicion -> VARIABLE operador_logico VARIABLE
Rule 79    condicion -> valor operador_logico valor
Rule 80    bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
Rule 81    bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque
Rule 82    bswitch -> SWITCH LPAREN
Rule 83    bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
Rule 84    stc_bloque -> stc_bloque cuerpo
Rule 85    stc_bloque -> empty
Rule 86    stc_bloque -> RETURN
Rule 87    stc_bloque_def -> LBRACE stc_bloque RBRACE
Rule 88    for_incr -> VARIABLE SUMA SUMA
Rule 89    for_incr -> SUMA SUMA VARIABLE
Rule 90    for_incr -> VARIABLE RESTA RESTA
Rule 91    for_incr -> RESTA RESTA VARIABLE
Rule 92    for_incr -> VARIABLE SUMA EQUALS numero
Rule 93    for_incr -> VARIABLE RESTA EQUALS numero
Rule 94    bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
Rule 95    array_def -> ARRAY LPAREN RPAREN
Rule 96    array_def -> ARRAY LPAREN array_elmnt RPAREN
Rule 97    array_elmnt -> valor
Rule 98    array_elmnt -> empty
Rule 99    btry -> TRY LBRACE stc_bloque_def RBRACE catches
Rule 100   catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def
Rule 101   catches -> empty
Rule 102   empty -> <empty>

Terminals, with rules where they appear

AND                  : 42
ARRAY                : 57 95 96
AS                   : 94
AT                   : 
BOOL                 : 
BOOLEAN_NOT          : 49
BREAK                : 
CASE                 : 
CATCH                : 100
CLASS                : 
CLASS_C              : 
CLOSE_TAG            : 
COLON                : 81
COMENTARIOS          : 
COMMA                : 56 57 73
CONCAT               : 
CONSTANT_ENCAPSED_STRING : 
CONTINUE             : 
CURLY_OPEN           : 
DECIMAL              : 25
DEFAULT              : 
DEFINE               : 56 57
DIR                  : 
DIVISION             : 29
DIV_EQUAL            : 
DO                   : 
DOC_COMENTARIOS      : 
DOUBLE               : 
ECHO                 : 16 19
ELSE                 : 37
ELSEIF               : 36
ENCAPSED_AND_WHITESPACE : 
ENTERO               : 19 24
EQUALS               : 54 55 92 93
EXIT                 : 
FALSE                : 
FILE                 : 
FLOAT                : 
FOR                  : 83
FOREACH              : 94
FUNCTION             : 72 75 76 77
FUNC_C               : 
GLOBAL               : 
GOTO                 : 
GREATER              : 32
HALT_COMPILER        : 
IF                   : 35
INT                  : 
IS_EQUAL             : 45
IS_GREATER_OR_EQUAL  : 34
IS_IDENTICAL         : 47
IS_NOT_EQUAL         : 46
IS_NOT_IDENTICAL     : 48
IS_SMALLER_OR_EQUAL  : 33
LBRACE               : 35 36 37 77 80 87 99
LBRACKET             : 19
LINE                 : 
LPAREN               : 18 35 36 52 53 56 57 58 59 72 75 76 77 80 81 82 83 94 95 96 100
METHOD_C             : 
MINUS_EQUAL          : 
MODULO               : 30
MOD_EQUAL            : 
MULTIPLICACION       : 28
MUL_EQUAL            : 
NEW                  : 
NOMBRE               : 19 23 57 72 75 76 77 100
NOT                  : 
NS_C                 : 
NS_SEPARATOR         : 
NULL                 : 
NUM_STRING           : 
OBJECT               : 
OPEN_TAG             : 
OR                   : 43
PLUS_EQUAL           : 
PRINT                : 17 18
PRIVATE              : 61
PROTECTED            : 62
PUBLIC               : 60
RBRACE               : 35 36 37 77 80 87 99
RBRACKET             : 19
READLINE             : 58 59
REQUIRE              : 
RESTA                : 27 90 90 91 91 93
RETURN               : 86
RPAREN               : 18 35 36 52 53 56 57 58 59 72 75 76 77 80 81 83 94 95 96 100
SEMI                 : 16 17 18 19 54 55 56 57 58 59 83 83
SMALLER              : 31
STATIC               : 63
STRING               : 22 56 58
SUMA                 : 26 88 88 89 89 92
SWITCH               : 82
TRUE                 : 
TRY                  : 99
VAR                  : 
VARIABLE             : 21 54 55 70 78 78 88 89 90 91 92 93 94 94 100
VOID                 : 
WHILE                : 80 81
XOR                  : 44
error                : 

Nonterminals, with rules where they appear

array_def            : 55
array_elmnt          : 96
asignacion           : 2 71 83
asignacion_array     : 3
bfor                 : 11
bforeach             : 12
bswitch              : 
btry                 : 13
bwhile               : 10
catches              : 99 100
condicion            : 35 36 80 81 83
condicion_booleana   : 9
condicion_else       : 39 41
condicion_elseif     : 40 41
condicion_if         : 38 39 40 41
condicion_ifelse     : 15
constante            : 5
cuerpo               : 35 36 37 84 0
empty                : 77 85 98 101
for_incr             : 83
funcion_blank        : 68 69
funcion_nparams      : 64 65
funcion_opreturn     : 66 67
funciones            : 4
imprimir             : 1
lectura              : 6
numero               : 20 92 93
operaciones_mat      : 51
operaciones_mat_par  : 14 53
operador_logico      : 8 78 79
operadores           : 7 50 51 52 53
param                : 73 74
params_list          : 72 73 75
proteccion           : 65 67 69
stc_bloque           : 80 81 84 87
stc_bloque_def       : 72 75 76 83 94 99 100
valor                : 16 17 18 50 50 51 52 52 53 54 56 79 79 97

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bfor
    (12) cuerpo -> . bforeach
    (13) cuerpo -> . btry
    (14) cuerpo -> . operaciones_mat_par
    (15) cuerpo -> . condicion_ifelse
    (16) imprimir -> . ECHO valor SEMI
    (17) imprimir -> . PRINT valor SEMI
    (18) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (19) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (54) asignacion -> . VARIABLE EQUALS valor SEMI
    (55) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (64) funciones -> . funcion_nparams
    (65) funciones -> . proteccion funcion_nparams
    (66) funciones -> . funcion_opreturn
    (67) funciones -> . proteccion funcion_opreturn
    (68) funciones -> . funcion_blank
    (69) funciones -> . proteccion funcion_blank
    (56) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (57) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (58) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (59) lectura -> . READLINE LPAREN RPAREN SEMI
    (26) operadores -> . SUMA
    (27) operadores -> . RESTA
    (28) operadores -> . MULTIPLICACION
    (29) operadores -> . DIVISION
    (30) operadores -> . MODULO
    (31) operador_logico -> . SMALLER
    (32) operador_logico -> . GREATER
    (33) operador_logico -> . IS_SMALLER_OR_EQUAL
    (34) operador_logico -> . IS_GREATER_OR_EQUAL
    (42) condicion_booleana -> . AND
    (43) condicion_booleana -> . OR
    (44) condicion_booleana -> . XOR
    (45) condicion_booleana -> . IS_EQUAL
    (46) condicion_booleana -> . IS_NOT_EQUAL
    (47) condicion_booleana -> . IS_IDENTICAL
    (48) condicion_booleana -> . IS_NOT_IDENTICAL
    (49) condicion_booleana -> . BOOLEAN_NOT
    (80) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (81) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (83) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (94) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (99) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (52) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (53) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (38) condicion_ifelse -> . condicion_if
    (39) condicion_ifelse -> . condicion_if condicion_else
    (40) condicion_ifelse -> . condicion_if condicion_elseif
    (41) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (72) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (60) proteccion -> . PUBLIC
    (61) proteccion -> . PRIVATE
    (62) proteccion -> . PROTECTED
    (63) proteccion -> . STATIC
    (75) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (76) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (77) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (35) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    VARIABLE        shift and go to state 20
    DEFINE          shift and go to state 25
    READLINE        shift and go to state 26
    SUMA            shift and go to state 27
    RESTA           shift and go to state 28
    MULTIPLICACION  shift and go to state 29
    DIVISION        shift and go to state 30
    MODULO          shift and go to state 31
    SMALLER         shift and go to state 32
    GREATER         shift and go to state 33
    IS_SMALLER_OR_EQUAL shift and go to state 34
    IS_GREATER_OR_EQUAL shift and go to state 35
    AND             shift and go to state 36
    OR              shift and go to state 37
    XOR             shift and go to state 38
    IS_EQUAL        shift and go to state 39
    IS_NOT_EQUAL    shift and go to state 40
    IS_IDENTICAL    shift and go to state 41
    IS_NOT_IDENTICAL shift and go to state 42
    BOOLEAN_NOT     shift and go to state 43
    WHILE           shift and go to state 44
    FOR             shift and go to state 45
    FOREACH         shift and go to state 46
    TRY             shift and go to state 47
    LPAREN          shift and go to state 19
    FUNCTION        shift and go to state 49
    PUBLIC          shift and go to state 50
    PRIVATE         shift and go to state 51
    PROTECTED       shift and go to state 52
    STATIC          shift and go to state 53
    IF              shift and go to state 54

    cuerpo                         shift and go to state 1
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bfor                           shift and go to state 12
    bforeach                       shift and go to state 13
    btry                           shift and go to state 14
    operaciones_mat_par            shift and go to state 15
    condicion_ifelse               shift and go to state 16
    funcion_nparams                shift and go to state 21
    proteccion                     shift and go to state 22
    funcion_opreturn               shift and go to state 23
    funcion_blank                  shift and go to state 24
    condicion_if                   shift and go to state 48

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> imprimir .

    $end            reduce using rule 1 (cuerpo -> imprimir .)
    RBRACE          reduce using rule 1 (cuerpo -> imprimir .)
    ECHO            reduce using rule 1 (cuerpo -> imprimir .)
    PRINT           reduce using rule 1 (cuerpo -> imprimir .)
    VARIABLE        reduce using rule 1 (cuerpo -> imprimir .)
    DEFINE          reduce using rule 1 (cuerpo -> imprimir .)
    READLINE        reduce using rule 1 (cuerpo -> imprimir .)
    SUMA            reduce using rule 1 (cuerpo -> imprimir .)
    RESTA           reduce using rule 1 (cuerpo -> imprimir .)
    MULTIPLICACION  reduce using rule 1 (cuerpo -> imprimir .)
    DIVISION        reduce using rule 1 (cuerpo -> imprimir .)
    MODULO          reduce using rule 1 (cuerpo -> imprimir .)
    SMALLER         reduce using rule 1 (cuerpo -> imprimir .)
    GREATER         reduce using rule 1 (cuerpo -> imprimir .)
    IS_SMALLER_OR_EQUAL reduce using rule 1 (cuerpo -> imprimir .)
    IS_GREATER_OR_EQUAL reduce using rule 1 (cuerpo -> imprimir .)
    AND             reduce using rule 1 (cuerpo -> imprimir .)
    OR              reduce using rule 1 (cuerpo -> imprimir .)
    XOR             reduce using rule 1 (cuerpo -> imprimir .)
    IS_EQUAL        reduce using rule 1 (cuerpo -> imprimir .)
    IS_NOT_EQUAL    reduce using rule 1 (cuerpo -> imprimir .)
    IS_IDENTICAL    reduce using rule 1 (cuerpo -> imprimir .)
    IS_NOT_IDENTICAL reduce using rule 1 (cuerpo -> imprimir .)
    BOOLEAN_NOT     reduce using rule 1 (cuerpo -> imprimir .)
    WHILE           reduce using rule 1 (cuerpo -> imprimir .)
    FOR             reduce using rule 1 (cuerpo -> imprimir .)
    FOREACH         reduce using rule 1 (cuerpo -> imprimir .)
    TRY             reduce using rule 1 (cuerpo -> imprimir .)
    LPAREN          reduce using rule 1 (cuerpo -> imprimir .)
    FUNCTION        reduce using rule 1 (cuerpo -> imprimir .)
    PUBLIC          reduce using rule 1 (cuerpo -> imprimir .)
    PRIVATE         reduce using rule 1 (cuerpo -> imprimir .)
    PROTECTED       reduce using rule 1 (cuerpo -> imprimir .)
    STATIC          reduce using rule 1 (cuerpo -> imprimir .)
    IF              reduce using rule 1 (cuerpo -> imprimir .)


state 3

    (2) cuerpo -> asignacion .

    $end            reduce using rule 2 (cuerpo -> asignacion .)
    RBRACE          reduce using rule 2 (cuerpo -> asignacion .)
    ECHO            reduce using rule 2 (cuerpo -> asignacion .)
    PRINT           reduce using rule 2 (cuerpo -> asignacion .)
    VARIABLE        reduce using rule 2 (cuerpo -> asignacion .)
    DEFINE          reduce using rule 2 (cuerpo -> asignacion .)
    READLINE        reduce using rule 2 (cuerpo -> asignacion .)
    SUMA            reduce using rule 2 (cuerpo -> asignacion .)
    RESTA           reduce using rule 2 (cuerpo -> asignacion .)
    MULTIPLICACION  reduce using rule 2 (cuerpo -> asignacion .)
    DIVISION        reduce using rule 2 (cuerpo -> asignacion .)
    MODULO          reduce using rule 2 (cuerpo -> asignacion .)
    SMALLER         reduce using rule 2 (cuerpo -> asignacion .)
    GREATER         reduce using rule 2 (cuerpo -> asignacion .)
    IS_SMALLER_OR_EQUAL reduce using rule 2 (cuerpo -> asignacion .)
    IS_GREATER_OR_EQUAL reduce using rule 2 (cuerpo -> asignacion .)
    AND             reduce using rule 2 (cuerpo -> asignacion .)
    OR              reduce using rule 2 (cuerpo -> asignacion .)
    XOR             reduce using rule 2 (cuerpo -> asignacion .)
    IS_EQUAL        reduce using rule 2 (cuerpo -> asignacion .)
    IS_NOT_EQUAL    reduce using rule 2 (cuerpo -> asignacion .)
    IS_IDENTICAL    reduce using rule 2 (cuerpo -> asignacion .)
    IS_NOT_IDENTICAL reduce using rule 2 (cuerpo -> asignacion .)
    BOOLEAN_NOT     reduce using rule 2 (cuerpo -> asignacion .)
    WHILE           reduce using rule 2 (cuerpo -> asignacion .)
    FOR             reduce using rule 2 (cuerpo -> asignacion .)
    FOREACH         reduce using rule 2 (cuerpo -> asignacion .)
    TRY             reduce using rule 2 (cuerpo -> asignacion .)
    LPAREN          reduce using rule 2 (cuerpo -> asignacion .)
    FUNCTION        reduce using rule 2 (cuerpo -> asignacion .)
    PUBLIC          reduce using rule 2 (cuerpo -> asignacion .)
    PRIVATE         reduce using rule 2 (cuerpo -> asignacion .)
    PROTECTED       reduce using rule 2 (cuerpo -> asignacion .)
    STATIC          reduce using rule 2 (cuerpo -> asignacion .)
    IF              reduce using rule 2 (cuerpo -> asignacion .)


state 4

    (3) cuerpo -> asignacion_array .

    $end            reduce using rule 3 (cuerpo -> asignacion_array .)
    RBRACE          reduce using rule 3 (cuerpo -> asignacion_array .)
    ECHO            reduce using rule 3 (cuerpo -> asignacion_array .)
    PRINT           reduce using rule 3 (cuerpo -> asignacion_array .)
    VARIABLE        reduce using rule 3 (cuerpo -> asignacion_array .)
    DEFINE          reduce using rule 3 (cuerpo -> asignacion_array .)
    READLINE        reduce using rule 3 (cuerpo -> asignacion_array .)
    SUMA            reduce using rule 3 (cuerpo -> asignacion_array .)
    RESTA           reduce using rule 3 (cuerpo -> asignacion_array .)
    MULTIPLICACION  reduce using rule 3 (cuerpo -> asignacion_array .)
    DIVISION        reduce using rule 3 (cuerpo -> asignacion_array .)
    MODULO          reduce using rule 3 (cuerpo -> asignacion_array .)
    SMALLER         reduce using rule 3 (cuerpo -> asignacion_array .)
    GREATER         reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_SMALLER_OR_EQUAL reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_GREATER_OR_EQUAL reduce using rule 3 (cuerpo -> asignacion_array .)
    AND             reduce using rule 3 (cuerpo -> asignacion_array .)
    OR              reduce using rule 3 (cuerpo -> asignacion_array .)
    XOR             reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_EQUAL        reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_NOT_EQUAL    reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_IDENTICAL    reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_NOT_IDENTICAL reduce using rule 3 (cuerpo -> asignacion_array .)
    BOOLEAN_NOT     reduce using rule 3 (cuerpo -> asignacion_array .)
    WHILE           reduce using rule 3 (cuerpo -> asignacion_array .)
    FOR             reduce using rule 3 (cuerpo -> asignacion_array .)
    FOREACH         reduce using rule 3 (cuerpo -> asignacion_array .)
    TRY             reduce using rule 3 (cuerpo -> asignacion_array .)
    LPAREN          reduce using rule 3 (cuerpo -> asignacion_array .)
    FUNCTION        reduce using rule 3 (cuerpo -> asignacion_array .)
    PUBLIC          reduce using rule 3 (cuerpo -> asignacion_array .)
    PRIVATE         reduce using rule 3 (cuerpo -> asignacion_array .)
    PROTECTED       reduce using rule 3 (cuerpo -> asignacion_array .)
    STATIC          reduce using rule 3 (cuerpo -> asignacion_array .)
    IF              reduce using rule 3 (cuerpo -> asignacion_array .)


state 5

    (4) cuerpo -> funciones .

    $end            reduce using rule 4 (cuerpo -> funciones .)
    RBRACE          reduce using rule 4 (cuerpo -> funciones .)
    ECHO            reduce using rule 4 (cuerpo -> funciones .)
    PRINT           reduce using rule 4 (cuerpo -> funciones .)
    VARIABLE        reduce using rule 4 (cuerpo -> funciones .)
    DEFINE          reduce using rule 4 (cuerpo -> funciones .)
    READLINE        reduce using rule 4 (cuerpo -> funciones .)
    SUMA            reduce using rule 4 (cuerpo -> funciones .)
    RESTA           reduce using rule 4 (cuerpo -> funciones .)
    MULTIPLICACION  reduce using rule 4 (cuerpo -> funciones .)
    DIVISION        reduce using rule 4 (cuerpo -> funciones .)
    MODULO          reduce using rule 4 (cuerpo -> funciones .)
    SMALLER         reduce using rule 4 (cuerpo -> funciones .)
    GREATER         reduce using rule 4 (cuerpo -> funciones .)
    IS_SMALLER_OR_EQUAL reduce using rule 4 (cuerpo -> funciones .)
    IS_GREATER_OR_EQUAL reduce using rule 4 (cuerpo -> funciones .)
    AND             reduce using rule 4 (cuerpo -> funciones .)
    OR              reduce using rule 4 (cuerpo -> funciones .)
    XOR             reduce using rule 4 (cuerpo -> funciones .)
    IS_EQUAL        reduce using rule 4 (cuerpo -> funciones .)
    IS_NOT_EQUAL    reduce using rule 4 (cuerpo -> funciones .)
    IS_IDENTICAL    reduce using rule 4 (cuerpo -> funciones .)
    IS_NOT_IDENTICAL reduce using rule 4 (cuerpo -> funciones .)
    BOOLEAN_NOT     reduce using rule 4 (cuerpo -> funciones .)
    WHILE           reduce using rule 4 (cuerpo -> funciones .)
    FOR             reduce using rule 4 (cuerpo -> funciones .)
    FOREACH         reduce using rule 4 (cuerpo -> funciones .)
    TRY             reduce using rule 4 (cuerpo -> funciones .)
    LPAREN          reduce using rule 4 (cuerpo -> funciones .)
    FUNCTION        reduce using rule 4 (cuerpo -> funciones .)
    PUBLIC          reduce using rule 4 (cuerpo -> funciones .)
    PRIVATE         reduce using rule 4 (cuerpo -> funciones .)
    PROTECTED       reduce using rule 4 (cuerpo -> funciones .)
    STATIC          reduce using rule 4 (cuerpo -> funciones .)
    IF              reduce using rule 4 (cuerpo -> funciones .)


state 6

    (5) cuerpo -> constante .

    $end            reduce using rule 5 (cuerpo -> constante .)
    RBRACE          reduce using rule 5 (cuerpo -> constante .)
    ECHO            reduce using rule 5 (cuerpo -> constante .)
    PRINT           reduce using rule 5 (cuerpo -> constante .)
    VARIABLE        reduce using rule 5 (cuerpo -> constante .)
    DEFINE          reduce using rule 5 (cuerpo -> constante .)
    READLINE        reduce using rule 5 (cuerpo -> constante .)
    SUMA            reduce using rule 5 (cuerpo -> constante .)
    RESTA           reduce using rule 5 (cuerpo -> constante .)
    MULTIPLICACION  reduce using rule 5 (cuerpo -> constante .)
    DIVISION        reduce using rule 5 (cuerpo -> constante .)
    MODULO          reduce using rule 5 (cuerpo -> constante .)
    SMALLER         reduce using rule 5 (cuerpo -> constante .)
    GREATER         reduce using rule 5 (cuerpo -> constante .)
    IS_SMALLER_OR_EQUAL reduce using rule 5 (cuerpo -> constante .)
    IS_GREATER_OR_EQUAL reduce using rule 5 (cuerpo -> constante .)
    AND             reduce using rule 5 (cuerpo -> constante .)
    OR              reduce using rule 5 (cuerpo -> constante .)
    XOR             reduce using rule 5 (cuerpo -> constante .)
    IS_EQUAL        reduce using rule 5 (cuerpo -> constante .)
    IS_NOT_EQUAL    reduce using rule 5 (cuerpo -> constante .)
    IS_IDENTICAL    reduce using rule 5 (cuerpo -> constante .)
    IS_NOT_IDENTICAL reduce using rule 5 (cuerpo -> constante .)
    BOOLEAN_NOT     reduce using rule 5 (cuerpo -> constante .)
    WHILE           reduce using rule 5 (cuerpo -> constante .)
    FOR             reduce using rule 5 (cuerpo -> constante .)
    FOREACH         reduce using rule 5 (cuerpo -> constante .)
    TRY             reduce using rule 5 (cuerpo -> constante .)
    LPAREN          reduce using rule 5 (cuerpo -> constante .)
    FUNCTION        reduce using rule 5 (cuerpo -> constante .)
    PUBLIC          reduce using rule 5 (cuerpo -> constante .)
    PRIVATE         reduce using rule 5 (cuerpo -> constante .)
    PROTECTED       reduce using rule 5 (cuerpo -> constante .)
    STATIC          reduce using rule 5 (cuerpo -> constante .)
    IF              reduce using rule 5 (cuerpo -> constante .)


state 7

    (6) cuerpo -> lectura .

    $end            reduce using rule 6 (cuerpo -> lectura .)
    RBRACE          reduce using rule 6 (cuerpo -> lectura .)
    ECHO            reduce using rule 6 (cuerpo -> lectura .)
    PRINT           reduce using rule 6 (cuerpo -> lectura .)
    VARIABLE        reduce using rule 6 (cuerpo -> lectura .)
    DEFINE          reduce using rule 6 (cuerpo -> lectura .)
    READLINE        reduce using rule 6 (cuerpo -> lectura .)
    SUMA            reduce using rule 6 (cuerpo -> lectura .)
    RESTA           reduce using rule 6 (cuerpo -> lectura .)
    MULTIPLICACION  reduce using rule 6 (cuerpo -> lectura .)
    DIVISION        reduce using rule 6 (cuerpo -> lectura .)
    MODULO          reduce using rule 6 (cuerpo -> lectura .)
    SMALLER         reduce using rule 6 (cuerpo -> lectura .)
    GREATER         reduce using rule 6 (cuerpo -> lectura .)
    IS_SMALLER_OR_EQUAL reduce using rule 6 (cuerpo -> lectura .)
    IS_GREATER_OR_EQUAL reduce using rule 6 (cuerpo -> lectura .)
    AND             reduce using rule 6 (cuerpo -> lectura .)
    OR              reduce using rule 6 (cuerpo -> lectura .)
    XOR             reduce using rule 6 (cuerpo -> lectura .)
    IS_EQUAL        reduce using rule 6 (cuerpo -> lectura .)
    IS_NOT_EQUAL    reduce using rule 6 (cuerpo -> lectura .)
    IS_IDENTICAL    reduce using rule 6 (cuerpo -> lectura .)
    IS_NOT_IDENTICAL reduce using rule 6 (cuerpo -> lectura .)
    BOOLEAN_NOT     reduce using rule 6 (cuerpo -> lectura .)
    WHILE           reduce using rule 6 (cuerpo -> lectura .)
    FOR             reduce using rule 6 (cuerpo -> lectura .)
    FOREACH         reduce using rule 6 (cuerpo -> lectura .)
    TRY             reduce using rule 6 (cuerpo -> lectura .)
    LPAREN          reduce using rule 6 (cuerpo -> lectura .)
    FUNCTION        reduce using rule 6 (cuerpo -> lectura .)
    PUBLIC          reduce using rule 6 (cuerpo -> lectura .)
    PRIVATE         reduce using rule 6 (cuerpo -> lectura .)
    PROTECTED       reduce using rule 6 (cuerpo -> lectura .)
    STATIC          reduce using rule 6 (cuerpo -> lectura .)
    IF              reduce using rule 6 (cuerpo -> lectura .)


state 8

    (7) cuerpo -> operadores .

    $end            reduce using rule 7 (cuerpo -> operadores .)
    RBRACE          reduce using rule 7 (cuerpo -> operadores .)
    ECHO            reduce using rule 7 (cuerpo -> operadores .)
    PRINT           reduce using rule 7 (cuerpo -> operadores .)
    VARIABLE        reduce using rule 7 (cuerpo -> operadores .)
    DEFINE          reduce using rule 7 (cuerpo -> operadores .)
    READLINE        reduce using rule 7 (cuerpo -> operadores .)
    SUMA            reduce using rule 7 (cuerpo -> operadores .)
    RESTA           reduce using rule 7 (cuerpo -> operadores .)
    MULTIPLICACION  reduce using rule 7 (cuerpo -> operadores .)
    DIVISION        reduce using rule 7 (cuerpo -> operadores .)
    MODULO          reduce using rule 7 (cuerpo -> operadores .)
    SMALLER         reduce using rule 7 (cuerpo -> operadores .)
    GREATER         reduce using rule 7 (cuerpo -> operadores .)
    IS_SMALLER_OR_EQUAL reduce using rule 7 (cuerpo -> operadores .)
    IS_GREATER_OR_EQUAL reduce using rule 7 (cuerpo -> operadores .)
    AND             reduce using rule 7 (cuerpo -> operadores .)
    OR              reduce using rule 7 (cuerpo -> operadores .)
    XOR             reduce using rule 7 (cuerpo -> operadores .)
    IS_EQUAL        reduce using rule 7 (cuerpo -> operadores .)
    IS_NOT_EQUAL    reduce using rule 7 (cuerpo -> operadores .)
    IS_IDENTICAL    reduce using rule 7 (cuerpo -> operadores .)
    IS_NOT_IDENTICAL reduce using rule 7 (cuerpo -> operadores .)
    BOOLEAN_NOT     reduce using rule 7 (cuerpo -> operadores .)
    WHILE           reduce using rule 7 (cuerpo -> operadores .)
    FOR             reduce using rule 7 (cuerpo -> operadores .)
    FOREACH         reduce using rule 7 (cuerpo -> operadores .)
    TRY             reduce using rule 7 (cuerpo -> operadores .)
    LPAREN          reduce using rule 7 (cuerpo -> operadores .)
    FUNCTION        reduce using rule 7 (cuerpo -> operadores .)
    PUBLIC          reduce using rule 7 (cuerpo -> operadores .)
    PRIVATE         reduce using rule 7 (cuerpo -> operadores .)
    PROTECTED       reduce using rule 7 (cuerpo -> operadores .)
    STATIC          reduce using rule 7 (cuerpo -> operadores .)
    IF              reduce using rule 7 (cuerpo -> operadores .)


state 9

    (8) cuerpo -> operador_logico .

    $end            reduce using rule 8 (cuerpo -> operador_logico .)
    RBRACE          reduce using rule 8 (cuerpo -> operador_logico .)
    ECHO            reduce using rule 8 (cuerpo -> operador_logico .)
    PRINT           reduce using rule 8 (cuerpo -> operador_logico .)
    VARIABLE        reduce using rule 8 (cuerpo -> operador_logico .)
    DEFINE          reduce using rule 8 (cuerpo -> operador_logico .)
    READLINE        reduce using rule 8 (cuerpo -> operador_logico .)
    SUMA            reduce using rule 8 (cuerpo -> operador_logico .)
    RESTA           reduce using rule 8 (cuerpo -> operador_logico .)
    MULTIPLICACION  reduce using rule 8 (cuerpo -> operador_logico .)
    DIVISION        reduce using rule 8 (cuerpo -> operador_logico .)
    MODULO          reduce using rule 8 (cuerpo -> operador_logico .)
    SMALLER         reduce using rule 8 (cuerpo -> operador_logico .)
    GREATER         reduce using rule 8 (cuerpo -> operador_logico .)
    IS_SMALLER_OR_EQUAL reduce using rule 8 (cuerpo -> operador_logico .)
    IS_GREATER_OR_EQUAL reduce using rule 8 (cuerpo -> operador_logico .)
    AND             reduce using rule 8 (cuerpo -> operador_logico .)
    OR              reduce using rule 8 (cuerpo -> operador_logico .)
    XOR             reduce using rule 8 (cuerpo -> operador_logico .)
    IS_EQUAL        reduce using rule 8 (cuerpo -> operador_logico .)
    IS_NOT_EQUAL    reduce using rule 8 (cuerpo -> operador_logico .)
    IS_IDENTICAL    reduce using rule 8 (cuerpo -> operador_logico .)
    IS_NOT_IDENTICAL reduce using rule 8 (cuerpo -> operador_logico .)
    BOOLEAN_NOT     reduce using rule 8 (cuerpo -> operador_logico .)
    WHILE           reduce using rule 8 (cuerpo -> operador_logico .)
    FOR             reduce using rule 8 (cuerpo -> operador_logico .)
    FOREACH         reduce using rule 8 (cuerpo -> operador_logico .)
    TRY             reduce using rule 8 (cuerpo -> operador_logico .)
    LPAREN          reduce using rule 8 (cuerpo -> operador_logico .)
    FUNCTION        reduce using rule 8 (cuerpo -> operador_logico .)
    PUBLIC          reduce using rule 8 (cuerpo -> operador_logico .)
    PRIVATE         reduce using rule 8 (cuerpo -> operador_logico .)
    PROTECTED       reduce using rule 8 (cuerpo -> operador_logico .)
    STATIC          reduce using rule 8 (cuerpo -> operador_logico .)
    IF              reduce using rule 8 (cuerpo -> operador_logico .)


state 10

    (9) cuerpo -> condicion_booleana .

    $end            reduce using rule 9 (cuerpo -> condicion_booleana .)
    RBRACE          reduce using rule 9 (cuerpo -> condicion_booleana .)
    ECHO            reduce using rule 9 (cuerpo -> condicion_booleana .)
    PRINT           reduce using rule 9 (cuerpo -> condicion_booleana .)
    VARIABLE        reduce using rule 9 (cuerpo -> condicion_booleana .)
    DEFINE          reduce using rule 9 (cuerpo -> condicion_booleana .)
    READLINE        reduce using rule 9 (cuerpo -> condicion_booleana .)
    SUMA            reduce using rule 9 (cuerpo -> condicion_booleana .)
    RESTA           reduce using rule 9 (cuerpo -> condicion_booleana .)
    MULTIPLICACION  reduce using rule 9 (cuerpo -> condicion_booleana .)
    DIVISION        reduce using rule 9 (cuerpo -> condicion_booleana .)
    MODULO          reduce using rule 9 (cuerpo -> condicion_booleana .)
    SMALLER         reduce using rule 9 (cuerpo -> condicion_booleana .)
    GREATER         reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_SMALLER_OR_EQUAL reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_GREATER_OR_EQUAL reduce using rule 9 (cuerpo -> condicion_booleana .)
    AND             reduce using rule 9 (cuerpo -> condicion_booleana .)
    OR              reduce using rule 9 (cuerpo -> condicion_booleana .)
    XOR             reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_EQUAL        reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_NOT_EQUAL    reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_IDENTICAL    reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_NOT_IDENTICAL reduce using rule 9 (cuerpo -> condicion_booleana .)
    BOOLEAN_NOT     reduce using rule 9 (cuerpo -> condicion_booleana .)
    WHILE           reduce using rule 9 (cuerpo -> condicion_booleana .)
    FOR             reduce using rule 9 (cuerpo -> condicion_booleana .)
    FOREACH         reduce using rule 9 (cuerpo -> condicion_booleana .)
    TRY             reduce using rule 9 (cuerpo -> condicion_booleana .)
    LPAREN          reduce using rule 9 (cuerpo -> condicion_booleana .)
    FUNCTION        reduce using rule 9 (cuerpo -> condicion_booleana .)
    PUBLIC          reduce using rule 9 (cuerpo -> condicion_booleana .)
    PRIVATE         reduce using rule 9 (cuerpo -> condicion_booleana .)
    PROTECTED       reduce using rule 9 (cuerpo -> condicion_booleana .)
    STATIC          reduce using rule 9 (cuerpo -> condicion_booleana .)
    IF              reduce using rule 9 (cuerpo -> condicion_booleana .)


state 11

    (10) cuerpo -> bwhile .

    $end            reduce using rule 10 (cuerpo -> bwhile .)
    RBRACE          reduce using rule 10 (cuerpo -> bwhile .)
    ECHO            reduce using rule 10 (cuerpo -> bwhile .)
    PRINT           reduce using rule 10 (cuerpo -> bwhile .)
    VARIABLE        reduce using rule 10 (cuerpo -> bwhile .)
    DEFINE          reduce using rule 10 (cuerpo -> bwhile .)
    READLINE        reduce using rule 10 (cuerpo -> bwhile .)
    SUMA            reduce using rule 10 (cuerpo -> bwhile .)
    RESTA           reduce using rule 10 (cuerpo -> bwhile .)
    MULTIPLICACION  reduce using rule 10 (cuerpo -> bwhile .)
    DIVISION        reduce using rule 10 (cuerpo -> bwhile .)
    MODULO          reduce using rule 10 (cuerpo -> bwhile .)
    SMALLER         reduce using rule 10 (cuerpo -> bwhile .)
    GREATER         reduce using rule 10 (cuerpo -> bwhile .)
    IS_SMALLER_OR_EQUAL reduce using rule 10 (cuerpo -> bwhile .)
    IS_GREATER_OR_EQUAL reduce using rule 10 (cuerpo -> bwhile .)
    AND             reduce using rule 10 (cuerpo -> bwhile .)
    OR              reduce using rule 10 (cuerpo -> bwhile .)
    XOR             reduce using rule 10 (cuerpo -> bwhile .)
    IS_EQUAL        reduce using rule 10 (cuerpo -> bwhile .)
    IS_NOT_EQUAL    reduce using rule 10 (cuerpo -> bwhile .)
    IS_IDENTICAL    reduce using rule 10 (cuerpo -> bwhile .)
    IS_NOT_IDENTICAL reduce using rule 10 (cuerpo -> bwhile .)
    BOOLEAN_NOT     reduce using rule 10 (cuerpo -> bwhile .)
    WHILE           reduce using rule 10 (cuerpo -> bwhile .)
    FOR             reduce using rule 10 (cuerpo -> bwhile .)
    FOREACH         reduce using rule 10 (cuerpo -> bwhile .)
    TRY             reduce using rule 10 (cuerpo -> bwhile .)
    LPAREN          reduce using rule 10 (cuerpo -> bwhile .)
    FUNCTION        reduce using rule 10 (cuerpo -> bwhile .)
    PUBLIC          reduce using rule 10 (cuerpo -> bwhile .)
    PRIVATE         reduce using rule 10 (cuerpo -> bwhile .)
    PROTECTED       reduce using rule 10 (cuerpo -> bwhile .)
    STATIC          reduce using rule 10 (cuerpo -> bwhile .)
    IF              reduce using rule 10 (cuerpo -> bwhile .)


state 12

    (11) cuerpo -> bfor .

    $end            reduce using rule 11 (cuerpo -> bfor .)
    RBRACE          reduce using rule 11 (cuerpo -> bfor .)
    ECHO            reduce using rule 11 (cuerpo -> bfor .)
    PRINT           reduce using rule 11 (cuerpo -> bfor .)
    VARIABLE        reduce using rule 11 (cuerpo -> bfor .)
    DEFINE          reduce using rule 11 (cuerpo -> bfor .)
    READLINE        reduce using rule 11 (cuerpo -> bfor .)
    SUMA            reduce using rule 11 (cuerpo -> bfor .)
    RESTA           reduce using rule 11 (cuerpo -> bfor .)
    MULTIPLICACION  reduce using rule 11 (cuerpo -> bfor .)
    DIVISION        reduce using rule 11 (cuerpo -> bfor .)
    MODULO          reduce using rule 11 (cuerpo -> bfor .)
    SMALLER         reduce using rule 11 (cuerpo -> bfor .)
    GREATER         reduce using rule 11 (cuerpo -> bfor .)
    IS_SMALLER_OR_EQUAL reduce using rule 11 (cuerpo -> bfor .)
    IS_GREATER_OR_EQUAL reduce using rule 11 (cuerpo -> bfor .)
    AND             reduce using rule 11 (cuerpo -> bfor .)
    OR              reduce using rule 11 (cuerpo -> bfor .)
    XOR             reduce using rule 11 (cuerpo -> bfor .)
    IS_EQUAL        reduce using rule 11 (cuerpo -> bfor .)
    IS_NOT_EQUAL    reduce using rule 11 (cuerpo -> bfor .)
    IS_IDENTICAL    reduce using rule 11 (cuerpo -> bfor .)
    IS_NOT_IDENTICAL reduce using rule 11 (cuerpo -> bfor .)
    BOOLEAN_NOT     reduce using rule 11 (cuerpo -> bfor .)
    WHILE           reduce using rule 11 (cuerpo -> bfor .)
    FOR             reduce using rule 11 (cuerpo -> bfor .)
    FOREACH         reduce using rule 11 (cuerpo -> bfor .)
    TRY             reduce using rule 11 (cuerpo -> bfor .)
    LPAREN          reduce using rule 11 (cuerpo -> bfor .)
    FUNCTION        reduce using rule 11 (cuerpo -> bfor .)
    PUBLIC          reduce using rule 11 (cuerpo -> bfor .)
    PRIVATE         reduce using rule 11 (cuerpo -> bfor .)
    PROTECTED       reduce using rule 11 (cuerpo -> bfor .)
    STATIC          reduce using rule 11 (cuerpo -> bfor .)
    IF              reduce using rule 11 (cuerpo -> bfor .)


state 13

    (12) cuerpo -> bforeach .

    $end            reduce using rule 12 (cuerpo -> bforeach .)
    RBRACE          reduce using rule 12 (cuerpo -> bforeach .)
    ECHO            reduce using rule 12 (cuerpo -> bforeach .)
    PRINT           reduce using rule 12 (cuerpo -> bforeach .)
    VARIABLE        reduce using rule 12 (cuerpo -> bforeach .)
    DEFINE          reduce using rule 12 (cuerpo -> bforeach .)
    READLINE        reduce using rule 12 (cuerpo -> bforeach .)
    SUMA            reduce using rule 12 (cuerpo -> bforeach .)
    RESTA           reduce using rule 12 (cuerpo -> bforeach .)
    MULTIPLICACION  reduce using rule 12 (cuerpo -> bforeach .)
    DIVISION        reduce using rule 12 (cuerpo -> bforeach .)
    MODULO          reduce using rule 12 (cuerpo -> bforeach .)
    SMALLER         reduce using rule 12 (cuerpo -> bforeach .)
    GREATER         reduce using rule 12 (cuerpo -> bforeach .)
    IS_SMALLER_OR_EQUAL reduce using rule 12 (cuerpo -> bforeach .)
    IS_GREATER_OR_EQUAL reduce using rule 12 (cuerpo -> bforeach .)
    AND             reduce using rule 12 (cuerpo -> bforeach .)
    OR              reduce using rule 12 (cuerpo -> bforeach .)
    XOR             reduce using rule 12 (cuerpo -> bforeach .)
    IS_EQUAL        reduce using rule 12 (cuerpo -> bforeach .)
    IS_NOT_EQUAL    reduce using rule 12 (cuerpo -> bforeach .)
    IS_IDENTICAL    reduce using rule 12 (cuerpo -> bforeach .)
    IS_NOT_IDENTICAL reduce using rule 12 (cuerpo -> bforeach .)
    BOOLEAN_NOT     reduce using rule 12 (cuerpo -> bforeach .)
    WHILE           reduce using rule 12 (cuerpo -> bforeach .)
    FOR             reduce using rule 12 (cuerpo -> bforeach .)
    FOREACH         reduce using rule 12 (cuerpo -> bforeach .)
    TRY             reduce using rule 12 (cuerpo -> bforeach .)
    LPAREN          reduce using rule 12 (cuerpo -> bforeach .)
    FUNCTION        reduce using rule 12 (cuerpo -> bforeach .)
    PUBLIC          reduce using rule 12 (cuerpo -> bforeach .)
    PRIVATE         reduce using rule 12 (cuerpo -> bforeach .)
    PROTECTED       reduce using rule 12 (cuerpo -> bforeach .)
    STATIC          reduce using rule 12 (cuerpo -> bforeach .)
    IF              reduce using rule 12 (cuerpo -> bforeach .)


state 14

    (13) cuerpo -> btry .

    $end            reduce using rule 13 (cuerpo -> btry .)
    RBRACE          reduce using rule 13 (cuerpo -> btry .)
    ECHO            reduce using rule 13 (cuerpo -> btry .)
    PRINT           reduce using rule 13 (cuerpo -> btry .)
    VARIABLE        reduce using rule 13 (cuerpo -> btry .)
    DEFINE          reduce using rule 13 (cuerpo -> btry .)
    READLINE        reduce using rule 13 (cuerpo -> btry .)
    SUMA            reduce using rule 13 (cuerpo -> btry .)
    RESTA           reduce using rule 13 (cuerpo -> btry .)
    MULTIPLICACION  reduce using rule 13 (cuerpo -> btry .)
    DIVISION        reduce using rule 13 (cuerpo -> btry .)
    MODULO          reduce using rule 13 (cuerpo -> btry .)
    SMALLER         reduce using rule 13 (cuerpo -> btry .)
    GREATER         reduce using rule 13 (cuerpo -> btry .)
    IS_SMALLER_OR_EQUAL reduce using rule 13 (cuerpo -> btry .)
    IS_GREATER_OR_EQUAL reduce using rule 13 (cuerpo -> btry .)
    AND             reduce using rule 13 (cuerpo -> btry .)
    OR              reduce using rule 13 (cuerpo -> btry .)
    XOR             reduce using rule 13 (cuerpo -> btry .)
    IS_EQUAL        reduce using rule 13 (cuerpo -> btry .)
    IS_NOT_EQUAL    reduce using rule 13 (cuerpo -> btry .)
    IS_IDENTICAL    reduce using rule 13 (cuerpo -> btry .)
    IS_NOT_IDENTICAL reduce using rule 13 (cuerpo -> btry .)
    BOOLEAN_NOT     reduce using rule 13 (cuerpo -> btry .)
    WHILE           reduce using rule 13 (cuerpo -> btry .)
    FOR             reduce using rule 13 (cuerpo -> btry .)
    FOREACH         reduce using rule 13 (cuerpo -> btry .)
    TRY             reduce using rule 13 (cuerpo -> btry .)
    LPAREN          reduce using rule 13 (cuerpo -> btry .)
    FUNCTION        reduce using rule 13 (cuerpo -> btry .)
    PUBLIC          reduce using rule 13 (cuerpo -> btry .)
    PRIVATE         reduce using rule 13 (cuerpo -> btry .)
    PROTECTED       reduce using rule 13 (cuerpo -> btry .)
    STATIC          reduce using rule 13 (cuerpo -> btry .)
    IF              reduce using rule 13 (cuerpo -> btry .)


state 15

    (14) cuerpo -> operaciones_mat_par .

    $end            reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    RBRACE          reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    ECHO            reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    PRINT           reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    VARIABLE        reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    DEFINE          reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    READLINE        reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    SUMA            reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    RESTA           reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    MULTIPLICACION  reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    DIVISION        reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    MODULO          reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    SMALLER         reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    GREATER         reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    IS_SMALLER_OR_EQUAL reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    IS_GREATER_OR_EQUAL reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    AND             reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    OR              reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    XOR             reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    IS_EQUAL        reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    IS_NOT_EQUAL    reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    IS_IDENTICAL    reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    IS_NOT_IDENTICAL reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    BOOLEAN_NOT     reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    WHILE           reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    FOR             reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    FOREACH         reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    TRY             reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    LPAREN          reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    FUNCTION        reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    PUBLIC          reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    PRIVATE         reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    PROTECTED       reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    STATIC          reduce using rule 14 (cuerpo -> operaciones_mat_par .)
    IF              reduce using rule 14 (cuerpo -> operaciones_mat_par .)


state 16

    (15) cuerpo -> condicion_ifelse .

    $end            reduce using rule 15 (cuerpo -> condicion_ifelse .)
    RBRACE          reduce using rule 15 (cuerpo -> condicion_ifelse .)
    ECHO            reduce using rule 15 (cuerpo -> condicion_ifelse .)
    PRINT           reduce using rule 15 (cuerpo -> condicion_ifelse .)
    VARIABLE        reduce using rule 15 (cuerpo -> condicion_ifelse .)
    DEFINE          reduce using rule 15 (cuerpo -> condicion_ifelse .)
    READLINE        reduce using rule 15 (cuerpo -> condicion_ifelse .)
    SUMA            reduce using rule 15 (cuerpo -> condicion_ifelse .)
    RESTA           reduce using rule 15 (cuerpo -> condicion_ifelse .)
    MULTIPLICACION  reduce using rule 15 (cuerpo -> condicion_ifelse .)
    DIVISION        reduce using rule 15 (cuerpo -> condicion_ifelse .)
    MODULO          reduce using rule 15 (cuerpo -> condicion_ifelse .)
    SMALLER         reduce using rule 15 (cuerpo -> condicion_ifelse .)
    GREATER         reduce using rule 15 (cuerpo -> condicion_ifelse .)
    IS_SMALLER_OR_EQUAL reduce using rule 15 (cuerpo -> condicion_ifelse .)
    IS_GREATER_OR_EQUAL reduce using rule 15 (cuerpo -> condicion_ifelse .)
    AND             reduce using rule 15 (cuerpo -> condicion_ifelse .)
    OR              reduce using rule 15 (cuerpo -> condicion_ifelse .)
    XOR             reduce using rule 15 (cuerpo -> condicion_ifelse .)
    IS_EQUAL        reduce using rule 15 (cuerpo -> condicion_ifelse .)
    IS_NOT_EQUAL    reduce using rule 15 (cuerpo -> condicion_ifelse .)
    IS_IDENTICAL    reduce using rule 15 (cuerpo -> condicion_ifelse .)
    IS_NOT_IDENTICAL reduce using rule 15 (cuerpo -> condicion_ifelse .)
    BOOLEAN_NOT     reduce using rule 15 (cuerpo -> condicion_ifelse .)
    WHILE           reduce using rule 15 (cuerpo -> condicion_ifelse .)
    FOR             reduce using rule 15 (cuerpo -> condicion_ifelse .)
    FOREACH         reduce using rule 15 (cuerpo -> condicion_ifelse .)
    TRY             reduce using rule 15 (cuerpo -> condicion_ifelse .)
    LPAREN          reduce using rule 15 (cuerpo -> condicion_ifelse .)
    FUNCTION        reduce using rule 15 (cuerpo -> condicion_ifelse .)
    PUBLIC          reduce using rule 15 (cuerpo -> condicion_ifelse .)
    PRIVATE         reduce using rule 15 (cuerpo -> condicion_ifelse .)
    PROTECTED       reduce using rule 15 (cuerpo -> condicion_ifelse .)
    STATIC          reduce using rule 15 (cuerpo -> condicion_ifelse .)
    IF              reduce using rule 15 (cuerpo -> condicion_ifelse .)


state 17

    (16) imprimir -> ECHO . valor SEMI
    (19) imprimir -> ECHO . NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    NOMBRE          shift and go to state 56
    VARIABLE        shift and go to state 59
    STRING          shift and go to state 60
    ENTERO          shift and go to state 57
    DECIMAL         shift and go to state 61

    valor                          shift and go to state 55
    numero                         shift and go to state 58

state 18

    (17) imprimir -> PRINT . valor SEMI
    (18) imprimir -> PRINT . LPAREN valor RPAREN SEMI
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    LPAREN          shift and go to state 63
    VARIABLE        shift and go to state 59
    STRING          shift and go to state 60
    NOMBRE          shift and go to state 64
    ENTERO          shift and go to state 57
    DECIMAL         shift and go to state 61

    valor                          shift and go to state 62
    numero                         shift and go to state 58

state 19

    (52) operaciones_mat_par -> LPAREN . valor operadores valor RPAREN
    (53) operaciones_mat_par -> LPAREN . valor operadores operaciones_mat_par RPAREN
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 59
    STRING          shift and go to state 60
    NOMBRE          shift and go to state 64
    ENTERO          shift and go to state 57
    DECIMAL         shift and go to state 61

    valor                          shift and go to state 65
    numero                         shift and go to state 58

state 20

    (54) asignacion -> VARIABLE . EQUALS valor SEMI
    (55) asignacion_array -> VARIABLE . EQUALS array_def SEMI

    EQUALS          shift and go to state 66


state 21

    (64) funciones -> funcion_nparams .

    $end            reduce using rule 64 (funciones -> funcion_nparams .)
    RBRACE          reduce using rule 64 (funciones -> funcion_nparams .)
    ECHO            reduce using rule 64 (funciones -> funcion_nparams .)
    PRINT           reduce using rule 64 (funciones -> funcion_nparams .)
    VARIABLE        reduce using rule 64 (funciones -> funcion_nparams .)
    DEFINE          reduce using rule 64 (funciones -> funcion_nparams .)
    READLINE        reduce using rule 64 (funciones -> funcion_nparams .)
    SUMA            reduce using rule 64 (funciones -> funcion_nparams .)
    RESTA           reduce using rule 64 (funciones -> funcion_nparams .)
    MULTIPLICACION  reduce using rule 64 (funciones -> funcion_nparams .)
    DIVISION        reduce using rule 64 (funciones -> funcion_nparams .)
    MODULO          reduce using rule 64 (funciones -> funcion_nparams .)
    SMALLER         reduce using rule 64 (funciones -> funcion_nparams .)
    GREATER         reduce using rule 64 (funciones -> funcion_nparams .)
    IS_SMALLER_OR_EQUAL reduce using rule 64 (funciones -> funcion_nparams .)
    IS_GREATER_OR_EQUAL reduce using rule 64 (funciones -> funcion_nparams .)
    AND             reduce using rule 64 (funciones -> funcion_nparams .)
    OR              reduce using rule 64 (funciones -> funcion_nparams .)
    XOR             reduce using rule 64 (funciones -> funcion_nparams .)
    IS_EQUAL        reduce using rule 64 (funciones -> funcion_nparams .)
    IS_NOT_EQUAL    reduce using rule 64 (funciones -> funcion_nparams .)
    IS_IDENTICAL    reduce using rule 64 (funciones -> funcion_nparams .)
    IS_NOT_IDENTICAL reduce using rule 64 (funciones -> funcion_nparams .)
    BOOLEAN_NOT     reduce using rule 64 (funciones -> funcion_nparams .)
    WHILE           reduce using rule 64 (funciones -> funcion_nparams .)
    FOR             reduce using rule 64 (funciones -> funcion_nparams .)
    FOREACH         reduce using rule 64 (funciones -> funcion_nparams .)
    TRY             reduce using rule 64 (funciones -> funcion_nparams .)
    LPAREN          reduce using rule 64 (funciones -> funcion_nparams .)
    FUNCTION        reduce using rule 64 (funciones -> funcion_nparams .)
    PUBLIC          reduce using rule 64 (funciones -> funcion_nparams .)
    PRIVATE         reduce using rule 64 (funciones -> funcion_nparams .)
    PROTECTED       reduce using rule 64 (funciones -> funcion_nparams .)
    STATIC          reduce using rule 64 (funciones -> funcion_nparams .)
    IF              reduce using rule 64 (funciones -> funcion_nparams .)


state 22

    (65) funciones -> proteccion . funcion_nparams
    (67) funciones -> proteccion . funcion_opreturn
    (69) funciones -> proteccion . funcion_blank
    (72) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (75) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (76) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (77) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE

    FUNCTION        shift and go to state 49

    funcion_nparams                shift and go to state 67
    funcion_opreturn               shift and go to state 68
    funcion_blank                  shift and go to state 69

state 23

    (66) funciones -> funcion_opreturn .

    $end            reduce using rule 66 (funciones -> funcion_opreturn .)
    RBRACE          reduce using rule 66 (funciones -> funcion_opreturn .)
    ECHO            reduce using rule 66 (funciones -> funcion_opreturn .)
    PRINT           reduce using rule 66 (funciones -> funcion_opreturn .)
    VARIABLE        reduce using rule 66 (funciones -> funcion_opreturn .)
    DEFINE          reduce using rule 66 (funciones -> funcion_opreturn .)
    READLINE        reduce using rule 66 (funciones -> funcion_opreturn .)
    SUMA            reduce using rule 66 (funciones -> funcion_opreturn .)
    RESTA           reduce using rule 66 (funciones -> funcion_opreturn .)
    MULTIPLICACION  reduce using rule 66 (funciones -> funcion_opreturn .)
    DIVISION        reduce using rule 66 (funciones -> funcion_opreturn .)
    MODULO          reduce using rule 66 (funciones -> funcion_opreturn .)
    SMALLER         reduce using rule 66 (funciones -> funcion_opreturn .)
    GREATER         reduce using rule 66 (funciones -> funcion_opreturn .)
    IS_SMALLER_OR_EQUAL reduce using rule 66 (funciones -> funcion_opreturn .)
    IS_GREATER_OR_EQUAL reduce using rule 66 (funciones -> funcion_opreturn .)
    AND             reduce using rule 66 (funciones -> funcion_opreturn .)
    OR              reduce using rule 66 (funciones -> funcion_opreturn .)
    XOR             reduce using rule 66 (funciones -> funcion_opreturn .)
    IS_EQUAL        reduce using rule 66 (funciones -> funcion_opreturn .)
    IS_NOT_EQUAL    reduce using rule 66 (funciones -> funcion_opreturn .)
    IS_IDENTICAL    reduce using rule 66 (funciones -> funcion_opreturn .)
    IS_NOT_IDENTICAL reduce using rule 66 (funciones -> funcion_opreturn .)
    BOOLEAN_NOT     reduce using rule 66 (funciones -> funcion_opreturn .)
    WHILE           reduce using rule 66 (funciones -> funcion_opreturn .)
    FOR             reduce using rule 66 (funciones -> funcion_opreturn .)
    FOREACH         reduce using rule 66 (funciones -> funcion_opreturn .)
    TRY             reduce using rule 66 (funciones -> funcion_opreturn .)
    LPAREN          reduce using rule 66 (funciones -> funcion_opreturn .)
    FUNCTION        reduce using rule 66 (funciones -> funcion_opreturn .)
    PUBLIC          reduce using rule 66 (funciones -> funcion_opreturn .)
    PRIVATE         reduce using rule 66 (funciones -> funcion_opreturn .)
    PROTECTED       reduce using rule 66 (funciones -> funcion_opreturn .)
    STATIC          reduce using rule 66 (funciones -> funcion_opreturn .)
    IF              reduce using rule 66 (funciones -> funcion_opreturn .)


state 24

    (68) funciones -> funcion_blank .

    $end            reduce using rule 68 (funciones -> funcion_blank .)
    RBRACE          reduce using rule 68 (funciones -> funcion_blank .)
    ECHO            reduce using rule 68 (funciones -> funcion_blank .)
    PRINT           reduce using rule 68 (funciones -> funcion_blank .)
    VARIABLE        reduce using rule 68 (funciones -> funcion_blank .)
    DEFINE          reduce using rule 68 (funciones -> funcion_blank .)
    READLINE        reduce using rule 68 (funciones -> funcion_blank .)
    SUMA            reduce using rule 68 (funciones -> funcion_blank .)
    RESTA           reduce using rule 68 (funciones -> funcion_blank .)
    MULTIPLICACION  reduce using rule 68 (funciones -> funcion_blank .)
    DIVISION        reduce using rule 68 (funciones -> funcion_blank .)
    MODULO          reduce using rule 68 (funciones -> funcion_blank .)
    SMALLER         reduce using rule 68 (funciones -> funcion_blank .)
    GREATER         reduce using rule 68 (funciones -> funcion_blank .)
    IS_SMALLER_OR_EQUAL reduce using rule 68 (funciones -> funcion_blank .)
    IS_GREATER_OR_EQUAL reduce using rule 68 (funciones -> funcion_blank .)
    AND             reduce using rule 68 (funciones -> funcion_blank .)
    OR              reduce using rule 68 (funciones -> funcion_blank .)
    XOR             reduce using rule 68 (funciones -> funcion_blank .)
    IS_EQUAL        reduce using rule 68 (funciones -> funcion_blank .)
    IS_NOT_EQUAL    reduce using rule 68 (funciones -> funcion_blank .)
    IS_IDENTICAL    reduce using rule 68 (funciones -> funcion_blank .)
    IS_NOT_IDENTICAL reduce using rule 68 (funciones -> funcion_blank .)
    BOOLEAN_NOT     reduce using rule 68 (funciones -> funcion_blank .)
    WHILE           reduce using rule 68 (funciones -> funcion_blank .)
    FOR             reduce using rule 68 (funciones -> funcion_blank .)
    FOREACH         reduce using rule 68 (funciones -> funcion_blank .)
    TRY             reduce using rule 68 (funciones -> funcion_blank .)
    LPAREN          reduce using rule 68 (funciones -> funcion_blank .)
    FUNCTION        reduce using rule 68 (funciones -> funcion_blank .)
    PUBLIC          reduce using rule 68 (funciones -> funcion_blank .)
    PRIVATE         reduce using rule 68 (funciones -> funcion_blank .)
    PROTECTED       reduce using rule 68 (funciones -> funcion_blank .)
    STATIC          reduce using rule 68 (funciones -> funcion_blank .)
    IF              reduce using rule 68 (funciones -> funcion_blank .)


state 25

    (56) constante -> DEFINE . LPAREN STRING COMMA valor RPAREN SEMI
    (57) constante -> DEFINE . LPAREN NOMBRE COMMA ARRAY RPAREN SEMI

    LPAREN          shift and go to state 70


state 26

    (58) lectura -> READLINE . LPAREN STRING RPAREN SEMI
    (59) lectura -> READLINE . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 71


state 27

    (26) operadores -> SUMA .

    $end            reduce using rule 26 (operadores -> SUMA .)
    VARIABLE        reduce using rule 26 (operadores -> SUMA .)
    STRING          reduce using rule 26 (operadores -> SUMA .)
    NOMBRE          reduce using rule 26 (operadores -> SUMA .)
    LPAREN          reduce using rule 26 (operadores -> SUMA .)
    ENTERO          reduce using rule 26 (operadores -> SUMA .)
    DECIMAL         reduce using rule 26 (operadores -> SUMA .)
    RBRACE          reduce using rule 26 (operadores -> SUMA .)
    ECHO            reduce using rule 26 (operadores -> SUMA .)
    PRINT           reduce using rule 26 (operadores -> SUMA .)
    DEFINE          reduce using rule 26 (operadores -> SUMA .)
    READLINE        reduce using rule 26 (operadores -> SUMA .)
    SUMA            reduce using rule 26 (operadores -> SUMA .)
    RESTA           reduce using rule 26 (operadores -> SUMA .)
    MULTIPLICACION  reduce using rule 26 (operadores -> SUMA .)
    DIVISION        reduce using rule 26 (operadores -> SUMA .)
    MODULO          reduce using rule 26 (operadores -> SUMA .)
    SMALLER         reduce using rule 26 (operadores -> SUMA .)
    GREATER         reduce using rule 26 (operadores -> SUMA .)
    IS_SMALLER_OR_EQUAL reduce using rule 26 (operadores -> SUMA .)
    IS_GREATER_OR_EQUAL reduce using rule 26 (operadores -> SUMA .)
    AND             reduce using rule 26 (operadores -> SUMA .)
    OR              reduce using rule 26 (operadores -> SUMA .)
    XOR             reduce using rule 26 (operadores -> SUMA .)
    IS_EQUAL        reduce using rule 26 (operadores -> SUMA .)
    IS_NOT_EQUAL    reduce using rule 26 (operadores -> SUMA .)
    IS_IDENTICAL    reduce using rule 26 (operadores -> SUMA .)
    IS_NOT_IDENTICAL reduce using rule 26 (operadores -> SUMA .)
    BOOLEAN_NOT     reduce using rule 26 (operadores -> SUMA .)
    WHILE           reduce using rule 26 (operadores -> SUMA .)
    FOR             reduce using rule 26 (operadores -> SUMA .)
    FOREACH         reduce using rule 26 (operadores -> SUMA .)
    TRY             reduce using rule 26 (operadores -> SUMA .)
    FUNCTION        reduce using rule 26 (operadores -> SUMA .)
    PUBLIC          reduce using rule 26 (operadores -> SUMA .)
    PRIVATE         reduce using rule 26 (operadores -> SUMA .)
    PROTECTED       reduce using rule 26 (operadores -> SUMA .)
    STATIC          reduce using rule 26 (operadores -> SUMA .)
    IF              reduce using rule 26 (operadores -> SUMA .)


state 28

    (27) operadores -> RESTA .

    $end            reduce using rule 27 (operadores -> RESTA .)
    VARIABLE        reduce using rule 27 (operadores -> RESTA .)
    STRING          reduce using rule 27 (operadores -> RESTA .)
    NOMBRE          reduce using rule 27 (operadores -> RESTA .)
    LPAREN          reduce using rule 27 (operadores -> RESTA .)
    ENTERO          reduce using rule 27 (operadores -> RESTA .)
    DECIMAL         reduce using rule 27 (operadores -> RESTA .)
    RBRACE          reduce using rule 27 (operadores -> RESTA .)
    ECHO            reduce using rule 27 (operadores -> RESTA .)
    PRINT           reduce using rule 27 (operadores -> RESTA .)
    DEFINE          reduce using rule 27 (operadores -> RESTA .)
    READLINE        reduce using rule 27 (operadores -> RESTA .)
    SUMA            reduce using rule 27 (operadores -> RESTA .)
    RESTA           reduce using rule 27 (operadores -> RESTA .)
    MULTIPLICACION  reduce using rule 27 (operadores -> RESTA .)
    DIVISION        reduce using rule 27 (operadores -> RESTA .)
    MODULO          reduce using rule 27 (operadores -> RESTA .)
    SMALLER         reduce using rule 27 (operadores -> RESTA .)
    GREATER         reduce using rule 27 (operadores -> RESTA .)
    IS_SMALLER_OR_EQUAL reduce using rule 27 (operadores -> RESTA .)
    IS_GREATER_OR_EQUAL reduce using rule 27 (operadores -> RESTA .)
    AND             reduce using rule 27 (operadores -> RESTA .)
    OR              reduce using rule 27 (operadores -> RESTA .)
    XOR             reduce using rule 27 (operadores -> RESTA .)
    IS_EQUAL        reduce using rule 27 (operadores -> RESTA .)
    IS_NOT_EQUAL    reduce using rule 27 (operadores -> RESTA .)
    IS_IDENTICAL    reduce using rule 27 (operadores -> RESTA .)
    IS_NOT_IDENTICAL reduce using rule 27 (operadores -> RESTA .)
    BOOLEAN_NOT     reduce using rule 27 (operadores -> RESTA .)
    WHILE           reduce using rule 27 (operadores -> RESTA .)
    FOR             reduce using rule 27 (operadores -> RESTA .)
    FOREACH         reduce using rule 27 (operadores -> RESTA .)
    TRY             reduce using rule 27 (operadores -> RESTA .)
    FUNCTION        reduce using rule 27 (operadores -> RESTA .)
    PUBLIC          reduce using rule 27 (operadores -> RESTA .)
    PRIVATE         reduce using rule 27 (operadores -> RESTA .)
    PROTECTED       reduce using rule 27 (operadores -> RESTA .)
    STATIC          reduce using rule 27 (operadores -> RESTA .)
    IF              reduce using rule 27 (operadores -> RESTA .)


state 29

    (28) operadores -> MULTIPLICACION .

    $end            reduce using rule 28 (operadores -> MULTIPLICACION .)
    VARIABLE        reduce using rule 28 (operadores -> MULTIPLICACION .)
    STRING          reduce using rule 28 (operadores -> MULTIPLICACION .)
    NOMBRE          reduce using rule 28 (operadores -> MULTIPLICACION .)
    LPAREN          reduce using rule 28 (operadores -> MULTIPLICACION .)
    ENTERO          reduce using rule 28 (operadores -> MULTIPLICACION .)
    DECIMAL         reduce using rule 28 (operadores -> MULTIPLICACION .)
    RBRACE          reduce using rule 28 (operadores -> MULTIPLICACION .)
    ECHO            reduce using rule 28 (operadores -> MULTIPLICACION .)
    PRINT           reduce using rule 28 (operadores -> MULTIPLICACION .)
    DEFINE          reduce using rule 28 (operadores -> MULTIPLICACION .)
    READLINE        reduce using rule 28 (operadores -> MULTIPLICACION .)
    SUMA            reduce using rule 28 (operadores -> MULTIPLICACION .)
    RESTA           reduce using rule 28 (operadores -> MULTIPLICACION .)
    MULTIPLICACION  reduce using rule 28 (operadores -> MULTIPLICACION .)
    DIVISION        reduce using rule 28 (operadores -> MULTIPLICACION .)
    MODULO          reduce using rule 28 (operadores -> MULTIPLICACION .)
    SMALLER         reduce using rule 28 (operadores -> MULTIPLICACION .)
    GREATER         reduce using rule 28 (operadores -> MULTIPLICACION .)
    IS_SMALLER_OR_EQUAL reduce using rule 28 (operadores -> MULTIPLICACION .)
    IS_GREATER_OR_EQUAL reduce using rule 28 (operadores -> MULTIPLICACION .)
    AND             reduce using rule 28 (operadores -> MULTIPLICACION .)
    OR              reduce using rule 28 (operadores -> MULTIPLICACION .)
    XOR             reduce using rule 28 (operadores -> MULTIPLICACION .)
    IS_EQUAL        reduce using rule 28 (operadores -> MULTIPLICACION .)
    IS_NOT_EQUAL    reduce using rule 28 (operadores -> MULTIPLICACION .)
    IS_IDENTICAL    reduce using rule 28 (operadores -> MULTIPLICACION .)
    IS_NOT_IDENTICAL reduce using rule 28 (operadores -> MULTIPLICACION .)
    BOOLEAN_NOT     reduce using rule 28 (operadores -> MULTIPLICACION .)
    WHILE           reduce using rule 28 (operadores -> MULTIPLICACION .)
    FOR             reduce using rule 28 (operadores -> MULTIPLICACION .)
    FOREACH         reduce using rule 28 (operadores -> MULTIPLICACION .)
    TRY             reduce using rule 28 (operadores -> MULTIPLICACION .)
    FUNCTION        reduce using rule 28 (operadores -> MULTIPLICACION .)
    PUBLIC          reduce using rule 28 (operadores -> MULTIPLICACION .)
    PRIVATE         reduce using rule 28 (operadores -> MULTIPLICACION .)
    PROTECTED       reduce using rule 28 (operadores -> MULTIPLICACION .)
    STATIC          reduce using rule 28 (operadores -> MULTIPLICACION .)
    IF              reduce using rule 28 (operadores -> MULTIPLICACION .)


state 30

    (29) operadores -> DIVISION .

    $end            reduce using rule 29 (operadores -> DIVISION .)
    VARIABLE        reduce using rule 29 (operadores -> DIVISION .)
    STRING          reduce using rule 29 (operadores -> DIVISION .)
    NOMBRE          reduce using rule 29 (operadores -> DIVISION .)
    LPAREN          reduce using rule 29 (operadores -> DIVISION .)
    ENTERO          reduce using rule 29 (operadores -> DIVISION .)
    DECIMAL         reduce using rule 29 (operadores -> DIVISION .)
    RBRACE          reduce using rule 29 (operadores -> DIVISION .)
    ECHO            reduce using rule 29 (operadores -> DIVISION .)
    PRINT           reduce using rule 29 (operadores -> DIVISION .)
    DEFINE          reduce using rule 29 (operadores -> DIVISION .)
    READLINE        reduce using rule 29 (operadores -> DIVISION .)
    SUMA            reduce using rule 29 (operadores -> DIVISION .)
    RESTA           reduce using rule 29 (operadores -> DIVISION .)
    MULTIPLICACION  reduce using rule 29 (operadores -> DIVISION .)
    DIVISION        reduce using rule 29 (operadores -> DIVISION .)
    MODULO          reduce using rule 29 (operadores -> DIVISION .)
    SMALLER         reduce using rule 29 (operadores -> DIVISION .)
    GREATER         reduce using rule 29 (operadores -> DIVISION .)
    IS_SMALLER_OR_EQUAL reduce using rule 29 (operadores -> DIVISION .)
    IS_GREATER_OR_EQUAL reduce using rule 29 (operadores -> DIVISION .)
    AND             reduce using rule 29 (operadores -> DIVISION .)
    OR              reduce using rule 29 (operadores -> DIVISION .)
    XOR             reduce using rule 29 (operadores -> DIVISION .)
    IS_EQUAL        reduce using rule 29 (operadores -> DIVISION .)
    IS_NOT_EQUAL    reduce using rule 29 (operadores -> DIVISION .)
    IS_IDENTICAL    reduce using rule 29 (operadores -> DIVISION .)
    IS_NOT_IDENTICAL reduce using rule 29 (operadores -> DIVISION .)
    BOOLEAN_NOT     reduce using rule 29 (operadores -> DIVISION .)
    WHILE           reduce using rule 29 (operadores -> DIVISION .)
    FOR             reduce using rule 29 (operadores -> DIVISION .)
    FOREACH         reduce using rule 29 (operadores -> DIVISION .)
    TRY             reduce using rule 29 (operadores -> DIVISION .)
    FUNCTION        reduce using rule 29 (operadores -> DIVISION .)
    PUBLIC          reduce using rule 29 (operadores -> DIVISION .)
    PRIVATE         reduce using rule 29 (operadores -> DIVISION .)
    PROTECTED       reduce using rule 29 (operadores -> DIVISION .)
    STATIC          reduce using rule 29 (operadores -> DIVISION .)
    IF              reduce using rule 29 (operadores -> DIVISION .)


state 31

    (30) operadores -> MODULO .

    $end            reduce using rule 30 (operadores -> MODULO .)
    VARIABLE        reduce using rule 30 (operadores -> MODULO .)
    STRING          reduce using rule 30 (operadores -> MODULO .)
    NOMBRE          reduce using rule 30 (operadores -> MODULO .)
    LPAREN          reduce using rule 30 (operadores -> MODULO .)
    ENTERO          reduce using rule 30 (operadores -> MODULO .)
    DECIMAL         reduce using rule 30 (operadores -> MODULO .)
    RBRACE          reduce using rule 30 (operadores -> MODULO .)
    ECHO            reduce using rule 30 (operadores -> MODULO .)
    PRINT           reduce using rule 30 (operadores -> MODULO .)
    DEFINE          reduce using rule 30 (operadores -> MODULO .)
    READLINE        reduce using rule 30 (operadores -> MODULO .)
    SUMA            reduce using rule 30 (operadores -> MODULO .)
    RESTA           reduce using rule 30 (operadores -> MODULO .)
    MULTIPLICACION  reduce using rule 30 (operadores -> MODULO .)
    DIVISION        reduce using rule 30 (operadores -> MODULO .)
    MODULO          reduce using rule 30 (operadores -> MODULO .)
    SMALLER         reduce using rule 30 (operadores -> MODULO .)
    GREATER         reduce using rule 30 (operadores -> MODULO .)
    IS_SMALLER_OR_EQUAL reduce using rule 30 (operadores -> MODULO .)
    IS_GREATER_OR_EQUAL reduce using rule 30 (operadores -> MODULO .)
    AND             reduce using rule 30 (operadores -> MODULO .)
    OR              reduce using rule 30 (operadores -> MODULO .)
    XOR             reduce using rule 30 (operadores -> MODULO .)
    IS_EQUAL        reduce using rule 30 (operadores -> MODULO .)
    IS_NOT_EQUAL    reduce using rule 30 (operadores -> MODULO .)
    IS_IDENTICAL    reduce using rule 30 (operadores -> MODULO .)
    IS_NOT_IDENTICAL reduce using rule 30 (operadores -> MODULO .)
    BOOLEAN_NOT     reduce using rule 30 (operadores -> MODULO .)
    WHILE           reduce using rule 30 (operadores -> MODULO .)
    FOR             reduce using rule 30 (operadores -> MODULO .)
    FOREACH         reduce using rule 30 (operadores -> MODULO .)
    TRY             reduce using rule 30 (operadores -> MODULO .)
    FUNCTION        reduce using rule 30 (operadores -> MODULO .)
    PUBLIC          reduce using rule 30 (operadores -> MODULO .)
    PRIVATE         reduce using rule 30 (operadores -> MODULO .)
    PROTECTED       reduce using rule 30 (operadores -> MODULO .)
    STATIC          reduce using rule 30 (operadores -> MODULO .)
    IF              reduce using rule 30 (operadores -> MODULO .)


state 32

    (31) operador_logico -> SMALLER .

    $end            reduce using rule 31 (operador_logico -> SMALLER .)
    VARIABLE        reduce using rule 31 (operador_logico -> SMALLER .)
    STRING          reduce using rule 31 (operador_logico -> SMALLER .)
    NOMBRE          reduce using rule 31 (operador_logico -> SMALLER .)
    ENTERO          reduce using rule 31 (operador_logico -> SMALLER .)
    DECIMAL         reduce using rule 31 (operador_logico -> SMALLER .)
    RBRACE          reduce using rule 31 (operador_logico -> SMALLER .)
    ECHO            reduce using rule 31 (operador_logico -> SMALLER .)
    PRINT           reduce using rule 31 (operador_logico -> SMALLER .)
    DEFINE          reduce using rule 31 (operador_logico -> SMALLER .)
    READLINE        reduce using rule 31 (operador_logico -> SMALLER .)
    SUMA            reduce using rule 31 (operador_logico -> SMALLER .)
    RESTA           reduce using rule 31 (operador_logico -> SMALLER .)
    MULTIPLICACION  reduce using rule 31 (operador_logico -> SMALLER .)
    DIVISION        reduce using rule 31 (operador_logico -> SMALLER .)
    MODULO          reduce using rule 31 (operador_logico -> SMALLER .)
    SMALLER         reduce using rule 31 (operador_logico -> SMALLER .)
    GREATER         reduce using rule 31 (operador_logico -> SMALLER .)
    IS_SMALLER_OR_EQUAL reduce using rule 31 (operador_logico -> SMALLER .)
    IS_GREATER_OR_EQUAL reduce using rule 31 (operador_logico -> SMALLER .)
    AND             reduce using rule 31 (operador_logico -> SMALLER .)
    OR              reduce using rule 31 (operador_logico -> SMALLER .)
    XOR             reduce using rule 31 (operador_logico -> SMALLER .)
    IS_EQUAL        reduce using rule 31 (operador_logico -> SMALLER .)
    IS_NOT_EQUAL    reduce using rule 31 (operador_logico -> SMALLER .)
    IS_IDENTICAL    reduce using rule 31 (operador_logico -> SMALLER .)
    IS_NOT_IDENTICAL reduce using rule 31 (operador_logico -> SMALLER .)
    BOOLEAN_NOT     reduce using rule 31 (operador_logico -> SMALLER .)
    WHILE           reduce using rule 31 (operador_logico -> SMALLER .)
    FOR             reduce using rule 31 (operador_logico -> SMALLER .)
    FOREACH         reduce using rule 31 (operador_logico -> SMALLER .)
    TRY             reduce using rule 31 (operador_logico -> SMALLER .)
    LPAREN          reduce using rule 31 (operador_logico -> SMALLER .)
    FUNCTION        reduce using rule 31 (operador_logico -> SMALLER .)
    PUBLIC          reduce using rule 31 (operador_logico -> SMALLER .)
    PRIVATE         reduce using rule 31 (operador_logico -> SMALLER .)
    PROTECTED       reduce using rule 31 (operador_logico -> SMALLER .)
    STATIC          reduce using rule 31 (operador_logico -> SMALLER .)
    IF              reduce using rule 31 (operador_logico -> SMALLER .)


state 33

    (32) operador_logico -> GREATER .

    $end            reduce using rule 32 (operador_logico -> GREATER .)
    VARIABLE        reduce using rule 32 (operador_logico -> GREATER .)
    STRING          reduce using rule 32 (operador_logico -> GREATER .)
    NOMBRE          reduce using rule 32 (operador_logico -> GREATER .)
    ENTERO          reduce using rule 32 (operador_logico -> GREATER .)
    DECIMAL         reduce using rule 32 (operador_logico -> GREATER .)
    RBRACE          reduce using rule 32 (operador_logico -> GREATER .)
    ECHO            reduce using rule 32 (operador_logico -> GREATER .)
    PRINT           reduce using rule 32 (operador_logico -> GREATER .)
    DEFINE          reduce using rule 32 (operador_logico -> GREATER .)
    READLINE        reduce using rule 32 (operador_logico -> GREATER .)
    SUMA            reduce using rule 32 (operador_logico -> GREATER .)
    RESTA           reduce using rule 32 (operador_logico -> GREATER .)
    MULTIPLICACION  reduce using rule 32 (operador_logico -> GREATER .)
    DIVISION        reduce using rule 32 (operador_logico -> GREATER .)
    MODULO          reduce using rule 32 (operador_logico -> GREATER .)
    SMALLER         reduce using rule 32 (operador_logico -> GREATER .)
    GREATER         reduce using rule 32 (operador_logico -> GREATER .)
    IS_SMALLER_OR_EQUAL reduce using rule 32 (operador_logico -> GREATER .)
    IS_GREATER_OR_EQUAL reduce using rule 32 (operador_logico -> GREATER .)
    AND             reduce using rule 32 (operador_logico -> GREATER .)
    OR              reduce using rule 32 (operador_logico -> GREATER .)
    XOR             reduce using rule 32 (operador_logico -> GREATER .)
    IS_EQUAL        reduce using rule 32 (operador_logico -> GREATER .)
    IS_NOT_EQUAL    reduce using rule 32 (operador_logico -> GREATER .)
    IS_IDENTICAL    reduce using rule 32 (operador_logico -> GREATER .)
    IS_NOT_IDENTICAL reduce using rule 32 (operador_logico -> GREATER .)
    BOOLEAN_NOT     reduce using rule 32 (operador_logico -> GREATER .)
    WHILE           reduce using rule 32 (operador_logico -> GREATER .)
    FOR             reduce using rule 32 (operador_logico -> GREATER .)
    FOREACH         reduce using rule 32 (operador_logico -> GREATER .)
    TRY             reduce using rule 32 (operador_logico -> GREATER .)
    LPAREN          reduce using rule 32 (operador_logico -> GREATER .)
    FUNCTION        reduce using rule 32 (operador_logico -> GREATER .)
    PUBLIC          reduce using rule 32 (operador_logico -> GREATER .)
    PRIVATE         reduce using rule 32 (operador_logico -> GREATER .)
    PROTECTED       reduce using rule 32 (operador_logico -> GREATER .)
    STATIC          reduce using rule 32 (operador_logico -> GREATER .)
    IF              reduce using rule 32 (operador_logico -> GREATER .)


state 34

    (33) operador_logico -> IS_SMALLER_OR_EQUAL .

    $end            reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    VARIABLE        reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    STRING          reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    NOMBRE          reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    ENTERO          reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    DECIMAL         reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    RBRACE          reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    ECHO            reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    PRINT           reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    DEFINE          reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    READLINE        reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    SUMA            reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    RESTA           reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    MULTIPLICACION  reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    DIVISION        reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    MODULO          reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    SMALLER         reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    GREATER         reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_GREATER_OR_EQUAL reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    AND             reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    OR              reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    XOR             reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_EQUAL        reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_NOT_EQUAL    reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_IDENTICAL    reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_NOT_IDENTICAL reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    BOOLEAN_NOT     reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    WHILE           reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    FOR             reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    FOREACH         reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    TRY             reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    LPAREN          reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    FUNCTION        reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    PUBLIC          reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    PRIVATE         reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    PROTECTED       reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    STATIC          reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IF              reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)


state 35

    (34) operador_logico -> IS_GREATER_OR_EQUAL .

    $end            reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    VARIABLE        reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    STRING          reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    NOMBRE          reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    ENTERO          reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    DECIMAL         reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    RBRACE          reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    ECHO            reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    PRINT           reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    DEFINE          reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    READLINE        reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    SUMA            reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    RESTA           reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    MULTIPLICACION  reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    DIVISION        reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    MODULO          reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    SMALLER         reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    GREATER         reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_GREATER_OR_EQUAL reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    AND             reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    OR              reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    XOR             reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_EQUAL        reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_NOT_EQUAL    reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_IDENTICAL    reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_NOT_IDENTICAL reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    BOOLEAN_NOT     reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    WHILE           reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    FOR             reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    FOREACH         reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    TRY             reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    LPAREN          reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    FUNCTION        reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    PUBLIC          reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    PRIVATE         reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    PROTECTED       reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    STATIC          reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IF              reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)


state 36

    (42) condicion_booleana -> AND .

    $end            reduce using rule 42 (condicion_booleana -> AND .)
    RBRACE          reduce using rule 42 (condicion_booleana -> AND .)
    ECHO            reduce using rule 42 (condicion_booleana -> AND .)
    PRINT           reduce using rule 42 (condicion_booleana -> AND .)
    VARIABLE        reduce using rule 42 (condicion_booleana -> AND .)
    DEFINE          reduce using rule 42 (condicion_booleana -> AND .)
    READLINE        reduce using rule 42 (condicion_booleana -> AND .)
    SUMA            reduce using rule 42 (condicion_booleana -> AND .)
    RESTA           reduce using rule 42 (condicion_booleana -> AND .)
    MULTIPLICACION  reduce using rule 42 (condicion_booleana -> AND .)
    DIVISION        reduce using rule 42 (condicion_booleana -> AND .)
    MODULO          reduce using rule 42 (condicion_booleana -> AND .)
    SMALLER         reduce using rule 42 (condicion_booleana -> AND .)
    GREATER         reduce using rule 42 (condicion_booleana -> AND .)
    IS_SMALLER_OR_EQUAL reduce using rule 42 (condicion_booleana -> AND .)
    IS_GREATER_OR_EQUAL reduce using rule 42 (condicion_booleana -> AND .)
    AND             reduce using rule 42 (condicion_booleana -> AND .)
    OR              reduce using rule 42 (condicion_booleana -> AND .)
    XOR             reduce using rule 42 (condicion_booleana -> AND .)
    IS_EQUAL        reduce using rule 42 (condicion_booleana -> AND .)
    IS_NOT_EQUAL    reduce using rule 42 (condicion_booleana -> AND .)
    IS_IDENTICAL    reduce using rule 42 (condicion_booleana -> AND .)
    IS_NOT_IDENTICAL reduce using rule 42 (condicion_booleana -> AND .)
    BOOLEAN_NOT     reduce using rule 42 (condicion_booleana -> AND .)
    WHILE           reduce using rule 42 (condicion_booleana -> AND .)
    FOR             reduce using rule 42 (condicion_booleana -> AND .)
    FOREACH         reduce using rule 42 (condicion_booleana -> AND .)
    TRY             reduce using rule 42 (condicion_booleana -> AND .)
    LPAREN          reduce using rule 42 (condicion_booleana -> AND .)
    FUNCTION        reduce using rule 42 (condicion_booleana -> AND .)
    PUBLIC          reduce using rule 42 (condicion_booleana -> AND .)
    PRIVATE         reduce using rule 42 (condicion_booleana -> AND .)
    PROTECTED       reduce using rule 42 (condicion_booleana -> AND .)
    STATIC          reduce using rule 42 (condicion_booleana -> AND .)
    IF              reduce using rule 42 (condicion_booleana -> AND .)


state 37

    (43) condicion_booleana -> OR .

    $end            reduce using rule 43 (condicion_booleana -> OR .)
    RBRACE          reduce using rule 43 (condicion_booleana -> OR .)
    ECHO            reduce using rule 43 (condicion_booleana -> OR .)
    PRINT           reduce using rule 43 (condicion_booleana -> OR .)
    VARIABLE        reduce using rule 43 (condicion_booleana -> OR .)
    DEFINE          reduce using rule 43 (condicion_booleana -> OR .)
    READLINE        reduce using rule 43 (condicion_booleana -> OR .)
    SUMA            reduce using rule 43 (condicion_booleana -> OR .)
    RESTA           reduce using rule 43 (condicion_booleana -> OR .)
    MULTIPLICACION  reduce using rule 43 (condicion_booleana -> OR .)
    DIVISION        reduce using rule 43 (condicion_booleana -> OR .)
    MODULO          reduce using rule 43 (condicion_booleana -> OR .)
    SMALLER         reduce using rule 43 (condicion_booleana -> OR .)
    GREATER         reduce using rule 43 (condicion_booleana -> OR .)
    IS_SMALLER_OR_EQUAL reduce using rule 43 (condicion_booleana -> OR .)
    IS_GREATER_OR_EQUAL reduce using rule 43 (condicion_booleana -> OR .)
    AND             reduce using rule 43 (condicion_booleana -> OR .)
    OR              reduce using rule 43 (condicion_booleana -> OR .)
    XOR             reduce using rule 43 (condicion_booleana -> OR .)
    IS_EQUAL        reduce using rule 43 (condicion_booleana -> OR .)
    IS_NOT_EQUAL    reduce using rule 43 (condicion_booleana -> OR .)
    IS_IDENTICAL    reduce using rule 43 (condicion_booleana -> OR .)
    IS_NOT_IDENTICAL reduce using rule 43 (condicion_booleana -> OR .)
    BOOLEAN_NOT     reduce using rule 43 (condicion_booleana -> OR .)
    WHILE           reduce using rule 43 (condicion_booleana -> OR .)
    FOR             reduce using rule 43 (condicion_booleana -> OR .)
    FOREACH         reduce using rule 43 (condicion_booleana -> OR .)
    TRY             reduce using rule 43 (condicion_booleana -> OR .)
    LPAREN          reduce using rule 43 (condicion_booleana -> OR .)
    FUNCTION        reduce using rule 43 (condicion_booleana -> OR .)
    PUBLIC          reduce using rule 43 (condicion_booleana -> OR .)
    PRIVATE         reduce using rule 43 (condicion_booleana -> OR .)
    PROTECTED       reduce using rule 43 (condicion_booleana -> OR .)
    STATIC          reduce using rule 43 (condicion_booleana -> OR .)
    IF              reduce using rule 43 (condicion_booleana -> OR .)


state 38

    (44) condicion_booleana -> XOR .

    $end            reduce using rule 44 (condicion_booleana -> XOR .)
    RBRACE          reduce using rule 44 (condicion_booleana -> XOR .)
    ECHO            reduce using rule 44 (condicion_booleana -> XOR .)
    PRINT           reduce using rule 44 (condicion_booleana -> XOR .)
    VARIABLE        reduce using rule 44 (condicion_booleana -> XOR .)
    DEFINE          reduce using rule 44 (condicion_booleana -> XOR .)
    READLINE        reduce using rule 44 (condicion_booleana -> XOR .)
    SUMA            reduce using rule 44 (condicion_booleana -> XOR .)
    RESTA           reduce using rule 44 (condicion_booleana -> XOR .)
    MULTIPLICACION  reduce using rule 44 (condicion_booleana -> XOR .)
    DIVISION        reduce using rule 44 (condicion_booleana -> XOR .)
    MODULO          reduce using rule 44 (condicion_booleana -> XOR .)
    SMALLER         reduce using rule 44 (condicion_booleana -> XOR .)
    GREATER         reduce using rule 44 (condicion_booleana -> XOR .)
    IS_SMALLER_OR_EQUAL reduce using rule 44 (condicion_booleana -> XOR .)
    IS_GREATER_OR_EQUAL reduce using rule 44 (condicion_booleana -> XOR .)
    AND             reduce using rule 44 (condicion_booleana -> XOR .)
    OR              reduce using rule 44 (condicion_booleana -> XOR .)
    XOR             reduce using rule 44 (condicion_booleana -> XOR .)
    IS_EQUAL        reduce using rule 44 (condicion_booleana -> XOR .)
    IS_NOT_EQUAL    reduce using rule 44 (condicion_booleana -> XOR .)
    IS_IDENTICAL    reduce using rule 44 (condicion_booleana -> XOR .)
    IS_NOT_IDENTICAL reduce using rule 44 (condicion_booleana -> XOR .)
    BOOLEAN_NOT     reduce using rule 44 (condicion_booleana -> XOR .)
    WHILE           reduce using rule 44 (condicion_booleana -> XOR .)
    FOR             reduce using rule 44 (condicion_booleana -> XOR .)
    FOREACH         reduce using rule 44 (condicion_booleana -> XOR .)
    TRY             reduce using rule 44 (condicion_booleana -> XOR .)
    LPAREN          reduce using rule 44 (condicion_booleana -> XOR .)
    FUNCTION        reduce using rule 44 (condicion_booleana -> XOR .)
    PUBLIC          reduce using rule 44 (condicion_booleana -> XOR .)
    PRIVATE         reduce using rule 44 (condicion_booleana -> XOR .)
    PROTECTED       reduce using rule 44 (condicion_booleana -> XOR .)
    STATIC          reduce using rule 44 (condicion_booleana -> XOR .)
    IF              reduce using rule 44 (condicion_booleana -> XOR .)


state 39

    (45) condicion_booleana -> IS_EQUAL .

    $end            reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    RBRACE          reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    ECHO            reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    PRINT           reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    VARIABLE        reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    DEFINE          reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    READLINE        reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    SUMA            reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    RESTA           reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    MULTIPLICACION  reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    DIVISION        reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    MODULO          reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    SMALLER         reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    GREATER         reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    IS_GREATER_OR_EQUAL reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    AND             reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    OR              reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    XOR             reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    IS_EQUAL        reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    IS_NOT_EQUAL    reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    IS_IDENTICAL    reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    IS_NOT_IDENTICAL reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    BOOLEAN_NOT     reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    WHILE           reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    FOR             reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    FOREACH         reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    TRY             reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    LPAREN          reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    FUNCTION        reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    PUBLIC          reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    PRIVATE         reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    PROTECTED       reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    STATIC          reduce using rule 45 (condicion_booleana -> IS_EQUAL .)
    IF              reduce using rule 45 (condicion_booleana -> IS_EQUAL .)


state 40

    (46) condicion_booleana -> IS_NOT_EQUAL .

    $end            reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    RBRACE          reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    ECHO            reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    PRINT           reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    VARIABLE        reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    DEFINE          reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    READLINE        reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    SUMA            reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    RESTA           reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    MULTIPLICACION  reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    DIVISION        reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    MODULO          reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    SMALLER         reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    GREATER         reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_GREATER_OR_EQUAL reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    AND             reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    OR              reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    XOR             reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_EQUAL        reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_NOT_EQUAL    reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_IDENTICAL    reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_NOT_IDENTICAL reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    BOOLEAN_NOT     reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    WHILE           reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    FOR             reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    FOREACH         reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    TRY             reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    LPAREN          reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    FUNCTION        reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    PUBLIC          reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    PRIVATE         reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    PROTECTED       reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    STATIC          reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)
    IF              reduce using rule 46 (condicion_booleana -> IS_NOT_EQUAL .)


state 41

    (47) condicion_booleana -> IS_IDENTICAL .

    $end            reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    RBRACE          reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    ECHO            reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    PRINT           reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    VARIABLE        reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    DEFINE          reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    READLINE        reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    SUMA            reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    RESTA           reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    MULTIPLICACION  reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    DIVISION        reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    MODULO          reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    SMALLER         reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    GREATER         reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    IS_GREATER_OR_EQUAL reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    AND             reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    OR              reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    XOR             reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    IS_EQUAL        reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    IS_NOT_EQUAL    reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    IS_IDENTICAL    reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    IS_NOT_IDENTICAL reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    BOOLEAN_NOT     reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    WHILE           reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    FOR             reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    FOREACH         reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    TRY             reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    LPAREN          reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    FUNCTION        reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    PUBLIC          reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    PRIVATE         reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    PROTECTED       reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    STATIC          reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)
    IF              reduce using rule 47 (condicion_booleana -> IS_IDENTICAL .)


state 42

    (48) condicion_booleana -> IS_NOT_IDENTICAL .

    $end            reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    RBRACE          reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    ECHO            reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    PRINT           reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    VARIABLE        reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    DEFINE          reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    READLINE        reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    SUMA            reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    RESTA           reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    MULTIPLICACION  reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    DIVISION        reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    MODULO          reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    SMALLER         reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    GREATER         reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_GREATER_OR_EQUAL reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    AND             reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    OR              reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    XOR             reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_EQUAL        reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_NOT_EQUAL    reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_IDENTICAL    reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_NOT_IDENTICAL reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    BOOLEAN_NOT     reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    WHILE           reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    FOR             reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    FOREACH         reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    TRY             reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    LPAREN          reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    FUNCTION        reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    PUBLIC          reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    PRIVATE         reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    PROTECTED       reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    STATIC          reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IF              reduce using rule 48 (condicion_booleana -> IS_NOT_IDENTICAL .)


state 43

    (49) condicion_booleana -> BOOLEAN_NOT .

    $end            reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    RBRACE          reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    ECHO            reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    PRINT           reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    VARIABLE        reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    DEFINE          reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    READLINE        reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    SUMA            reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    RESTA           reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    MULTIPLICACION  reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    DIVISION        reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    MODULO          reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    SMALLER         reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    GREATER         reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    IS_SMALLER_OR_EQUAL reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    IS_GREATER_OR_EQUAL reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    AND             reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    OR              reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    XOR             reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    IS_EQUAL        reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    IS_NOT_EQUAL    reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    IS_IDENTICAL    reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    IS_NOT_IDENTICAL reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    BOOLEAN_NOT     reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    WHILE           reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    FOR             reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    FOREACH         reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    TRY             reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    LPAREN          reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    FUNCTION        reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    PUBLIC          reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    PRIVATE         reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    PROTECTED       reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    STATIC          reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)
    IF              reduce using rule 49 (condicion_booleana -> BOOLEAN_NOT .)


state 44

    (80) bwhile -> WHILE . LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (81) bwhile -> WHILE . LPAREN condicion RPAREN COLON stc_bloque

    LPAREN          shift and go to state 72


state 45

    (83) bfor -> FOR . LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def

    LPAREN          shift and go to state 73


state 46

    (94) bforeach -> FOREACH . LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def

    LPAREN          shift and go to state 74


state 47

    (99) btry -> TRY . LBRACE stc_bloque_def RBRACE catches

    LBRACE          shift and go to state 75


state 48

    (38) condicion_ifelse -> condicion_if .
    (39) condicion_ifelse -> condicion_if . condicion_else
    (40) condicion_ifelse -> condicion_if . condicion_elseif
    (41) condicion_ifelse -> condicion_if . condicion_elseif condicion_else
    (37) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (36) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    $end            reduce using rule 38 (condicion_ifelse -> condicion_if .)
    RBRACE          reduce using rule 38 (condicion_ifelse -> condicion_if .)
    ECHO            reduce using rule 38 (condicion_ifelse -> condicion_if .)
    PRINT           reduce using rule 38 (condicion_ifelse -> condicion_if .)
    VARIABLE        reduce using rule 38 (condicion_ifelse -> condicion_if .)
    DEFINE          reduce using rule 38 (condicion_ifelse -> condicion_if .)
    READLINE        reduce using rule 38 (condicion_ifelse -> condicion_if .)
    SUMA            reduce using rule 38 (condicion_ifelse -> condicion_if .)
    RESTA           reduce using rule 38 (condicion_ifelse -> condicion_if .)
    MULTIPLICACION  reduce using rule 38 (condicion_ifelse -> condicion_if .)
    DIVISION        reduce using rule 38 (condicion_ifelse -> condicion_if .)
    MODULO          reduce using rule 38 (condicion_ifelse -> condicion_if .)
    SMALLER         reduce using rule 38 (condicion_ifelse -> condicion_if .)
    GREATER         reduce using rule 38 (condicion_ifelse -> condicion_if .)
    IS_SMALLER_OR_EQUAL reduce using rule 38 (condicion_ifelse -> condicion_if .)
    IS_GREATER_OR_EQUAL reduce using rule 38 (condicion_ifelse -> condicion_if .)
    AND             reduce using rule 38 (condicion_ifelse -> condicion_if .)
    OR              reduce using rule 38 (condicion_ifelse -> condicion_if .)
    XOR             reduce using rule 38 (condicion_ifelse -> condicion_if .)
    IS_EQUAL        reduce using rule 38 (condicion_ifelse -> condicion_if .)
    IS_NOT_EQUAL    reduce using rule 38 (condicion_ifelse -> condicion_if .)
    IS_IDENTICAL    reduce using rule 38 (condicion_ifelse -> condicion_if .)
    IS_NOT_IDENTICAL reduce using rule 38 (condicion_ifelse -> condicion_if .)
    BOOLEAN_NOT     reduce using rule 38 (condicion_ifelse -> condicion_if .)
    WHILE           reduce using rule 38 (condicion_ifelse -> condicion_if .)
    FOR             reduce using rule 38 (condicion_ifelse -> condicion_if .)
    FOREACH         reduce using rule 38 (condicion_ifelse -> condicion_if .)
    TRY             reduce using rule 38 (condicion_ifelse -> condicion_if .)
    LPAREN          reduce using rule 38 (condicion_ifelse -> condicion_if .)
    FUNCTION        reduce using rule 38 (condicion_ifelse -> condicion_if .)
    PUBLIC          reduce using rule 38 (condicion_ifelse -> condicion_if .)
    PRIVATE         reduce using rule 38 (condicion_ifelse -> condicion_if .)
    PROTECTED       reduce using rule 38 (condicion_ifelse -> condicion_if .)
    STATIC          reduce using rule 38 (condicion_ifelse -> condicion_if .)
    IF              reduce using rule 38 (condicion_ifelse -> condicion_if .)
    ELSE            shift and go to state 78
    ELSEIF          shift and go to state 79

    condicion_else                 shift and go to state 76
    condicion_elseif               shift and go to state 77

state 49

    (72) funcion_nparams -> FUNCTION . NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (75) funcion_opreturn -> FUNCTION . NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (76) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN stc_bloque_def
    (77) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN LBRACE empty RBRACE

    NOMBRE          shift and go to state 80


state 50

    (60) proteccion -> PUBLIC .

    FUNCTION        reduce using rule 60 (proteccion -> PUBLIC .)


state 51

    (61) proteccion -> PRIVATE .

    FUNCTION        reduce using rule 61 (proteccion -> PRIVATE .)


state 52

    (62) proteccion -> PROTECTED .

    FUNCTION        reduce using rule 62 (proteccion -> PROTECTED .)


state 53

    (63) proteccion -> STATIC .

    FUNCTION        reduce using rule 63 (proteccion -> STATIC .)


state 54

    (35) condicion_if -> IF . LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    LPAREN          shift and go to state 81


state 55

    (16) imprimir -> ECHO valor . SEMI

    SEMI            shift and go to state 82


state 56

    (19) imprimir -> ECHO NOMBRE . LBRACKET ENTERO RBRACKET SEMI
    (23) valor -> NOMBRE .

    LBRACKET        shift and go to state 83
    SEMI            reduce using rule 23 (valor -> NOMBRE .)


state 57

    (24) numero -> ENTERO .

    SEMI            reduce using rule 24 (numero -> ENTERO .)
    SUMA            reduce using rule 24 (numero -> ENTERO .)
    RESTA           reduce using rule 24 (numero -> ENTERO .)
    MULTIPLICACION  reduce using rule 24 (numero -> ENTERO .)
    DIVISION        reduce using rule 24 (numero -> ENTERO .)
    MODULO          reduce using rule 24 (numero -> ENTERO .)
    RPAREN          reduce using rule 24 (numero -> ENTERO .)
    SMALLER         reduce using rule 24 (numero -> ENTERO .)
    GREATER         reduce using rule 24 (numero -> ENTERO .)
    IS_SMALLER_OR_EQUAL reduce using rule 24 (numero -> ENTERO .)
    IS_GREATER_OR_EQUAL reduce using rule 24 (numero -> ENTERO .)


state 58

    (20) valor -> numero .

    SEMI            reduce using rule 20 (valor -> numero .)
    SUMA            reduce using rule 20 (valor -> numero .)
    RESTA           reduce using rule 20 (valor -> numero .)
    MULTIPLICACION  reduce using rule 20 (valor -> numero .)
    DIVISION        reduce using rule 20 (valor -> numero .)
    MODULO          reduce using rule 20 (valor -> numero .)
    RPAREN          reduce using rule 20 (valor -> numero .)
    SMALLER         reduce using rule 20 (valor -> numero .)
    GREATER         reduce using rule 20 (valor -> numero .)
    IS_SMALLER_OR_EQUAL reduce using rule 20 (valor -> numero .)
    IS_GREATER_OR_EQUAL reduce using rule 20 (valor -> numero .)


state 59

    (21) valor -> VARIABLE .

    SEMI            reduce using rule 21 (valor -> VARIABLE .)
    SUMA            reduce using rule 21 (valor -> VARIABLE .)
    RESTA           reduce using rule 21 (valor -> VARIABLE .)
    MULTIPLICACION  reduce using rule 21 (valor -> VARIABLE .)
    DIVISION        reduce using rule 21 (valor -> VARIABLE .)
    MODULO          reduce using rule 21 (valor -> VARIABLE .)
    RPAREN          reduce using rule 21 (valor -> VARIABLE .)


state 60

    (22) valor -> STRING .

    SEMI            reduce using rule 22 (valor -> STRING .)
    SUMA            reduce using rule 22 (valor -> STRING .)
    RESTA           reduce using rule 22 (valor -> STRING .)
    MULTIPLICACION  reduce using rule 22 (valor -> STRING .)
    DIVISION        reduce using rule 22 (valor -> STRING .)
    MODULO          reduce using rule 22 (valor -> STRING .)
    RPAREN          reduce using rule 22 (valor -> STRING .)
    SMALLER         reduce using rule 22 (valor -> STRING .)
    GREATER         reduce using rule 22 (valor -> STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 22 (valor -> STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 22 (valor -> STRING .)


state 61

    (25) numero -> DECIMAL .

    SEMI            reduce using rule 25 (numero -> DECIMAL .)
    SUMA            reduce using rule 25 (numero -> DECIMAL .)
    RESTA           reduce using rule 25 (numero -> DECIMAL .)
    MULTIPLICACION  reduce using rule 25 (numero -> DECIMAL .)
    DIVISION        reduce using rule 25 (numero -> DECIMAL .)
    MODULO          reduce using rule 25 (numero -> DECIMAL .)
    RPAREN          reduce using rule 25 (numero -> DECIMAL .)
    SMALLER         reduce using rule 25 (numero -> DECIMAL .)
    GREATER         reduce using rule 25 (numero -> DECIMAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 25 (numero -> DECIMAL .)
    IS_GREATER_OR_EQUAL reduce using rule 25 (numero -> DECIMAL .)


state 62

    (17) imprimir -> PRINT valor . SEMI

    SEMI            shift and go to state 84


state 63

    (18) imprimir -> PRINT LPAREN . valor RPAREN SEMI
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 59
    STRING          shift and go to state 60
    NOMBRE          shift and go to state 64
    ENTERO          shift and go to state 57
    DECIMAL         shift and go to state 61

    valor                          shift and go to state 85
    numero                         shift and go to state 58

state 64

    (23) valor -> NOMBRE .

    SEMI            reduce using rule 23 (valor -> NOMBRE .)
    SUMA            reduce using rule 23 (valor -> NOMBRE .)
    RESTA           reduce using rule 23 (valor -> NOMBRE .)
    MULTIPLICACION  reduce using rule 23 (valor -> NOMBRE .)
    DIVISION        reduce using rule 23 (valor -> NOMBRE .)
    MODULO          reduce using rule 23 (valor -> NOMBRE .)
    RPAREN          reduce using rule 23 (valor -> NOMBRE .)
    SMALLER         reduce using rule 23 (valor -> NOMBRE .)
    GREATER         reduce using rule 23 (valor -> NOMBRE .)
    IS_SMALLER_OR_EQUAL reduce using rule 23 (valor -> NOMBRE .)
    IS_GREATER_OR_EQUAL reduce using rule 23 (valor -> NOMBRE .)


state 65

    (52) operaciones_mat_par -> LPAREN valor . operadores valor RPAREN
    (53) operaciones_mat_par -> LPAREN valor . operadores operaciones_mat_par RPAREN
    (26) operadores -> . SUMA
    (27) operadores -> . RESTA
    (28) operadores -> . MULTIPLICACION
    (29) operadores -> . DIVISION
    (30) operadores -> . MODULO

    SUMA            shift and go to state 27
    RESTA           shift and go to state 28
    MULTIPLICACION  shift and go to state 29
    DIVISION        shift and go to state 30
    MODULO          shift and go to state 31

    operadores                     shift and go to state 86

state 66

    (54) asignacion -> VARIABLE EQUALS . valor SEMI
    (55) asignacion_array -> VARIABLE EQUALS . array_def SEMI
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (95) array_def -> . ARRAY LPAREN RPAREN
    (96) array_def -> . ARRAY LPAREN array_elmnt RPAREN
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 59
    STRING          shift and go to state 60
    NOMBRE          shift and go to state 64
    ARRAY           shift and go to state 89
    ENTERO          shift and go to state 57
    DECIMAL         shift and go to state 61

    valor                          shift and go to state 87
    array_def                      shift and go to state 88
    numero                         shift and go to state 58

state 67

    (65) funciones -> proteccion funcion_nparams .

    $end            reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    RBRACE          reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    ECHO            reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    PRINT           reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    VARIABLE        reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    DEFINE          reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    READLINE        reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    SUMA            reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    RESTA           reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    MULTIPLICACION  reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    DIVISION        reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    MODULO          reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    SMALLER         reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    GREATER         reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    IS_SMALLER_OR_EQUAL reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    IS_GREATER_OR_EQUAL reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    AND             reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    OR              reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    XOR             reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    IS_EQUAL        reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    IS_NOT_EQUAL    reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    IS_IDENTICAL    reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    IS_NOT_IDENTICAL reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    BOOLEAN_NOT     reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    WHILE           reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    FOR             reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    FOREACH         reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    TRY             reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    LPAREN          reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    FUNCTION        reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    PUBLIC          reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    PRIVATE         reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    PROTECTED       reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    STATIC          reduce using rule 65 (funciones -> proteccion funcion_nparams .)
    IF              reduce using rule 65 (funciones -> proteccion funcion_nparams .)


state 68

    (67) funciones -> proteccion funcion_opreturn .

    $end            reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    RBRACE          reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    ECHO            reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    PRINT           reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    VARIABLE        reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    DEFINE          reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    READLINE        reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    SUMA            reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    RESTA           reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    MULTIPLICACION  reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    DIVISION        reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    MODULO          reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    SMALLER         reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    GREATER         reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    IS_SMALLER_OR_EQUAL reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    IS_GREATER_OR_EQUAL reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    AND             reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    OR              reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    XOR             reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    IS_EQUAL        reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    IS_NOT_EQUAL    reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    IS_IDENTICAL    reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    IS_NOT_IDENTICAL reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    BOOLEAN_NOT     reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    WHILE           reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    FOR             reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    FOREACH         reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    TRY             reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    LPAREN          reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    FUNCTION        reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    PUBLIC          reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    PRIVATE         reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    PROTECTED       reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    STATIC          reduce using rule 67 (funciones -> proteccion funcion_opreturn .)
    IF              reduce using rule 67 (funciones -> proteccion funcion_opreturn .)


state 69

    (69) funciones -> proteccion funcion_blank .

    $end            reduce using rule 69 (funciones -> proteccion funcion_blank .)
    RBRACE          reduce using rule 69 (funciones -> proteccion funcion_blank .)
    ECHO            reduce using rule 69 (funciones -> proteccion funcion_blank .)
    PRINT           reduce using rule 69 (funciones -> proteccion funcion_blank .)
    VARIABLE        reduce using rule 69 (funciones -> proteccion funcion_blank .)
    DEFINE          reduce using rule 69 (funciones -> proteccion funcion_blank .)
    READLINE        reduce using rule 69 (funciones -> proteccion funcion_blank .)
    SUMA            reduce using rule 69 (funciones -> proteccion funcion_blank .)
    RESTA           reduce using rule 69 (funciones -> proteccion funcion_blank .)
    MULTIPLICACION  reduce using rule 69 (funciones -> proteccion funcion_blank .)
    DIVISION        reduce using rule 69 (funciones -> proteccion funcion_blank .)
    MODULO          reduce using rule 69 (funciones -> proteccion funcion_blank .)
    SMALLER         reduce using rule 69 (funciones -> proteccion funcion_blank .)
    GREATER         reduce using rule 69 (funciones -> proteccion funcion_blank .)
    IS_SMALLER_OR_EQUAL reduce using rule 69 (funciones -> proteccion funcion_blank .)
    IS_GREATER_OR_EQUAL reduce using rule 69 (funciones -> proteccion funcion_blank .)
    AND             reduce using rule 69 (funciones -> proteccion funcion_blank .)
    OR              reduce using rule 69 (funciones -> proteccion funcion_blank .)
    XOR             reduce using rule 69 (funciones -> proteccion funcion_blank .)
    IS_EQUAL        reduce using rule 69 (funciones -> proteccion funcion_blank .)
    IS_NOT_EQUAL    reduce using rule 69 (funciones -> proteccion funcion_blank .)
    IS_IDENTICAL    reduce using rule 69 (funciones -> proteccion funcion_blank .)
    IS_NOT_IDENTICAL reduce using rule 69 (funciones -> proteccion funcion_blank .)
    BOOLEAN_NOT     reduce using rule 69 (funciones -> proteccion funcion_blank .)
    WHILE           reduce using rule 69 (funciones -> proteccion funcion_blank .)
    FOR             reduce using rule 69 (funciones -> proteccion funcion_blank .)
    FOREACH         reduce using rule 69 (funciones -> proteccion funcion_blank .)
    TRY             reduce using rule 69 (funciones -> proteccion funcion_blank .)
    LPAREN          reduce using rule 69 (funciones -> proteccion funcion_blank .)
    FUNCTION        reduce using rule 69 (funciones -> proteccion funcion_blank .)
    PUBLIC          reduce using rule 69 (funciones -> proteccion funcion_blank .)
    PRIVATE         reduce using rule 69 (funciones -> proteccion funcion_blank .)
    PROTECTED       reduce using rule 69 (funciones -> proteccion funcion_blank .)
    STATIC          reduce using rule 69 (funciones -> proteccion funcion_blank .)
    IF              reduce using rule 69 (funciones -> proteccion funcion_blank .)


state 70

    (56) constante -> DEFINE LPAREN . STRING COMMA valor RPAREN SEMI
    (57) constante -> DEFINE LPAREN . NOMBRE COMMA ARRAY RPAREN SEMI

    STRING          shift and go to state 90
    NOMBRE          shift and go to state 91


state 71

    (58) lectura -> READLINE LPAREN . STRING RPAREN SEMI
    (59) lectura -> READLINE LPAREN . RPAREN SEMI

    STRING          shift and go to state 92
    RPAREN          shift and go to state 93


state 72

    (80) bwhile -> WHILE LPAREN . condicion RPAREN LBRACE stc_bloque RBRACE
    (81) bwhile -> WHILE LPAREN . condicion RPAREN COLON stc_bloque
    (78) condicion -> . VARIABLE operador_logico VARIABLE
    (79) condicion -> . valor operador_logico valor
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 95
    STRING          shift and go to state 60
    NOMBRE          shift and go to state 64
    ENTERO          shift and go to state 57
    DECIMAL         shift and go to state 61

    condicion                      shift and go to state 94
    valor                          shift and go to state 96
    numero                         shift and go to state 58

state 73

    (83) bfor -> FOR LPAREN . asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (54) asignacion -> . VARIABLE EQUALS valor SEMI

    VARIABLE        shift and go to state 98

    asignacion                     shift and go to state 97

state 74

    (94) bforeach -> FOREACH LPAREN . VARIABLE AS VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 99


state 75

    (99) btry -> TRY LBRACE . stc_bloque_def RBRACE catches
    (87) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 100

    stc_bloque_def                 shift and go to state 101

state 76

    (39) condicion_ifelse -> condicion_if condicion_else .

    $end            reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    RBRACE          reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    ECHO            reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    PRINT           reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    VARIABLE        reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    DEFINE          reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    READLINE        reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    SUMA            reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    RESTA           reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    MULTIPLICACION  reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    DIVISION        reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    MODULO          reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    SMALLER         reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    GREATER         reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    IS_SMALLER_OR_EQUAL reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    IS_GREATER_OR_EQUAL reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    AND             reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    OR              reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    XOR             reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    IS_EQUAL        reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    IS_NOT_EQUAL    reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    IS_IDENTICAL    reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    IS_NOT_IDENTICAL reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    BOOLEAN_NOT     reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    WHILE           reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    FOR             reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    FOREACH         reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    TRY             reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    LPAREN          reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    FUNCTION        reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    PUBLIC          reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    PRIVATE         reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    PROTECTED       reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    STATIC          reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)
    IF              reduce using rule 39 (condicion_ifelse -> condicion_if condicion_else .)


state 77

    (40) condicion_ifelse -> condicion_if condicion_elseif .
    (41) condicion_ifelse -> condicion_if condicion_elseif . condicion_else
    (37) condicion_else -> . ELSE LBRACE cuerpo RBRACE

    $end            reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    RBRACE          reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    ECHO            reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    PRINT           reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    VARIABLE        reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    DEFINE          reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    READLINE        reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    SUMA            reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    RESTA           reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    MULTIPLICACION  reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    DIVISION        reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    MODULO          reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    SMALLER         reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    GREATER         reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    IS_SMALLER_OR_EQUAL reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    IS_GREATER_OR_EQUAL reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    AND             reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    OR              reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    XOR             reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    IS_EQUAL        reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    IS_NOT_EQUAL    reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    IS_IDENTICAL    reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    IS_NOT_IDENTICAL reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    BOOLEAN_NOT     reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    WHILE           reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    FOR             reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    FOREACH         reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    TRY             reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    LPAREN          reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    FUNCTION        reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    PUBLIC          reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    PRIVATE         reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    PROTECTED       reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    STATIC          reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    IF              reduce using rule 40 (condicion_ifelse -> condicion_if condicion_elseif .)
    ELSE            shift and go to state 78

    condicion_else                 shift and go to state 102

state 78

    (37) condicion_else -> ELSE . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 103


state 79

    (36) condicion_elseif -> ELSEIF . LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    LPAREN          shift and go to state 104


state 80

    (72) funcion_nparams -> FUNCTION NOMBRE . LPAREN params_list RPAREN stc_bloque_def
    (75) funcion_opreturn -> FUNCTION NOMBRE . LPAREN params_list RPAREN stc_bloque_def
    (76) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN stc_bloque_def
    (77) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN LBRACE empty RBRACE

    LPAREN          shift and go to state 105


state 81

    (35) condicion_if -> IF LPAREN . condicion RPAREN LBRACE cuerpo RBRACE
    (78) condicion -> . VARIABLE operador_logico VARIABLE
    (79) condicion -> . valor operador_logico valor
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 95
    STRING          shift and go to state 60
    NOMBRE          shift and go to state 64
    ENTERO          shift and go to state 57
    DECIMAL         shift and go to state 61

    condicion                      shift and go to state 106
    valor                          shift and go to state 96
    numero                         shift and go to state 58

state 82

    (16) imprimir -> ECHO valor SEMI .

    $end            reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    RBRACE          reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    ECHO            reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    PRINT           reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    VARIABLE        reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    DEFINE          reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    READLINE        reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    SUMA            reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    RESTA           reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    MULTIPLICACION  reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    DIVISION        reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    MODULO          reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    SMALLER         reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    GREATER         reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    AND             reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    OR              reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    XOR             reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    IS_EQUAL        reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    IS_NOT_EQUAL    reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    IS_IDENTICAL    reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    IS_NOT_IDENTICAL reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    BOOLEAN_NOT     reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    WHILE           reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    FOR             reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    FOREACH         reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    TRY             reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    LPAREN          reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    FUNCTION        reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    PUBLIC          reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    PRIVATE         reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    PROTECTED       reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    STATIC          reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    IF              reduce using rule 16 (imprimir -> ECHO valor SEMI .)


state 83

    (19) imprimir -> ECHO NOMBRE LBRACKET . ENTERO RBRACKET SEMI

    ENTERO          shift and go to state 107


state 84

    (17) imprimir -> PRINT valor SEMI .

    $end            reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    RBRACE          reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    ECHO            reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    PRINT           reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    VARIABLE        reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    DEFINE          reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    READLINE        reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    SUMA            reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    RESTA           reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    MULTIPLICACION  reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    DIVISION        reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    MODULO          reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    SMALLER         reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    GREATER         reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    AND             reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    OR              reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    XOR             reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    IS_EQUAL        reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    IS_NOT_EQUAL    reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    IS_IDENTICAL    reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    IS_NOT_IDENTICAL reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    BOOLEAN_NOT     reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    WHILE           reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    FOR             reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    FOREACH         reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    TRY             reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    LPAREN          reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    FUNCTION        reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    PUBLIC          reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    PRIVATE         reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    PROTECTED       reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    STATIC          reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    IF              reduce using rule 17 (imprimir -> PRINT valor SEMI .)


state 85

    (18) imprimir -> PRINT LPAREN valor . RPAREN SEMI

    RPAREN          shift and go to state 108


state 86

    (52) operaciones_mat_par -> LPAREN valor operadores . valor RPAREN
    (53) operaciones_mat_par -> LPAREN valor operadores . operaciones_mat_par RPAREN
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (52) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (53) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 59
    STRING          shift and go to state 60
    NOMBRE          shift and go to state 64
    LPAREN          shift and go to state 19
    ENTERO          shift and go to state 57
    DECIMAL         shift and go to state 61

    valor                          shift and go to state 109
    operaciones_mat_par            shift and go to state 110
    numero                         shift and go to state 58

state 87

    (54) asignacion -> VARIABLE EQUALS valor . SEMI

    SEMI            shift and go to state 111


state 88

    (55) asignacion_array -> VARIABLE EQUALS array_def . SEMI

    SEMI            shift and go to state 112


state 89

    (95) array_def -> ARRAY . LPAREN RPAREN
    (96) array_def -> ARRAY . LPAREN array_elmnt RPAREN

    LPAREN          shift and go to state 113


state 90

    (56) constante -> DEFINE LPAREN STRING . COMMA valor RPAREN SEMI

    COMMA           shift and go to state 114


state 91

    (57) constante -> DEFINE LPAREN NOMBRE . COMMA ARRAY RPAREN SEMI

    COMMA           shift and go to state 115


state 92

    (58) lectura -> READLINE LPAREN STRING . RPAREN SEMI

    RPAREN          shift and go to state 116


state 93

    (59) lectura -> READLINE LPAREN RPAREN . SEMI

    SEMI            shift and go to state 117


state 94

    (80) bwhile -> WHILE LPAREN condicion . RPAREN LBRACE stc_bloque RBRACE
    (81) bwhile -> WHILE LPAREN condicion . RPAREN COLON stc_bloque

    RPAREN          shift and go to state 118


state 95

    (78) condicion -> VARIABLE . operador_logico VARIABLE
    (21) valor -> VARIABLE .
    (31) operador_logico -> . SMALLER
    (32) operador_logico -> . GREATER
    (33) operador_logico -> . IS_SMALLER_OR_EQUAL
    (34) operador_logico -> . IS_GREATER_OR_EQUAL

  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for IS_SMALLER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for IS_GREATER_OR_EQUAL resolved as shift
    SMALLER         shift and go to state 32
    GREATER         shift and go to state 33
    IS_SMALLER_OR_EQUAL shift and go to state 34
    IS_GREATER_OR_EQUAL shift and go to state 35

  ! SMALLER         [ reduce using rule 21 (valor -> VARIABLE .) ]
  ! GREATER         [ reduce using rule 21 (valor -> VARIABLE .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 21 (valor -> VARIABLE .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 21 (valor -> VARIABLE .) ]

    operador_logico                shift and go to state 119

state 96

    (79) condicion -> valor . operador_logico valor
    (31) operador_logico -> . SMALLER
    (32) operador_logico -> . GREATER
    (33) operador_logico -> . IS_SMALLER_OR_EQUAL
    (34) operador_logico -> . IS_GREATER_OR_EQUAL

    SMALLER         shift and go to state 32
    GREATER         shift and go to state 33
    IS_SMALLER_OR_EQUAL shift and go to state 34
    IS_GREATER_OR_EQUAL shift and go to state 35

    operador_logico                shift and go to state 120

state 97

    (83) bfor -> FOR LPAREN asignacion . SEMI condicion SEMI for_incr RPAREN stc_bloque_def

    SEMI            shift and go to state 121


state 98

    (54) asignacion -> VARIABLE . EQUALS valor SEMI

    EQUALS          shift and go to state 122


state 99

    (94) bforeach -> FOREACH LPAREN VARIABLE . AS VARIABLE RPAREN stc_bloque_def

    AS              shift and go to state 123


state 100

    (87) stc_bloque_def -> LBRACE . stc_bloque RBRACE
    (84) stc_bloque -> . stc_bloque cuerpo
    (85) stc_bloque -> . empty
    (86) stc_bloque -> . RETURN
    (102) empty -> .

    RETURN          shift and go to state 126
    RBRACE          reduce using rule 102 (empty -> .)
    ECHO            reduce using rule 102 (empty -> .)
    PRINT           reduce using rule 102 (empty -> .)
    VARIABLE        reduce using rule 102 (empty -> .)
    DEFINE          reduce using rule 102 (empty -> .)
    READLINE        reduce using rule 102 (empty -> .)
    SUMA            reduce using rule 102 (empty -> .)
    RESTA           reduce using rule 102 (empty -> .)
    MULTIPLICACION  reduce using rule 102 (empty -> .)
    DIVISION        reduce using rule 102 (empty -> .)
    MODULO          reduce using rule 102 (empty -> .)
    SMALLER         reduce using rule 102 (empty -> .)
    GREATER         reduce using rule 102 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 102 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    XOR             reduce using rule 102 (empty -> .)
    IS_EQUAL        reduce using rule 102 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 102 (empty -> .)
    IS_IDENTICAL    reduce using rule 102 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 102 (empty -> .)
    BOOLEAN_NOT     reduce using rule 102 (empty -> .)
    WHILE           reduce using rule 102 (empty -> .)
    FOR             reduce using rule 102 (empty -> .)
    FOREACH         reduce using rule 102 (empty -> .)
    TRY             reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    FUNCTION        reduce using rule 102 (empty -> .)
    PUBLIC          reduce using rule 102 (empty -> .)
    PRIVATE         reduce using rule 102 (empty -> .)
    PROTECTED       reduce using rule 102 (empty -> .)
    STATIC          reduce using rule 102 (empty -> .)
    IF              reduce using rule 102 (empty -> .)

    stc_bloque                     shift and go to state 124
    empty                          shift and go to state 125

state 101

    (99) btry -> TRY LBRACE stc_bloque_def . RBRACE catches

    RBRACE          shift and go to state 127


state 102

    (41) condicion_ifelse -> condicion_if condicion_elseif condicion_else .

    $end            reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    RBRACE          reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    ECHO            reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    PRINT           reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    VARIABLE        reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    DEFINE          reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    READLINE        reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    SUMA            reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    RESTA           reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    MULTIPLICACION  reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    DIVISION        reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    MODULO          reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    SMALLER         reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    GREATER         reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IS_SMALLER_OR_EQUAL reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IS_GREATER_OR_EQUAL reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    AND             reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    OR              reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    XOR             reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IS_EQUAL        reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IS_NOT_EQUAL    reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IS_IDENTICAL    reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IS_NOT_IDENTICAL reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    BOOLEAN_NOT     reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    WHILE           reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    FOR             reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    FOREACH         reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    TRY             reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    LPAREN          reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    FUNCTION        reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    PUBLIC          reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    PRIVATE         reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    PROTECTED       reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    STATIC          reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IF              reduce using rule 41 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)


state 103

    (37) condicion_else -> ELSE LBRACE . cuerpo RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bfor
    (12) cuerpo -> . bforeach
    (13) cuerpo -> . btry
    (14) cuerpo -> . operaciones_mat_par
    (15) cuerpo -> . condicion_ifelse
    (16) imprimir -> . ECHO valor SEMI
    (17) imprimir -> . PRINT valor SEMI
    (18) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (19) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (54) asignacion -> . VARIABLE EQUALS valor SEMI
    (55) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (64) funciones -> . funcion_nparams
    (65) funciones -> . proteccion funcion_nparams
    (66) funciones -> . funcion_opreturn
    (67) funciones -> . proteccion funcion_opreturn
    (68) funciones -> . funcion_blank
    (69) funciones -> . proteccion funcion_blank
    (56) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (57) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (58) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (59) lectura -> . READLINE LPAREN RPAREN SEMI
    (26) operadores -> . SUMA
    (27) operadores -> . RESTA
    (28) operadores -> . MULTIPLICACION
    (29) operadores -> . DIVISION
    (30) operadores -> . MODULO
    (31) operador_logico -> . SMALLER
    (32) operador_logico -> . GREATER
    (33) operador_logico -> . IS_SMALLER_OR_EQUAL
    (34) operador_logico -> . IS_GREATER_OR_EQUAL
    (42) condicion_booleana -> . AND
    (43) condicion_booleana -> . OR
    (44) condicion_booleana -> . XOR
    (45) condicion_booleana -> . IS_EQUAL
    (46) condicion_booleana -> . IS_NOT_EQUAL
    (47) condicion_booleana -> . IS_IDENTICAL
    (48) condicion_booleana -> . IS_NOT_IDENTICAL
    (49) condicion_booleana -> . BOOLEAN_NOT
    (80) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (81) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (83) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (94) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (99) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (52) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (53) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (38) condicion_ifelse -> . condicion_if
    (39) condicion_ifelse -> . condicion_if condicion_else
    (40) condicion_ifelse -> . condicion_if condicion_elseif
    (41) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (72) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (60) proteccion -> . PUBLIC
    (61) proteccion -> . PRIVATE
    (62) proteccion -> . PROTECTED
    (63) proteccion -> . STATIC
    (75) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (76) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (77) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (35) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    VARIABLE        shift and go to state 20
    DEFINE          shift and go to state 25
    READLINE        shift and go to state 26
    SUMA            shift and go to state 27
    RESTA           shift and go to state 28
    MULTIPLICACION  shift and go to state 29
    DIVISION        shift and go to state 30
    MODULO          shift and go to state 31
    SMALLER         shift and go to state 32
    GREATER         shift and go to state 33
    IS_SMALLER_OR_EQUAL shift and go to state 34
    IS_GREATER_OR_EQUAL shift and go to state 35
    AND             shift and go to state 36
    OR              shift and go to state 37
    XOR             shift and go to state 38
    IS_EQUAL        shift and go to state 39
    IS_NOT_EQUAL    shift and go to state 40
    IS_IDENTICAL    shift and go to state 41
    IS_NOT_IDENTICAL shift and go to state 42
    BOOLEAN_NOT     shift and go to state 43
    WHILE           shift and go to state 44
    FOR             shift and go to state 45
    FOREACH         shift and go to state 46
    TRY             shift and go to state 47
    LPAREN          shift and go to state 19
    FUNCTION        shift and go to state 49
    PUBLIC          shift and go to state 50
    PRIVATE         shift and go to state 51
    PROTECTED       shift and go to state 52
    STATIC          shift and go to state 53
    IF              shift and go to state 54

    cuerpo                         shift and go to state 128
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bfor                           shift and go to state 12
    bforeach                       shift and go to state 13
    btry                           shift and go to state 14
    operaciones_mat_par            shift and go to state 15
    condicion_ifelse               shift and go to state 16
    funcion_nparams                shift and go to state 21
    proteccion                     shift and go to state 22
    funcion_opreturn               shift and go to state 23
    funcion_blank                  shift and go to state 24
    condicion_if                   shift and go to state 48

state 104

    (36) condicion_elseif -> ELSEIF LPAREN . condicion RPAREN LBRACE cuerpo RBRACE
    (78) condicion -> . VARIABLE operador_logico VARIABLE
    (79) condicion -> . valor operador_logico valor
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 95
    STRING          shift and go to state 60
    NOMBRE          shift and go to state 64
    ENTERO          shift and go to state 57
    DECIMAL         shift and go to state 61

    condicion                      shift and go to state 129
    valor                          shift and go to state 96
    numero                         shift and go to state 58

state 105

    (72) funcion_nparams -> FUNCTION NOMBRE LPAREN . params_list RPAREN stc_bloque_def
    (75) funcion_opreturn -> FUNCTION NOMBRE LPAREN . params_list RPAREN stc_bloque_def
    (76) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN stc_bloque_def
    (77) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN LBRACE empty RBRACE
    (73) params_list -> . params_list COMMA param
    (74) params_list -> . param
    (70) param -> . VARIABLE
    (71) param -> . asignacion
    (54) asignacion -> . VARIABLE EQUALS valor SEMI

    RPAREN          shift and go to state 131
    VARIABLE        shift and go to state 133

    params_list                    shift and go to state 130
    param                          shift and go to state 132
    asignacion                     shift and go to state 134

state 106

    (35) condicion_if -> IF LPAREN condicion . RPAREN LBRACE cuerpo RBRACE

    RPAREN          shift and go to state 135


state 107

    (19) imprimir -> ECHO NOMBRE LBRACKET ENTERO . RBRACKET SEMI

    RBRACKET        shift and go to state 136


state 108

    (18) imprimir -> PRINT LPAREN valor RPAREN . SEMI

    SEMI            shift and go to state 137


state 109

    (52) operaciones_mat_par -> LPAREN valor operadores valor . RPAREN

    RPAREN          shift and go to state 138


state 110

    (53) operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par . RPAREN

    RPAREN          shift and go to state 139


state 111

    (54) asignacion -> VARIABLE EQUALS valor SEMI .

    $end            reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    SEMI            reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    RBRACE          reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    RPAREN          reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    COMMA           reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    ECHO            reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    PRINT           reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    VARIABLE        reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    DEFINE          reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    READLINE        reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    SUMA            reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    RESTA           reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    MULTIPLICACION  reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    DIVISION        reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    MODULO          reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    SMALLER         reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    GREATER         reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    AND             reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    OR              reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    XOR             reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_EQUAL        reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_NOT_EQUAL    reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_IDENTICAL    reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_NOT_IDENTICAL reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    BOOLEAN_NOT     reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    WHILE           reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    FOR             reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    FOREACH         reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    TRY             reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    LPAREN          reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    FUNCTION        reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    PUBLIC          reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    PRIVATE         reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    PROTECTED       reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    STATIC          reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IF              reduce using rule 54 (asignacion -> VARIABLE EQUALS valor SEMI .)


state 112

    (55) asignacion_array -> VARIABLE EQUALS array_def SEMI .

    $end            reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    RBRACE          reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    ECHO            reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    PRINT           reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    VARIABLE        reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    DEFINE          reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    READLINE        reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    SUMA            reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    RESTA           reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    MULTIPLICACION  reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    DIVISION        reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    MODULO          reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    SMALLER         reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    GREATER         reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    AND             reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    OR              reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    XOR             reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_EQUAL        reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_NOT_EQUAL    reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_IDENTICAL    reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_NOT_IDENTICAL reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    BOOLEAN_NOT     reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    WHILE           reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    FOR             reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    FOREACH         reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    TRY             reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    LPAREN          reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    FUNCTION        reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    PUBLIC          reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    PRIVATE         reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    PROTECTED       reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    STATIC          reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IF              reduce using rule 55 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)


state 113

    (95) array_def -> ARRAY LPAREN . RPAREN
    (96) array_def -> ARRAY LPAREN . array_elmnt RPAREN
    (97) array_elmnt -> . valor
    (98) array_elmnt -> . empty
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (102) empty -> .
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 140
    VARIABLE        shift and go to state 59
    STRING          shift and go to state 60
    NOMBRE          shift and go to state 64
    ENTERO          shift and go to state 57
    DECIMAL         shift and go to state 61

  ! RPAREN          [ reduce using rule 102 (empty -> .) ]

    array_elmnt                    shift and go to state 141
    valor                          shift and go to state 142
    empty                          shift and go to state 143
    numero                         shift and go to state 58

state 114

    (56) constante -> DEFINE LPAREN STRING COMMA . valor RPAREN SEMI
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 59
    STRING          shift and go to state 60
    NOMBRE          shift and go to state 64
    ENTERO          shift and go to state 57
    DECIMAL         shift and go to state 61

    valor                          shift and go to state 144
    numero                         shift and go to state 58

state 115

    (57) constante -> DEFINE LPAREN NOMBRE COMMA . ARRAY RPAREN SEMI

    ARRAY           shift and go to state 145


state 116

    (58) lectura -> READLINE LPAREN STRING RPAREN . SEMI

    SEMI            shift and go to state 146


state 117

    (59) lectura -> READLINE LPAREN RPAREN SEMI .

    $end            reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    ECHO            reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    DEFINE          reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    READLINE        reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    SUMA            reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    RESTA           reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    DIVISION        reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    MODULO          reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    SMALLER         reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    GREATER         reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    AND             reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    OR              reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    XOR             reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_EQUAL        reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    FOR             reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    FOREACH         reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    TRY             reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    LPAREN          reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    FUNCTION        reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    PUBLIC          reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    PRIVATE         reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    PROTECTED       reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    STATIC          reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IF              reduce using rule 59 (lectura -> READLINE LPAREN RPAREN SEMI .)


state 118

    (80) bwhile -> WHILE LPAREN condicion RPAREN . LBRACE stc_bloque RBRACE
    (81) bwhile -> WHILE LPAREN condicion RPAREN . COLON stc_bloque

    LBRACE          shift and go to state 147
    COLON           shift and go to state 148


state 119

    (78) condicion -> VARIABLE operador_logico . VARIABLE

    VARIABLE        shift and go to state 149


state 120

    (79) condicion -> valor operador_logico . valor
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 59
    STRING          shift and go to state 60
    NOMBRE          shift and go to state 64
    ENTERO          shift and go to state 57
    DECIMAL         shift and go to state 61

    valor                          shift and go to state 150
    numero                         shift and go to state 58

state 121

    (83) bfor -> FOR LPAREN asignacion SEMI . condicion SEMI for_incr RPAREN stc_bloque_def
    (78) condicion -> . VARIABLE operador_logico VARIABLE
    (79) condicion -> . valor operador_logico valor
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 95
    STRING          shift and go to state 60
    NOMBRE          shift and go to state 64
    ENTERO          shift and go to state 57
    DECIMAL         shift and go to state 61

    condicion                      shift and go to state 151
    valor                          shift and go to state 96
    numero                         shift and go to state 58

state 122

    (54) asignacion -> VARIABLE EQUALS . valor SEMI
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 59
    STRING          shift and go to state 60
    NOMBRE          shift and go to state 64
    ENTERO          shift and go to state 57
    DECIMAL         shift and go to state 61

    valor                          shift and go to state 87
    numero                         shift and go to state 58

state 123

    (94) bforeach -> FOREACH LPAREN VARIABLE AS . VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 152


state 124

    (87) stc_bloque_def -> LBRACE stc_bloque . RBRACE
    (84) stc_bloque -> stc_bloque . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bfor
    (12) cuerpo -> . bforeach
    (13) cuerpo -> . btry
    (14) cuerpo -> . operaciones_mat_par
    (15) cuerpo -> . condicion_ifelse
    (16) imprimir -> . ECHO valor SEMI
    (17) imprimir -> . PRINT valor SEMI
    (18) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (19) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (54) asignacion -> . VARIABLE EQUALS valor SEMI
    (55) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (64) funciones -> . funcion_nparams
    (65) funciones -> . proteccion funcion_nparams
    (66) funciones -> . funcion_opreturn
    (67) funciones -> . proteccion funcion_opreturn
    (68) funciones -> . funcion_blank
    (69) funciones -> . proteccion funcion_blank
    (56) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (57) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (58) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (59) lectura -> . READLINE LPAREN RPAREN SEMI
    (26) operadores -> . SUMA
    (27) operadores -> . RESTA
    (28) operadores -> . MULTIPLICACION
    (29) operadores -> . DIVISION
    (30) operadores -> . MODULO
    (31) operador_logico -> . SMALLER
    (32) operador_logico -> . GREATER
    (33) operador_logico -> . IS_SMALLER_OR_EQUAL
    (34) operador_logico -> . IS_GREATER_OR_EQUAL
    (42) condicion_booleana -> . AND
    (43) condicion_booleana -> . OR
    (44) condicion_booleana -> . XOR
    (45) condicion_booleana -> . IS_EQUAL
    (46) condicion_booleana -> . IS_NOT_EQUAL
    (47) condicion_booleana -> . IS_IDENTICAL
    (48) condicion_booleana -> . IS_NOT_IDENTICAL
    (49) condicion_booleana -> . BOOLEAN_NOT
    (80) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (81) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (83) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (94) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (99) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (52) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (53) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (38) condicion_ifelse -> . condicion_if
    (39) condicion_ifelse -> . condicion_if condicion_else
    (40) condicion_ifelse -> . condicion_if condicion_elseif
    (41) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (72) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (60) proteccion -> . PUBLIC
    (61) proteccion -> . PRIVATE
    (62) proteccion -> . PROTECTED
    (63) proteccion -> . STATIC
    (75) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (76) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (77) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (35) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    RBRACE          shift and go to state 153
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    VARIABLE        shift and go to state 20
    DEFINE          shift and go to state 25
    READLINE        shift and go to state 26
    SUMA            shift and go to state 27
    RESTA           shift and go to state 28
    MULTIPLICACION  shift and go to state 29
    DIVISION        shift and go to state 30
    MODULO          shift and go to state 31
    SMALLER         shift and go to state 32
    GREATER         shift and go to state 33
    IS_SMALLER_OR_EQUAL shift and go to state 34
    IS_GREATER_OR_EQUAL shift and go to state 35
    AND             shift and go to state 36
    OR              shift and go to state 37
    XOR             shift and go to state 38
    IS_EQUAL        shift and go to state 39
    IS_NOT_EQUAL    shift and go to state 40
    IS_IDENTICAL    shift and go to state 41
    IS_NOT_IDENTICAL shift and go to state 42
    BOOLEAN_NOT     shift and go to state 43
    WHILE           shift and go to state 44
    FOR             shift and go to state 45
    FOREACH         shift and go to state 46
    TRY             shift and go to state 47
    LPAREN          shift and go to state 19
    FUNCTION        shift and go to state 49
    PUBLIC          shift and go to state 50
    PRIVATE         shift and go to state 51
    PROTECTED       shift and go to state 52
    STATIC          shift and go to state 53
    IF              shift and go to state 54

    cuerpo                         shift and go to state 154
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bfor                           shift and go to state 12
    bforeach                       shift and go to state 13
    btry                           shift and go to state 14
    operaciones_mat_par            shift and go to state 15
    condicion_ifelse               shift and go to state 16
    funcion_nparams                shift and go to state 21
    proteccion                     shift and go to state 22
    funcion_opreturn               shift and go to state 23
    funcion_blank                  shift and go to state 24
    condicion_if                   shift and go to state 48

state 125

    (85) stc_bloque -> empty .

    RBRACE          reduce using rule 85 (stc_bloque -> empty .)
    ECHO            reduce using rule 85 (stc_bloque -> empty .)
    PRINT           reduce using rule 85 (stc_bloque -> empty .)
    VARIABLE        reduce using rule 85 (stc_bloque -> empty .)
    DEFINE          reduce using rule 85 (stc_bloque -> empty .)
    READLINE        reduce using rule 85 (stc_bloque -> empty .)
    SUMA            reduce using rule 85 (stc_bloque -> empty .)
    RESTA           reduce using rule 85 (stc_bloque -> empty .)
    MULTIPLICACION  reduce using rule 85 (stc_bloque -> empty .)
    DIVISION        reduce using rule 85 (stc_bloque -> empty .)
    MODULO          reduce using rule 85 (stc_bloque -> empty .)
    SMALLER         reduce using rule 85 (stc_bloque -> empty .)
    GREATER         reduce using rule 85 (stc_bloque -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 85 (stc_bloque -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 85 (stc_bloque -> empty .)
    AND             reduce using rule 85 (stc_bloque -> empty .)
    OR              reduce using rule 85 (stc_bloque -> empty .)
    XOR             reduce using rule 85 (stc_bloque -> empty .)
    IS_EQUAL        reduce using rule 85 (stc_bloque -> empty .)
    IS_NOT_EQUAL    reduce using rule 85 (stc_bloque -> empty .)
    IS_IDENTICAL    reduce using rule 85 (stc_bloque -> empty .)
    IS_NOT_IDENTICAL reduce using rule 85 (stc_bloque -> empty .)
    BOOLEAN_NOT     reduce using rule 85 (stc_bloque -> empty .)
    WHILE           reduce using rule 85 (stc_bloque -> empty .)
    FOR             reduce using rule 85 (stc_bloque -> empty .)
    FOREACH         reduce using rule 85 (stc_bloque -> empty .)
    TRY             reduce using rule 85 (stc_bloque -> empty .)
    LPAREN          reduce using rule 85 (stc_bloque -> empty .)
    FUNCTION        reduce using rule 85 (stc_bloque -> empty .)
    PUBLIC          reduce using rule 85 (stc_bloque -> empty .)
    PRIVATE         reduce using rule 85 (stc_bloque -> empty .)
    PROTECTED       reduce using rule 85 (stc_bloque -> empty .)
    STATIC          reduce using rule 85 (stc_bloque -> empty .)
    IF              reduce using rule 85 (stc_bloque -> empty .)
    $end            reduce using rule 85 (stc_bloque -> empty .)


state 126

    (86) stc_bloque -> RETURN .

    RBRACE          reduce using rule 86 (stc_bloque -> RETURN .)
    ECHO            reduce using rule 86 (stc_bloque -> RETURN .)
    PRINT           reduce using rule 86 (stc_bloque -> RETURN .)
    VARIABLE        reduce using rule 86 (stc_bloque -> RETURN .)
    DEFINE          reduce using rule 86 (stc_bloque -> RETURN .)
    READLINE        reduce using rule 86 (stc_bloque -> RETURN .)
    SUMA            reduce using rule 86 (stc_bloque -> RETURN .)
    RESTA           reduce using rule 86 (stc_bloque -> RETURN .)
    MULTIPLICACION  reduce using rule 86 (stc_bloque -> RETURN .)
    DIVISION        reduce using rule 86 (stc_bloque -> RETURN .)
    MODULO          reduce using rule 86 (stc_bloque -> RETURN .)
    SMALLER         reduce using rule 86 (stc_bloque -> RETURN .)
    GREATER         reduce using rule 86 (stc_bloque -> RETURN .)
    IS_SMALLER_OR_EQUAL reduce using rule 86 (stc_bloque -> RETURN .)
    IS_GREATER_OR_EQUAL reduce using rule 86 (stc_bloque -> RETURN .)
    AND             reduce using rule 86 (stc_bloque -> RETURN .)
    OR              reduce using rule 86 (stc_bloque -> RETURN .)
    XOR             reduce using rule 86 (stc_bloque -> RETURN .)
    IS_EQUAL        reduce using rule 86 (stc_bloque -> RETURN .)
    IS_NOT_EQUAL    reduce using rule 86 (stc_bloque -> RETURN .)
    IS_IDENTICAL    reduce using rule 86 (stc_bloque -> RETURN .)
    IS_NOT_IDENTICAL reduce using rule 86 (stc_bloque -> RETURN .)
    BOOLEAN_NOT     reduce using rule 86 (stc_bloque -> RETURN .)
    WHILE           reduce using rule 86 (stc_bloque -> RETURN .)
    FOR             reduce using rule 86 (stc_bloque -> RETURN .)
    FOREACH         reduce using rule 86 (stc_bloque -> RETURN .)
    TRY             reduce using rule 86 (stc_bloque -> RETURN .)
    LPAREN          reduce using rule 86 (stc_bloque -> RETURN .)
    FUNCTION        reduce using rule 86 (stc_bloque -> RETURN .)
    PUBLIC          reduce using rule 86 (stc_bloque -> RETURN .)
    PRIVATE         reduce using rule 86 (stc_bloque -> RETURN .)
    PROTECTED       reduce using rule 86 (stc_bloque -> RETURN .)
    STATIC          reduce using rule 86 (stc_bloque -> RETURN .)
    IF              reduce using rule 86 (stc_bloque -> RETURN .)
    $end            reduce using rule 86 (stc_bloque -> RETURN .)


state 127

    (99) btry -> TRY LBRACE stc_bloque_def RBRACE . catches
    (100) catches -> . catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def
    (101) catches -> . empty
    (102) empty -> .

    CATCH           reduce using rule 102 (empty -> .)
    $end            reduce using rule 102 (empty -> .)
    RBRACE          reduce using rule 102 (empty -> .)
    ECHO            reduce using rule 102 (empty -> .)
    PRINT           reduce using rule 102 (empty -> .)
    VARIABLE        reduce using rule 102 (empty -> .)
    DEFINE          reduce using rule 102 (empty -> .)
    READLINE        reduce using rule 102 (empty -> .)
    SUMA            reduce using rule 102 (empty -> .)
    RESTA           reduce using rule 102 (empty -> .)
    MULTIPLICACION  reduce using rule 102 (empty -> .)
    DIVISION        reduce using rule 102 (empty -> .)
    MODULO          reduce using rule 102 (empty -> .)
    SMALLER         reduce using rule 102 (empty -> .)
    GREATER         reduce using rule 102 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 102 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    XOR             reduce using rule 102 (empty -> .)
    IS_EQUAL        reduce using rule 102 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 102 (empty -> .)
    IS_IDENTICAL    reduce using rule 102 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 102 (empty -> .)
    BOOLEAN_NOT     reduce using rule 102 (empty -> .)
    WHILE           reduce using rule 102 (empty -> .)
    FOR             reduce using rule 102 (empty -> .)
    FOREACH         reduce using rule 102 (empty -> .)
    TRY             reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    FUNCTION        reduce using rule 102 (empty -> .)
    PUBLIC          reduce using rule 102 (empty -> .)
    PRIVATE         reduce using rule 102 (empty -> .)
    PROTECTED       reduce using rule 102 (empty -> .)
    STATIC          reduce using rule 102 (empty -> .)
    IF              reduce using rule 102 (empty -> .)

    catches                        shift and go to state 155
    empty                          shift and go to state 156

state 128

    (37) condicion_else -> ELSE LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 157


state 129

    (36) condicion_elseif -> ELSEIF LPAREN condicion . RPAREN LBRACE cuerpo RBRACE

    RPAREN          shift and go to state 158


state 130

    (72) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list . RPAREN stc_bloque_def
    (75) funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list . RPAREN stc_bloque_def
    (73) params_list -> params_list . COMMA param

    RPAREN          shift and go to state 159
    COMMA           shift and go to state 160


state 131

    (76) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . stc_bloque_def
    (77) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . LBRACE empty RBRACE
    (87) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 162

    stc_bloque_def                 shift and go to state 161

state 132

    (74) params_list -> param .

    RPAREN          reduce using rule 74 (params_list -> param .)
    COMMA           reduce using rule 74 (params_list -> param .)


state 133

    (70) param -> VARIABLE .
    (54) asignacion -> VARIABLE . EQUALS valor SEMI

    RPAREN          reduce using rule 70 (param -> VARIABLE .)
    COMMA           reduce using rule 70 (param -> VARIABLE .)
    EQUALS          shift and go to state 122


state 134

    (71) param -> asignacion .

    RPAREN          reduce using rule 71 (param -> asignacion .)
    COMMA           reduce using rule 71 (param -> asignacion .)


state 135

    (35) condicion_if -> IF LPAREN condicion RPAREN . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 163


state 136

    (19) imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET . SEMI

    SEMI            shift and go to state 164


state 137

    (18) imprimir -> PRINT LPAREN valor RPAREN SEMI .

    $end            reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    RBRACE          reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    ECHO            reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    PRINT           reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    VARIABLE        reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    DEFINE          reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    READLINE        reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    SUMA            reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    RESTA           reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    DIVISION        reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    MODULO          reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    SMALLER         reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    GREATER         reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    AND             reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    OR              reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    XOR             reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_EQUAL        reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    WHILE           reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    FOR             reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    FOREACH         reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    TRY             reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    LPAREN          reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    FUNCTION        reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    PUBLIC          reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    PRIVATE         reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    PROTECTED       reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    STATIC          reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IF              reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)


state 138

    (52) operaciones_mat_par -> LPAREN valor operadores valor RPAREN .

    $end            reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    RPAREN          reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    RBRACE          reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    ECHO            reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    PRINT           reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    VARIABLE        reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    DEFINE          reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    READLINE        reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    SUMA            reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    RESTA           reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    MULTIPLICACION  reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    DIVISION        reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    MODULO          reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    SMALLER         reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    GREATER         reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    AND             reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    OR              reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    XOR             reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IS_EQUAL        reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IS_NOT_EQUAL    reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IS_IDENTICAL    reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    BOOLEAN_NOT     reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    WHILE           reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    FOR             reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    FOREACH         reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    TRY             reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    LPAREN          reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    FUNCTION        reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    PUBLIC          reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    PRIVATE         reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    PROTECTED       reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    STATIC          reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IF              reduce using rule 52 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)


state 139

    (53) operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .

    $end            reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    RPAREN          reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    RBRACE          reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    ECHO            reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    PRINT           reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    VARIABLE        reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    DEFINE          reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    READLINE        reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    SUMA            reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    RESTA           reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    MULTIPLICACION  reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    DIVISION        reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    MODULO          reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    SMALLER         reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    GREATER         reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    AND             reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    OR              reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    XOR             reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IS_EQUAL        reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IS_NOT_EQUAL    reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IS_IDENTICAL    reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    BOOLEAN_NOT     reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    WHILE           reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    FOR             reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    FOREACH         reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    TRY             reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    LPAREN          reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    FUNCTION        reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    PUBLIC          reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    PRIVATE         reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    PROTECTED       reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    STATIC          reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IF              reduce using rule 53 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)


state 140

    (95) array_def -> ARRAY LPAREN RPAREN .

    SEMI            reduce using rule 95 (array_def -> ARRAY LPAREN RPAREN .)


state 141

    (96) array_def -> ARRAY LPAREN array_elmnt . RPAREN

    RPAREN          shift and go to state 165


state 142

    (97) array_elmnt -> valor .

    RPAREN          reduce using rule 97 (array_elmnt -> valor .)


state 143

    (98) array_elmnt -> empty .

    RPAREN          reduce using rule 98 (array_elmnt -> empty .)


state 144

    (56) constante -> DEFINE LPAREN STRING COMMA valor . RPAREN SEMI

    RPAREN          shift and go to state 166


state 145

    (57) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY . RPAREN SEMI

    RPAREN          shift and go to state 167


state 146

    (58) lectura -> READLINE LPAREN STRING RPAREN SEMI .

    $end            reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    RBRACE          reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    ECHO            reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    PRINT           reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    VARIABLE        reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    DEFINE          reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    READLINE        reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    SUMA            reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    RESTA           reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    DIVISION        reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    MODULO          reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    SMALLER         reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    GREATER         reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    AND             reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    OR              reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    XOR             reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_EQUAL        reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    WHILE           reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    FOR             reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    FOREACH         reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    TRY             reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    LPAREN          reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    FUNCTION        reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    PUBLIC          reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    PRIVATE         reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    PROTECTED       reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    STATIC          reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IF              reduce using rule 58 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)


state 147

    (80) bwhile -> WHILE LPAREN condicion RPAREN LBRACE . stc_bloque RBRACE
    (84) stc_bloque -> . stc_bloque cuerpo
    (85) stc_bloque -> . empty
    (86) stc_bloque -> . RETURN
    (102) empty -> .

    RETURN          shift and go to state 126
    RBRACE          reduce using rule 102 (empty -> .)
    ECHO            reduce using rule 102 (empty -> .)
    PRINT           reduce using rule 102 (empty -> .)
    VARIABLE        reduce using rule 102 (empty -> .)
    DEFINE          reduce using rule 102 (empty -> .)
    READLINE        reduce using rule 102 (empty -> .)
    SUMA            reduce using rule 102 (empty -> .)
    RESTA           reduce using rule 102 (empty -> .)
    MULTIPLICACION  reduce using rule 102 (empty -> .)
    DIVISION        reduce using rule 102 (empty -> .)
    MODULO          reduce using rule 102 (empty -> .)
    SMALLER         reduce using rule 102 (empty -> .)
    GREATER         reduce using rule 102 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 102 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    XOR             reduce using rule 102 (empty -> .)
    IS_EQUAL        reduce using rule 102 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 102 (empty -> .)
    IS_IDENTICAL    reduce using rule 102 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 102 (empty -> .)
    BOOLEAN_NOT     reduce using rule 102 (empty -> .)
    WHILE           reduce using rule 102 (empty -> .)
    FOR             reduce using rule 102 (empty -> .)
    FOREACH         reduce using rule 102 (empty -> .)
    TRY             reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    FUNCTION        reduce using rule 102 (empty -> .)
    PUBLIC          reduce using rule 102 (empty -> .)
    PRIVATE         reduce using rule 102 (empty -> .)
    PROTECTED       reduce using rule 102 (empty -> .)
    STATIC          reduce using rule 102 (empty -> .)
    IF              reduce using rule 102 (empty -> .)

    stc_bloque                     shift and go to state 168
    empty                          shift and go to state 125

state 148

    (81) bwhile -> WHILE LPAREN condicion RPAREN COLON . stc_bloque
    (84) stc_bloque -> . stc_bloque cuerpo
    (85) stc_bloque -> . empty
    (86) stc_bloque -> . RETURN
    (102) empty -> .

    RETURN          shift and go to state 126
    ECHO            reduce using rule 102 (empty -> .)
    PRINT           reduce using rule 102 (empty -> .)
    VARIABLE        reduce using rule 102 (empty -> .)
    DEFINE          reduce using rule 102 (empty -> .)
    READLINE        reduce using rule 102 (empty -> .)
    SUMA            reduce using rule 102 (empty -> .)
    RESTA           reduce using rule 102 (empty -> .)
    MULTIPLICACION  reduce using rule 102 (empty -> .)
    DIVISION        reduce using rule 102 (empty -> .)
    MODULO          reduce using rule 102 (empty -> .)
    SMALLER         reduce using rule 102 (empty -> .)
    GREATER         reduce using rule 102 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 102 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    XOR             reduce using rule 102 (empty -> .)
    IS_EQUAL        reduce using rule 102 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 102 (empty -> .)
    IS_IDENTICAL    reduce using rule 102 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 102 (empty -> .)
    BOOLEAN_NOT     reduce using rule 102 (empty -> .)
    WHILE           reduce using rule 102 (empty -> .)
    FOR             reduce using rule 102 (empty -> .)
    FOREACH         reduce using rule 102 (empty -> .)
    TRY             reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    FUNCTION        reduce using rule 102 (empty -> .)
    PUBLIC          reduce using rule 102 (empty -> .)
    PRIVATE         reduce using rule 102 (empty -> .)
    PROTECTED       reduce using rule 102 (empty -> .)
    STATIC          reduce using rule 102 (empty -> .)
    IF              reduce using rule 102 (empty -> .)
    $end            reduce using rule 102 (empty -> .)
    RBRACE          reduce using rule 102 (empty -> .)

    stc_bloque                     shift and go to state 169
    empty                          shift and go to state 125

state 149

    (78) condicion -> VARIABLE operador_logico VARIABLE .

    RPAREN          reduce using rule 78 (condicion -> VARIABLE operador_logico VARIABLE .)
    SEMI            reduce using rule 78 (condicion -> VARIABLE operador_logico VARIABLE .)


state 150

    (79) condicion -> valor operador_logico valor .

    RPAREN          reduce using rule 79 (condicion -> valor operador_logico valor .)
    SEMI            reduce using rule 79 (condicion -> valor operador_logico valor .)


state 151

    (83) bfor -> FOR LPAREN asignacion SEMI condicion . SEMI for_incr RPAREN stc_bloque_def

    SEMI            shift and go to state 170


state 152

    (94) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE . RPAREN stc_bloque_def

    RPAREN          shift and go to state 171


state 153

    (87) stc_bloque_def -> LBRACE stc_bloque RBRACE .

    RBRACE          reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    $end            reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    ECHO            reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    PRINT           reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    VARIABLE        reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    DEFINE          reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    READLINE        reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    SUMA            reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    RESTA           reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    MULTIPLICACION  reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    DIVISION        reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    MODULO          reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    SMALLER         reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    GREATER         reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    AND             reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    OR              reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    XOR             reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_EQUAL        reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_NOT_EQUAL    reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_IDENTICAL    reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    BOOLEAN_NOT     reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    WHILE           reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    FOR             reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    FOREACH         reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    TRY             reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    LPAREN          reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    FUNCTION        reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    PUBLIC          reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    PRIVATE         reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    PROTECTED       reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    STATIC          reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IF              reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    CATCH           reduce using rule 87 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)


state 154

    (84) stc_bloque -> stc_bloque cuerpo .

    RBRACE          reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    ECHO            reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    PRINT           reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    VARIABLE        reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    DEFINE          reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    READLINE        reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    SUMA            reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    RESTA           reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    MULTIPLICACION  reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    DIVISION        reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    MODULO          reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    SMALLER         reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    GREATER         reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    IS_SMALLER_OR_EQUAL reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    IS_GREATER_OR_EQUAL reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    AND             reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    OR              reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    XOR             reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    IS_EQUAL        reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    IS_NOT_EQUAL    reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    IS_IDENTICAL    reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    IS_NOT_IDENTICAL reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    BOOLEAN_NOT     reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    WHILE           reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    FOR             reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    FOREACH         reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    TRY             reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    LPAREN          reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    FUNCTION        reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    PUBLIC          reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    PRIVATE         reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    PROTECTED       reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    STATIC          reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    IF              reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)
    $end            reduce using rule 84 (stc_bloque -> stc_bloque cuerpo .)


state 155

    (99) btry -> TRY LBRACE stc_bloque_def RBRACE catches .
    (100) catches -> catches . CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def

    $end            reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    RBRACE          reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    ECHO            reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    PRINT           reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    VARIABLE        reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    DEFINE          reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    READLINE        reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    SUMA            reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    RESTA           reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    MULTIPLICACION  reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    DIVISION        reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    MODULO          reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    SMALLER         reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    GREATER         reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_SMALLER_OR_EQUAL reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_GREATER_OR_EQUAL reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    AND             reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    OR              reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    XOR             reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_EQUAL        reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_NOT_EQUAL    reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_IDENTICAL    reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_NOT_IDENTICAL reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    BOOLEAN_NOT     reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    WHILE           reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    FOR             reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    FOREACH         reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    TRY             reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    LPAREN          reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    FUNCTION        reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    PUBLIC          reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    PRIVATE         reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    PROTECTED       reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    STATIC          reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IF              reduce using rule 99 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    CATCH           shift and go to state 172


state 156

    (101) catches -> empty .

    CATCH           reduce using rule 101 (catches -> empty .)
    $end            reduce using rule 101 (catches -> empty .)
    RBRACE          reduce using rule 101 (catches -> empty .)
    ECHO            reduce using rule 101 (catches -> empty .)
    PRINT           reduce using rule 101 (catches -> empty .)
    VARIABLE        reduce using rule 101 (catches -> empty .)
    DEFINE          reduce using rule 101 (catches -> empty .)
    READLINE        reduce using rule 101 (catches -> empty .)
    SUMA            reduce using rule 101 (catches -> empty .)
    RESTA           reduce using rule 101 (catches -> empty .)
    MULTIPLICACION  reduce using rule 101 (catches -> empty .)
    DIVISION        reduce using rule 101 (catches -> empty .)
    MODULO          reduce using rule 101 (catches -> empty .)
    SMALLER         reduce using rule 101 (catches -> empty .)
    GREATER         reduce using rule 101 (catches -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 101 (catches -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 101 (catches -> empty .)
    AND             reduce using rule 101 (catches -> empty .)
    OR              reduce using rule 101 (catches -> empty .)
    XOR             reduce using rule 101 (catches -> empty .)
    IS_EQUAL        reduce using rule 101 (catches -> empty .)
    IS_NOT_EQUAL    reduce using rule 101 (catches -> empty .)
    IS_IDENTICAL    reduce using rule 101 (catches -> empty .)
    IS_NOT_IDENTICAL reduce using rule 101 (catches -> empty .)
    BOOLEAN_NOT     reduce using rule 101 (catches -> empty .)
    WHILE           reduce using rule 101 (catches -> empty .)
    FOR             reduce using rule 101 (catches -> empty .)
    FOREACH         reduce using rule 101 (catches -> empty .)
    TRY             reduce using rule 101 (catches -> empty .)
    LPAREN          reduce using rule 101 (catches -> empty .)
    FUNCTION        reduce using rule 101 (catches -> empty .)
    PUBLIC          reduce using rule 101 (catches -> empty .)
    PRIVATE         reduce using rule 101 (catches -> empty .)
    PROTECTED       reduce using rule 101 (catches -> empty .)
    STATIC          reduce using rule 101 (catches -> empty .)
    IF              reduce using rule 101 (catches -> empty .)


state 157

    (37) condicion_else -> ELSE LBRACE cuerpo RBRACE .

    $end            reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    ECHO            reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    PRINT           reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    VARIABLE        reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    DEFINE          reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    READLINE        reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    SUMA            reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    RESTA           reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    MULTIPLICACION  reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    DIVISION        reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    MODULO          reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    SMALLER         reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    GREATER         reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    AND             reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    OR              reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    XOR             reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IS_EQUAL        reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IS_NOT_EQUAL    reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IS_IDENTICAL    reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    BOOLEAN_NOT     reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    WHILE           reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    FOR             reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    FOREACH         reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    TRY             reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    LPAREN          reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    FUNCTION        reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    PUBLIC          reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    PRIVATE         reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    PROTECTED       reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    STATIC          reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IF              reduce using rule 37 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)


state 158

    (36) condicion_elseif -> ELSEIF LPAREN condicion RPAREN . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 173


state 159

    (72) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN . stc_bloque_def
    (75) funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN . stc_bloque_def
    (87) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 100

    stc_bloque_def                 shift and go to state 174

state 160

    (73) params_list -> params_list COMMA . param
    (70) param -> . VARIABLE
    (71) param -> . asignacion
    (54) asignacion -> . VARIABLE EQUALS valor SEMI

    VARIABLE        shift and go to state 133

    param                          shift and go to state 175
    asignacion                     shift and go to state 134

state 161

    (76) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .

    $end            reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    ECHO            reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    PRINT           reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    VARIABLE        reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    DEFINE          reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    READLINE        reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    SUMA            reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    RESTA           reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    MULTIPLICACION  reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    DIVISION        reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    MODULO          reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    SMALLER         reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    GREATER         reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IS_SMALLER_OR_EQUAL reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IS_GREATER_OR_EQUAL reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    AND             reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    OR              reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    XOR             reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IS_EQUAL        reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IS_NOT_EQUAL    reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IS_IDENTICAL    reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IS_NOT_IDENTICAL reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    BOOLEAN_NOT     reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    WHILE           reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    FOR             reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    FOREACH         reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    TRY             reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    LPAREN          reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    FUNCTION        reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    PUBLIC          reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    PRIVATE         reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    PROTECTED       reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    STATIC          reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IF              reduce using rule 76 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)


state 162

    (77) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE . empty RBRACE
    (87) stc_bloque_def -> LBRACE . stc_bloque RBRACE
    (102) empty -> .
    (84) stc_bloque -> . stc_bloque cuerpo
    (85) stc_bloque -> . empty
    (86) stc_bloque -> . RETURN

    RBRACE          reduce using rule 102 (empty -> .)
    ECHO            reduce using rule 102 (empty -> .)
    PRINT           reduce using rule 102 (empty -> .)
    VARIABLE        reduce using rule 102 (empty -> .)
    DEFINE          reduce using rule 102 (empty -> .)
    READLINE        reduce using rule 102 (empty -> .)
    SUMA            reduce using rule 102 (empty -> .)
    RESTA           reduce using rule 102 (empty -> .)
    MULTIPLICACION  reduce using rule 102 (empty -> .)
    DIVISION        reduce using rule 102 (empty -> .)
    MODULO          reduce using rule 102 (empty -> .)
    SMALLER         reduce using rule 102 (empty -> .)
    GREATER         reduce using rule 102 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 102 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    XOR             reduce using rule 102 (empty -> .)
    IS_EQUAL        reduce using rule 102 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 102 (empty -> .)
    IS_IDENTICAL    reduce using rule 102 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 102 (empty -> .)
    BOOLEAN_NOT     reduce using rule 102 (empty -> .)
    WHILE           reduce using rule 102 (empty -> .)
    FOR             reduce using rule 102 (empty -> .)
    FOREACH         reduce using rule 102 (empty -> .)
    TRY             reduce using rule 102 (empty -> .)
    LPAREN          reduce using rule 102 (empty -> .)
    FUNCTION        reduce using rule 102 (empty -> .)
    PUBLIC          reduce using rule 102 (empty -> .)
    PRIVATE         reduce using rule 102 (empty -> .)
    PROTECTED       reduce using rule 102 (empty -> .)
    STATIC          reduce using rule 102 (empty -> .)
    IF              reduce using rule 102 (empty -> .)
    RETURN          shift and go to state 126

    empty                          shift and go to state 176
    stc_bloque                     shift and go to state 124

state 163

    (35) condicion_if -> IF LPAREN condicion RPAREN LBRACE . cuerpo RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bfor
    (12) cuerpo -> . bforeach
    (13) cuerpo -> . btry
    (14) cuerpo -> . operaciones_mat_par
    (15) cuerpo -> . condicion_ifelse
    (16) imprimir -> . ECHO valor SEMI
    (17) imprimir -> . PRINT valor SEMI
    (18) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (19) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (54) asignacion -> . VARIABLE EQUALS valor SEMI
    (55) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (64) funciones -> . funcion_nparams
    (65) funciones -> . proteccion funcion_nparams
    (66) funciones -> . funcion_opreturn
    (67) funciones -> . proteccion funcion_opreturn
    (68) funciones -> . funcion_blank
    (69) funciones -> . proteccion funcion_blank
    (56) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (57) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (58) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (59) lectura -> . READLINE LPAREN RPAREN SEMI
    (26) operadores -> . SUMA
    (27) operadores -> . RESTA
    (28) operadores -> . MULTIPLICACION
    (29) operadores -> . DIVISION
    (30) operadores -> . MODULO
    (31) operador_logico -> . SMALLER
    (32) operador_logico -> . GREATER
    (33) operador_logico -> . IS_SMALLER_OR_EQUAL
    (34) operador_logico -> . IS_GREATER_OR_EQUAL
    (42) condicion_booleana -> . AND
    (43) condicion_booleana -> . OR
    (44) condicion_booleana -> . XOR
    (45) condicion_booleana -> . IS_EQUAL
    (46) condicion_booleana -> . IS_NOT_EQUAL
    (47) condicion_booleana -> . IS_IDENTICAL
    (48) condicion_booleana -> . IS_NOT_IDENTICAL
    (49) condicion_booleana -> . BOOLEAN_NOT
    (80) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (81) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (83) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (94) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (99) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (52) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (53) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (38) condicion_ifelse -> . condicion_if
    (39) condicion_ifelse -> . condicion_if condicion_else
    (40) condicion_ifelse -> . condicion_if condicion_elseif
    (41) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (72) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (60) proteccion -> . PUBLIC
    (61) proteccion -> . PRIVATE
    (62) proteccion -> . PROTECTED
    (63) proteccion -> . STATIC
    (75) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (76) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (77) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (35) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    VARIABLE        shift and go to state 20
    DEFINE          shift and go to state 25
    READLINE        shift and go to state 26
    SUMA            shift and go to state 27
    RESTA           shift and go to state 28
    MULTIPLICACION  shift and go to state 29
    DIVISION        shift and go to state 30
    MODULO          shift and go to state 31
    SMALLER         shift and go to state 32
    GREATER         shift and go to state 33
    IS_SMALLER_OR_EQUAL shift and go to state 34
    IS_GREATER_OR_EQUAL shift and go to state 35
    AND             shift and go to state 36
    OR              shift and go to state 37
    XOR             shift and go to state 38
    IS_EQUAL        shift and go to state 39
    IS_NOT_EQUAL    shift and go to state 40
    IS_IDENTICAL    shift and go to state 41
    IS_NOT_IDENTICAL shift and go to state 42
    BOOLEAN_NOT     shift and go to state 43
    WHILE           shift and go to state 44
    FOR             shift and go to state 45
    FOREACH         shift and go to state 46
    TRY             shift and go to state 47
    LPAREN          shift and go to state 19
    FUNCTION        shift and go to state 49
    PUBLIC          shift and go to state 50
    PRIVATE         shift and go to state 51
    PROTECTED       shift and go to state 52
    STATIC          shift and go to state 53
    IF              shift and go to state 54

    cuerpo                         shift and go to state 177
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bfor                           shift and go to state 12
    bforeach                       shift and go to state 13
    btry                           shift and go to state 14
    operaciones_mat_par            shift and go to state 15
    condicion_ifelse               shift and go to state 16
    funcion_nparams                shift and go to state 21
    proteccion                     shift and go to state 22
    funcion_opreturn               shift and go to state 23
    funcion_blank                  shift and go to state 24
    condicion_if                   shift and go to state 48

state 164

    (19) imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .

    $end            reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    RBRACE          reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    ECHO            reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    PRINT           reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    VARIABLE        reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    DEFINE          reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    READLINE        reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    SUMA            reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    RESTA           reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    MULTIPLICACION  reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    DIVISION        reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    MODULO          reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    SMALLER         reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    GREATER         reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    AND             reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    OR              reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    XOR             reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_EQUAL        reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_NOT_EQUAL    reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_IDENTICAL    reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_NOT_IDENTICAL reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    BOOLEAN_NOT     reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    WHILE           reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    FOR             reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    FOREACH         reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    TRY             reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    LPAREN          reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    FUNCTION        reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    PUBLIC          reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    PRIVATE         reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    PROTECTED       reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    STATIC          reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IF              reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)


state 165

    (96) array_def -> ARRAY LPAREN array_elmnt RPAREN .

    SEMI            reduce using rule 96 (array_def -> ARRAY LPAREN array_elmnt RPAREN .)


state 166

    (56) constante -> DEFINE LPAREN STRING COMMA valor RPAREN . SEMI

    SEMI            shift and go to state 178


state 167

    (57) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN . SEMI

    SEMI            shift and go to state 179


state 168

    (80) bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque . RBRACE
    (84) stc_bloque -> stc_bloque . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bfor
    (12) cuerpo -> . bforeach
    (13) cuerpo -> . btry
    (14) cuerpo -> . operaciones_mat_par
    (15) cuerpo -> . condicion_ifelse
    (16) imprimir -> . ECHO valor SEMI
    (17) imprimir -> . PRINT valor SEMI
    (18) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (19) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (54) asignacion -> . VARIABLE EQUALS valor SEMI
    (55) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (64) funciones -> . funcion_nparams
    (65) funciones -> . proteccion funcion_nparams
    (66) funciones -> . funcion_opreturn
    (67) funciones -> . proteccion funcion_opreturn
    (68) funciones -> . funcion_blank
    (69) funciones -> . proteccion funcion_blank
    (56) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (57) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (58) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (59) lectura -> . READLINE LPAREN RPAREN SEMI
    (26) operadores -> . SUMA
    (27) operadores -> . RESTA
    (28) operadores -> . MULTIPLICACION
    (29) operadores -> . DIVISION
    (30) operadores -> . MODULO
    (31) operador_logico -> . SMALLER
    (32) operador_logico -> . GREATER
    (33) operador_logico -> . IS_SMALLER_OR_EQUAL
    (34) operador_logico -> . IS_GREATER_OR_EQUAL
    (42) condicion_booleana -> . AND
    (43) condicion_booleana -> . OR
    (44) condicion_booleana -> . XOR
    (45) condicion_booleana -> . IS_EQUAL
    (46) condicion_booleana -> . IS_NOT_EQUAL
    (47) condicion_booleana -> . IS_IDENTICAL
    (48) condicion_booleana -> . IS_NOT_IDENTICAL
    (49) condicion_booleana -> . BOOLEAN_NOT
    (80) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (81) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (83) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (94) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (99) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (52) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (53) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (38) condicion_ifelse -> . condicion_if
    (39) condicion_ifelse -> . condicion_if condicion_else
    (40) condicion_ifelse -> . condicion_if condicion_elseif
    (41) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (72) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (60) proteccion -> . PUBLIC
    (61) proteccion -> . PRIVATE
    (62) proteccion -> . PROTECTED
    (63) proteccion -> . STATIC
    (75) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (76) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (77) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (35) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    RBRACE          shift and go to state 180
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    VARIABLE        shift and go to state 20
    DEFINE          shift and go to state 25
    READLINE        shift and go to state 26
    SUMA            shift and go to state 27
    RESTA           shift and go to state 28
    MULTIPLICACION  shift and go to state 29
    DIVISION        shift and go to state 30
    MODULO          shift and go to state 31
    SMALLER         shift and go to state 32
    GREATER         shift and go to state 33
    IS_SMALLER_OR_EQUAL shift and go to state 34
    IS_GREATER_OR_EQUAL shift and go to state 35
    AND             shift and go to state 36
    OR              shift and go to state 37
    XOR             shift and go to state 38
    IS_EQUAL        shift and go to state 39
    IS_NOT_EQUAL    shift and go to state 40
    IS_IDENTICAL    shift and go to state 41
    IS_NOT_IDENTICAL shift and go to state 42
    BOOLEAN_NOT     shift and go to state 43
    WHILE           shift and go to state 44
    FOR             shift and go to state 45
    FOREACH         shift and go to state 46
    TRY             shift and go to state 47
    LPAREN          shift and go to state 19
    FUNCTION        shift and go to state 49
    PUBLIC          shift and go to state 50
    PRIVATE         shift and go to state 51
    PROTECTED       shift and go to state 52
    STATIC          shift and go to state 53
    IF              shift and go to state 54

    cuerpo                         shift and go to state 154
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bfor                           shift and go to state 12
    bforeach                       shift and go to state 13
    btry                           shift and go to state 14
    operaciones_mat_par            shift and go to state 15
    condicion_ifelse               shift and go to state 16
    funcion_nparams                shift and go to state 21
    proteccion                     shift and go to state 22
    funcion_opreturn               shift and go to state 23
    funcion_blank                  shift and go to state 24
    condicion_if                   shift and go to state 48

state 169

    (81) bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .
    (84) stc_bloque -> stc_bloque . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bfor
    (12) cuerpo -> . bforeach
    (13) cuerpo -> . btry
    (14) cuerpo -> . operaciones_mat_par
    (15) cuerpo -> . condicion_ifelse
    (16) imprimir -> . ECHO valor SEMI
    (17) imprimir -> . PRINT valor SEMI
    (18) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (19) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (54) asignacion -> . VARIABLE EQUALS valor SEMI
    (55) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (64) funciones -> . funcion_nparams
    (65) funciones -> . proteccion funcion_nparams
    (66) funciones -> . funcion_opreturn
    (67) funciones -> . proteccion funcion_opreturn
    (68) funciones -> . funcion_blank
    (69) funciones -> . proteccion funcion_blank
    (56) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (57) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (58) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (59) lectura -> . READLINE LPAREN RPAREN SEMI
    (26) operadores -> . SUMA
    (27) operadores -> . RESTA
    (28) operadores -> . MULTIPLICACION
    (29) operadores -> . DIVISION
    (30) operadores -> . MODULO
    (31) operador_logico -> . SMALLER
    (32) operador_logico -> . GREATER
    (33) operador_logico -> . IS_SMALLER_OR_EQUAL
    (34) operador_logico -> . IS_GREATER_OR_EQUAL
    (42) condicion_booleana -> . AND
    (43) condicion_booleana -> . OR
    (44) condicion_booleana -> . XOR
    (45) condicion_booleana -> . IS_EQUAL
    (46) condicion_booleana -> . IS_NOT_EQUAL
    (47) condicion_booleana -> . IS_IDENTICAL
    (48) condicion_booleana -> . IS_NOT_IDENTICAL
    (49) condicion_booleana -> . BOOLEAN_NOT
    (80) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (81) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (83) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (94) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (99) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (52) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (53) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (38) condicion_ifelse -> . condicion_if
    (39) condicion_ifelse -> . condicion_if condicion_else
    (40) condicion_ifelse -> . condicion_if condicion_elseif
    (41) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (72) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (60) proteccion -> . PUBLIC
    (61) proteccion -> . PRIVATE
    (62) proteccion -> . PROTECTED
    (63) proteccion -> . STATIC
    (75) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (76) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (77) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (35) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for READLINE resolved as shift
  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for IS_SMALLER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for IS_GREATER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for IS_EQUAL resolved as shift
  ! shift/reduce conflict for IS_NOT_EQUAL resolved as shift
  ! shift/reduce conflict for IS_IDENTICAL resolved as shift
  ! shift/reduce conflict for IS_NOT_IDENTICAL resolved as shift
  ! shift/reduce conflict for BOOLEAN_NOT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .)
    RBRACE          reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .)
    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    VARIABLE        shift and go to state 20
    DEFINE          shift and go to state 25
    READLINE        shift and go to state 26
    SUMA            shift and go to state 27
    RESTA           shift and go to state 28
    MULTIPLICACION  shift and go to state 29
    DIVISION        shift and go to state 30
    MODULO          shift and go to state 31
    SMALLER         shift and go to state 32
    GREATER         shift and go to state 33
    IS_SMALLER_OR_EQUAL shift and go to state 34
    IS_GREATER_OR_EQUAL shift and go to state 35
    AND             shift and go to state 36
    OR              shift and go to state 37
    XOR             shift and go to state 38
    IS_EQUAL        shift and go to state 39
    IS_NOT_EQUAL    shift and go to state 40
    IS_IDENTICAL    shift and go to state 41
    IS_NOT_IDENTICAL shift and go to state 42
    BOOLEAN_NOT     shift and go to state 43
    WHILE           shift and go to state 44
    FOR             shift and go to state 45
    FOREACH         shift and go to state 46
    TRY             shift and go to state 47
    LPAREN          shift and go to state 19
    FUNCTION        shift and go to state 49
    PUBLIC          shift and go to state 50
    PRIVATE         shift and go to state 51
    PROTECTED       shift and go to state 52
    STATIC          shift and go to state 53
    IF              shift and go to state 54

  ! ECHO            [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! PRINT           [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! VARIABLE        [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! DEFINE          [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! READLINE        [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! SUMA            [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! RESTA           [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! MULTIPLICACION  [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! DIVISION        [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! MODULO          [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! SMALLER         [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! GREATER         [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! AND             [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! OR              [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! XOR             [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IS_EQUAL        [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IS_IDENTICAL    [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! BOOLEAN_NOT     [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! WHILE           [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! FOR             [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! FOREACH         [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! TRY             [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! LPAREN          [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! FUNCTION        [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! PUBLIC          [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! PRIVATE         [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! PROTECTED       [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! STATIC          [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IF              [ reduce using rule 81 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]

    cuerpo                         shift and go to state 154
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bfor                           shift and go to state 12
    bforeach                       shift and go to state 13
    btry                           shift and go to state 14
    operaciones_mat_par            shift and go to state 15
    condicion_ifelse               shift and go to state 16
    funcion_nparams                shift and go to state 21
    proteccion                     shift and go to state 22
    funcion_opreturn               shift and go to state 23
    funcion_blank                  shift and go to state 24
    condicion_if                   shift and go to state 48

state 170

    (83) bfor -> FOR LPAREN asignacion SEMI condicion SEMI . for_incr RPAREN stc_bloque_def
    (88) for_incr -> . VARIABLE SUMA SUMA
    (89) for_incr -> . SUMA SUMA VARIABLE
    (90) for_incr -> . VARIABLE RESTA RESTA
    (91) for_incr -> . RESTA RESTA VARIABLE
    (92) for_incr -> . VARIABLE SUMA EQUALS numero
    (93) for_incr -> . VARIABLE RESTA EQUALS numero

    VARIABLE        shift and go to state 182
    SUMA            shift and go to state 183
    RESTA           shift and go to state 184

    for_incr                       shift and go to state 181

state 171

    (94) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN . stc_bloque_def
    (87) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 100

    stc_bloque_def                 shift and go to state 185

state 172

    (100) catches -> catches CATCH . LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def

    LPAREN          shift and go to state 186


state 173

    (36) condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE . cuerpo RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bfor
    (12) cuerpo -> . bforeach
    (13) cuerpo -> . btry
    (14) cuerpo -> . operaciones_mat_par
    (15) cuerpo -> . condicion_ifelse
    (16) imprimir -> . ECHO valor SEMI
    (17) imprimir -> . PRINT valor SEMI
    (18) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (19) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (54) asignacion -> . VARIABLE EQUALS valor SEMI
    (55) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (64) funciones -> . funcion_nparams
    (65) funciones -> . proteccion funcion_nparams
    (66) funciones -> . funcion_opreturn
    (67) funciones -> . proteccion funcion_opreturn
    (68) funciones -> . funcion_blank
    (69) funciones -> . proteccion funcion_blank
    (56) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (57) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (58) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (59) lectura -> . READLINE LPAREN RPAREN SEMI
    (26) operadores -> . SUMA
    (27) operadores -> . RESTA
    (28) operadores -> . MULTIPLICACION
    (29) operadores -> . DIVISION
    (30) operadores -> . MODULO
    (31) operador_logico -> . SMALLER
    (32) operador_logico -> . GREATER
    (33) operador_logico -> . IS_SMALLER_OR_EQUAL
    (34) operador_logico -> . IS_GREATER_OR_EQUAL
    (42) condicion_booleana -> . AND
    (43) condicion_booleana -> . OR
    (44) condicion_booleana -> . XOR
    (45) condicion_booleana -> . IS_EQUAL
    (46) condicion_booleana -> . IS_NOT_EQUAL
    (47) condicion_booleana -> . IS_IDENTICAL
    (48) condicion_booleana -> . IS_NOT_IDENTICAL
    (49) condicion_booleana -> . BOOLEAN_NOT
    (80) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (81) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (83) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (94) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (99) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (52) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (53) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (38) condicion_ifelse -> . condicion_if
    (39) condicion_ifelse -> . condicion_if condicion_else
    (40) condicion_ifelse -> . condicion_if condicion_elseif
    (41) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (72) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (60) proteccion -> . PUBLIC
    (61) proteccion -> . PRIVATE
    (62) proteccion -> . PROTECTED
    (63) proteccion -> . STATIC
    (75) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (76) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (77) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (35) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    ECHO            shift and go to state 17
    PRINT           shift and go to state 18
    VARIABLE        shift and go to state 20
    DEFINE          shift and go to state 25
    READLINE        shift and go to state 26
    SUMA            shift and go to state 27
    RESTA           shift and go to state 28
    MULTIPLICACION  shift and go to state 29
    DIVISION        shift and go to state 30
    MODULO          shift and go to state 31
    SMALLER         shift and go to state 32
    GREATER         shift and go to state 33
    IS_SMALLER_OR_EQUAL shift and go to state 34
    IS_GREATER_OR_EQUAL shift and go to state 35
    AND             shift and go to state 36
    OR              shift and go to state 37
    XOR             shift and go to state 38
    IS_EQUAL        shift and go to state 39
    IS_NOT_EQUAL    shift and go to state 40
    IS_IDENTICAL    shift and go to state 41
    IS_NOT_IDENTICAL shift and go to state 42
    BOOLEAN_NOT     shift and go to state 43
    WHILE           shift and go to state 44
    FOR             shift and go to state 45
    FOREACH         shift and go to state 46
    TRY             shift and go to state 47
    LPAREN          shift and go to state 19
    FUNCTION        shift and go to state 49
    PUBLIC          shift and go to state 50
    PRIVATE         shift and go to state 51
    PROTECTED       shift and go to state 52
    STATIC          shift and go to state 53
    IF              shift and go to state 54

    cuerpo                         shift and go to state 187
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bfor                           shift and go to state 12
    bforeach                       shift and go to state 13
    btry                           shift and go to state 14
    operaciones_mat_par            shift and go to state 15
    condicion_ifelse               shift and go to state 16
    funcion_nparams                shift and go to state 21
    proteccion                     shift and go to state 22
    funcion_opreturn               shift and go to state 23
    funcion_blank                  shift and go to state 24
    condicion_if                   shift and go to state 48

state 174

    (72) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .
    (75) funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .

  ! reduce/reduce conflict for $end resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for RBRACE resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for ECHO resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for PRINT resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for DEFINE resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for READLINE resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for SUMA resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for RESTA resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for MULTIPLICACION resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for DIVISION resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for MODULO resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for SMALLER resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for GREATER resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IS_SMALLER_OR_EQUAL resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IS_GREATER_OR_EQUAL resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for AND resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for OR resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for XOR resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IS_EQUAL resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IS_NOT_EQUAL resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IS_IDENTICAL resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IS_NOT_IDENTICAL resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for BOOLEAN_NOT resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for WHILE resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for FOR resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for FOREACH resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for TRY resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for LPAREN resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for STATIC resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IF resolved using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    $end            reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    ECHO            reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    PRINT           reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    VARIABLE        reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    DEFINE          reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    READLINE        reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    SUMA            reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    RESTA           reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    MULTIPLICACION  reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    DIVISION        reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    MODULO          reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    SMALLER         reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    GREATER         reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_SMALLER_OR_EQUAL reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_GREATER_OR_EQUAL reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    AND             reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    OR              reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    XOR             reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_EQUAL        reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_NOT_EQUAL    reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_IDENTICAL    reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_NOT_IDENTICAL reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    BOOLEAN_NOT     reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    WHILE           reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    FOR             reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    FOREACH         reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    TRY             reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    LPAREN          reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    FUNCTION        reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    PUBLIC          reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    PRIVATE         reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    PROTECTED       reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    STATIC          reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IF              reduce using rule 72 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)

  ! $end            [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! RBRACE          [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! ECHO            [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! PRINT           [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! VARIABLE        [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! DEFINE          [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! READLINE        [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! SUMA            [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! RESTA           [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! MULTIPLICACION  [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! DIVISION        [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! MODULO          [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! SMALLER         [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! GREATER         [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! AND             [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! OR              [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! XOR             [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IS_EQUAL        [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IS_IDENTICAL    [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! BOOLEAN_NOT     [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! WHILE           [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! FOR             [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! FOREACH         [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! TRY             [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! LPAREN          [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! FUNCTION        [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! PUBLIC          [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! PRIVATE         [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! PROTECTED       [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! STATIC          [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IF              [ reduce using rule 75 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]


state 175

    (73) params_list -> params_list COMMA param .

    RPAREN          reduce using rule 73 (params_list -> params_list COMMA param .)
    COMMA           reduce using rule 73 (params_list -> params_list COMMA param .)


state 176

    (77) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty . RBRACE
    (85) stc_bloque -> empty .

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 188
    ECHO            reduce using rule 85 (stc_bloque -> empty .)
    PRINT           reduce using rule 85 (stc_bloque -> empty .)
    VARIABLE        reduce using rule 85 (stc_bloque -> empty .)
    DEFINE          reduce using rule 85 (stc_bloque -> empty .)
    READLINE        reduce using rule 85 (stc_bloque -> empty .)
    SUMA            reduce using rule 85 (stc_bloque -> empty .)
    RESTA           reduce using rule 85 (stc_bloque -> empty .)
    MULTIPLICACION  reduce using rule 85 (stc_bloque -> empty .)
    DIVISION        reduce using rule 85 (stc_bloque -> empty .)
    MODULO          reduce using rule 85 (stc_bloque -> empty .)
    SMALLER         reduce using rule 85 (stc_bloque -> empty .)
    GREATER         reduce using rule 85 (stc_bloque -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 85 (stc_bloque -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 85 (stc_bloque -> empty .)
    AND             reduce using rule 85 (stc_bloque -> empty .)
    OR              reduce using rule 85 (stc_bloque -> empty .)
    XOR             reduce using rule 85 (stc_bloque -> empty .)
    IS_EQUAL        reduce using rule 85 (stc_bloque -> empty .)
    IS_NOT_EQUAL    reduce using rule 85 (stc_bloque -> empty .)
    IS_IDENTICAL    reduce using rule 85 (stc_bloque -> empty .)
    IS_NOT_IDENTICAL reduce using rule 85 (stc_bloque -> empty .)
    BOOLEAN_NOT     reduce using rule 85 (stc_bloque -> empty .)
    WHILE           reduce using rule 85 (stc_bloque -> empty .)
    FOR             reduce using rule 85 (stc_bloque -> empty .)
    FOREACH         reduce using rule 85 (stc_bloque -> empty .)
    TRY             reduce using rule 85 (stc_bloque -> empty .)
    LPAREN          reduce using rule 85 (stc_bloque -> empty .)
    FUNCTION        reduce using rule 85 (stc_bloque -> empty .)
    PUBLIC          reduce using rule 85 (stc_bloque -> empty .)
    PRIVATE         reduce using rule 85 (stc_bloque -> empty .)
    PROTECTED       reduce using rule 85 (stc_bloque -> empty .)
    STATIC          reduce using rule 85 (stc_bloque -> empty .)
    IF              reduce using rule 85 (stc_bloque -> empty .)

  ! RBRACE          [ reduce using rule 85 (stc_bloque -> empty .) ]


state 177

    (35) condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 189


state 178

    (56) constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .

    $end            reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    RBRACE          reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    ECHO            reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    PRINT           reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    VARIABLE        reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    DEFINE          reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    READLINE        reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    SUMA            reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    RESTA           reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    DIVISION        reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    MODULO          reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    SMALLER         reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    GREATER         reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    AND             reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    OR              reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    XOR             reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_EQUAL        reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    WHILE           reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    FOR             reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    FOREACH         reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    TRY             reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    LPAREN          reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    FUNCTION        reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    PUBLIC          reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    PRIVATE         reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    PROTECTED       reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    STATIC          reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IF              reduce using rule 56 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)


state 179

    (57) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .

    $end            reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    RBRACE          reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    ECHO            reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    PRINT           reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    VARIABLE        reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    DEFINE          reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    READLINE        reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    SUMA            reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    RESTA           reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    DIVISION        reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    MODULO          reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    SMALLER         reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    GREATER         reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    AND             reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    OR              reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    XOR             reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_EQUAL        reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    WHILE           reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    FOR             reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    FOREACH         reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    TRY             reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    LPAREN          reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    FUNCTION        reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    PUBLIC          reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    PRIVATE         reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    PROTECTED       reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    STATIC          reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IF              reduce using rule 57 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)


state 180

    (80) bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .

    $end            reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    RBRACE          reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    ECHO            reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    PRINT           reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    VARIABLE        reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    DEFINE          reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    READLINE        reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    SUMA            reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    RESTA           reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    MULTIPLICACION  reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    DIVISION        reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    MODULO          reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    SMALLER         reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    GREATER         reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    AND             reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    OR              reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    XOR             reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_EQUAL        reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_NOT_EQUAL    reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_IDENTICAL    reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    BOOLEAN_NOT     reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    WHILE           reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    FOR             reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    FOREACH         reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    TRY             reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    LPAREN          reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    FUNCTION        reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    PUBLIC          reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    PRIVATE         reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    PROTECTED       reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    STATIC          reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IF              reduce using rule 80 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)


state 181

    (83) bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr . RPAREN stc_bloque_def

    RPAREN          shift and go to state 190


state 182

    (88) for_incr -> VARIABLE . SUMA SUMA
    (90) for_incr -> VARIABLE . RESTA RESTA
    (92) for_incr -> VARIABLE . SUMA EQUALS numero
    (93) for_incr -> VARIABLE . RESTA EQUALS numero

    SUMA            shift and go to state 191
    RESTA           shift and go to state 192


state 183

    (89) for_incr -> SUMA . SUMA VARIABLE

    SUMA            shift and go to state 193


state 184

    (91) for_incr -> RESTA . RESTA VARIABLE

    RESTA           shift and go to state 194


state 185

    (94) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .

    $end            reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    ECHO            reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    PRINT           reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    VARIABLE        reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    DEFINE          reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    READLINE        reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    SUMA            reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    RESTA           reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    MULTIPLICACION  reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    DIVISION        reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    MODULO          reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    SMALLER         reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    GREATER         reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_SMALLER_OR_EQUAL reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_GREATER_OR_EQUAL reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    AND             reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    OR              reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    XOR             reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_EQUAL        reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_NOT_EQUAL    reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_IDENTICAL    reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_NOT_IDENTICAL reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    BOOLEAN_NOT     reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    WHILE           reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    FOR             reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    FOREACH         reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    TRY             reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    LPAREN          reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    FUNCTION        reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    PUBLIC          reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    PRIVATE         reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    PROTECTED       reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    STATIC          reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IF              reduce using rule 94 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)


state 186

    (100) catches -> catches CATCH LPAREN . NOMBRE VARIABLE RPAREN stc_bloque_def

    NOMBRE          shift and go to state 195


state 187

    (36) condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 196


state 188

    (77) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .

    $end            reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    RBRACE          reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    ECHO            reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    PRINT           reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    VARIABLE        reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    DEFINE          reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    READLINE        reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    SUMA            reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    RESTA           reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    MULTIPLICACION  reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    DIVISION        reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    MODULO          reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    SMALLER         reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    GREATER         reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    AND             reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    OR              reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    XOR             reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IS_EQUAL        reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IS_NOT_EQUAL    reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IS_IDENTICAL    reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    BOOLEAN_NOT     reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    WHILE           reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    FOR             reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    FOREACH         reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    TRY             reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    LPAREN          reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    FUNCTION        reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    PUBLIC          reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    PRIVATE         reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    PROTECTED       reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    STATIC          reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IF              reduce using rule 77 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)


state 189

    (35) condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .

    ELSE            reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    ELSEIF          reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    $end            reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    ECHO            reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PRINT           reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    VARIABLE        reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DEFINE          reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    READLINE        reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SUMA            reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RESTA           reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    MULTIPLICACION  reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DIVISION        reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    MODULO          reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SMALLER         reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    GREATER         reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    AND             reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    OR              reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    XOR             reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_EQUAL        reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_NOT_EQUAL    reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_IDENTICAL    reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    BOOLEAN_NOT     reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    WHILE           reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FOR             reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FOREACH         reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    TRY             reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    LPAREN          reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FUNCTION        reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PUBLIC          reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PRIVATE         reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PROTECTED       reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    STATIC          reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IF              reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)


state 190

    (83) bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN . stc_bloque_def
    (87) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 100

    stc_bloque_def                 shift and go to state 197

state 191

    (88) for_incr -> VARIABLE SUMA . SUMA
    (92) for_incr -> VARIABLE SUMA . EQUALS numero

    SUMA            shift and go to state 198
    EQUALS          shift and go to state 199


state 192

    (90) for_incr -> VARIABLE RESTA . RESTA
    (93) for_incr -> VARIABLE RESTA . EQUALS numero

    RESTA           shift and go to state 200
    EQUALS          shift and go to state 201


state 193

    (89) for_incr -> SUMA SUMA . VARIABLE

    VARIABLE        shift and go to state 202


state 194

    (91) for_incr -> RESTA RESTA . VARIABLE

    VARIABLE        shift and go to state 203


state 195

    (100) catches -> catches CATCH LPAREN NOMBRE . VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 204


state 196

    (36) condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .

    ELSE            reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    $end            reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    ECHO            reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PRINT           reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    VARIABLE        reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DEFINE          reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    READLINE        reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SUMA            reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RESTA           reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    MULTIPLICACION  reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DIVISION        reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    MODULO          reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SMALLER         reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    GREATER         reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    AND             reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    OR              reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    XOR             reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_EQUAL        reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_NOT_EQUAL    reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_IDENTICAL    reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    BOOLEAN_NOT     reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    WHILE           reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FOR             reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FOREACH         reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    TRY             reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    LPAREN          reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FUNCTION        reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PUBLIC          reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PRIVATE         reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PROTECTED       reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    STATIC          reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IF              reduce using rule 36 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)


state 197

    (83) bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .

    $end            reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    ECHO            reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    PRINT           reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    VARIABLE        reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    DEFINE          reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    READLINE        reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    SUMA            reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    RESTA           reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    MULTIPLICACION  reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    DIVISION        reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    MODULO          reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    SMALLER         reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    GREATER         reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_SMALLER_OR_EQUAL reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_GREATER_OR_EQUAL reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    AND             reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    OR              reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    XOR             reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_EQUAL        reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_NOT_EQUAL    reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_IDENTICAL    reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_NOT_IDENTICAL reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    BOOLEAN_NOT     reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    WHILE           reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    FOR             reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    FOREACH         reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    TRY             reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    LPAREN          reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    FUNCTION        reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    PUBLIC          reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    PRIVATE         reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    PROTECTED       reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    STATIC          reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IF              reduce using rule 83 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)


state 198

    (88) for_incr -> VARIABLE SUMA SUMA .

    RPAREN          reduce using rule 88 (for_incr -> VARIABLE SUMA SUMA .)


state 199

    (92) for_incr -> VARIABLE SUMA EQUALS . numero
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    ENTERO          shift and go to state 57
    DECIMAL         shift and go to state 61

    numero                         shift and go to state 205

state 200

    (90) for_incr -> VARIABLE RESTA RESTA .

    RPAREN          reduce using rule 90 (for_incr -> VARIABLE RESTA RESTA .)


state 201

    (93) for_incr -> VARIABLE RESTA EQUALS . numero
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    ENTERO          shift and go to state 57
    DECIMAL         shift and go to state 61

    numero                         shift and go to state 206

state 202

    (89) for_incr -> SUMA SUMA VARIABLE .

    RPAREN          reduce using rule 89 (for_incr -> SUMA SUMA VARIABLE .)


state 203

    (91) for_incr -> RESTA RESTA VARIABLE .

    RPAREN          reduce using rule 91 (for_incr -> RESTA RESTA VARIABLE .)


state 204

    (100) catches -> catches CATCH LPAREN NOMBRE VARIABLE . RPAREN stc_bloque_def

    RPAREN          shift and go to state 207


state 205

    (92) for_incr -> VARIABLE SUMA EQUALS numero .

    RPAREN          reduce using rule 92 (for_incr -> VARIABLE SUMA EQUALS numero .)


state 206

    (93) for_incr -> VARIABLE RESTA EQUALS numero .

    RPAREN          reduce using rule 93 (for_incr -> VARIABLE RESTA EQUALS numero .)


state 207

    (100) catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN . stc_bloque_def
    (87) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 100

    stc_bloque_def                 shift and go to state 208

state 208

    (100) catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .

    CATCH           reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    $end            reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    ECHO            reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    PRINT           reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    VARIABLE        reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    DEFINE          reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    READLINE        reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    SUMA            reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    RESTA           reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    MULTIPLICACION  reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    DIVISION        reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    MODULO          reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    SMALLER         reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    GREATER         reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_SMALLER_OR_EQUAL reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_GREATER_OR_EQUAL reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    AND             reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    OR              reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    XOR             reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_EQUAL        reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_NOT_EQUAL    reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_IDENTICAL    reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_NOT_IDENTICAL reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    BOOLEAN_NOT     reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    WHILE           reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    FOR             reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    FOREACH         reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    TRY             reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    LPAREN          reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    FUNCTION        reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    PUBLIC          reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    PRIVATE         reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    PROTECTED       reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    STATIC          reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IF              reduce using rule 100 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SMALLER in state 95 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 95 resolved as shift
WARNING: shift/reduce conflict for IS_SMALLER_OR_EQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for IS_GREATER_OR_EQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 113 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 169 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 169 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 169 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 169 resolved as shift
WARNING: shift/reduce conflict for READLINE in state 169 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 169 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 169 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 169 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 169 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 169 resolved as shift
WARNING: shift/reduce conflict for SMALLER in state 169 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 169 resolved as shift
WARNING: shift/reduce conflict for IS_SMALLER_OR_EQUAL in state 169 resolved as shift
WARNING: shift/reduce conflict for IS_GREATER_OR_EQUAL in state 169 resolved as shift
WARNING: shift/reduce conflict for AND in state 169 resolved as shift
WARNING: shift/reduce conflict for OR in state 169 resolved as shift
WARNING: shift/reduce conflict for XOR in state 169 resolved as shift
WARNING: shift/reduce conflict for IS_EQUAL in state 169 resolved as shift
WARNING: shift/reduce conflict for IS_NOT_EQUAL in state 169 resolved as shift
WARNING: shift/reduce conflict for IS_IDENTICAL in state 169 resolved as shift
WARNING: shift/reduce conflict for IS_NOT_IDENTICAL in state 169 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN_NOT in state 169 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 169 resolved as shift
WARNING: shift/reduce conflict for FOR in state 169 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 169 resolved as shift
WARNING: shift/reduce conflict for TRY in state 169 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 169 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 169 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 169 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 169 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 169 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 169 resolved as shift
WARNING: shift/reduce conflict for IF in state 169 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 176 resolved as shift
WARNING: reduce/reduce conflict in state 174 resolved using rule (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def)
WARNING: rejected rule (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def) in state 174
WARNING: Rule (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def) is never reduced
