Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL
    CLOSE_TAG
    COMENTARIOS
    CONCAT
    DIV_EQUAL
    DOC_COMENTARIOS
    DOUBLE
    FALSE
    FLOAT
    FWRITE
    INT
    NOT
    OPEN_TAG
    TRIM
    TRUE

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> imprimir
Rule 2     cuerpo -> asignacion
Rule 3     cuerpo -> asignacion_array
Rule 4     cuerpo -> funciones
Rule 5     cuerpo -> constante
Rule 6     cuerpo -> lectura
Rule 7     cuerpo -> operadores
Rule 8     cuerpo -> operador_logico
Rule 9     cuerpo -> condicion_booleana
Rule 10    cuerpo -> bwhile
Rule 11    cuerpo -> bdo
Rule 12    cuerpo -> bfor
Rule 13    cuerpo -> bforeach
Rule 14    cuerpo -> btry
Rule 15    cuerpo -> operaciones_mat
Rule 16    cuerpo -> condicion_ifelse
Rule 17    cuerpo -> bswitch
Rule 18    cuerpo -> bgoto
Rule 19    cuerpo -> bcolas
Rule 20    cuerpo -> bpila
Rule 21    cuerpo -> incrementos_mat
Rule 22    cuerpo -> bcortes
Rule 23    cuerpo -> brand
Rule 24    imprimir -> ECHO valor SEMI
Rule 25    imprimir -> PRINT valor SEMI
Rule 26    imprimir -> PRINT LPAREN valor RPAREN SEMI
Rule 27    imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
Rule 28    valor -> numero
Rule 29    valor -> VARIABLE
Rule 30    valor -> STRING
Rule 31    valor -> NOMBRE
Rule 32    numero -> ENTERO
Rule 33    numero -> DECIMAL
Rule 34    operadores -> SUMA
Rule 35    operadores -> RESTA
Rule 36    operadores -> MULTIPLICACION
Rule 37    operadores -> DIVISION
Rule 38    operadores -> MODULO
Rule 39    operador_logico -> SMALLER
Rule 40    operador_logico -> GREATER
Rule 41    operador_logico -> IS_SMALLER_OR_EQUAL
Rule 42    operador_logico -> IS_GREATER_OR_EQUAL
Rule 43    incrementos_mat -> MINUS_EQUAL
Rule 44    incrementos_mat -> MOD_EQUAL
Rule 45    incrementos_mat -> MUL_EQUAL
Rule 46    incrementos_mat -> PLUS_EQUAL
Rule 47    condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
Rule 48    condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
Rule 49    condicion_else -> ELSE LBRACE cuerpo RBRACE
Rule 50    condicion_ifelse -> condicion_if
Rule 51    condicion_ifelse -> condicion_if condicion_else
Rule 52    condicion_ifelse -> condicion_if condicion_elseif
Rule 53    condicion_ifelse -> condicion_if condicion_elseif condicion_else
Rule 54    condicion_booleana -> AND
Rule 55    condicion_booleana -> OR
Rule 56    condicion_booleana -> XOR
Rule 57    condicion_booleana -> IS_EQUAL
Rule 58    condicion_booleana -> IS_NOT_EQUAL
Rule 59    condicion_booleana -> IS_IDENTICAL
Rule 60    condicion_booleana -> IS_NOT_IDENTICAL
Rule 61    condicion_booleana -> BOOLEAN_NOT
Rule 62    operaciones_mat -> valor operadores valor
Rule 63    operaciones_mat -> valor operadores operaciones_mat
Rule 64    operaciones_mat -> operaciones_mat_par
Rule 65    operaciones_mat_par -> LPAREN valor operadores valor RPAREN
Rule 66    operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN
Rule 67    operaciones_mat_par -> valor operadores operaciones_mat_par
Rule 68    asignacion -> VARIABLE EQUALS valor SEMI
Rule 69    asignacion -> VAR asignacion
Rule 70    asignacion -> proteccion asignacion
Rule 71    asignacion_array -> VARIABLE EQUALS array_def SEMI
Rule 72    constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI
Rule 73    constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
Rule 74    lectura -> READLINE LPAREN STRING RPAREN SEMI
Rule 75    lectura -> READLINE LPAREN RPAREN SEMI
Rule 76    brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
Rule 77    proteccion -> PUBLIC
Rule 78    proteccion -> PRIVATE
Rule 79    proteccion -> PROTECTED
Rule 80    proteccion -> STATIC
Rule 81    funciones -> funcion_nparams
Rule 82    funciones -> proteccion funcion_nparams
Rule 83    funciones -> funcion_blank
Rule 84    funciones -> proteccion funcion_blank
Rule 85    funciones -> funcion_void
Rule 86    param -> VARIABLE
Rule 87    param -> asignacion
Rule 88    funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
Rule 89    params_list -> params_list COMMA param
Rule 90    params_list -> param
Rule 91    funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
Rule 92    funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
Rule 93    funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
Rule 94    condicion -> VARIABLE operador_logico VARIABLE
Rule 95    condicion -> valor operador_logico valor
Rule 96    condicion -> VARIABLE operador_logico valor
Rule 97    bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
Rule 98    bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque
Rule 99    bdo -> DO LBRACE cuerpo RBRACE bwhile
Rule 100   bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
Rule 101   innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI
Rule 102   innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch
Rule 103   bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
Rule 104   bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
Rule 105   stc_bloque -> stc_bloque SEMI cuerpo
Rule 106   stc_bloque -> empty
Rule 107   stc_bloque -> RETURN
Rule 108   stc_bloque -> RETURN NULL
Rule 109   stc_bloque_def -> LBRACE stc_bloque RBRACE
Rule 110   for_incr -> VARIABLE SUMA SUMA
Rule 111   for_incr -> SUMA SUMA VARIABLE
Rule 112   for_incr -> VARIABLE RESTA RESTA
Rule 113   for_incr -> RESTA RESTA VARIABLE
Rule 114   for_incr -> VARIABLE SUMA EQUALS numero
Rule 115   for_incr -> VARIABLE RESTA EQUALS numero
Rule 116   bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
Rule 117   array_def -> ARRAY LPAREN RPAREN
Rule 118   array_def -> ARRAY LPAREN array_elmnt RPAREN
Rule 119   array_elmnt -> array_elmnt COMMA valor
Rule 120   array_elmnt -> valor
Rule 121   btry -> TRY LBRACE stc_bloque_def RBRACE catches
Rule 122   catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def
Rule 123   catches -> empty
Rule 124   empty -> <empty>
Rule 125   bgoto -> GOTO NOMBRE SEMI
Rule 126   bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
Rule 127   bcortes -> EXIT SEMI
Rule 128   bcortes -> BREAK SEMI
Rule 129   bcortes -> DEFAULT SEMI
Rule 130   bcortes -> CONTINUE SEMI

Terminals, with rules where they appear

AND                  : 54
ARRAY                : 73 117 118
AS                   : 116
BOOL                 : 
BOOLEAN_NOT          : 61
BREAK                : 101 102 128
CASE                 : 101 102
CATCH                : 122
CLOSE_TAG            : 
COLON                : 91 98 101 102
COMENTARIOS          : 
COMMA                : 72 73 76 89 119
CONCAT               : 
CONTINUE             : 130
DECIMAL              : 33
DEFAULT              : 129
DEFINE               : 72 73
DIVISION             : 37
DIV_EQUAL            : 
DO                   : 99
DOC_COMENTARIOS      : 
DOUBLE               : 
ECHO                 : 24 27
ELSE                 : 49
ELSEIF               : 48
ENTERO               : 27 32 76 76 101 102
EQUALS               : 68 71 103 114 115 126
EXIT                 : 127
FALSE                : 
FLOAT                : 
FOR                  : 104
FOREACH              : 116
FUNCTION             : 88 91 92 93
FWRITE               : 
GOTO                 : 125
GREATER              : 40
IF                   : 47
INT                  : 
IS_EQUAL             : 57
IS_GREATER_OR_EQUAL  : 42
IS_IDENTICAL         : 59
IS_NOT_EQUAL         : 58
IS_NOT_IDENTICAL     : 60
IS_SMALLER_OR_EQUAL  : 41
LBRACE               : 47 48 49 91 93 97 99 100 109 121
LBRACKET             : 27
LPAREN               : 26 47 48 65 66 72 73 74 75 76 88 91 92 93 97 98 100 103 104 116 117 118 122 126
MINUS_EQUAL          : 43
MODULO               : 38
MOD_EQUAL            : 44
MULTIPLICACION       : 36
MUL_EQUAL            : 45
NEW                  : 103 126
NOMBRE               : 27 31 73 88 91 92 93 122 125
NOT                  : 
NULL                 : 108
OPEN_TAG             : 
OR                   : 55
PLUS_EQUAL           : 46
PRINT                : 25 26
PRIVATE              : 78
PROTECTED            : 79
PUBLIC               : 77
RAND                 : 76
RBRACE               : 47 48 49 91 93 97 99 100 109 121
RBRACKET             : 27
READLINE             : 74 75
RESTA                : 35 112 112 113 113 115
RETURN               : 107 108
RPAREN               : 26 47 48 65 66 72 73 74 75 76 88 91 92 93 97 98 100 103 104 116 117 118 122 126
SEMI                 : 24 25 26 27 68 71 72 73 74 75 76 101 102 103 104 105 125 126 127 128 129 130
SMALLER              : 39
SPLQUEUE             : 103
SPLSTACK             : 126
STATIC               : 80
STRING               : 30 72 74
SUMA                 : 34 110 110 111 111 114
SWITCH               : 100
TRIM                 : 
TRUE                 : 
TRY                  : 121
VAR                  : 69
VARIABLE             : 29 68 71 86 94 94 96 100 103 110 111 112 113 114 115 116 116 122 126
VOID                 : 91
WHILE                : 97 98
XOR                  : 56
error                : 

Nonterminals, with rules where they appear

array_def            : 71
array_elmnt          : 118 119
asignacion           : 2 69 70 87 104
asignacion_array     : 3
bcolas               : 19
bcortes              : 22
bdo                  : 11
bfor                 : 12
bforeach             : 13
bgoto                : 18
bpila                : 20
brand                : 23
bswitch              : 17
btry                 : 14
bwhile               : 10 99
catches              : 121 122
condicion            : 47 48 97 98 104
condicion_booleana   : 9
condicion_else       : 51 53
condicion_elseif     : 52 53
condicion_if         : 50 51 52 53
condicion_ifelse     : 16
constante            : 5
cuerpo               : 47 48 49 99 101 102 105 0
empty                : 91 93 106 123
for_incr             : 104
funcion_blank        : 83 84
funcion_nparams      : 81 82
funcion_void         : 85
funciones            : 4
imprimir             : 1
incrementos_mat      : 21
innerSwitch          : 100 102
lectura              : 6
numero               : 28 114 115
operaciones_mat      : 15 63
operaciones_mat_par  : 64 66 67
operador_logico      : 8 94 95 96
operadores           : 7 62 63 65 66 67
param                : 89 90
params_list          : 88 89
proteccion           : 70 82 84
stc_bloque           : 97 98 105 109
stc_bloque_def       : 88 92 104 116 121 122
valor                : 24 25 26 62 62 63 65 65 66 67 68 72 95 95 96 119 120

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (19) cuerpo -> . bcolas
    (20) cuerpo -> . bpila
    (21) cuerpo -> . incrementos_mat
    (22) cuerpo -> . bcortes
    (23) cuerpo -> . brand
    (24) imprimir -> . ECHO valor SEMI
    (25) imprimir -> . PRINT valor SEMI
    (26) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (27) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (68) asignacion -> . VARIABLE EQUALS valor SEMI
    (69) asignacion -> . VAR asignacion
    (70) asignacion -> . proteccion asignacion
    (71) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (81) funciones -> . funcion_nparams
    (82) funciones -> . proteccion funcion_nparams
    (83) funciones -> . funcion_blank
    (84) funciones -> . proteccion funcion_blank
    (85) funciones -> . funcion_void
    (72) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (73) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (74) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (75) lectura -> . READLINE LPAREN RPAREN SEMI
    (34) operadores -> . SUMA
    (35) operadores -> . RESTA
    (36) operadores -> . MULTIPLICACION
    (37) operadores -> . DIVISION
    (38) operadores -> . MODULO
    (39) operador_logico -> . SMALLER
    (40) operador_logico -> . GREATER
    (41) operador_logico -> . IS_SMALLER_OR_EQUAL
    (42) operador_logico -> . IS_GREATER_OR_EQUAL
    (54) condicion_booleana -> . AND
    (55) condicion_booleana -> . OR
    (56) condicion_booleana -> . XOR
    (57) condicion_booleana -> . IS_EQUAL
    (58) condicion_booleana -> . IS_NOT_EQUAL
    (59) condicion_booleana -> . IS_IDENTICAL
    (60) condicion_booleana -> . IS_NOT_IDENTICAL
    (61) condicion_booleana -> . BOOLEAN_NOT
    (97) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (98) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (99) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (104) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (116) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (121) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (62) operaciones_mat -> . valor operadores valor
    (63) operaciones_mat -> . valor operadores operaciones_mat
    (64) operaciones_mat -> . operaciones_mat_par
    (50) condicion_ifelse -> . condicion_if
    (51) condicion_ifelse -> . condicion_if condicion_else
    (52) condicion_ifelse -> . condicion_if condicion_elseif
    (53) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (100) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (125) bgoto -> . GOTO NOMBRE SEMI
    (103) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (126) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (43) incrementos_mat -> . MINUS_EQUAL
    (44) incrementos_mat -> . MOD_EQUAL
    (45) incrementos_mat -> . MUL_EQUAL
    (46) incrementos_mat -> . PLUS_EQUAL
    (127) bcortes -> . EXIT SEMI
    (128) bcortes -> . BREAK SEMI
    (129) bcortes -> . DEFAULT SEMI
    (130) bcortes -> . CONTINUE SEMI
    (76) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (77) proteccion -> . PUBLIC
    (78) proteccion -> . PRIVATE
    (79) proteccion -> . PROTECTED
    (80) proteccion -> . STATIC
    (88) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (92) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (93) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (91) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (65) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (66) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (67) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (47) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    ECHO            shift and go to state 25
    PRINT           shift and go to state 27
    VARIABLE        shift and go to state 31
    VAR             shift and go to state 32
    DEFINE          shift and go to state 37
    READLINE        shift and go to state 39
    SUMA            shift and go to state 40
    RESTA           shift and go to state 41
    MULTIPLICACION  shift and go to state 42
    DIVISION        shift and go to state 43
    MODULO          shift and go to state 44
    SMALLER         shift and go to state 45
    GREATER         shift and go to state 46
    IS_SMALLER_OR_EQUAL shift and go to state 47
    IS_GREATER_OR_EQUAL shift and go to state 48
    AND             shift and go to state 49
    OR              shift and go to state 50
    XOR             shift and go to state 51
    IS_EQUAL        shift and go to state 52
    IS_NOT_EQUAL    shift and go to state 53
    IS_IDENTICAL    shift and go to state 54
    IS_NOT_IDENTICAL shift and go to state 55
    BOOLEAN_NOT     shift and go to state 56
    WHILE           shift and go to state 57
    DO              shift and go to state 58
    FOR             shift and go to state 59
    FOREACH         shift and go to state 60
    TRY             shift and go to state 61
    SWITCH          shift and go to state 64
    GOTO            shift and go to state 65
    MINUS_EQUAL     shift and go to state 66
    MOD_EQUAL       shift and go to state 67
    MUL_EQUAL       shift and go to state 68
    PLUS_EQUAL      shift and go to state 69
    EXIT            shift and go to state 70
    BREAK           shift and go to state 71
    DEFAULT         shift and go to state 72
    CONTINUE        shift and go to state 73
    RAND            shift and go to state 74
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78
    FUNCTION        shift and go to state 79
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    LPAREN          shift and go to state 28
    IF              shift and go to state 81
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    cuerpo                         shift and go to state 1
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat                shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    bcolas                         shift and go to state 20
    bpila                          shift and go to state 21
    incrementos_mat                shift and go to state 22
    bcortes                        shift and go to state 23
    brand                          shift and go to state 24
    valor                          shift and go to state 26
    proteccion                     shift and go to state 33
    funcion_nparams                shift and go to state 34
    funcion_blank                  shift and go to state 35
    funcion_void                   shift and go to state 36
    operaciones_mat_par            shift and go to state 62
    condicion_if                   shift and go to state 63
    numero                         shift and go to state 80

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> imprimir .

    $end            reduce using rule 1 (cuerpo -> imprimir .)
    RBRACE          reduce using rule 1 (cuerpo -> imprimir .)
    SEMI            reduce using rule 1 (cuerpo -> imprimir .)
    BREAK           reduce using rule 1 (cuerpo -> imprimir .)


state 3

    (2) cuerpo -> asignacion .

    $end            reduce using rule 2 (cuerpo -> asignacion .)
    RBRACE          reduce using rule 2 (cuerpo -> asignacion .)
    SEMI            reduce using rule 2 (cuerpo -> asignacion .)
    BREAK           reduce using rule 2 (cuerpo -> asignacion .)


state 4

    (3) cuerpo -> asignacion_array .

    $end            reduce using rule 3 (cuerpo -> asignacion_array .)
    RBRACE          reduce using rule 3 (cuerpo -> asignacion_array .)
    SEMI            reduce using rule 3 (cuerpo -> asignacion_array .)
    BREAK           reduce using rule 3 (cuerpo -> asignacion_array .)


state 5

    (4) cuerpo -> funciones .

    $end            reduce using rule 4 (cuerpo -> funciones .)
    RBRACE          reduce using rule 4 (cuerpo -> funciones .)
    SEMI            reduce using rule 4 (cuerpo -> funciones .)
    BREAK           reduce using rule 4 (cuerpo -> funciones .)


state 6

    (5) cuerpo -> constante .

    $end            reduce using rule 5 (cuerpo -> constante .)
    RBRACE          reduce using rule 5 (cuerpo -> constante .)
    SEMI            reduce using rule 5 (cuerpo -> constante .)
    BREAK           reduce using rule 5 (cuerpo -> constante .)


state 7

    (6) cuerpo -> lectura .

    $end            reduce using rule 6 (cuerpo -> lectura .)
    RBRACE          reduce using rule 6 (cuerpo -> lectura .)
    SEMI            reduce using rule 6 (cuerpo -> lectura .)
    BREAK           reduce using rule 6 (cuerpo -> lectura .)


state 8

    (7) cuerpo -> operadores .

    $end            reduce using rule 7 (cuerpo -> operadores .)
    RBRACE          reduce using rule 7 (cuerpo -> operadores .)
    SEMI            reduce using rule 7 (cuerpo -> operadores .)
    BREAK           reduce using rule 7 (cuerpo -> operadores .)


state 9

    (8) cuerpo -> operador_logico .

    $end            reduce using rule 8 (cuerpo -> operador_logico .)
    RBRACE          reduce using rule 8 (cuerpo -> operador_logico .)
    SEMI            reduce using rule 8 (cuerpo -> operador_logico .)
    BREAK           reduce using rule 8 (cuerpo -> operador_logico .)


state 10

    (9) cuerpo -> condicion_booleana .

    $end            reduce using rule 9 (cuerpo -> condicion_booleana .)
    RBRACE          reduce using rule 9 (cuerpo -> condicion_booleana .)
    SEMI            reduce using rule 9 (cuerpo -> condicion_booleana .)
    BREAK           reduce using rule 9 (cuerpo -> condicion_booleana .)


state 11

    (10) cuerpo -> bwhile .

    $end            reduce using rule 10 (cuerpo -> bwhile .)
    RBRACE          reduce using rule 10 (cuerpo -> bwhile .)
    SEMI            reduce using rule 10 (cuerpo -> bwhile .)
    BREAK           reduce using rule 10 (cuerpo -> bwhile .)


state 12

    (11) cuerpo -> bdo .

    $end            reduce using rule 11 (cuerpo -> bdo .)
    RBRACE          reduce using rule 11 (cuerpo -> bdo .)
    SEMI            reduce using rule 11 (cuerpo -> bdo .)
    BREAK           reduce using rule 11 (cuerpo -> bdo .)


state 13

    (12) cuerpo -> bfor .

    $end            reduce using rule 12 (cuerpo -> bfor .)
    RBRACE          reduce using rule 12 (cuerpo -> bfor .)
    SEMI            reduce using rule 12 (cuerpo -> bfor .)
    BREAK           reduce using rule 12 (cuerpo -> bfor .)


state 14

    (13) cuerpo -> bforeach .

    $end            reduce using rule 13 (cuerpo -> bforeach .)
    RBRACE          reduce using rule 13 (cuerpo -> bforeach .)
    SEMI            reduce using rule 13 (cuerpo -> bforeach .)
    BREAK           reduce using rule 13 (cuerpo -> bforeach .)


state 15

    (14) cuerpo -> btry .

    $end            reduce using rule 14 (cuerpo -> btry .)
    RBRACE          reduce using rule 14 (cuerpo -> btry .)
    SEMI            reduce using rule 14 (cuerpo -> btry .)
    BREAK           reduce using rule 14 (cuerpo -> btry .)


state 16

    (15) cuerpo -> operaciones_mat .

    $end            reduce using rule 15 (cuerpo -> operaciones_mat .)
    RBRACE          reduce using rule 15 (cuerpo -> operaciones_mat .)
    SEMI            reduce using rule 15 (cuerpo -> operaciones_mat .)
    BREAK           reduce using rule 15 (cuerpo -> operaciones_mat .)


state 17

    (16) cuerpo -> condicion_ifelse .

    $end            reduce using rule 16 (cuerpo -> condicion_ifelse .)
    RBRACE          reduce using rule 16 (cuerpo -> condicion_ifelse .)
    SEMI            reduce using rule 16 (cuerpo -> condicion_ifelse .)
    BREAK           reduce using rule 16 (cuerpo -> condicion_ifelse .)


state 18

    (17) cuerpo -> bswitch .

    $end            reduce using rule 17 (cuerpo -> bswitch .)
    RBRACE          reduce using rule 17 (cuerpo -> bswitch .)
    SEMI            reduce using rule 17 (cuerpo -> bswitch .)
    BREAK           reduce using rule 17 (cuerpo -> bswitch .)


state 19

    (18) cuerpo -> bgoto .

    $end            reduce using rule 18 (cuerpo -> bgoto .)
    RBRACE          reduce using rule 18 (cuerpo -> bgoto .)
    SEMI            reduce using rule 18 (cuerpo -> bgoto .)
    BREAK           reduce using rule 18 (cuerpo -> bgoto .)


state 20

    (19) cuerpo -> bcolas .

    $end            reduce using rule 19 (cuerpo -> bcolas .)
    RBRACE          reduce using rule 19 (cuerpo -> bcolas .)
    SEMI            reduce using rule 19 (cuerpo -> bcolas .)
    BREAK           reduce using rule 19 (cuerpo -> bcolas .)


state 21

    (20) cuerpo -> bpila .

    $end            reduce using rule 20 (cuerpo -> bpila .)
    RBRACE          reduce using rule 20 (cuerpo -> bpila .)
    SEMI            reduce using rule 20 (cuerpo -> bpila .)
    BREAK           reduce using rule 20 (cuerpo -> bpila .)


state 22

    (21) cuerpo -> incrementos_mat .

    $end            reduce using rule 21 (cuerpo -> incrementos_mat .)
    RBRACE          reduce using rule 21 (cuerpo -> incrementos_mat .)
    SEMI            reduce using rule 21 (cuerpo -> incrementos_mat .)
    BREAK           reduce using rule 21 (cuerpo -> incrementos_mat .)


state 23

    (22) cuerpo -> bcortes .

    $end            reduce using rule 22 (cuerpo -> bcortes .)
    RBRACE          reduce using rule 22 (cuerpo -> bcortes .)
    SEMI            reduce using rule 22 (cuerpo -> bcortes .)
    BREAK           reduce using rule 22 (cuerpo -> bcortes .)


state 24

    (23) cuerpo -> brand .

    $end            reduce using rule 23 (cuerpo -> brand .)
    RBRACE          reduce using rule 23 (cuerpo -> brand .)
    SEMI            reduce using rule 23 (cuerpo -> brand .)
    BREAK           reduce using rule 23 (cuerpo -> brand .)


state 25

    (24) imprimir -> ECHO . valor SEMI
    (27) imprimir -> ECHO . NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    NOMBRE          shift and go to state 84
    VARIABLE        shift and go to state 85
    STRING          shift and go to state 38
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    valor                          shift and go to state 83
    numero                         shift and go to state 80

state 26

    (62) operaciones_mat -> valor . operadores valor
    (63) operaciones_mat -> valor . operadores operaciones_mat
    (67) operaciones_mat_par -> valor . operadores operaciones_mat_par
    (34) operadores -> . SUMA
    (35) operadores -> . RESTA
    (36) operadores -> . MULTIPLICACION
    (37) operadores -> . DIVISION
    (38) operadores -> . MODULO

    SUMA            shift and go to state 40
    RESTA           shift and go to state 41
    MULTIPLICACION  shift and go to state 42
    DIVISION        shift and go to state 43
    MODULO          shift and go to state 44

    operadores                     shift and go to state 86

state 27

    (25) imprimir -> PRINT . valor SEMI
    (26) imprimir -> PRINT . LPAREN valor RPAREN SEMI
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    LPAREN          shift and go to state 88
    VARIABLE        shift and go to state 85
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    valor                          shift and go to state 87
    numero                         shift and go to state 80

state 28

    (65) operaciones_mat_par -> LPAREN . valor operadores valor RPAREN
    (66) operaciones_mat_par -> LPAREN . valor operadores operaciones_mat_par RPAREN
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    VARIABLE        shift and go to state 85
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    valor                          shift and go to state 89
    numero                         shift and go to state 80

state 29

    (31) valor -> NOMBRE .

    SUMA            reduce using rule 31 (valor -> NOMBRE .)
    RESTA           reduce using rule 31 (valor -> NOMBRE .)
    MULTIPLICACION  reduce using rule 31 (valor -> NOMBRE .)
    DIVISION        reduce using rule 31 (valor -> NOMBRE .)
    MODULO          reduce using rule 31 (valor -> NOMBRE .)
    SEMI            reduce using rule 31 (valor -> NOMBRE .)
    $end            reduce using rule 31 (valor -> NOMBRE .)
    RBRACE          reduce using rule 31 (valor -> NOMBRE .)
    BREAK           reduce using rule 31 (valor -> NOMBRE .)
    RPAREN          reduce using rule 31 (valor -> NOMBRE .)
    SMALLER         reduce using rule 31 (valor -> NOMBRE .)
    GREATER         reduce using rule 31 (valor -> NOMBRE .)
    IS_SMALLER_OR_EQUAL reduce using rule 31 (valor -> NOMBRE .)
    IS_GREATER_OR_EQUAL reduce using rule 31 (valor -> NOMBRE .)
    COMMA           reduce using rule 31 (valor -> NOMBRE .)


state 30

    (32) numero -> ENTERO .

    SUMA            reduce using rule 32 (numero -> ENTERO .)
    RESTA           reduce using rule 32 (numero -> ENTERO .)
    MULTIPLICACION  reduce using rule 32 (numero -> ENTERO .)
    DIVISION        reduce using rule 32 (numero -> ENTERO .)
    MODULO          reduce using rule 32 (numero -> ENTERO .)
    SEMI            reduce using rule 32 (numero -> ENTERO .)
    $end            reduce using rule 32 (numero -> ENTERO .)
    RBRACE          reduce using rule 32 (numero -> ENTERO .)
    BREAK           reduce using rule 32 (numero -> ENTERO .)
    RPAREN          reduce using rule 32 (numero -> ENTERO .)
    SMALLER         reduce using rule 32 (numero -> ENTERO .)
    GREATER         reduce using rule 32 (numero -> ENTERO .)
    IS_SMALLER_OR_EQUAL reduce using rule 32 (numero -> ENTERO .)
    IS_GREATER_OR_EQUAL reduce using rule 32 (numero -> ENTERO .)
    COMMA           reduce using rule 32 (numero -> ENTERO .)


state 31

    (68) asignacion -> VARIABLE . EQUALS valor SEMI
    (71) asignacion_array -> VARIABLE . EQUALS array_def SEMI
    (103) bcolas -> VARIABLE . EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (126) bpila -> VARIABLE . EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (29) valor -> VARIABLE .

    EQUALS          shift and go to state 90
    SUMA            reduce using rule 29 (valor -> VARIABLE .)
    RESTA           reduce using rule 29 (valor -> VARIABLE .)
    MULTIPLICACION  reduce using rule 29 (valor -> VARIABLE .)
    DIVISION        reduce using rule 29 (valor -> VARIABLE .)
    MODULO          reduce using rule 29 (valor -> VARIABLE .)


state 32

    (69) asignacion -> VAR . asignacion
    (68) asignacion -> . VARIABLE EQUALS valor SEMI
    (69) asignacion -> . VAR asignacion
    (70) asignacion -> . proteccion asignacion
    (77) proteccion -> . PUBLIC
    (78) proteccion -> . PRIVATE
    (79) proteccion -> . PROTECTED
    (80) proteccion -> . STATIC

    VARIABLE        shift and go to state 92
    VAR             shift and go to state 32
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78

    asignacion                     shift and go to state 91
    proteccion                     shift and go to state 93

state 33

    (70) asignacion -> proteccion . asignacion
    (82) funciones -> proteccion . funcion_nparams
    (84) funciones -> proteccion . funcion_blank
    (68) asignacion -> . VARIABLE EQUALS valor SEMI
    (69) asignacion -> . VAR asignacion
    (70) asignacion -> . proteccion asignacion
    (88) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (92) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (93) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (77) proteccion -> . PUBLIC
    (78) proteccion -> . PRIVATE
    (79) proteccion -> . PROTECTED
    (80) proteccion -> . STATIC

    VARIABLE        shift and go to state 92
    VAR             shift and go to state 32
    FUNCTION        shift and go to state 97
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78

    proteccion                     shift and go to state 93
    asignacion                     shift and go to state 94
    funcion_nparams                shift and go to state 95
    funcion_blank                  shift and go to state 96

state 34

    (81) funciones -> funcion_nparams .

    $end            reduce using rule 81 (funciones -> funcion_nparams .)
    RBRACE          reduce using rule 81 (funciones -> funcion_nparams .)
    SEMI            reduce using rule 81 (funciones -> funcion_nparams .)
    BREAK           reduce using rule 81 (funciones -> funcion_nparams .)


state 35

    (83) funciones -> funcion_blank .

    $end            reduce using rule 83 (funciones -> funcion_blank .)
    RBRACE          reduce using rule 83 (funciones -> funcion_blank .)
    SEMI            reduce using rule 83 (funciones -> funcion_blank .)
    BREAK           reduce using rule 83 (funciones -> funcion_blank .)


state 36

    (85) funciones -> funcion_void .

    $end            reduce using rule 85 (funciones -> funcion_void .)
    RBRACE          reduce using rule 85 (funciones -> funcion_void .)
    SEMI            reduce using rule 85 (funciones -> funcion_void .)
    BREAK           reduce using rule 85 (funciones -> funcion_void .)


state 37

    (72) constante -> DEFINE . LPAREN STRING COMMA valor RPAREN SEMI
    (73) constante -> DEFINE . LPAREN NOMBRE COMMA ARRAY RPAREN SEMI

    LPAREN          shift and go to state 98


state 38

    (30) valor -> STRING .

    SUMA            reduce using rule 30 (valor -> STRING .)
    RESTA           reduce using rule 30 (valor -> STRING .)
    MULTIPLICACION  reduce using rule 30 (valor -> STRING .)
    DIVISION        reduce using rule 30 (valor -> STRING .)
    MODULO          reduce using rule 30 (valor -> STRING .)
    SEMI            reduce using rule 30 (valor -> STRING .)
    $end            reduce using rule 30 (valor -> STRING .)
    RBRACE          reduce using rule 30 (valor -> STRING .)
    BREAK           reduce using rule 30 (valor -> STRING .)
    RPAREN          reduce using rule 30 (valor -> STRING .)
    SMALLER         reduce using rule 30 (valor -> STRING .)
    GREATER         reduce using rule 30 (valor -> STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 30 (valor -> STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 30 (valor -> STRING .)
    COMMA           reduce using rule 30 (valor -> STRING .)


state 39

    (74) lectura -> READLINE . LPAREN STRING RPAREN SEMI
    (75) lectura -> READLINE . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 99


state 40

    (34) operadores -> SUMA .

    $end            reduce using rule 34 (operadores -> SUMA .)
    VARIABLE        reduce using rule 34 (operadores -> SUMA .)
    STRING          reduce using rule 34 (operadores -> SUMA .)
    NOMBRE          reduce using rule 34 (operadores -> SUMA .)
    LPAREN          reduce using rule 34 (operadores -> SUMA .)
    ENTERO          reduce using rule 34 (operadores -> SUMA .)
    DECIMAL         reduce using rule 34 (operadores -> SUMA .)
    RBRACE          reduce using rule 34 (operadores -> SUMA .)
    SEMI            reduce using rule 34 (operadores -> SUMA .)
    BREAK           reduce using rule 34 (operadores -> SUMA .)


state 41

    (35) operadores -> RESTA .

    $end            reduce using rule 35 (operadores -> RESTA .)
    VARIABLE        reduce using rule 35 (operadores -> RESTA .)
    STRING          reduce using rule 35 (operadores -> RESTA .)
    NOMBRE          reduce using rule 35 (operadores -> RESTA .)
    LPAREN          reduce using rule 35 (operadores -> RESTA .)
    ENTERO          reduce using rule 35 (operadores -> RESTA .)
    DECIMAL         reduce using rule 35 (operadores -> RESTA .)
    RBRACE          reduce using rule 35 (operadores -> RESTA .)
    SEMI            reduce using rule 35 (operadores -> RESTA .)
    BREAK           reduce using rule 35 (operadores -> RESTA .)


state 42

    (36) operadores -> MULTIPLICACION .

    $end            reduce using rule 36 (operadores -> MULTIPLICACION .)
    VARIABLE        reduce using rule 36 (operadores -> MULTIPLICACION .)
    STRING          reduce using rule 36 (operadores -> MULTIPLICACION .)
    NOMBRE          reduce using rule 36 (operadores -> MULTIPLICACION .)
    LPAREN          reduce using rule 36 (operadores -> MULTIPLICACION .)
    ENTERO          reduce using rule 36 (operadores -> MULTIPLICACION .)
    DECIMAL         reduce using rule 36 (operadores -> MULTIPLICACION .)
    RBRACE          reduce using rule 36 (operadores -> MULTIPLICACION .)
    SEMI            reduce using rule 36 (operadores -> MULTIPLICACION .)
    BREAK           reduce using rule 36 (operadores -> MULTIPLICACION .)


state 43

    (37) operadores -> DIVISION .

    $end            reduce using rule 37 (operadores -> DIVISION .)
    VARIABLE        reduce using rule 37 (operadores -> DIVISION .)
    STRING          reduce using rule 37 (operadores -> DIVISION .)
    NOMBRE          reduce using rule 37 (operadores -> DIVISION .)
    LPAREN          reduce using rule 37 (operadores -> DIVISION .)
    ENTERO          reduce using rule 37 (operadores -> DIVISION .)
    DECIMAL         reduce using rule 37 (operadores -> DIVISION .)
    RBRACE          reduce using rule 37 (operadores -> DIVISION .)
    SEMI            reduce using rule 37 (operadores -> DIVISION .)
    BREAK           reduce using rule 37 (operadores -> DIVISION .)


state 44

    (38) operadores -> MODULO .

    $end            reduce using rule 38 (operadores -> MODULO .)
    VARIABLE        reduce using rule 38 (operadores -> MODULO .)
    STRING          reduce using rule 38 (operadores -> MODULO .)
    NOMBRE          reduce using rule 38 (operadores -> MODULO .)
    LPAREN          reduce using rule 38 (operadores -> MODULO .)
    ENTERO          reduce using rule 38 (operadores -> MODULO .)
    DECIMAL         reduce using rule 38 (operadores -> MODULO .)
    RBRACE          reduce using rule 38 (operadores -> MODULO .)
    SEMI            reduce using rule 38 (operadores -> MODULO .)
    BREAK           reduce using rule 38 (operadores -> MODULO .)


state 45

    (39) operador_logico -> SMALLER .

    $end            reduce using rule 39 (operador_logico -> SMALLER .)
    RBRACE          reduce using rule 39 (operador_logico -> SMALLER .)
    VARIABLE        reduce using rule 39 (operador_logico -> SMALLER .)
    STRING          reduce using rule 39 (operador_logico -> SMALLER .)
    NOMBRE          reduce using rule 39 (operador_logico -> SMALLER .)
    ENTERO          reduce using rule 39 (operador_logico -> SMALLER .)
    DECIMAL         reduce using rule 39 (operador_logico -> SMALLER .)
    SEMI            reduce using rule 39 (operador_logico -> SMALLER .)
    BREAK           reduce using rule 39 (operador_logico -> SMALLER .)


state 46

    (40) operador_logico -> GREATER .

    $end            reduce using rule 40 (operador_logico -> GREATER .)
    RBRACE          reduce using rule 40 (operador_logico -> GREATER .)
    VARIABLE        reduce using rule 40 (operador_logico -> GREATER .)
    STRING          reduce using rule 40 (operador_logico -> GREATER .)
    NOMBRE          reduce using rule 40 (operador_logico -> GREATER .)
    ENTERO          reduce using rule 40 (operador_logico -> GREATER .)
    DECIMAL         reduce using rule 40 (operador_logico -> GREATER .)
    SEMI            reduce using rule 40 (operador_logico -> GREATER .)
    BREAK           reduce using rule 40 (operador_logico -> GREATER .)


state 47

    (41) operador_logico -> IS_SMALLER_OR_EQUAL .

    $end            reduce using rule 41 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    RBRACE          reduce using rule 41 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    VARIABLE        reduce using rule 41 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    STRING          reduce using rule 41 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    NOMBRE          reduce using rule 41 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    ENTERO          reduce using rule 41 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    DECIMAL         reduce using rule 41 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    SEMI            reduce using rule 41 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    BREAK           reduce using rule 41 (operador_logico -> IS_SMALLER_OR_EQUAL .)


state 48

    (42) operador_logico -> IS_GREATER_OR_EQUAL .

    $end            reduce using rule 42 (operador_logico -> IS_GREATER_OR_EQUAL .)
    RBRACE          reduce using rule 42 (operador_logico -> IS_GREATER_OR_EQUAL .)
    VARIABLE        reduce using rule 42 (operador_logico -> IS_GREATER_OR_EQUAL .)
    STRING          reduce using rule 42 (operador_logico -> IS_GREATER_OR_EQUAL .)
    NOMBRE          reduce using rule 42 (operador_logico -> IS_GREATER_OR_EQUAL .)
    ENTERO          reduce using rule 42 (operador_logico -> IS_GREATER_OR_EQUAL .)
    DECIMAL         reduce using rule 42 (operador_logico -> IS_GREATER_OR_EQUAL .)
    SEMI            reduce using rule 42 (operador_logico -> IS_GREATER_OR_EQUAL .)
    BREAK           reduce using rule 42 (operador_logico -> IS_GREATER_OR_EQUAL .)


state 49

    (54) condicion_booleana -> AND .

    $end            reduce using rule 54 (condicion_booleana -> AND .)
    RBRACE          reduce using rule 54 (condicion_booleana -> AND .)
    SEMI            reduce using rule 54 (condicion_booleana -> AND .)
    BREAK           reduce using rule 54 (condicion_booleana -> AND .)


state 50

    (55) condicion_booleana -> OR .

    $end            reduce using rule 55 (condicion_booleana -> OR .)
    RBRACE          reduce using rule 55 (condicion_booleana -> OR .)
    SEMI            reduce using rule 55 (condicion_booleana -> OR .)
    BREAK           reduce using rule 55 (condicion_booleana -> OR .)


state 51

    (56) condicion_booleana -> XOR .

    $end            reduce using rule 56 (condicion_booleana -> XOR .)
    RBRACE          reduce using rule 56 (condicion_booleana -> XOR .)
    SEMI            reduce using rule 56 (condicion_booleana -> XOR .)
    BREAK           reduce using rule 56 (condicion_booleana -> XOR .)


state 52

    (57) condicion_booleana -> IS_EQUAL .

    $end            reduce using rule 57 (condicion_booleana -> IS_EQUAL .)
    RBRACE          reduce using rule 57 (condicion_booleana -> IS_EQUAL .)
    SEMI            reduce using rule 57 (condicion_booleana -> IS_EQUAL .)
    BREAK           reduce using rule 57 (condicion_booleana -> IS_EQUAL .)


state 53

    (58) condicion_booleana -> IS_NOT_EQUAL .

    $end            reduce using rule 58 (condicion_booleana -> IS_NOT_EQUAL .)
    RBRACE          reduce using rule 58 (condicion_booleana -> IS_NOT_EQUAL .)
    SEMI            reduce using rule 58 (condicion_booleana -> IS_NOT_EQUAL .)
    BREAK           reduce using rule 58 (condicion_booleana -> IS_NOT_EQUAL .)


state 54

    (59) condicion_booleana -> IS_IDENTICAL .

    $end            reduce using rule 59 (condicion_booleana -> IS_IDENTICAL .)
    RBRACE          reduce using rule 59 (condicion_booleana -> IS_IDENTICAL .)
    SEMI            reduce using rule 59 (condicion_booleana -> IS_IDENTICAL .)
    BREAK           reduce using rule 59 (condicion_booleana -> IS_IDENTICAL .)


state 55

    (60) condicion_booleana -> IS_NOT_IDENTICAL .

    $end            reduce using rule 60 (condicion_booleana -> IS_NOT_IDENTICAL .)
    RBRACE          reduce using rule 60 (condicion_booleana -> IS_NOT_IDENTICAL .)
    SEMI            reduce using rule 60 (condicion_booleana -> IS_NOT_IDENTICAL .)
    BREAK           reduce using rule 60 (condicion_booleana -> IS_NOT_IDENTICAL .)


state 56

    (61) condicion_booleana -> BOOLEAN_NOT .

    $end            reduce using rule 61 (condicion_booleana -> BOOLEAN_NOT .)
    RBRACE          reduce using rule 61 (condicion_booleana -> BOOLEAN_NOT .)
    SEMI            reduce using rule 61 (condicion_booleana -> BOOLEAN_NOT .)
    BREAK           reduce using rule 61 (condicion_booleana -> BOOLEAN_NOT .)


state 57

    (97) bwhile -> WHILE . LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (98) bwhile -> WHILE . LPAREN condicion RPAREN COLON stc_bloque

    LPAREN          shift and go to state 100


state 58

    (99) bdo -> DO . LBRACE cuerpo RBRACE bwhile

    LBRACE          shift and go to state 101


state 59

    (104) bfor -> FOR . LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def

    LPAREN          shift and go to state 102


state 60

    (116) bforeach -> FOREACH . LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def

    LPAREN          shift and go to state 103


state 61

    (121) btry -> TRY . LBRACE stc_bloque_def RBRACE catches

    LBRACE          shift and go to state 104


state 62

    (64) operaciones_mat -> operaciones_mat_par .

    $end            reduce using rule 64 (operaciones_mat -> operaciones_mat_par .)
    RBRACE          reduce using rule 64 (operaciones_mat -> operaciones_mat_par .)
    SEMI            reduce using rule 64 (operaciones_mat -> operaciones_mat_par .)
    BREAK           reduce using rule 64 (operaciones_mat -> operaciones_mat_par .)


state 63

    (50) condicion_ifelse -> condicion_if .
    (51) condicion_ifelse -> condicion_if . condicion_else
    (52) condicion_ifelse -> condicion_if . condicion_elseif
    (53) condicion_ifelse -> condicion_if . condicion_elseif condicion_else
    (49) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (48) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    $end            reduce using rule 50 (condicion_ifelse -> condicion_if .)
    RBRACE          reduce using rule 50 (condicion_ifelse -> condicion_if .)
    SEMI            reduce using rule 50 (condicion_ifelse -> condicion_if .)
    BREAK           reduce using rule 50 (condicion_ifelse -> condicion_if .)
    ELSE            shift and go to state 107
    ELSEIF          shift and go to state 108

    condicion_else                 shift and go to state 105
    condicion_elseif               shift and go to state 106

state 64

    (100) bswitch -> SWITCH . LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE

    LPAREN          shift and go to state 109


state 65

    (125) bgoto -> GOTO . NOMBRE SEMI

    NOMBRE          shift and go to state 110


state 66

    (43) incrementos_mat -> MINUS_EQUAL .

    $end            reduce using rule 43 (incrementos_mat -> MINUS_EQUAL .)
    RBRACE          reduce using rule 43 (incrementos_mat -> MINUS_EQUAL .)
    SEMI            reduce using rule 43 (incrementos_mat -> MINUS_EQUAL .)
    BREAK           reduce using rule 43 (incrementos_mat -> MINUS_EQUAL .)


state 67

    (44) incrementos_mat -> MOD_EQUAL .

    $end            reduce using rule 44 (incrementos_mat -> MOD_EQUAL .)
    RBRACE          reduce using rule 44 (incrementos_mat -> MOD_EQUAL .)
    SEMI            reduce using rule 44 (incrementos_mat -> MOD_EQUAL .)
    BREAK           reduce using rule 44 (incrementos_mat -> MOD_EQUAL .)


state 68

    (45) incrementos_mat -> MUL_EQUAL .

    $end            reduce using rule 45 (incrementos_mat -> MUL_EQUAL .)
    RBRACE          reduce using rule 45 (incrementos_mat -> MUL_EQUAL .)
    SEMI            reduce using rule 45 (incrementos_mat -> MUL_EQUAL .)
    BREAK           reduce using rule 45 (incrementos_mat -> MUL_EQUAL .)


state 69

    (46) incrementos_mat -> PLUS_EQUAL .

    $end            reduce using rule 46 (incrementos_mat -> PLUS_EQUAL .)
    RBRACE          reduce using rule 46 (incrementos_mat -> PLUS_EQUAL .)
    SEMI            reduce using rule 46 (incrementos_mat -> PLUS_EQUAL .)
    BREAK           reduce using rule 46 (incrementos_mat -> PLUS_EQUAL .)


state 70

    (127) bcortes -> EXIT . SEMI

    SEMI            shift and go to state 111


state 71

    (128) bcortes -> BREAK . SEMI

    SEMI            shift and go to state 112


state 72

    (129) bcortes -> DEFAULT . SEMI

    SEMI            shift and go to state 113


state 73

    (130) bcortes -> CONTINUE . SEMI

    SEMI            shift and go to state 114


state 74

    (76) brand -> RAND . LPAREN ENTERO COMMA ENTERO RPAREN SEMI

    LPAREN          shift and go to state 115


state 75

    (77) proteccion -> PUBLIC .

    VARIABLE        reduce using rule 77 (proteccion -> PUBLIC .)
    VAR             reduce using rule 77 (proteccion -> PUBLIC .)
    FUNCTION        reduce using rule 77 (proteccion -> PUBLIC .)
    PUBLIC          reduce using rule 77 (proteccion -> PUBLIC .)
    PRIVATE         reduce using rule 77 (proteccion -> PUBLIC .)
    PROTECTED       reduce using rule 77 (proteccion -> PUBLIC .)
    STATIC          reduce using rule 77 (proteccion -> PUBLIC .)


state 76

    (78) proteccion -> PRIVATE .

    VARIABLE        reduce using rule 78 (proteccion -> PRIVATE .)
    VAR             reduce using rule 78 (proteccion -> PRIVATE .)
    FUNCTION        reduce using rule 78 (proteccion -> PRIVATE .)
    PUBLIC          reduce using rule 78 (proteccion -> PRIVATE .)
    PRIVATE         reduce using rule 78 (proteccion -> PRIVATE .)
    PROTECTED       reduce using rule 78 (proteccion -> PRIVATE .)
    STATIC          reduce using rule 78 (proteccion -> PRIVATE .)


state 77

    (79) proteccion -> PROTECTED .

    VARIABLE        reduce using rule 79 (proteccion -> PROTECTED .)
    VAR             reduce using rule 79 (proteccion -> PROTECTED .)
    FUNCTION        reduce using rule 79 (proteccion -> PROTECTED .)
    PUBLIC          reduce using rule 79 (proteccion -> PROTECTED .)
    PRIVATE         reduce using rule 79 (proteccion -> PROTECTED .)
    PROTECTED       reduce using rule 79 (proteccion -> PROTECTED .)
    STATIC          reduce using rule 79 (proteccion -> PROTECTED .)


state 78

    (80) proteccion -> STATIC .

    VARIABLE        reduce using rule 80 (proteccion -> STATIC .)
    VAR             reduce using rule 80 (proteccion -> STATIC .)
    FUNCTION        reduce using rule 80 (proteccion -> STATIC .)
    PUBLIC          reduce using rule 80 (proteccion -> STATIC .)
    PRIVATE         reduce using rule 80 (proteccion -> STATIC .)
    PROTECTED       reduce using rule 80 (proteccion -> STATIC .)
    STATIC          reduce using rule 80 (proteccion -> STATIC .)


state 79

    (88) funcion_nparams -> FUNCTION . NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (92) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN stc_bloque_def
    (93) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (91) funcion_void -> FUNCTION . NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE

    NOMBRE          shift and go to state 116


state 80

    (28) valor -> numero .

    SUMA            reduce using rule 28 (valor -> numero .)
    RESTA           reduce using rule 28 (valor -> numero .)
    MULTIPLICACION  reduce using rule 28 (valor -> numero .)
    DIVISION        reduce using rule 28 (valor -> numero .)
    MODULO          reduce using rule 28 (valor -> numero .)
    SEMI            reduce using rule 28 (valor -> numero .)
    $end            reduce using rule 28 (valor -> numero .)
    RBRACE          reduce using rule 28 (valor -> numero .)
    BREAK           reduce using rule 28 (valor -> numero .)
    RPAREN          reduce using rule 28 (valor -> numero .)
    SMALLER         reduce using rule 28 (valor -> numero .)
    GREATER         reduce using rule 28 (valor -> numero .)
    IS_SMALLER_OR_EQUAL reduce using rule 28 (valor -> numero .)
    IS_GREATER_OR_EQUAL reduce using rule 28 (valor -> numero .)
    COMMA           reduce using rule 28 (valor -> numero .)


state 81

    (47) condicion_if -> IF . LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    LPAREN          shift and go to state 117


state 82

    (33) numero -> DECIMAL .

    SUMA            reduce using rule 33 (numero -> DECIMAL .)
    RESTA           reduce using rule 33 (numero -> DECIMAL .)
    MULTIPLICACION  reduce using rule 33 (numero -> DECIMAL .)
    DIVISION        reduce using rule 33 (numero -> DECIMAL .)
    MODULO          reduce using rule 33 (numero -> DECIMAL .)
    SEMI            reduce using rule 33 (numero -> DECIMAL .)
    $end            reduce using rule 33 (numero -> DECIMAL .)
    RBRACE          reduce using rule 33 (numero -> DECIMAL .)
    BREAK           reduce using rule 33 (numero -> DECIMAL .)
    RPAREN          reduce using rule 33 (numero -> DECIMAL .)
    SMALLER         reduce using rule 33 (numero -> DECIMAL .)
    GREATER         reduce using rule 33 (numero -> DECIMAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 33 (numero -> DECIMAL .)
    IS_GREATER_OR_EQUAL reduce using rule 33 (numero -> DECIMAL .)
    COMMA           reduce using rule 33 (numero -> DECIMAL .)


state 83

    (24) imprimir -> ECHO valor . SEMI

    SEMI            shift and go to state 118


state 84

    (27) imprimir -> ECHO NOMBRE . LBRACKET ENTERO RBRACKET SEMI
    (31) valor -> NOMBRE .

    LBRACKET        shift and go to state 119
    SEMI            reduce using rule 31 (valor -> NOMBRE .)


state 85

    (29) valor -> VARIABLE .

    SEMI            reduce using rule 29 (valor -> VARIABLE .)
    SUMA            reduce using rule 29 (valor -> VARIABLE .)
    RESTA           reduce using rule 29 (valor -> VARIABLE .)
    MULTIPLICACION  reduce using rule 29 (valor -> VARIABLE .)
    DIVISION        reduce using rule 29 (valor -> VARIABLE .)
    MODULO          reduce using rule 29 (valor -> VARIABLE .)
    $end            reduce using rule 29 (valor -> VARIABLE .)
    RBRACE          reduce using rule 29 (valor -> VARIABLE .)
    BREAK           reduce using rule 29 (valor -> VARIABLE .)
    RPAREN          reduce using rule 29 (valor -> VARIABLE .)
    COMMA           reduce using rule 29 (valor -> VARIABLE .)


state 86

    (62) operaciones_mat -> valor operadores . valor
    (63) operaciones_mat -> valor operadores . operaciones_mat
    (67) operaciones_mat_par -> valor operadores . operaciones_mat_par
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (62) operaciones_mat -> . valor operadores valor
    (63) operaciones_mat -> . valor operadores operaciones_mat
    (64) operaciones_mat -> . operaciones_mat_par
    (65) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (66) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (67) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    VARIABLE        shift and go to state 85
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    LPAREN          shift and go to state 28
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    valor                          shift and go to state 120
    operaciones_mat                shift and go to state 121
    operaciones_mat_par            shift and go to state 122
    numero                         shift and go to state 80

state 87

    (25) imprimir -> PRINT valor . SEMI

    SEMI            shift and go to state 123


state 88

    (26) imprimir -> PRINT LPAREN . valor RPAREN SEMI
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    VARIABLE        shift and go to state 85
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    valor                          shift and go to state 124
    numero                         shift and go to state 80

state 89

    (65) operaciones_mat_par -> LPAREN valor . operadores valor RPAREN
    (66) operaciones_mat_par -> LPAREN valor . operadores operaciones_mat_par RPAREN
    (34) operadores -> . SUMA
    (35) operadores -> . RESTA
    (36) operadores -> . MULTIPLICACION
    (37) operadores -> . DIVISION
    (38) operadores -> . MODULO

    SUMA            shift and go to state 40
    RESTA           shift and go to state 41
    MULTIPLICACION  shift and go to state 42
    DIVISION        shift and go to state 43
    MODULO          shift and go to state 44

    operadores                     shift and go to state 125

state 90

    (68) asignacion -> VARIABLE EQUALS . valor SEMI
    (71) asignacion_array -> VARIABLE EQUALS . array_def SEMI
    (103) bcolas -> VARIABLE EQUALS . NEW SPLQUEUE LPAREN RPAREN SEMI
    (126) bpila -> VARIABLE EQUALS . NEW SPLSTACK LPAREN RPAREN SEMI
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (117) array_def -> . ARRAY LPAREN RPAREN
    (118) array_def -> . ARRAY LPAREN array_elmnt RPAREN
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    NEW             shift and go to state 128
    VARIABLE        shift and go to state 85
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    ARRAY           shift and go to state 129
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    valor                          shift and go to state 126
    array_def                      shift and go to state 127
    numero                         shift and go to state 80

state 91

    (69) asignacion -> VAR asignacion .

    $end            reduce using rule 69 (asignacion -> VAR asignacion .)
    RBRACE          reduce using rule 69 (asignacion -> VAR asignacion .)
    SEMI            reduce using rule 69 (asignacion -> VAR asignacion .)
    BREAK           reduce using rule 69 (asignacion -> VAR asignacion .)
    VARIABLE        reduce using rule 69 (asignacion -> VAR asignacion .)
    STRING          reduce using rule 69 (asignacion -> VAR asignacion .)
    NOMBRE          reduce using rule 69 (asignacion -> VAR asignacion .)
    ENTERO          reduce using rule 69 (asignacion -> VAR asignacion .)
    DECIMAL         reduce using rule 69 (asignacion -> VAR asignacion .)
    RPAREN          reduce using rule 69 (asignacion -> VAR asignacion .)
    COMMA           reduce using rule 69 (asignacion -> VAR asignacion .)


state 92

    (68) asignacion -> VARIABLE . EQUALS valor SEMI

    EQUALS          shift and go to state 130


state 93

    (70) asignacion -> proteccion . asignacion
    (68) asignacion -> . VARIABLE EQUALS valor SEMI
    (69) asignacion -> . VAR asignacion
    (70) asignacion -> . proteccion asignacion
    (77) proteccion -> . PUBLIC
    (78) proteccion -> . PRIVATE
    (79) proteccion -> . PROTECTED
    (80) proteccion -> . STATIC

    VARIABLE        shift and go to state 92
    VAR             shift and go to state 32
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78

    proteccion                     shift and go to state 93
    asignacion                     shift and go to state 94

state 94

    (70) asignacion -> proteccion asignacion .

    $end            reduce using rule 70 (asignacion -> proteccion asignacion .)
    RBRACE          reduce using rule 70 (asignacion -> proteccion asignacion .)
    SEMI            reduce using rule 70 (asignacion -> proteccion asignacion .)
    BREAK           reduce using rule 70 (asignacion -> proteccion asignacion .)
    VARIABLE        reduce using rule 70 (asignacion -> proteccion asignacion .)
    STRING          reduce using rule 70 (asignacion -> proteccion asignacion .)
    NOMBRE          reduce using rule 70 (asignacion -> proteccion asignacion .)
    ENTERO          reduce using rule 70 (asignacion -> proteccion asignacion .)
    DECIMAL         reduce using rule 70 (asignacion -> proteccion asignacion .)
    RPAREN          reduce using rule 70 (asignacion -> proteccion asignacion .)
    COMMA           reduce using rule 70 (asignacion -> proteccion asignacion .)


state 95

    (82) funciones -> proteccion funcion_nparams .

    $end            reduce using rule 82 (funciones -> proteccion funcion_nparams .)
    RBRACE          reduce using rule 82 (funciones -> proteccion funcion_nparams .)
    SEMI            reduce using rule 82 (funciones -> proteccion funcion_nparams .)
    BREAK           reduce using rule 82 (funciones -> proteccion funcion_nparams .)


state 96

    (84) funciones -> proteccion funcion_blank .

    $end            reduce using rule 84 (funciones -> proteccion funcion_blank .)
    RBRACE          reduce using rule 84 (funciones -> proteccion funcion_blank .)
    SEMI            reduce using rule 84 (funciones -> proteccion funcion_blank .)
    BREAK           reduce using rule 84 (funciones -> proteccion funcion_blank .)


state 97

    (88) funcion_nparams -> FUNCTION . NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (92) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN stc_bloque_def
    (93) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN LBRACE empty RBRACE

    NOMBRE          shift and go to state 131


state 98

    (72) constante -> DEFINE LPAREN . STRING COMMA valor RPAREN SEMI
    (73) constante -> DEFINE LPAREN . NOMBRE COMMA ARRAY RPAREN SEMI

    STRING          shift and go to state 132
    NOMBRE          shift and go to state 133


state 99

    (74) lectura -> READLINE LPAREN . STRING RPAREN SEMI
    (75) lectura -> READLINE LPAREN . RPAREN SEMI

    STRING          shift and go to state 134
    RPAREN          shift and go to state 135


state 100

    (97) bwhile -> WHILE LPAREN . condicion RPAREN LBRACE stc_bloque RBRACE
    (98) bwhile -> WHILE LPAREN . condicion RPAREN COLON stc_bloque
    (94) condicion -> . VARIABLE operador_logico VARIABLE
    (95) condicion -> . valor operador_logico valor
    (96) condicion -> . VARIABLE operador_logico valor
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    VARIABLE        shift and go to state 137
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    condicion                      shift and go to state 136
    valor                          shift and go to state 138
    numero                         shift and go to state 80

state 101

    (99) bdo -> DO LBRACE . cuerpo RBRACE bwhile
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (19) cuerpo -> . bcolas
    (20) cuerpo -> . bpila
    (21) cuerpo -> . incrementos_mat
    (22) cuerpo -> . bcortes
    (23) cuerpo -> . brand
    (24) imprimir -> . ECHO valor SEMI
    (25) imprimir -> . PRINT valor SEMI
    (26) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (27) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (68) asignacion -> . VARIABLE EQUALS valor SEMI
    (69) asignacion -> . VAR asignacion
    (70) asignacion -> . proteccion asignacion
    (71) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (81) funciones -> . funcion_nparams
    (82) funciones -> . proteccion funcion_nparams
    (83) funciones -> . funcion_blank
    (84) funciones -> . proteccion funcion_blank
    (85) funciones -> . funcion_void
    (72) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (73) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (74) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (75) lectura -> . READLINE LPAREN RPAREN SEMI
    (34) operadores -> . SUMA
    (35) operadores -> . RESTA
    (36) operadores -> . MULTIPLICACION
    (37) operadores -> . DIVISION
    (38) operadores -> . MODULO
    (39) operador_logico -> . SMALLER
    (40) operador_logico -> . GREATER
    (41) operador_logico -> . IS_SMALLER_OR_EQUAL
    (42) operador_logico -> . IS_GREATER_OR_EQUAL
    (54) condicion_booleana -> . AND
    (55) condicion_booleana -> . OR
    (56) condicion_booleana -> . XOR
    (57) condicion_booleana -> . IS_EQUAL
    (58) condicion_booleana -> . IS_NOT_EQUAL
    (59) condicion_booleana -> . IS_IDENTICAL
    (60) condicion_booleana -> . IS_NOT_IDENTICAL
    (61) condicion_booleana -> . BOOLEAN_NOT
    (97) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (98) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (99) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (104) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (116) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (121) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (62) operaciones_mat -> . valor operadores valor
    (63) operaciones_mat -> . valor operadores operaciones_mat
    (64) operaciones_mat -> . operaciones_mat_par
    (50) condicion_ifelse -> . condicion_if
    (51) condicion_ifelse -> . condicion_if condicion_else
    (52) condicion_ifelse -> . condicion_if condicion_elseif
    (53) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (100) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (125) bgoto -> . GOTO NOMBRE SEMI
    (103) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (126) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (43) incrementos_mat -> . MINUS_EQUAL
    (44) incrementos_mat -> . MOD_EQUAL
    (45) incrementos_mat -> . MUL_EQUAL
    (46) incrementos_mat -> . PLUS_EQUAL
    (127) bcortes -> . EXIT SEMI
    (128) bcortes -> . BREAK SEMI
    (129) bcortes -> . DEFAULT SEMI
    (130) bcortes -> . CONTINUE SEMI
    (76) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (77) proteccion -> . PUBLIC
    (78) proteccion -> . PRIVATE
    (79) proteccion -> . PROTECTED
    (80) proteccion -> . STATIC
    (88) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (92) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (93) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (91) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (65) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (66) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (67) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (47) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    ECHO            shift and go to state 25
    PRINT           shift and go to state 27
    VARIABLE        shift and go to state 31
    VAR             shift and go to state 32
    DEFINE          shift and go to state 37
    READLINE        shift and go to state 39
    SUMA            shift and go to state 40
    RESTA           shift and go to state 41
    MULTIPLICACION  shift and go to state 42
    DIVISION        shift and go to state 43
    MODULO          shift and go to state 44
    SMALLER         shift and go to state 45
    GREATER         shift and go to state 46
    IS_SMALLER_OR_EQUAL shift and go to state 47
    IS_GREATER_OR_EQUAL shift and go to state 48
    AND             shift and go to state 49
    OR              shift and go to state 50
    XOR             shift and go to state 51
    IS_EQUAL        shift and go to state 52
    IS_NOT_EQUAL    shift and go to state 53
    IS_IDENTICAL    shift and go to state 54
    IS_NOT_IDENTICAL shift and go to state 55
    BOOLEAN_NOT     shift and go to state 56
    WHILE           shift and go to state 57
    DO              shift and go to state 58
    FOR             shift and go to state 59
    FOREACH         shift and go to state 60
    TRY             shift and go to state 61
    SWITCH          shift and go to state 64
    GOTO            shift and go to state 65
    MINUS_EQUAL     shift and go to state 66
    MOD_EQUAL       shift and go to state 67
    MUL_EQUAL       shift and go to state 68
    PLUS_EQUAL      shift and go to state 69
    EXIT            shift and go to state 70
    BREAK           shift and go to state 71
    DEFAULT         shift and go to state 72
    CONTINUE        shift and go to state 73
    RAND            shift and go to state 74
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78
    FUNCTION        shift and go to state 79
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    LPAREN          shift and go to state 28
    IF              shift and go to state 81
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    cuerpo                         shift and go to state 139
    bwhile                         shift and go to state 11
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat                shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    bcolas                         shift and go to state 20
    bpila                          shift and go to state 21
    incrementos_mat                shift and go to state 22
    bcortes                        shift and go to state 23
    brand                          shift and go to state 24
    valor                          shift and go to state 26
    proteccion                     shift and go to state 33
    funcion_nparams                shift and go to state 34
    funcion_blank                  shift and go to state 35
    funcion_void                   shift and go to state 36
    operaciones_mat_par            shift and go to state 62
    condicion_if                   shift and go to state 63
    numero                         shift and go to state 80

state 102

    (104) bfor -> FOR LPAREN . asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (68) asignacion -> . VARIABLE EQUALS valor SEMI
    (69) asignacion -> . VAR asignacion
    (70) asignacion -> . proteccion asignacion
    (77) proteccion -> . PUBLIC
    (78) proteccion -> . PRIVATE
    (79) proteccion -> . PROTECTED
    (80) proteccion -> . STATIC

    VARIABLE        shift and go to state 92
    VAR             shift and go to state 32
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78

    asignacion                     shift and go to state 140
    proteccion                     shift and go to state 93

state 103

    (116) bforeach -> FOREACH LPAREN . VARIABLE AS VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 141


state 104

    (121) btry -> TRY LBRACE . stc_bloque_def RBRACE catches
    (109) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 142

    stc_bloque_def                 shift and go to state 143

state 105

    (51) condicion_ifelse -> condicion_if condicion_else .

    $end            reduce using rule 51 (condicion_ifelse -> condicion_if condicion_else .)
    RBRACE          reduce using rule 51 (condicion_ifelse -> condicion_if condicion_else .)
    SEMI            reduce using rule 51 (condicion_ifelse -> condicion_if condicion_else .)
    BREAK           reduce using rule 51 (condicion_ifelse -> condicion_if condicion_else .)


state 106

    (52) condicion_ifelse -> condicion_if condicion_elseif .
    (53) condicion_ifelse -> condicion_if condicion_elseif . condicion_else
    (49) condicion_else -> . ELSE LBRACE cuerpo RBRACE

    $end            reduce using rule 52 (condicion_ifelse -> condicion_if condicion_elseif .)
    RBRACE          reduce using rule 52 (condicion_ifelse -> condicion_if condicion_elseif .)
    SEMI            reduce using rule 52 (condicion_ifelse -> condicion_if condicion_elseif .)
    BREAK           reduce using rule 52 (condicion_ifelse -> condicion_if condicion_elseif .)
    ELSE            shift and go to state 107

    condicion_else                 shift and go to state 144

state 107

    (49) condicion_else -> ELSE . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 145


state 108

    (48) condicion_elseif -> ELSEIF . LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    LPAREN          shift and go to state 146


state 109

    (100) bswitch -> SWITCH LPAREN . VARIABLE RPAREN LBRACE innerSwitch RBRACE

    VARIABLE        shift and go to state 147


state 110

    (125) bgoto -> GOTO NOMBRE . SEMI

    SEMI            shift and go to state 148


state 111

    (127) bcortes -> EXIT SEMI .

    $end            reduce using rule 127 (bcortes -> EXIT SEMI .)
    RBRACE          reduce using rule 127 (bcortes -> EXIT SEMI .)
    SEMI            reduce using rule 127 (bcortes -> EXIT SEMI .)
    BREAK           reduce using rule 127 (bcortes -> EXIT SEMI .)


state 112

    (128) bcortes -> BREAK SEMI .

    $end            reduce using rule 128 (bcortes -> BREAK SEMI .)
    RBRACE          reduce using rule 128 (bcortes -> BREAK SEMI .)
    SEMI            reduce using rule 128 (bcortes -> BREAK SEMI .)
    BREAK           reduce using rule 128 (bcortes -> BREAK SEMI .)


state 113

    (129) bcortes -> DEFAULT SEMI .

    $end            reduce using rule 129 (bcortes -> DEFAULT SEMI .)
    RBRACE          reduce using rule 129 (bcortes -> DEFAULT SEMI .)
    SEMI            reduce using rule 129 (bcortes -> DEFAULT SEMI .)
    BREAK           reduce using rule 129 (bcortes -> DEFAULT SEMI .)


state 114

    (130) bcortes -> CONTINUE SEMI .

    $end            reduce using rule 130 (bcortes -> CONTINUE SEMI .)
    RBRACE          reduce using rule 130 (bcortes -> CONTINUE SEMI .)
    SEMI            reduce using rule 130 (bcortes -> CONTINUE SEMI .)
    BREAK           reduce using rule 130 (bcortes -> CONTINUE SEMI .)


state 115

    (76) brand -> RAND LPAREN . ENTERO COMMA ENTERO RPAREN SEMI

    ENTERO          shift and go to state 149


state 116

    (88) funcion_nparams -> FUNCTION NOMBRE . LPAREN params_list RPAREN stc_bloque_def
    (92) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN stc_bloque_def
    (93) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN LBRACE empty RBRACE
    (91) funcion_void -> FUNCTION NOMBRE . LPAREN RPAREN COLON VOID LBRACE empty RBRACE

    LPAREN          shift and go to state 150


state 117

    (47) condicion_if -> IF LPAREN . condicion RPAREN LBRACE cuerpo RBRACE
    (94) condicion -> . VARIABLE operador_logico VARIABLE
    (95) condicion -> . valor operador_logico valor
    (96) condicion -> . VARIABLE operador_logico valor
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    VARIABLE        shift and go to state 137
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    condicion                      shift and go to state 151
    valor                          shift and go to state 138
    numero                         shift and go to state 80

state 118

    (24) imprimir -> ECHO valor SEMI .

    $end            reduce using rule 24 (imprimir -> ECHO valor SEMI .)
    RBRACE          reduce using rule 24 (imprimir -> ECHO valor SEMI .)
    SEMI            reduce using rule 24 (imprimir -> ECHO valor SEMI .)
    BREAK           reduce using rule 24 (imprimir -> ECHO valor SEMI .)


state 119

    (27) imprimir -> ECHO NOMBRE LBRACKET . ENTERO RBRACKET SEMI

    ENTERO          shift and go to state 152


state 120

    (62) operaciones_mat -> valor operadores valor .
    (62) operaciones_mat -> valor . operadores valor
    (63) operaciones_mat -> valor . operadores operaciones_mat
    (67) operaciones_mat_par -> valor . operadores operaciones_mat_par
    (34) operadores -> . SUMA
    (35) operadores -> . RESTA
    (36) operadores -> . MULTIPLICACION
    (37) operadores -> . DIVISION
    (38) operadores -> . MODULO

    $end            reduce using rule 62 (operaciones_mat -> valor operadores valor .)
    RBRACE          reduce using rule 62 (operaciones_mat -> valor operadores valor .)
    SEMI            reduce using rule 62 (operaciones_mat -> valor operadores valor .)
    BREAK           reduce using rule 62 (operaciones_mat -> valor operadores valor .)
    SUMA            shift and go to state 40
    RESTA           shift and go to state 41
    MULTIPLICACION  shift and go to state 42
    DIVISION        shift and go to state 43
    MODULO          shift and go to state 44

    operadores                     shift and go to state 86

state 121

    (63) operaciones_mat -> valor operadores operaciones_mat .

    $end            reduce using rule 63 (operaciones_mat -> valor operadores operaciones_mat .)
    RBRACE          reduce using rule 63 (operaciones_mat -> valor operadores operaciones_mat .)
    SEMI            reduce using rule 63 (operaciones_mat -> valor operadores operaciones_mat .)
    BREAK           reduce using rule 63 (operaciones_mat -> valor operadores operaciones_mat .)


state 122

    (67) operaciones_mat_par -> valor operadores operaciones_mat_par .
    (64) operaciones_mat -> operaciones_mat_par .

  ! reduce/reduce conflict for $end resolved using rule 64 (operaciones_mat -> operaciones_mat_par .)
  ! reduce/reduce conflict for RBRACE resolved using rule 64 (operaciones_mat -> operaciones_mat_par .)
  ! reduce/reduce conflict for SEMI resolved using rule 64 (operaciones_mat -> operaciones_mat_par .)
  ! reduce/reduce conflict for BREAK resolved using rule 64 (operaciones_mat -> operaciones_mat_par .)
    $end            reduce using rule 64 (operaciones_mat -> operaciones_mat_par .)
    RBRACE          reduce using rule 64 (operaciones_mat -> operaciones_mat_par .)
    SEMI            reduce using rule 64 (operaciones_mat -> operaciones_mat_par .)
    BREAK           reduce using rule 64 (operaciones_mat -> operaciones_mat_par .)

  ! $end            [ reduce using rule 67 (operaciones_mat_par -> valor operadores operaciones_mat_par .) ]
  ! RBRACE          [ reduce using rule 67 (operaciones_mat_par -> valor operadores operaciones_mat_par .) ]
  ! SEMI            [ reduce using rule 67 (operaciones_mat_par -> valor operadores operaciones_mat_par .) ]
  ! BREAK           [ reduce using rule 67 (operaciones_mat_par -> valor operadores operaciones_mat_par .) ]


state 123

    (25) imprimir -> PRINT valor SEMI .

    $end            reduce using rule 25 (imprimir -> PRINT valor SEMI .)
    RBRACE          reduce using rule 25 (imprimir -> PRINT valor SEMI .)
    SEMI            reduce using rule 25 (imprimir -> PRINT valor SEMI .)
    BREAK           reduce using rule 25 (imprimir -> PRINT valor SEMI .)


state 124

    (26) imprimir -> PRINT LPAREN valor . RPAREN SEMI

    RPAREN          shift and go to state 153


state 125

    (65) operaciones_mat_par -> LPAREN valor operadores . valor RPAREN
    (66) operaciones_mat_par -> LPAREN valor operadores . operaciones_mat_par RPAREN
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (65) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (66) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (67) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    VARIABLE        shift and go to state 85
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    LPAREN          shift and go to state 28
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    valor                          shift and go to state 154
    operaciones_mat_par            shift and go to state 155
    numero                         shift and go to state 80

state 126

    (68) asignacion -> VARIABLE EQUALS valor . SEMI

    SEMI            shift and go to state 156


state 127

    (71) asignacion_array -> VARIABLE EQUALS array_def . SEMI

    SEMI            shift and go to state 157


state 128

    (103) bcolas -> VARIABLE EQUALS NEW . SPLQUEUE LPAREN RPAREN SEMI
    (126) bpila -> VARIABLE EQUALS NEW . SPLSTACK LPAREN RPAREN SEMI

    SPLQUEUE        shift and go to state 158
    SPLSTACK        shift and go to state 159


state 129

    (117) array_def -> ARRAY . LPAREN RPAREN
    (118) array_def -> ARRAY . LPAREN array_elmnt RPAREN

    LPAREN          shift and go to state 160


state 130

    (68) asignacion -> VARIABLE EQUALS . valor SEMI
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    VARIABLE        shift and go to state 85
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    valor                          shift and go to state 126
    numero                         shift and go to state 80

state 131

    (88) funcion_nparams -> FUNCTION NOMBRE . LPAREN params_list RPAREN stc_bloque_def
    (92) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN stc_bloque_def
    (93) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN LBRACE empty RBRACE

    LPAREN          shift and go to state 161


state 132

    (72) constante -> DEFINE LPAREN STRING . COMMA valor RPAREN SEMI

    COMMA           shift and go to state 162


state 133

    (73) constante -> DEFINE LPAREN NOMBRE . COMMA ARRAY RPAREN SEMI

    COMMA           shift and go to state 163


state 134

    (74) lectura -> READLINE LPAREN STRING . RPAREN SEMI

    RPAREN          shift and go to state 164


state 135

    (75) lectura -> READLINE LPAREN RPAREN . SEMI

    SEMI            shift and go to state 165


state 136

    (97) bwhile -> WHILE LPAREN condicion . RPAREN LBRACE stc_bloque RBRACE
    (98) bwhile -> WHILE LPAREN condicion . RPAREN COLON stc_bloque

    RPAREN          shift and go to state 166


state 137

    (94) condicion -> VARIABLE . operador_logico VARIABLE
    (96) condicion -> VARIABLE . operador_logico valor
    (29) valor -> VARIABLE .
    (39) operador_logico -> . SMALLER
    (40) operador_logico -> . GREATER
    (41) operador_logico -> . IS_SMALLER_OR_EQUAL
    (42) operador_logico -> . IS_GREATER_OR_EQUAL

  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for IS_SMALLER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for IS_GREATER_OR_EQUAL resolved as shift
    SMALLER         shift and go to state 45
    GREATER         shift and go to state 46
    IS_SMALLER_OR_EQUAL shift and go to state 47
    IS_GREATER_OR_EQUAL shift and go to state 48

  ! SMALLER         [ reduce using rule 29 (valor -> VARIABLE .) ]
  ! GREATER         [ reduce using rule 29 (valor -> VARIABLE .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 29 (valor -> VARIABLE .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 29 (valor -> VARIABLE .) ]

    operador_logico                shift and go to state 167

state 138

    (95) condicion -> valor . operador_logico valor
    (39) operador_logico -> . SMALLER
    (40) operador_logico -> . GREATER
    (41) operador_logico -> . IS_SMALLER_OR_EQUAL
    (42) operador_logico -> . IS_GREATER_OR_EQUAL

    SMALLER         shift and go to state 45
    GREATER         shift and go to state 46
    IS_SMALLER_OR_EQUAL shift and go to state 47
    IS_GREATER_OR_EQUAL shift and go to state 48

    operador_logico                shift and go to state 168

state 139

    (99) bdo -> DO LBRACE cuerpo . RBRACE bwhile

    RBRACE          shift and go to state 169


state 140

    (104) bfor -> FOR LPAREN asignacion . condicion SEMI for_incr RPAREN stc_bloque_def
    (94) condicion -> . VARIABLE operador_logico VARIABLE
    (95) condicion -> . valor operador_logico valor
    (96) condicion -> . VARIABLE operador_logico valor
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    VARIABLE        shift and go to state 137
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    condicion                      shift and go to state 170
    valor                          shift and go to state 138
    numero                         shift and go to state 80

state 141

    (116) bforeach -> FOREACH LPAREN VARIABLE . AS VARIABLE RPAREN stc_bloque_def

    AS              shift and go to state 171


state 142

    (109) stc_bloque_def -> LBRACE . stc_bloque RBRACE
    (105) stc_bloque -> . stc_bloque SEMI cuerpo
    (106) stc_bloque -> . empty
    (107) stc_bloque -> . RETURN
    (108) stc_bloque -> . RETURN NULL
    (124) empty -> .

    RETURN          shift and go to state 174
    RBRACE          reduce using rule 124 (empty -> .)
    SEMI            reduce using rule 124 (empty -> .)

    stc_bloque                     shift and go to state 172
    empty                          shift and go to state 173

state 143

    (121) btry -> TRY LBRACE stc_bloque_def . RBRACE catches

    RBRACE          shift and go to state 175


state 144

    (53) condicion_ifelse -> condicion_if condicion_elseif condicion_else .

    $end            reduce using rule 53 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    RBRACE          reduce using rule 53 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    SEMI            reduce using rule 53 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    BREAK           reduce using rule 53 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)


state 145

    (49) condicion_else -> ELSE LBRACE . cuerpo RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (19) cuerpo -> . bcolas
    (20) cuerpo -> . bpila
    (21) cuerpo -> . incrementos_mat
    (22) cuerpo -> . bcortes
    (23) cuerpo -> . brand
    (24) imprimir -> . ECHO valor SEMI
    (25) imprimir -> . PRINT valor SEMI
    (26) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (27) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (68) asignacion -> . VARIABLE EQUALS valor SEMI
    (69) asignacion -> . VAR asignacion
    (70) asignacion -> . proteccion asignacion
    (71) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (81) funciones -> . funcion_nparams
    (82) funciones -> . proteccion funcion_nparams
    (83) funciones -> . funcion_blank
    (84) funciones -> . proteccion funcion_blank
    (85) funciones -> . funcion_void
    (72) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (73) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (74) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (75) lectura -> . READLINE LPAREN RPAREN SEMI
    (34) operadores -> . SUMA
    (35) operadores -> . RESTA
    (36) operadores -> . MULTIPLICACION
    (37) operadores -> . DIVISION
    (38) operadores -> . MODULO
    (39) operador_logico -> . SMALLER
    (40) operador_logico -> . GREATER
    (41) operador_logico -> . IS_SMALLER_OR_EQUAL
    (42) operador_logico -> . IS_GREATER_OR_EQUAL
    (54) condicion_booleana -> . AND
    (55) condicion_booleana -> . OR
    (56) condicion_booleana -> . XOR
    (57) condicion_booleana -> . IS_EQUAL
    (58) condicion_booleana -> . IS_NOT_EQUAL
    (59) condicion_booleana -> . IS_IDENTICAL
    (60) condicion_booleana -> . IS_NOT_IDENTICAL
    (61) condicion_booleana -> . BOOLEAN_NOT
    (97) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (98) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (99) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (104) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (116) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (121) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (62) operaciones_mat -> . valor operadores valor
    (63) operaciones_mat -> . valor operadores operaciones_mat
    (64) operaciones_mat -> . operaciones_mat_par
    (50) condicion_ifelse -> . condicion_if
    (51) condicion_ifelse -> . condicion_if condicion_else
    (52) condicion_ifelse -> . condicion_if condicion_elseif
    (53) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (100) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (125) bgoto -> . GOTO NOMBRE SEMI
    (103) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (126) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (43) incrementos_mat -> . MINUS_EQUAL
    (44) incrementos_mat -> . MOD_EQUAL
    (45) incrementos_mat -> . MUL_EQUAL
    (46) incrementos_mat -> . PLUS_EQUAL
    (127) bcortes -> . EXIT SEMI
    (128) bcortes -> . BREAK SEMI
    (129) bcortes -> . DEFAULT SEMI
    (130) bcortes -> . CONTINUE SEMI
    (76) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (77) proteccion -> . PUBLIC
    (78) proteccion -> . PRIVATE
    (79) proteccion -> . PROTECTED
    (80) proteccion -> . STATIC
    (88) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (92) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (93) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (91) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (65) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (66) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (67) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (47) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    ECHO            shift and go to state 25
    PRINT           shift and go to state 27
    VARIABLE        shift and go to state 31
    VAR             shift and go to state 32
    DEFINE          shift and go to state 37
    READLINE        shift and go to state 39
    SUMA            shift and go to state 40
    RESTA           shift and go to state 41
    MULTIPLICACION  shift and go to state 42
    DIVISION        shift and go to state 43
    MODULO          shift and go to state 44
    SMALLER         shift and go to state 45
    GREATER         shift and go to state 46
    IS_SMALLER_OR_EQUAL shift and go to state 47
    IS_GREATER_OR_EQUAL shift and go to state 48
    AND             shift and go to state 49
    OR              shift and go to state 50
    XOR             shift and go to state 51
    IS_EQUAL        shift and go to state 52
    IS_NOT_EQUAL    shift and go to state 53
    IS_IDENTICAL    shift and go to state 54
    IS_NOT_IDENTICAL shift and go to state 55
    BOOLEAN_NOT     shift and go to state 56
    WHILE           shift and go to state 57
    DO              shift and go to state 58
    FOR             shift and go to state 59
    FOREACH         shift and go to state 60
    TRY             shift and go to state 61
    SWITCH          shift and go to state 64
    GOTO            shift and go to state 65
    MINUS_EQUAL     shift and go to state 66
    MOD_EQUAL       shift and go to state 67
    MUL_EQUAL       shift and go to state 68
    PLUS_EQUAL      shift and go to state 69
    EXIT            shift and go to state 70
    BREAK           shift and go to state 71
    DEFAULT         shift and go to state 72
    CONTINUE        shift and go to state 73
    RAND            shift and go to state 74
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78
    FUNCTION        shift and go to state 79
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    LPAREN          shift and go to state 28
    IF              shift and go to state 81
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    cuerpo                         shift and go to state 176
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat                shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    bcolas                         shift and go to state 20
    bpila                          shift and go to state 21
    incrementos_mat                shift and go to state 22
    bcortes                        shift and go to state 23
    brand                          shift and go to state 24
    valor                          shift and go to state 26
    proteccion                     shift and go to state 33
    funcion_nparams                shift and go to state 34
    funcion_blank                  shift and go to state 35
    funcion_void                   shift and go to state 36
    operaciones_mat_par            shift and go to state 62
    condicion_if                   shift and go to state 63
    numero                         shift and go to state 80

state 146

    (48) condicion_elseif -> ELSEIF LPAREN . condicion RPAREN LBRACE cuerpo RBRACE
    (94) condicion -> . VARIABLE operador_logico VARIABLE
    (95) condicion -> . valor operador_logico valor
    (96) condicion -> . VARIABLE operador_logico valor
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    VARIABLE        shift and go to state 137
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    condicion                      shift and go to state 177
    valor                          shift and go to state 138
    numero                         shift and go to state 80

state 147

    (100) bswitch -> SWITCH LPAREN VARIABLE . RPAREN LBRACE innerSwitch RBRACE

    RPAREN          shift and go to state 178


state 148

    (125) bgoto -> GOTO NOMBRE SEMI .

    $end            reduce using rule 125 (bgoto -> GOTO NOMBRE SEMI .)
    RBRACE          reduce using rule 125 (bgoto -> GOTO NOMBRE SEMI .)
    SEMI            reduce using rule 125 (bgoto -> GOTO NOMBRE SEMI .)
    BREAK           reduce using rule 125 (bgoto -> GOTO NOMBRE SEMI .)


state 149

    (76) brand -> RAND LPAREN ENTERO . COMMA ENTERO RPAREN SEMI

    COMMA           shift and go to state 179


state 150

    (88) funcion_nparams -> FUNCTION NOMBRE LPAREN . params_list RPAREN stc_bloque_def
    (92) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN stc_bloque_def
    (93) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN LBRACE empty RBRACE
    (91) funcion_void -> FUNCTION NOMBRE LPAREN . RPAREN COLON VOID LBRACE empty RBRACE
    (89) params_list -> . params_list COMMA param
    (90) params_list -> . param
    (86) param -> . VARIABLE
    (87) param -> . asignacion
    (68) asignacion -> . VARIABLE EQUALS valor SEMI
    (69) asignacion -> . VAR asignacion
    (70) asignacion -> . proteccion asignacion
    (77) proteccion -> . PUBLIC
    (78) proteccion -> . PRIVATE
    (79) proteccion -> . PROTECTED
    (80) proteccion -> . STATIC

    RPAREN          shift and go to state 181
    VARIABLE        shift and go to state 183
    VAR             shift and go to state 32
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78

    params_list                    shift and go to state 180
    param                          shift and go to state 182
    asignacion                     shift and go to state 184
    proteccion                     shift and go to state 93

state 151

    (47) condicion_if -> IF LPAREN condicion . RPAREN LBRACE cuerpo RBRACE

    RPAREN          shift and go to state 185


state 152

    (27) imprimir -> ECHO NOMBRE LBRACKET ENTERO . RBRACKET SEMI

    RBRACKET        shift and go to state 186


state 153

    (26) imprimir -> PRINT LPAREN valor RPAREN . SEMI

    SEMI            shift and go to state 187


state 154

    (65) operaciones_mat_par -> LPAREN valor operadores valor . RPAREN
    (67) operaciones_mat_par -> valor . operadores operaciones_mat_par
    (34) operadores -> . SUMA
    (35) operadores -> . RESTA
    (36) operadores -> . MULTIPLICACION
    (37) operadores -> . DIVISION
    (38) operadores -> . MODULO

    RPAREN          shift and go to state 189
    SUMA            shift and go to state 40
    RESTA           shift and go to state 41
    MULTIPLICACION  shift and go to state 42
    DIVISION        shift and go to state 43
    MODULO          shift and go to state 44

    operadores                     shift and go to state 188

state 155

    (66) operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par . RPAREN

    RPAREN          shift and go to state 190


state 156

    (68) asignacion -> VARIABLE EQUALS valor SEMI .

    $end            reduce using rule 68 (asignacion -> VARIABLE EQUALS valor SEMI .)
    RBRACE          reduce using rule 68 (asignacion -> VARIABLE EQUALS valor SEMI .)
    SEMI            reduce using rule 68 (asignacion -> VARIABLE EQUALS valor SEMI .)
    BREAK           reduce using rule 68 (asignacion -> VARIABLE EQUALS valor SEMI .)
    VARIABLE        reduce using rule 68 (asignacion -> VARIABLE EQUALS valor SEMI .)
    STRING          reduce using rule 68 (asignacion -> VARIABLE EQUALS valor SEMI .)
    NOMBRE          reduce using rule 68 (asignacion -> VARIABLE EQUALS valor SEMI .)
    ENTERO          reduce using rule 68 (asignacion -> VARIABLE EQUALS valor SEMI .)
    DECIMAL         reduce using rule 68 (asignacion -> VARIABLE EQUALS valor SEMI .)
    RPAREN          reduce using rule 68 (asignacion -> VARIABLE EQUALS valor SEMI .)
    COMMA           reduce using rule 68 (asignacion -> VARIABLE EQUALS valor SEMI .)


state 157

    (71) asignacion_array -> VARIABLE EQUALS array_def SEMI .

    $end            reduce using rule 71 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    RBRACE          reduce using rule 71 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    SEMI            reduce using rule 71 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    BREAK           reduce using rule 71 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)


state 158

    (103) bcolas -> VARIABLE EQUALS NEW SPLQUEUE . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 191


state 159

    (126) bpila -> VARIABLE EQUALS NEW SPLSTACK . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 192


state 160

    (117) array_def -> ARRAY LPAREN . RPAREN
    (118) array_def -> ARRAY LPAREN . array_elmnt RPAREN
    (119) array_elmnt -> . array_elmnt COMMA valor
    (120) array_elmnt -> . valor
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    RPAREN          shift and go to state 193
    VARIABLE        shift and go to state 85
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    array_elmnt                    shift and go to state 194
    valor                          shift and go to state 195
    numero                         shift and go to state 80

state 161

    (88) funcion_nparams -> FUNCTION NOMBRE LPAREN . params_list RPAREN stc_bloque_def
    (92) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN stc_bloque_def
    (93) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN LBRACE empty RBRACE
    (89) params_list -> . params_list COMMA param
    (90) params_list -> . param
    (86) param -> . VARIABLE
    (87) param -> . asignacion
    (68) asignacion -> . VARIABLE EQUALS valor SEMI
    (69) asignacion -> . VAR asignacion
    (70) asignacion -> . proteccion asignacion
    (77) proteccion -> . PUBLIC
    (78) proteccion -> . PRIVATE
    (79) proteccion -> . PROTECTED
    (80) proteccion -> . STATIC

    RPAREN          shift and go to state 196
    VARIABLE        shift and go to state 183
    VAR             shift and go to state 32
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78

    params_list                    shift and go to state 180
    param                          shift and go to state 182
    asignacion                     shift and go to state 184
    proteccion                     shift and go to state 93

state 162

    (72) constante -> DEFINE LPAREN STRING COMMA . valor RPAREN SEMI
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    VARIABLE        shift and go to state 85
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    valor                          shift and go to state 197
    numero                         shift and go to state 80

state 163

    (73) constante -> DEFINE LPAREN NOMBRE COMMA . ARRAY RPAREN SEMI

    ARRAY           shift and go to state 198


state 164

    (74) lectura -> READLINE LPAREN STRING RPAREN . SEMI

    SEMI            shift and go to state 199


state 165

    (75) lectura -> READLINE LPAREN RPAREN SEMI .

    $end            reduce using rule 75 (lectura -> READLINE LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 75 (lectura -> READLINE LPAREN RPAREN SEMI .)
    SEMI            reduce using rule 75 (lectura -> READLINE LPAREN RPAREN SEMI .)
    BREAK           reduce using rule 75 (lectura -> READLINE LPAREN RPAREN SEMI .)


state 166

    (97) bwhile -> WHILE LPAREN condicion RPAREN . LBRACE stc_bloque RBRACE
    (98) bwhile -> WHILE LPAREN condicion RPAREN . COLON stc_bloque

    LBRACE          shift and go to state 200
    COLON           shift and go to state 201


state 167

    (94) condicion -> VARIABLE operador_logico . VARIABLE
    (96) condicion -> VARIABLE operador_logico . valor
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    VARIABLE        shift and go to state 202
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    valor                          shift and go to state 203
    numero                         shift and go to state 80

state 168

    (95) condicion -> valor operador_logico . valor
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    VARIABLE        shift and go to state 85
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    valor                          shift and go to state 204
    numero                         shift and go to state 80

state 169

    (99) bdo -> DO LBRACE cuerpo RBRACE . bwhile
    (97) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (98) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque

    WHILE           shift and go to state 57

    bwhile                         shift and go to state 205

state 170

    (104) bfor -> FOR LPAREN asignacion condicion . SEMI for_incr RPAREN stc_bloque_def

    SEMI            shift and go to state 206


state 171

    (116) bforeach -> FOREACH LPAREN VARIABLE AS . VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 207


state 172

    (109) stc_bloque_def -> LBRACE stc_bloque . RBRACE
    (105) stc_bloque -> stc_bloque . SEMI cuerpo

    RBRACE          shift and go to state 208
    SEMI            shift and go to state 209


state 173

    (106) stc_bloque -> empty .

    RBRACE          reduce using rule 106 (stc_bloque -> empty .)
    SEMI            reduce using rule 106 (stc_bloque -> empty .)
    $end            reduce using rule 106 (stc_bloque -> empty .)
    BREAK           reduce using rule 106 (stc_bloque -> empty .)


state 174

    (107) stc_bloque -> RETURN .
    (108) stc_bloque -> RETURN . NULL

    RBRACE          reduce using rule 107 (stc_bloque -> RETURN .)
    SEMI            reduce using rule 107 (stc_bloque -> RETURN .)
    $end            reduce using rule 107 (stc_bloque -> RETURN .)
    BREAK           reduce using rule 107 (stc_bloque -> RETURN .)
    NULL            shift and go to state 210


state 175

    (121) btry -> TRY LBRACE stc_bloque_def RBRACE . catches
    (122) catches -> . catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def
    (123) catches -> . empty
    (124) empty -> .

    CATCH           reduce using rule 124 (empty -> .)
    $end            reduce using rule 124 (empty -> .)
    RBRACE          reduce using rule 124 (empty -> .)
    SEMI            reduce using rule 124 (empty -> .)
    BREAK           reduce using rule 124 (empty -> .)

    catches                        shift and go to state 211
    empty                          shift and go to state 212

state 176

    (49) condicion_else -> ELSE LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 213


state 177

    (48) condicion_elseif -> ELSEIF LPAREN condicion . RPAREN LBRACE cuerpo RBRACE

    RPAREN          shift and go to state 214


state 178

    (100) bswitch -> SWITCH LPAREN VARIABLE RPAREN . LBRACE innerSwitch RBRACE

    LBRACE          shift and go to state 215


state 179

    (76) brand -> RAND LPAREN ENTERO COMMA . ENTERO RPAREN SEMI

    ENTERO          shift and go to state 216


state 180

    (88) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list . RPAREN stc_bloque_def
    (89) params_list -> params_list . COMMA param

    RPAREN          shift and go to state 217
    COMMA           shift and go to state 218


state 181

    (92) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . stc_bloque_def
    (93) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . LBRACE empty RBRACE
    (91) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN . COLON VOID LBRACE empty RBRACE
    (109) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 220
    COLON           shift and go to state 221

    stc_bloque_def                 shift and go to state 219

state 182

    (90) params_list -> param .

    RPAREN          reduce using rule 90 (params_list -> param .)
    COMMA           reduce using rule 90 (params_list -> param .)


state 183

    (86) param -> VARIABLE .
    (68) asignacion -> VARIABLE . EQUALS valor SEMI

    RPAREN          reduce using rule 86 (param -> VARIABLE .)
    COMMA           reduce using rule 86 (param -> VARIABLE .)
    EQUALS          shift and go to state 130


state 184

    (87) param -> asignacion .

    RPAREN          reduce using rule 87 (param -> asignacion .)
    COMMA           reduce using rule 87 (param -> asignacion .)


state 185

    (47) condicion_if -> IF LPAREN condicion RPAREN . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 222


state 186

    (27) imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET . SEMI

    SEMI            shift and go to state 223


state 187

    (26) imprimir -> PRINT LPAREN valor RPAREN SEMI .

    $end            reduce using rule 26 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    RBRACE          reduce using rule 26 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    SEMI            reduce using rule 26 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    BREAK           reduce using rule 26 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)


state 188

    (67) operaciones_mat_par -> valor operadores . operaciones_mat_par
    (65) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (66) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (67) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    LPAREN          shift and go to state 28
    VARIABLE        shift and go to state 85
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    valor                          shift and go to state 224
    operaciones_mat_par            shift and go to state 225
    numero                         shift and go to state 80

state 189

    (65) operaciones_mat_par -> LPAREN valor operadores valor RPAREN .

    $end            reduce using rule 65 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    RBRACE          reduce using rule 65 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    SEMI            reduce using rule 65 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    BREAK           reduce using rule 65 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    RPAREN          reduce using rule 65 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)


state 190

    (66) operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .

    $end            reduce using rule 66 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    RBRACE          reduce using rule 66 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    SEMI            reduce using rule 66 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    BREAK           reduce using rule 66 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    RPAREN          reduce using rule 66 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)


state 191

    (103) bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 226


state 192

    (126) bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 227


state 193

    (117) array_def -> ARRAY LPAREN RPAREN .

    SEMI            reduce using rule 117 (array_def -> ARRAY LPAREN RPAREN .)


state 194

    (118) array_def -> ARRAY LPAREN array_elmnt . RPAREN
    (119) array_elmnt -> array_elmnt . COMMA valor

    RPAREN          shift and go to state 228
    COMMA           shift and go to state 229


state 195

    (120) array_elmnt -> valor .

    RPAREN          reduce using rule 120 (array_elmnt -> valor .)
    COMMA           reduce using rule 120 (array_elmnt -> valor .)


state 196

    (92) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . stc_bloque_def
    (93) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . LBRACE empty RBRACE
    (109) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 220

    stc_bloque_def                 shift and go to state 219

state 197

    (72) constante -> DEFINE LPAREN STRING COMMA valor . RPAREN SEMI

    RPAREN          shift and go to state 230


state 198

    (73) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY . RPAREN SEMI

    RPAREN          shift and go to state 231


state 199

    (74) lectura -> READLINE LPAREN STRING RPAREN SEMI .

    $end            reduce using rule 74 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    RBRACE          reduce using rule 74 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    SEMI            reduce using rule 74 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    BREAK           reduce using rule 74 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)


state 200

    (97) bwhile -> WHILE LPAREN condicion RPAREN LBRACE . stc_bloque RBRACE
    (105) stc_bloque -> . stc_bloque SEMI cuerpo
    (106) stc_bloque -> . empty
    (107) stc_bloque -> . RETURN
    (108) stc_bloque -> . RETURN NULL
    (124) empty -> .

    RETURN          shift and go to state 174
    RBRACE          reduce using rule 124 (empty -> .)
    SEMI            reduce using rule 124 (empty -> .)

    stc_bloque                     shift and go to state 232
    empty                          shift and go to state 173

state 201

    (98) bwhile -> WHILE LPAREN condicion RPAREN COLON . stc_bloque
    (105) stc_bloque -> . stc_bloque SEMI cuerpo
    (106) stc_bloque -> . empty
    (107) stc_bloque -> . RETURN
    (108) stc_bloque -> . RETURN NULL
    (124) empty -> .

    RETURN          shift and go to state 174
    RBRACE          reduce using rule 124 (empty -> .)
    SEMI            reduce using rule 124 (empty -> .)
    $end            reduce using rule 124 (empty -> .)
    BREAK           reduce using rule 124 (empty -> .)

    stc_bloque                     shift and go to state 233
    empty                          shift and go to state 173

state 202

    (94) condicion -> VARIABLE operador_logico VARIABLE .
    (29) valor -> VARIABLE .

  ! reduce/reduce conflict for RPAREN resolved using rule 29 (valor -> VARIABLE .)
  ! reduce/reduce conflict for SEMI resolved using rule 29 (valor -> VARIABLE .)
    RPAREN          reduce using rule 29 (valor -> VARIABLE .)
    SEMI            reduce using rule 29 (valor -> VARIABLE .)

  ! RPAREN          [ reduce using rule 94 (condicion -> VARIABLE operador_logico VARIABLE .) ]
  ! SEMI            [ reduce using rule 94 (condicion -> VARIABLE operador_logico VARIABLE .) ]


state 203

    (96) condicion -> VARIABLE operador_logico valor .

    RPAREN          reduce using rule 96 (condicion -> VARIABLE operador_logico valor .)
    SEMI            reduce using rule 96 (condicion -> VARIABLE operador_logico valor .)


state 204

    (95) condicion -> valor operador_logico valor .

    RPAREN          reduce using rule 95 (condicion -> valor operador_logico valor .)
    SEMI            reduce using rule 95 (condicion -> valor operador_logico valor .)


state 205

    (99) bdo -> DO LBRACE cuerpo RBRACE bwhile .

    $end            reduce using rule 99 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    RBRACE          reduce using rule 99 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    SEMI            reduce using rule 99 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    BREAK           reduce using rule 99 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)


state 206

    (104) bfor -> FOR LPAREN asignacion condicion SEMI . for_incr RPAREN stc_bloque_def
    (110) for_incr -> . VARIABLE SUMA SUMA
    (111) for_incr -> . SUMA SUMA VARIABLE
    (112) for_incr -> . VARIABLE RESTA RESTA
    (113) for_incr -> . RESTA RESTA VARIABLE
    (114) for_incr -> . VARIABLE SUMA EQUALS numero
    (115) for_incr -> . VARIABLE RESTA EQUALS numero

    VARIABLE        shift and go to state 235
    SUMA            shift and go to state 236
    RESTA           shift and go to state 237

    for_incr                       shift and go to state 234

state 207

    (116) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE . RPAREN stc_bloque_def

    RPAREN          shift and go to state 238


state 208

    (109) stc_bloque_def -> LBRACE stc_bloque RBRACE .

    RBRACE          reduce using rule 109 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    $end            reduce using rule 109 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    SEMI            reduce using rule 109 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    BREAK           reduce using rule 109 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    CATCH           reduce using rule 109 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)


state 209

    (105) stc_bloque -> stc_bloque SEMI . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (19) cuerpo -> . bcolas
    (20) cuerpo -> . bpila
    (21) cuerpo -> . incrementos_mat
    (22) cuerpo -> . bcortes
    (23) cuerpo -> . brand
    (24) imprimir -> . ECHO valor SEMI
    (25) imprimir -> . PRINT valor SEMI
    (26) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (27) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (68) asignacion -> . VARIABLE EQUALS valor SEMI
    (69) asignacion -> . VAR asignacion
    (70) asignacion -> . proteccion asignacion
    (71) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (81) funciones -> . funcion_nparams
    (82) funciones -> . proteccion funcion_nparams
    (83) funciones -> . funcion_blank
    (84) funciones -> . proteccion funcion_blank
    (85) funciones -> . funcion_void
    (72) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (73) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (74) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (75) lectura -> . READLINE LPAREN RPAREN SEMI
    (34) operadores -> . SUMA
    (35) operadores -> . RESTA
    (36) operadores -> . MULTIPLICACION
    (37) operadores -> . DIVISION
    (38) operadores -> . MODULO
    (39) operador_logico -> . SMALLER
    (40) operador_logico -> . GREATER
    (41) operador_logico -> . IS_SMALLER_OR_EQUAL
    (42) operador_logico -> . IS_GREATER_OR_EQUAL
    (54) condicion_booleana -> . AND
    (55) condicion_booleana -> . OR
    (56) condicion_booleana -> . XOR
    (57) condicion_booleana -> . IS_EQUAL
    (58) condicion_booleana -> . IS_NOT_EQUAL
    (59) condicion_booleana -> . IS_IDENTICAL
    (60) condicion_booleana -> . IS_NOT_IDENTICAL
    (61) condicion_booleana -> . BOOLEAN_NOT
    (97) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (98) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (99) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (104) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (116) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (121) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (62) operaciones_mat -> . valor operadores valor
    (63) operaciones_mat -> . valor operadores operaciones_mat
    (64) operaciones_mat -> . operaciones_mat_par
    (50) condicion_ifelse -> . condicion_if
    (51) condicion_ifelse -> . condicion_if condicion_else
    (52) condicion_ifelse -> . condicion_if condicion_elseif
    (53) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (100) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (125) bgoto -> . GOTO NOMBRE SEMI
    (103) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (126) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (43) incrementos_mat -> . MINUS_EQUAL
    (44) incrementos_mat -> . MOD_EQUAL
    (45) incrementos_mat -> . MUL_EQUAL
    (46) incrementos_mat -> . PLUS_EQUAL
    (127) bcortes -> . EXIT SEMI
    (128) bcortes -> . BREAK SEMI
    (129) bcortes -> . DEFAULT SEMI
    (130) bcortes -> . CONTINUE SEMI
    (76) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (77) proteccion -> . PUBLIC
    (78) proteccion -> . PRIVATE
    (79) proteccion -> . PROTECTED
    (80) proteccion -> . STATIC
    (88) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (92) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (93) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (91) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (65) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (66) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (67) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (47) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    ECHO            shift and go to state 25
    PRINT           shift and go to state 27
    VARIABLE        shift and go to state 31
    VAR             shift and go to state 32
    DEFINE          shift and go to state 37
    READLINE        shift and go to state 39
    SUMA            shift and go to state 40
    RESTA           shift and go to state 41
    MULTIPLICACION  shift and go to state 42
    DIVISION        shift and go to state 43
    MODULO          shift and go to state 44
    SMALLER         shift and go to state 45
    GREATER         shift and go to state 46
    IS_SMALLER_OR_EQUAL shift and go to state 47
    IS_GREATER_OR_EQUAL shift and go to state 48
    AND             shift and go to state 49
    OR              shift and go to state 50
    XOR             shift and go to state 51
    IS_EQUAL        shift and go to state 52
    IS_NOT_EQUAL    shift and go to state 53
    IS_IDENTICAL    shift and go to state 54
    IS_NOT_IDENTICAL shift and go to state 55
    BOOLEAN_NOT     shift and go to state 56
    WHILE           shift and go to state 57
    DO              shift and go to state 58
    FOR             shift and go to state 59
    FOREACH         shift and go to state 60
    TRY             shift and go to state 61
    SWITCH          shift and go to state 64
    GOTO            shift and go to state 65
    MINUS_EQUAL     shift and go to state 66
    MOD_EQUAL       shift and go to state 67
    MUL_EQUAL       shift and go to state 68
    PLUS_EQUAL      shift and go to state 69
    EXIT            shift and go to state 70
    BREAK           shift and go to state 71
    DEFAULT         shift and go to state 72
    CONTINUE        shift and go to state 73
    RAND            shift and go to state 74
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78
    FUNCTION        shift and go to state 79
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    LPAREN          shift and go to state 28
    IF              shift and go to state 81
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    cuerpo                         shift and go to state 239
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat                shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    bcolas                         shift and go to state 20
    bpila                          shift and go to state 21
    incrementos_mat                shift and go to state 22
    bcortes                        shift and go to state 23
    brand                          shift and go to state 24
    valor                          shift and go to state 26
    proteccion                     shift and go to state 33
    funcion_nparams                shift and go to state 34
    funcion_blank                  shift and go to state 35
    funcion_void                   shift and go to state 36
    operaciones_mat_par            shift and go to state 62
    condicion_if                   shift and go to state 63
    numero                         shift and go to state 80

state 210

    (108) stc_bloque -> RETURN NULL .

    RBRACE          reduce using rule 108 (stc_bloque -> RETURN NULL .)
    SEMI            reduce using rule 108 (stc_bloque -> RETURN NULL .)
    $end            reduce using rule 108 (stc_bloque -> RETURN NULL .)
    BREAK           reduce using rule 108 (stc_bloque -> RETURN NULL .)


state 211

    (121) btry -> TRY LBRACE stc_bloque_def RBRACE catches .
    (122) catches -> catches . CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def

    $end            reduce using rule 121 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    RBRACE          reduce using rule 121 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    SEMI            reduce using rule 121 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    BREAK           reduce using rule 121 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    CATCH           shift and go to state 240


state 212

    (123) catches -> empty .

    CATCH           reduce using rule 123 (catches -> empty .)
    $end            reduce using rule 123 (catches -> empty .)
    RBRACE          reduce using rule 123 (catches -> empty .)
    SEMI            reduce using rule 123 (catches -> empty .)
    BREAK           reduce using rule 123 (catches -> empty .)


state 213

    (49) condicion_else -> ELSE LBRACE cuerpo RBRACE .

    $end            reduce using rule 49 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 49 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    SEMI            reduce using rule 49 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    BREAK           reduce using rule 49 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)


state 214

    (48) condicion_elseif -> ELSEIF LPAREN condicion RPAREN . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 241


state 215

    (100) bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE . innerSwitch RBRACE
    (101) innerSwitch -> . CASE ENTERO COLON cuerpo BREAK SEMI
    (102) innerSwitch -> . CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch

    CASE            shift and go to state 243

    innerSwitch                    shift and go to state 242

state 216

    (76) brand -> RAND LPAREN ENTERO COMMA ENTERO . RPAREN SEMI

    RPAREN          shift and go to state 244


state 217

    (88) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN . stc_bloque_def
    (109) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 142

    stc_bloque_def                 shift and go to state 245

state 218

    (89) params_list -> params_list COMMA . param
    (86) param -> . VARIABLE
    (87) param -> . asignacion
    (68) asignacion -> . VARIABLE EQUALS valor SEMI
    (69) asignacion -> . VAR asignacion
    (70) asignacion -> . proteccion asignacion
    (77) proteccion -> . PUBLIC
    (78) proteccion -> . PRIVATE
    (79) proteccion -> . PROTECTED
    (80) proteccion -> . STATIC

    VARIABLE        shift and go to state 183
    VAR             shift and go to state 32
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78

    param                          shift and go to state 246
    asignacion                     shift and go to state 184
    proteccion                     shift and go to state 93

state 219

    (92) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .

    $end            reduce using rule 92 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 92 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    SEMI            reduce using rule 92 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    BREAK           reduce using rule 92 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)


state 220

    (93) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE . empty RBRACE
    (109) stc_bloque_def -> LBRACE . stc_bloque RBRACE
    (124) empty -> .
    (105) stc_bloque -> . stc_bloque SEMI cuerpo
    (106) stc_bloque -> . empty
    (107) stc_bloque -> . RETURN
    (108) stc_bloque -> . RETURN NULL

    RBRACE          reduce using rule 124 (empty -> .)
    SEMI            reduce using rule 124 (empty -> .)
    RETURN          shift and go to state 174

    empty                          shift and go to state 247
    stc_bloque                     shift and go to state 172

state 221

    (91) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON . VOID LBRACE empty RBRACE

    VOID            shift and go to state 248


state 222

    (47) condicion_if -> IF LPAREN condicion RPAREN LBRACE . cuerpo RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (19) cuerpo -> . bcolas
    (20) cuerpo -> . bpila
    (21) cuerpo -> . incrementos_mat
    (22) cuerpo -> . bcortes
    (23) cuerpo -> . brand
    (24) imprimir -> . ECHO valor SEMI
    (25) imprimir -> . PRINT valor SEMI
    (26) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (27) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (68) asignacion -> . VARIABLE EQUALS valor SEMI
    (69) asignacion -> . VAR asignacion
    (70) asignacion -> . proteccion asignacion
    (71) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (81) funciones -> . funcion_nparams
    (82) funciones -> . proteccion funcion_nparams
    (83) funciones -> . funcion_blank
    (84) funciones -> . proteccion funcion_blank
    (85) funciones -> . funcion_void
    (72) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (73) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (74) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (75) lectura -> . READLINE LPAREN RPAREN SEMI
    (34) operadores -> . SUMA
    (35) operadores -> . RESTA
    (36) operadores -> . MULTIPLICACION
    (37) operadores -> . DIVISION
    (38) operadores -> . MODULO
    (39) operador_logico -> . SMALLER
    (40) operador_logico -> . GREATER
    (41) operador_logico -> . IS_SMALLER_OR_EQUAL
    (42) operador_logico -> . IS_GREATER_OR_EQUAL
    (54) condicion_booleana -> . AND
    (55) condicion_booleana -> . OR
    (56) condicion_booleana -> . XOR
    (57) condicion_booleana -> . IS_EQUAL
    (58) condicion_booleana -> . IS_NOT_EQUAL
    (59) condicion_booleana -> . IS_IDENTICAL
    (60) condicion_booleana -> . IS_NOT_IDENTICAL
    (61) condicion_booleana -> . BOOLEAN_NOT
    (97) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (98) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (99) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (104) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (116) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (121) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (62) operaciones_mat -> . valor operadores valor
    (63) operaciones_mat -> . valor operadores operaciones_mat
    (64) operaciones_mat -> . operaciones_mat_par
    (50) condicion_ifelse -> . condicion_if
    (51) condicion_ifelse -> . condicion_if condicion_else
    (52) condicion_ifelse -> . condicion_if condicion_elseif
    (53) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (100) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (125) bgoto -> . GOTO NOMBRE SEMI
    (103) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (126) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (43) incrementos_mat -> . MINUS_EQUAL
    (44) incrementos_mat -> . MOD_EQUAL
    (45) incrementos_mat -> . MUL_EQUAL
    (46) incrementos_mat -> . PLUS_EQUAL
    (127) bcortes -> . EXIT SEMI
    (128) bcortes -> . BREAK SEMI
    (129) bcortes -> . DEFAULT SEMI
    (130) bcortes -> . CONTINUE SEMI
    (76) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (77) proteccion -> . PUBLIC
    (78) proteccion -> . PRIVATE
    (79) proteccion -> . PROTECTED
    (80) proteccion -> . STATIC
    (88) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (92) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (93) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (91) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (65) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (66) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (67) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (47) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    ECHO            shift and go to state 25
    PRINT           shift and go to state 27
    VARIABLE        shift and go to state 31
    VAR             shift and go to state 32
    DEFINE          shift and go to state 37
    READLINE        shift and go to state 39
    SUMA            shift and go to state 40
    RESTA           shift and go to state 41
    MULTIPLICACION  shift and go to state 42
    DIVISION        shift and go to state 43
    MODULO          shift and go to state 44
    SMALLER         shift and go to state 45
    GREATER         shift and go to state 46
    IS_SMALLER_OR_EQUAL shift and go to state 47
    IS_GREATER_OR_EQUAL shift and go to state 48
    AND             shift and go to state 49
    OR              shift and go to state 50
    XOR             shift and go to state 51
    IS_EQUAL        shift and go to state 52
    IS_NOT_EQUAL    shift and go to state 53
    IS_IDENTICAL    shift and go to state 54
    IS_NOT_IDENTICAL shift and go to state 55
    BOOLEAN_NOT     shift and go to state 56
    WHILE           shift and go to state 57
    DO              shift and go to state 58
    FOR             shift and go to state 59
    FOREACH         shift and go to state 60
    TRY             shift and go to state 61
    SWITCH          shift and go to state 64
    GOTO            shift and go to state 65
    MINUS_EQUAL     shift and go to state 66
    MOD_EQUAL       shift and go to state 67
    MUL_EQUAL       shift and go to state 68
    PLUS_EQUAL      shift and go to state 69
    EXIT            shift and go to state 70
    BREAK           shift and go to state 71
    DEFAULT         shift and go to state 72
    CONTINUE        shift and go to state 73
    RAND            shift and go to state 74
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78
    FUNCTION        shift and go to state 79
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    LPAREN          shift and go to state 28
    IF              shift and go to state 81
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    cuerpo                         shift and go to state 249
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat                shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    bcolas                         shift and go to state 20
    bpila                          shift and go to state 21
    incrementos_mat                shift and go to state 22
    bcortes                        shift and go to state 23
    brand                          shift and go to state 24
    valor                          shift and go to state 26
    proteccion                     shift and go to state 33
    funcion_nparams                shift and go to state 34
    funcion_blank                  shift and go to state 35
    funcion_void                   shift and go to state 36
    operaciones_mat_par            shift and go to state 62
    condicion_if                   shift and go to state 63
    numero                         shift and go to state 80

state 223

    (27) imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .

    $end            reduce using rule 27 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    RBRACE          reduce using rule 27 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    SEMI            reduce using rule 27 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    BREAK           reduce using rule 27 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)


state 224

    (67) operaciones_mat_par -> valor . operadores operaciones_mat_par
    (34) operadores -> . SUMA
    (35) operadores -> . RESTA
    (36) operadores -> . MULTIPLICACION
    (37) operadores -> . DIVISION
    (38) operadores -> . MODULO

    SUMA            shift and go to state 40
    RESTA           shift and go to state 41
    MULTIPLICACION  shift and go to state 42
    DIVISION        shift and go to state 43
    MODULO          shift and go to state 44

    operadores                     shift and go to state 188

state 225

    (67) operaciones_mat_par -> valor operadores operaciones_mat_par .

    RPAREN          reduce using rule 67 (operaciones_mat_par -> valor operadores operaciones_mat_par .)


state 226

    (103) bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN . SEMI

    SEMI            shift and go to state 250


state 227

    (126) bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN . SEMI

    SEMI            shift and go to state 251


state 228

    (118) array_def -> ARRAY LPAREN array_elmnt RPAREN .

    SEMI            reduce using rule 118 (array_def -> ARRAY LPAREN array_elmnt RPAREN .)


state 229

    (119) array_elmnt -> array_elmnt COMMA . valor
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    VARIABLE        shift and go to state 85
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    valor                          shift and go to state 252
    numero                         shift and go to state 80

state 230

    (72) constante -> DEFINE LPAREN STRING COMMA valor RPAREN . SEMI

    SEMI            shift and go to state 253


state 231

    (73) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN . SEMI

    SEMI            shift and go to state 254


state 232

    (97) bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque . RBRACE
    (105) stc_bloque -> stc_bloque . SEMI cuerpo

    RBRACE          shift and go to state 255
    SEMI            shift and go to state 209


state 233

    (98) bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .
    (105) stc_bloque -> stc_bloque . SEMI cuerpo

  ! shift/reduce conflict for SEMI resolved as shift
    $end            reduce using rule 98 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .)
    RBRACE          reduce using rule 98 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .)
    BREAK           reduce using rule 98 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .)
    SEMI            shift and go to state 209

  ! SEMI            [ reduce using rule 98 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]


state 234

    (104) bfor -> FOR LPAREN asignacion condicion SEMI for_incr . RPAREN stc_bloque_def

    RPAREN          shift and go to state 256


state 235

    (110) for_incr -> VARIABLE . SUMA SUMA
    (112) for_incr -> VARIABLE . RESTA RESTA
    (114) for_incr -> VARIABLE . SUMA EQUALS numero
    (115) for_incr -> VARIABLE . RESTA EQUALS numero

    SUMA            shift and go to state 257
    RESTA           shift and go to state 258


state 236

    (111) for_incr -> SUMA . SUMA VARIABLE

    SUMA            shift and go to state 259


state 237

    (113) for_incr -> RESTA . RESTA VARIABLE

    RESTA           shift and go to state 260


state 238

    (116) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN . stc_bloque_def
    (109) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 142

    stc_bloque_def                 shift and go to state 261

state 239

    (105) stc_bloque -> stc_bloque SEMI cuerpo .

    RBRACE          reduce using rule 105 (stc_bloque -> stc_bloque SEMI cuerpo .)
    SEMI            reduce using rule 105 (stc_bloque -> stc_bloque SEMI cuerpo .)
    $end            reduce using rule 105 (stc_bloque -> stc_bloque SEMI cuerpo .)
    BREAK           reduce using rule 105 (stc_bloque -> stc_bloque SEMI cuerpo .)


state 240

    (122) catches -> catches CATCH . LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def

    LPAREN          shift and go to state 262


state 241

    (48) condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE . cuerpo RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (19) cuerpo -> . bcolas
    (20) cuerpo -> . bpila
    (21) cuerpo -> . incrementos_mat
    (22) cuerpo -> . bcortes
    (23) cuerpo -> . brand
    (24) imprimir -> . ECHO valor SEMI
    (25) imprimir -> . PRINT valor SEMI
    (26) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (27) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (68) asignacion -> . VARIABLE EQUALS valor SEMI
    (69) asignacion -> . VAR asignacion
    (70) asignacion -> . proteccion asignacion
    (71) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (81) funciones -> . funcion_nparams
    (82) funciones -> . proteccion funcion_nparams
    (83) funciones -> . funcion_blank
    (84) funciones -> . proteccion funcion_blank
    (85) funciones -> . funcion_void
    (72) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (73) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (74) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (75) lectura -> . READLINE LPAREN RPAREN SEMI
    (34) operadores -> . SUMA
    (35) operadores -> . RESTA
    (36) operadores -> . MULTIPLICACION
    (37) operadores -> . DIVISION
    (38) operadores -> . MODULO
    (39) operador_logico -> . SMALLER
    (40) operador_logico -> . GREATER
    (41) operador_logico -> . IS_SMALLER_OR_EQUAL
    (42) operador_logico -> . IS_GREATER_OR_EQUAL
    (54) condicion_booleana -> . AND
    (55) condicion_booleana -> . OR
    (56) condicion_booleana -> . XOR
    (57) condicion_booleana -> . IS_EQUAL
    (58) condicion_booleana -> . IS_NOT_EQUAL
    (59) condicion_booleana -> . IS_IDENTICAL
    (60) condicion_booleana -> . IS_NOT_IDENTICAL
    (61) condicion_booleana -> . BOOLEAN_NOT
    (97) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (98) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (99) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (104) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (116) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (121) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (62) operaciones_mat -> . valor operadores valor
    (63) operaciones_mat -> . valor operadores operaciones_mat
    (64) operaciones_mat -> . operaciones_mat_par
    (50) condicion_ifelse -> . condicion_if
    (51) condicion_ifelse -> . condicion_if condicion_else
    (52) condicion_ifelse -> . condicion_if condicion_elseif
    (53) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (100) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (125) bgoto -> . GOTO NOMBRE SEMI
    (103) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (126) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (43) incrementos_mat -> . MINUS_EQUAL
    (44) incrementos_mat -> . MOD_EQUAL
    (45) incrementos_mat -> . MUL_EQUAL
    (46) incrementos_mat -> . PLUS_EQUAL
    (127) bcortes -> . EXIT SEMI
    (128) bcortes -> . BREAK SEMI
    (129) bcortes -> . DEFAULT SEMI
    (130) bcortes -> . CONTINUE SEMI
    (76) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (77) proteccion -> . PUBLIC
    (78) proteccion -> . PRIVATE
    (79) proteccion -> . PROTECTED
    (80) proteccion -> . STATIC
    (88) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (92) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (93) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (91) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (65) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (66) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (67) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (47) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    ECHO            shift and go to state 25
    PRINT           shift and go to state 27
    VARIABLE        shift and go to state 31
    VAR             shift and go to state 32
    DEFINE          shift and go to state 37
    READLINE        shift and go to state 39
    SUMA            shift and go to state 40
    RESTA           shift and go to state 41
    MULTIPLICACION  shift and go to state 42
    DIVISION        shift and go to state 43
    MODULO          shift and go to state 44
    SMALLER         shift and go to state 45
    GREATER         shift and go to state 46
    IS_SMALLER_OR_EQUAL shift and go to state 47
    IS_GREATER_OR_EQUAL shift and go to state 48
    AND             shift and go to state 49
    OR              shift and go to state 50
    XOR             shift and go to state 51
    IS_EQUAL        shift and go to state 52
    IS_NOT_EQUAL    shift and go to state 53
    IS_IDENTICAL    shift and go to state 54
    IS_NOT_IDENTICAL shift and go to state 55
    BOOLEAN_NOT     shift and go to state 56
    WHILE           shift and go to state 57
    DO              shift and go to state 58
    FOR             shift and go to state 59
    FOREACH         shift and go to state 60
    TRY             shift and go to state 61
    SWITCH          shift and go to state 64
    GOTO            shift and go to state 65
    MINUS_EQUAL     shift and go to state 66
    MOD_EQUAL       shift and go to state 67
    MUL_EQUAL       shift and go to state 68
    PLUS_EQUAL      shift and go to state 69
    EXIT            shift and go to state 70
    BREAK           shift and go to state 71
    DEFAULT         shift and go to state 72
    CONTINUE        shift and go to state 73
    RAND            shift and go to state 74
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78
    FUNCTION        shift and go to state 79
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    LPAREN          shift and go to state 28
    IF              shift and go to state 81
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    cuerpo                         shift and go to state 263
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat                shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    bcolas                         shift and go to state 20
    bpila                          shift and go to state 21
    incrementos_mat                shift and go to state 22
    bcortes                        shift and go to state 23
    brand                          shift and go to state 24
    valor                          shift and go to state 26
    proteccion                     shift and go to state 33
    funcion_nparams                shift and go to state 34
    funcion_blank                  shift and go to state 35
    funcion_void                   shift and go to state 36
    operaciones_mat_par            shift and go to state 62
    condicion_if                   shift and go to state 63
    numero                         shift and go to state 80

state 242

    (100) bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch . RBRACE

    RBRACE          shift and go to state 264


state 243

    (101) innerSwitch -> CASE . ENTERO COLON cuerpo BREAK SEMI
    (102) innerSwitch -> CASE . ENTERO COLON cuerpo BREAK SEMI innerSwitch

    ENTERO          shift and go to state 265


state 244

    (76) brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN . SEMI

    SEMI            shift and go to state 266


state 245

    (88) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .

    $end            reduce using rule 88 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 88 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    SEMI            reduce using rule 88 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    BREAK           reduce using rule 88 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)


state 246

    (89) params_list -> params_list COMMA param .

    RPAREN          reduce using rule 89 (params_list -> params_list COMMA param .)
    COMMA           reduce using rule 89 (params_list -> params_list COMMA param .)


state 247

    (93) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty . RBRACE
    (106) stc_bloque -> empty .

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 267
    SEMI            reduce using rule 106 (stc_bloque -> empty .)

  ! RBRACE          [ reduce using rule 106 (stc_bloque -> empty .) ]


state 248

    (91) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID . LBRACE empty RBRACE

    LBRACE          shift and go to state 268


state 249

    (47) condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 269


state 250

    (103) bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .

    $end            reduce using rule 103 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 103 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    SEMI            reduce using rule 103 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    BREAK           reduce using rule 103 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)


state 251

    (126) bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .

    $end            reduce using rule 126 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 126 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    SEMI            reduce using rule 126 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    BREAK           reduce using rule 126 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)


state 252

    (119) array_elmnt -> array_elmnt COMMA valor .

    RPAREN          reduce using rule 119 (array_elmnt -> array_elmnt COMMA valor .)
    COMMA           reduce using rule 119 (array_elmnt -> array_elmnt COMMA valor .)


state 253

    (72) constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .

    $end            reduce using rule 72 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    RBRACE          reduce using rule 72 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    SEMI            reduce using rule 72 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    BREAK           reduce using rule 72 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)


state 254

    (73) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .

    $end            reduce using rule 73 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    RBRACE          reduce using rule 73 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    SEMI            reduce using rule 73 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    BREAK           reduce using rule 73 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)


state 255

    (97) bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .

    $end            reduce using rule 97 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    RBRACE          reduce using rule 97 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    SEMI            reduce using rule 97 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    BREAK           reduce using rule 97 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)


state 256

    (104) bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN . stc_bloque_def
    (109) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 142

    stc_bloque_def                 shift and go to state 270

state 257

    (110) for_incr -> VARIABLE SUMA . SUMA
    (114) for_incr -> VARIABLE SUMA . EQUALS numero

    SUMA            shift and go to state 271
    EQUALS          shift and go to state 272


state 258

    (112) for_incr -> VARIABLE RESTA . RESTA
    (115) for_incr -> VARIABLE RESTA . EQUALS numero

    RESTA           shift and go to state 273
    EQUALS          shift and go to state 274


state 259

    (111) for_incr -> SUMA SUMA . VARIABLE

    VARIABLE        shift and go to state 275


state 260

    (113) for_incr -> RESTA RESTA . VARIABLE

    VARIABLE        shift and go to state 276


state 261

    (116) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .

    $end            reduce using rule 116 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 116 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    SEMI            reduce using rule 116 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    BREAK           reduce using rule 116 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)


state 262

    (122) catches -> catches CATCH LPAREN . NOMBRE VARIABLE RPAREN stc_bloque_def

    NOMBRE          shift and go to state 277


state 263

    (48) condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 278


state 264

    (100) bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .

    $end            reduce using rule 100 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    RBRACE          reduce using rule 100 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    SEMI            reduce using rule 100 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    BREAK           reduce using rule 100 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)


state 265

    (101) innerSwitch -> CASE ENTERO . COLON cuerpo BREAK SEMI
    (102) innerSwitch -> CASE ENTERO . COLON cuerpo BREAK SEMI innerSwitch

    COLON           shift and go to state 279


state 266

    (76) brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .

    $end            reduce using rule 76 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    RBRACE          reduce using rule 76 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    SEMI            reduce using rule 76 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    BREAK           reduce using rule 76 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)


state 267

    (93) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .

    $end            reduce using rule 93 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    RBRACE          reduce using rule 93 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    SEMI            reduce using rule 93 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    BREAK           reduce using rule 93 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)


state 268

    (91) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE . empty RBRACE
    (124) empty -> .

    RBRACE          reduce using rule 124 (empty -> .)

    empty                          shift and go to state 280

state 269

    (47) condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .

    ELSE            reduce using rule 47 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    ELSEIF          reduce using rule 47 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    $end            reduce using rule 47 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 47 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SEMI            reduce using rule 47 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    BREAK           reduce using rule 47 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)


state 270

    (104) bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def .

    $end            reduce using rule 104 (bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 104 (bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def .)
    SEMI            reduce using rule 104 (bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def .)
    BREAK           reduce using rule 104 (bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def .)


state 271

    (110) for_incr -> VARIABLE SUMA SUMA .

    RPAREN          reduce using rule 110 (for_incr -> VARIABLE SUMA SUMA .)


state 272

    (114) for_incr -> VARIABLE SUMA EQUALS . numero
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    numero                         shift and go to state 281

state 273

    (112) for_incr -> VARIABLE RESTA RESTA .

    RPAREN          reduce using rule 112 (for_incr -> VARIABLE RESTA RESTA .)


state 274

    (115) for_incr -> VARIABLE RESTA EQUALS . numero
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    numero                         shift and go to state 282

state 275

    (111) for_incr -> SUMA SUMA VARIABLE .

    RPAREN          reduce using rule 111 (for_incr -> SUMA SUMA VARIABLE .)


state 276

    (113) for_incr -> RESTA RESTA VARIABLE .

    RPAREN          reduce using rule 113 (for_incr -> RESTA RESTA VARIABLE .)


state 277

    (122) catches -> catches CATCH LPAREN NOMBRE . VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 283


state 278

    (48) condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .

    ELSE            reduce using rule 48 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    $end            reduce using rule 48 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 48 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SEMI            reduce using rule 48 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    BREAK           reduce using rule 48 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)


state 279

    (101) innerSwitch -> CASE ENTERO COLON . cuerpo BREAK SEMI
    (102) innerSwitch -> CASE ENTERO COLON . cuerpo BREAK SEMI innerSwitch
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (19) cuerpo -> . bcolas
    (20) cuerpo -> . bpila
    (21) cuerpo -> . incrementos_mat
    (22) cuerpo -> . bcortes
    (23) cuerpo -> . brand
    (24) imprimir -> . ECHO valor SEMI
    (25) imprimir -> . PRINT valor SEMI
    (26) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (27) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (68) asignacion -> . VARIABLE EQUALS valor SEMI
    (69) asignacion -> . VAR asignacion
    (70) asignacion -> . proteccion asignacion
    (71) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (81) funciones -> . funcion_nparams
    (82) funciones -> . proteccion funcion_nparams
    (83) funciones -> . funcion_blank
    (84) funciones -> . proteccion funcion_blank
    (85) funciones -> . funcion_void
    (72) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (73) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (74) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (75) lectura -> . READLINE LPAREN RPAREN SEMI
    (34) operadores -> . SUMA
    (35) operadores -> . RESTA
    (36) operadores -> . MULTIPLICACION
    (37) operadores -> . DIVISION
    (38) operadores -> . MODULO
    (39) operador_logico -> . SMALLER
    (40) operador_logico -> . GREATER
    (41) operador_logico -> . IS_SMALLER_OR_EQUAL
    (42) operador_logico -> . IS_GREATER_OR_EQUAL
    (54) condicion_booleana -> . AND
    (55) condicion_booleana -> . OR
    (56) condicion_booleana -> . XOR
    (57) condicion_booleana -> . IS_EQUAL
    (58) condicion_booleana -> . IS_NOT_EQUAL
    (59) condicion_booleana -> . IS_IDENTICAL
    (60) condicion_booleana -> . IS_NOT_IDENTICAL
    (61) condicion_booleana -> . BOOLEAN_NOT
    (97) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (98) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (99) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (104) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (116) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (121) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (62) operaciones_mat -> . valor operadores valor
    (63) operaciones_mat -> . valor operadores operaciones_mat
    (64) operaciones_mat -> . operaciones_mat_par
    (50) condicion_ifelse -> . condicion_if
    (51) condicion_ifelse -> . condicion_if condicion_else
    (52) condicion_ifelse -> . condicion_if condicion_elseif
    (53) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (100) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (125) bgoto -> . GOTO NOMBRE SEMI
    (103) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (126) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (43) incrementos_mat -> . MINUS_EQUAL
    (44) incrementos_mat -> . MOD_EQUAL
    (45) incrementos_mat -> . MUL_EQUAL
    (46) incrementos_mat -> . PLUS_EQUAL
    (127) bcortes -> . EXIT SEMI
    (128) bcortes -> . BREAK SEMI
    (129) bcortes -> . DEFAULT SEMI
    (130) bcortes -> . CONTINUE SEMI
    (76) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (77) proteccion -> . PUBLIC
    (78) proteccion -> . PRIVATE
    (79) proteccion -> . PROTECTED
    (80) proteccion -> . STATIC
    (88) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (92) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (93) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (91) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (28) valor -> . numero
    (29) valor -> . VARIABLE
    (30) valor -> . STRING
    (31) valor -> . NOMBRE
    (65) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (66) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (67) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (47) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (32) numero -> . ENTERO
    (33) numero -> . DECIMAL

    ECHO            shift and go to state 25
    PRINT           shift and go to state 27
    VARIABLE        shift and go to state 31
    VAR             shift and go to state 32
    DEFINE          shift and go to state 37
    READLINE        shift and go to state 39
    SUMA            shift and go to state 40
    RESTA           shift and go to state 41
    MULTIPLICACION  shift and go to state 42
    DIVISION        shift and go to state 43
    MODULO          shift and go to state 44
    SMALLER         shift and go to state 45
    GREATER         shift and go to state 46
    IS_SMALLER_OR_EQUAL shift and go to state 47
    IS_GREATER_OR_EQUAL shift and go to state 48
    AND             shift and go to state 49
    OR              shift and go to state 50
    XOR             shift and go to state 51
    IS_EQUAL        shift and go to state 52
    IS_NOT_EQUAL    shift and go to state 53
    IS_IDENTICAL    shift and go to state 54
    IS_NOT_IDENTICAL shift and go to state 55
    BOOLEAN_NOT     shift and go to state 56
    WHILE           shift and go to state 57
    DO              shift and go to state 58
    FOR             shift and go to state 59
    FOREACH         shift and go to state 60
    TRY             shift and go to state 61
    SWITCH          shift and go to state 64
    GOTO            shift and go to state 65
    MINUS_EQUAL     shift and go to state 66
    MOD_EQUAL       shift and go to state 67
    MUL_EQUAL       shift and go to state 68
    PLUS_EQUAL      shift and go to state 69
    EXIT            shift and go to state 70
    BREAK           shift and go to state 71
    DEFAULT         shift and go to state 72
    CONTINUE        shift and go to state 73
    RAND            shift and go to state 74
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78
    FUNCTION        shift and go to state 79
    STRING          shift and go to state 38
    NOMBRE          shift and go to state 29
    LPAREN          shift and go to state 28
    IF              shift and go to state 81
    ENTERO          shift and go to state 30
    DECIMAL         shift and go to state 82

    cuerpo                         shift and go to state 284
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat                shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    bcolas                         shift and go to state 20
    bpila                          shift and go to state 21
    incrementos_mat                shift and go to state 22
    bcortes                        shift and go to state 23
    brand                          shift and go to state 24
    valor                          shift and go to state 26
    proteccion                     shift and go to state 33
    funcion_nparams                shift and go to state 34
    funcion_blank                  shift and go to state 35
    funcion_void                   shift and go to state 36
    operaciones_mat_par            shift and go to state 62
    condicion_if                   shift and go to state 63
    numero                         shift and go to state 80

state 280

    (91) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty . RBRACE

    RBRACE          shift and go to state 285


state 281

    (114) for_incr -> VARIABLE SUMA EQUALS numero .

    RPAREN          reduce using rule 114 (for_incr -> VARIABLE SUMA EQUALS numero .)


state 282

    (115) for_incr -> VARIABLE RESTA EQUALS numero .

    RPAREN          reduce using rule 115 (for_incr -> VARIABLE RESTA EQUALS numero .)


state 283

    (122) catches -> catches CATCH LPAREN NOMBRE VARIABLE . RPAREN stc_bloque_def

    RPAREN          shift and go to state 286


state 284

    (101) innerSwitch -> CASE ENTERO COLON cuerpo . BREAK SEMI
    (102) innerSwitch -> CASE ENTERO COLON cuerpo . BREAK SEMI innerSwitch

    BREAK           shift and go to state 287


state 285

    (91) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .

    $end            reduce using rule 91 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    RBRACE          reduce using rule 91 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    SEMI            reduce using rule 91 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    BREAK           reduce using rule 91 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)


state 286

    (122) catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN . stc_bloque_def
    (109) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 142

    stc_bloque_def                 shift and go to state 288

state 287

    (101) innerSwitch -> CASE ENTERO COLON cuerpo BREAK . SEMI
    (102) innerSwitch -> CASE ENTERO COLON cuerpo BREAK . SEMI innerSwitch

    SEMI            shift and go to state 289


state 288

    (122) catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .

    CATCH           reduce using rule 122 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    $end            reduce using rule 122 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 122 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    SEMI            reduce using rule 122 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    BREAK           reduce using rule 122 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)


state 289

    (101) innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI .
    (102) innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI . innerSwitch
    (101) innerSwitch -> . CASE ENTERO COLON cuerpo BREAK SEMI
    (102) innerSwitch -> . CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch

    RBRACE          reduce using rule 101 (innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI .)
    CASE            shift and go to state 243

    innerSwitch                    shift and go to state 290

state 290

    (102) innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch .

    RBRACE          reduce using rule 102 (innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SMALLER in state 137 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 137 resolved as shift
WARNING: shift/reduce conflict for IS_SMALLER_OR_EQUAL in state 137 resolved as shift
WARNING: shift/reduce conflict for IS_GREATER_OR_EQUAL in state 137 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 233 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 247 resolved as shift
WARNING: reduce/reduce conflict in state 122 resolved using rule (operaciones_mat -> operaciones_mat_par)
WARNING: rejected rule (operaciones_mat_par -> valor operadores operaciones_mat_par) in state 122
WARNING: reduce/reduce conflict in state 202 resolved using rule (valor -> VARIABLE)
WARNING: rejected rule (condicion -> VARIABLE operador_logico VARIABLE) in state 202
WARNING: Rule (condicion -> VARIABLE operador_logico VARIABLE) is never reduced
