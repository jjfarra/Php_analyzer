Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AT
    BOOL
    BREAK
    CASE
    CLASS
    CLASS_C
    CLOSE_TAG
    COLON
    COMENTARIOS
    CONCAT
    CONSTANT_ENCAPSED_STRING
    CONTINUE
    CURLY_OPEN
    DEFAULT
    DIR
    DIV_EQUAL
    DO
    DOC_COMENTARIOS
    DOUBLE
    ELSE
    ELSEIF
    ENCAPSED_AND_WHITESPACE
    EXIT
    FALSE
    FILE
    FLOAT
    FUNC_C
    GLOBAL
    GOTO
    HALT_COMPILER
    INT
    LINE
    METHOD_C
    MINUS_EQUAL
    MOD_EQUAL
    MUL_EQUAL
    NEW
    NOT
    NS_C
    NS_SEPARATOR
    NULL
    NUM_STRING
    OBJECT
    OPEN_TAG
    PLUS_EQUAL
    PRIVATE
    PROTECTED
    PUBLIC
    REQUIRE
    RETURN
    STATIC
    SWITCH
    TRUE
    VAR
    VOID

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> imprimir
Rule 2     cuerpo -> asignacion
Rule 3     cuerpo -> asignacion_array
Rule 4     cuerpo -> funcion_nparams
Rule 5     cuerpo -> constante
Rule 6     cuerpo -> lectura
Rule 7     cuerpo -> operadores
Rule 8     cuerpo -> operador_logico
Rule 9     cuerpo -> condicion_booleana
Rule 10    cuerpo -> bwhile
Rule 11    cuerpo -> bfor
Rule 12    cuerpo -> bforeach
Rule 13    cuerpo -> btry
Rule 14    cuerpo -> operaciones_mat
Rule 15    cuerpo -> condicion_if
Rule 16    imprimir -> ECHO valor SEMI
Rule 17    imprimir -> PRINT valor SEMI
Rule 18    imprimir -> PRINT LPAREN valor RPAREN SEMI
Rule 19    imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
Rule 20    valor -> numero
Rule 21    valor -> VARIABLE
Rule 22    valor -> STRING
Rule 23    valor -> NOMBRE
Rule 24    numero -> ENTERO
Rule 25    numero -> DECIMAL
Rule 26    operadores -> SUMA
Rule 27    operadores -> RESTA
Rule 28    operadores -> MULTIPLICACION
Rule 29    operadores -> DIVISION
Rule 30    operadores -> MODULO
Rule 31    operador_logico -> SMALLER
Rule 32    operador_logico -> GREATER
Rule 33    operador_logico -> IS_SMALLER_OR_EQUAL
Rule 34    operador_logico -> IS_GREATER_OR_EQUAL
Rule 35    condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
Rule 36    condicion_booleana -> AND
Rule 37    condicion_booleana -> OR
Rule 38    condicion_booleana -> XOR
Rule 39    condicion_booleana -> IS_EQUAL
Rule 40    condicion_booleana -> IS_NOT_EQUAL
Rule 41    condicion_booleana -> IS_IDENTICAL
Rule 42    condicion_booleana -> IS_NOT_IDENTICAL
Rule 43    condicion_booleana -> BOOLEAN_NOT
Rule 44    operaciones_mat -> op_basicas
Rule 45    operaciones_mat -> op_recursivas
Rule 46    op_basicas -> valor operadores valor
Rule 47    op_basicas -> LPAREN valor operadores valor RPAREN
Rule 48    op_recursivas -> valor operadores op_recursivas
Rule 49    op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat
Rule 50    asignacion -> VARIABLE EQUALS valor SEMI
Rule 51    asignacion_array -> VARIABLE EQUALS array_def SEMI
Rule 52    constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI
Rule 53    constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
Rule 54    lectura -> READLINE LPAREN STRING RPAREN SEMI
Rule 55    lectura -> READLINE LPAREN RPAREN SEMI
Rule 56    param -> VARIABLE
Rule 57    param -> asignacion
Rule 58    funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
Rule 59    params_list -> params_list COMMA param
Rule 60    params_list -> param
Rule 61    condicion -> VARIABLE operador_logico VARIABLE
Rule 62    condicion -> valor operador_logico valor
Rule 63    bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
Rule 64    bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
Rule 65    stc_bloque -> stc_bloque cuerpo
Rule 66    stc_bloque -> empty
Rule 67    stc_bloque_def -> LBRACE stc_bloque RBRACE
Rule 68    for_incr -> VARIABLE SUMA SUMA
Rule 69    for_incr -> SUMA SUMA VARIABLE
Rule 70    for_incr -> VARIABLE RESTA RESTA
Rule 71    for_incr -> RESTA RESTA VARIABLE
Rule 72    for_incr -> VARIABLE SUMA EQUALS numero
Rule 73    for_incr -> VARIABLE RESTA EQUALS numero
Rule 74    bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
Rule 75    array_def -> ARRAY LPAREN RPAREN
Rule 76    array_def -> ARRAY LPAREN array_elmnt RPAREN
Rule 77    array_elmnt -> valor
Rule 78    array_elmnt -> empty
Rule 79    btry -> TRY LBRACE stc_bloque_def RBRACE catches
Rule 80    catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def
Rule 81    catches -> empty
Rule 82    empty -> <empty>

Terminals, with rules where they appear

AND                  : 36
ARRAY                : 53 75 76
AS                   : 74
AT                   : 
BOOL                 : 
BOOLEAN_NOT          : 43
BREAK                : 
CASE                 : 
CATCH                : 80
CLASS                : 
CLASS_C              : 
CLOSE_TAG            : 
COLON                : 
COMENTARIOS          : 
COMMA                : 52 53 59
CONCAT               : 
CONSTANT_ENCAPSED_STRING : 
CONTINUE             : 
CURLY_OPEN           : 
DECIMAL              : 25
DEFAULT              : 
DEFINE               : 52 53
DIR                  : 
DIVISION             : 29
DIV_EQUAL            : 
DO                   : 
DOC_COMENTARIOS      : 
DOUBLE               : 
ECHO                 : 16 19
ELSE                 : 
ELSEIF               : 
ENCAPSED_AND_WHITESPACE : 
ENTERO               : 19 24
EQUALS               : 50 51 72 73
EXIT                 : 
FALSE                : 
FILE                 : 
FLOAT                : 
FOR                  : 64
FOREACH              : 74
FUNCTION             : 58
FUNC_C               : 
GLOBAL               : 
GOTO                 : 
GREATER              : 32
HALT_COMPILER        : 
IF                   : 35
INT                  : 
IS_EQUAL             : 39
IS_GREATER_OR_EQUAL  : 34
IS_IDENTICAL         : 41
IS_NOT_EQUAL         : 40
IS_NOT_IDENTICAL     : 42
IS_SMALLER_OR_EQUAL  : 33
LBRACE               : 35 63 67 79
LBRACKET             : 19
LINE                 : 
LPAREN               : 18 35 47 49 52 53 54 55 58 63 64 74 75 76 80
METHOD_C             : 
MINUS_EQUAL          : 
MODULO               : 30
MOD_EQUAL            : 
MULTIPLICACION       : 28
MUL_EQUAL            : 
NEW                  : 
NOMBRE               : 19 23 53 58 80
NOT                  : 
NS_C                 : 
NS_SEPARATOR         : 
NULL                 : 
NUM_STRING           : 
OBJECT               : 
OPEN_TAG             : 
OR                   : 37
PLUS_EQUAL           : 
PRINT                : 17 18
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
RBRACE               : 35 63 67 79
RBRACKET             : 19
READLINE             : 54 55
REQUIRE              : 
RESTA                : 27 70 70 71 71 73
RETURN               : 
RPAREN               : 18 35 47 49 52 53 54 55 58 63 64 74 75 76 80
SEMI                 : 16 17 18 19 50 51 52 53 54 55 64 64
SMALLER              : 31
STATIC               : 
STRING               : 22 52 54
SUMA                 : 26 68 68 69 69 72
SWITCH               : 
TRUE                 : 
TRY                  : 79
VAR                  : 
VARIABLE             : 21 50 51 56 61 61 68 69 70 71 72 73 74 74 80
VOID                 : 
WHILE                : 63
XOR                  : 38
error                : 

Nonterminals, with rules where they appear

array_def            : 51
array_elmnt          : 76
asignacion           : 2 57 64
asignacion_array     : 3
bfor                 : 11
bforeach             : 12
btry                 : 13
bwhile               : 10
catches              : 79 80
condicion            : 35 63 64
condicion_booleana   : 9
condicion_if         : 15
constante            : 5
cuerpo               : 35 65 0
empty                : 66 78 81
for_incr             : 64
funcion_nparams      : 4
imprimir             : 1
lectura              : 6
numero               : 20 72 73
op_basicas           : 44
op_recursivas        : 45 48
operaciones_mat      : 14 49
operador_logico      : 8 61 62
operadores           : 7 46 47 48 49
param                : 59 60
params_list          : 58 59
stc_bloque           : 63 65 67
stc_bloque_def       : 58 64 74 79 80
valor                : 16 17 18 46 46 47 47 48 49 49 49 50 52 62 62 77

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funcion_nparams
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bfor
    (12) cuerpo -> . bforeach
    (13) cuerpo -> . btry
    (14) cuerpo -> . operaciones_mat
    (15) cuerpo -> . condicion_if
    (16) imprimir -> . ECHO valor SEMI
    (17) imprimir -> . PRINT valor SEMI
    (18) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (19) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (50) asignacion -> . VARIABLE EQUALS valor SEMI
    (51) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (58) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (52) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (53) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (54) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (55) lectura -> . READLINE LPAREN RPAREN SEMI
    (26) operadores -> . SUMA
    (27) operadores -> . RESTA
    (28) operadores -> . MULTIPLICACION
    (29) operadores -> . DIVISION
    (30) operadores -> . MODULO
    (31) operador_logico -> . SMALLER
    (32) operador_logico -> . GREATER
    (33) operador_logico -> . IS_SMALLER_OR_EQUAL
    (34) operador_logico -> . IS_GREATER_OR_EQUAL
    (36) condicion_booleana -> . AND
    (37) condicion_booleana -> . OR
    (38) condicion_booleana -> . XOR
    (39) condicion_booleana -> . IS_EQUAL
    (40) condicion_booleana -> . IS_NOT_EQUAL
    (41) condicion_booleana -> . IS_IDENTICAL
    (42) condicion_booleana -> . IS_NOT_IDENTICAL
    (43) condicion_booleana -> . BOOLEAN_NOT
    (63) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (64) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (74) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (79) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (44) operaciones_mat -> . op_basicas
    (45) operaciones_mat -> . op_recursivas
    (35) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (46) op_basicas -> . valor operadores valor
    (47) op_basicas -> . LPAREN valor operadores valor RPAREN
    (48) op_recursivas -> . valor operadores op_recursivas
    (49) op_recursivas -> . valor LPAREN valor operadores valor RPAREN operaciones_mat
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    ECHO            shift and go to state 17
    PRINT           shift and go to state 19
    VARIABLE        shift and go to state 23
    FUNCTION        shift and go to state 24
    DEFINE          shift and go to state 25
    READLINE        shift and go to state 27
    SUMA            shift and go to state 28
    RESTA           shift and go to state 29
    MULTIPLICACION  shift and go to state 30
    DIVISION        shift and go to state 31
    MODULO          shift and go to state 32
    SMALLER         shift and go to state 33
    GREATER         shift and go to state 34
    IS_SMALLER_OR_EQUAL shift and go to state 35
    IS_GREATER_OR_EQUAL shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    IS_EQUAL        shift and go to state 40
    IS_NOT_EQUAL    shift and go to state 41
    IS_IDENTICAL    shift and go to state 42
    IS_NOT_IDENTICAL shift and go to state 43
    BOOLEAN_NOT     shift and go to state 44
    WHILE           shift and go to state 45
    FOR             shift and go to state 46
    FOREACH         shift and go to state 47
    TRY             shift and go to state 48
    IF              shift and go to state 51
    LPAREN          shift and go to state 20
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    cuerpo                         shift and go to state 1
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funcion_nparams                shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bfor                           shift and go to state 12
    bforeach                       shift and go to state 13
    btry                           shift and go to state 14
    operaciones_mat                shift and go to state 15
    condicion_if                   shift and go to state 16
    valor                          shift and go to state 18
    op_basicas                     shift and go to state 49
    op_recursivas                  shift and go to state 50
    numero                         shift and go to state 52

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> imprimir .

    $end            reduce using rule 1 (cuerpo -> imprimir .)
    RBRACE          reduce using rule 1 (cuerpo -> imprimir .)
    ECHO            reduce using rule 1 (cuerpo -> imprimir .)
    PRINT           reduce using rule 1 (cuerpo -> imprimir .)
    VARIABLE        reduce using rule 1 (cuerpo -> imprimir .)
    FUNCTION        reduce using rule 1 (cuerpo -> imprimir .)
    DEFINE          reduce using rule 1 (cuerpo -> imprimir .)
    READLINE        reduce using rule 1 (cuerpo -> imprimir .)
    SUMA            reduce using rule 1 (cuerpo -> imprimir .)
    RESTA           reduce using rule 1 (cuerpo -> imprimir .)
    MULTIPLICACION  reduce using rule 1 (cuerpo -> imprimir .)
    DIVISION        reduce using rule 1 (cuerpo -> imprimir .)
    MODULO          reduce using rule 1 (cuerpo -> imprimir .)
    SMALLER         reduce using rule 1 (cuerpo -> imprimir .)
    GREATER         reduce using rule 1 (cuerpo -> imprimir .)
    IS_SMALLER_OR_EQUAL reduce using rule 1 (cuerpo -> imprimir .)
    IS_GREATER_OR_EQUAL reduce using rule 1 (cuerpo -> imprimir .)
    AND             reduce using rule 1 (cuerpo -> imprimir .)
    OR              reduce using rule 1 (cuerpo -> imprimir .)
    XOR             reduce using rule 1 (cuerpo -> imprimir .)
    IS_EQUAL        reduce using rule 1 (cuerpo -> imprimir .)
    IS_NOT_EQUAL    reduce using rule 1 (cuerpo -> imprimir .)
    IS_IDENTICAL    reduce using rule 1 (cuerpo -> imprimir .)
    IS_NOT_IDENTICAL reduce using rule 1 (cuerpo -> imprimir .)
    BOOLEAN_NOT     reduce using rule 1 (cuerpo -> imprimir .)
    WHILE           reduce using rule 1 (cuerpo -> imprimir .)
    FOR             reduce using rule 1 (cuerpo -> imprimir .)
    FOREACH         reduce using rule 1 (cuerpo -> imprimir .)
    TRY             reduce using rule 1 (cuerpo -> imprimir .)
    IF              reduce using rule 1 (cuerpo -> imprimir .)
    LPAREN          reduce using rule 1 (cuerpo -> imprimir .)
    STRING          reduce using rule 1 (cuerpo -> imprimir .)
    NOMBRE          reduce using rule 1 (cuerpo -> imprimir .)
    ENTERO          reduce using rule 1 (cuerpo -> imprimir .)
    DECIMAL         reduce using rule 1 (cuerpo -> imprimir .)


state 3

    (2) cuerpo -> asignacion .

    $end            reduce using rule 2 (cuerpo -> asignacion .)
    RBRACE          reduce using rule 2 (cuerpo -> asignacion .)
    ECHO            reduce using rule 2 (cuerpo -> asignacion .)
    PRINT           reduce using rule 2 (cuerpo -> asignacion .)
    VARIABLE        reduce using rule 2 (cuerpo -> asignacion .)
    FUNCTION        reduce using rule 2 (cuerpo -> asignacion .)
    DEFINE          reduce using rule 2 (cuerpo -> asignacion .)
    READLINE        reduce using rule 2 (cuerpo -> asignacion .)
    SUMA            reduce using rule 2 (cuerpo -> asignacion .)
    RESTA           reduce using rule 2 (cuerpo -> asignacion .)
    MULTIPLICACION  reduce using rule 2 (cuerpo -> asignacion .)
    DIVISION        reduce using rule 2 (cuerpo -> asignacion .)
    MODULO          reduce using rule 2 (cuerpo -> asignacion .)
    SMALLER         reduce using rule 2 (cuerpo -> asignacion .)
    GREATER         reduce using rule 2 (cuerpo -> asignacion .)
    IS_SMALLER_OR_EQUAL reduce using rule 2 (cuerpo -> asignacion .)
    IS_GREATER_OR_EQUAL reduce using rule 2 (cuerpo -> asignacion .)
    AND             reduce using rule 2 (cuerpo -> asignacion .)
    OR              reduce using rule 2 (cuerpo -> asignacion .)
    XOR             reduce using rule 2 (cuerpo -> asignacion .)
    IS_EQUAL        reduce using rule 2 (cuerpo -> asignacion .)
    IS_NOT_EQUAL    reduce using rule 2 (cuerpo -> asignacion .)
    IS_IDENTICAL    reduce using rule 2 (cuerpo -> asignacion .)
    IS_NOT_IDENTICAL reduce using rule 2 (cuerpo -> asignacion .)
    BOOLEAN_NOT     reduce using rule 2 (cuerpo -> asignacion .)
    WHILE           reduce using rule 2 (cuerpo -> asignacion .)
    FOR             reduce using rule 2 (cuerpo -> asignacion .)
    FOREACH         reduce using rule 2 (cuerpo -> asignacion .)
    TRY             reduce using rule 2 (cuerpo -> asignacion .)
    IF              reduce using rule 2 (cuerpo -> asignacion .)
    LPAREN          reduce using rule 2 (cuerpo -> asignacion .)
    STRING          reduce using rule 2 (cuerpo -> asignacion .)
    NOMBRE          reduce using rule 2 (cuerpo -> asignacion .)
    ENTERO          reduce using rule 2 (cuerpo -> asignacion .)
    DECIMAL         reduce using rule 2 (cuerpo -> asignacion .)


state 4

    (3) cuerpo -> asignacion_array .

    $end            reduce using rule 3 (cuerpo -> asignacion_array .)
    RBRACE          reduce using rule 3 (cuerpo -> asignacion_array .)
    ECHO            reduce using rule 3 (cuerpo -> asignacion_array .)
    PRINT           reduce using rule 3 (cuerpo -> asignacion_array .)
    VARIABLE        reduce using rule 3 (cuerpo -> asignacion_array .)
    FUNCTION        reduce using rule 3 (cuerpo -> asignacion_array .)
    DEFINE          reduce using rule 3 (cuerpo -> asignacion_array .)
    READLINE        reduce using rule 3 (cuerpo -> asignacion_array .)
    SUMA            reduce using rule 3 (cuerpo -> asignacion_array .)
    RESTA           reduce using rule 3 (cuerpo -> asignacion_array .)
    MULTIPLICACION  reduce using rule 3 (cuerpo -> asignacion_array .)
    DIVISION        reduce using rule 3 (cuerpo -> asignacion_array .)
    MODULO          reduce using rule 3 (cuerpo -> asignacion_array .)
    SMALLER         reduce using rule 3 (cuerpo -> asignacion_array .)
    GREATER         reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_SMALLER_OR_EQUAL reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_GREATER_OR_EQUAL reduce using rule 3 (cuerpo -> asignacion_array .)
    AND             reduce using rule 3 (cuerpo -> asignacion_array .)
    OR              reduce using rule 3 (cuerpo -> asignacion_array .)
    XOR             reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_EQUAL        reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_NOT_EQUAL    reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_IDENTICAL    reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_NOT_IDENTICAL reduce using rule 3 (cuerpo -> asignacion_array .)
    BOOLEAN_NOT     reduce using rule 3 (cuerpo -> asignacion_array .)
    WHILE           reduce using rule 3 (cuerpo -> asignacion_array .)
    FOR             reduce using rule 3 (cuerpo -> asignacion_array .)
    FOREACH         reduce using rule 3 (cuerpo -> asignacion_array .)
    TRY             reduce using rule 3 (cuerpo -> asignacion_array .)
    IF              reduce using rule 3 (cuerpo -> asignacion_array .)
    LPAREN          reduce using rule 3 (cuerpo -> asignacion_array .)
    STRING          reduce using rule 3 (cuerpo -> asignacion_array .)
    NOMBRE          reduce using rule 3 (cuerpo -> asignacion_array .)
    ENTERO          reduce using rule 3 (cuerpo -> asignacion_array .)
    DECIMAL         reduce using rule 3 (cuerpo -> asignacion_array .)


state 5

    (4) cuerpo -> funcion_nparams .

    $end            reduce using rule 4 (cuerpo -> funcion_nparams .)
    RBRACE          reduce using rule 4 (cuerpo -> funcion_nparams .)
    ECHO            reduce using rule 4 (cuerpo -> funcion_nparams .)
    PRINT           reduce using rule 4 (cuerpo -> funcion_nparams .)
    VARIABLE        reduce using rule 4 (cuerpo -> funcion_nparams .)
    FUNCTION        reduce using rule 4 (cuerpo -> funcion_nparams .)
    DEFINE          reduce using rule 4 (cuerpo -> funcion_nparams .)
    READLINE        reduce using rule 4 (cuerpo -> funcion_nparams .)
    SUMA            reduce using rule 4 (cuerpo -> funcion_nparams .)
    RESTA           reduce using rule 4 (cuerpo -> funcion_nparams .)
    MULTIPLICACION  reduce using rule 4 (cuerpo -> funcion_nparams .)
    DIVISION        reduce using rule 4 (cuerpo -> funcion_nparams .)
    MODULO          reduce using rule 4 (cuerpo -> funcion_nparams .)
    SMALLER         reduce using rule 4 (cuerpo -> funcion_nparams .)
    GREATER         reduce using rule 4 (cuerpo -> funcion_nparams .)
    IS_SMALLER_OR_EQUAL reduce using rule 4 (cuerpo -> funcion_nparams .)
    IS_GREATER_OR_EQUAL reduce using rule 4 (cuerpo -> funcion_nparams .)
    AND             reduce using rule 4 (cuerpo -> funcion_nparams .)
    OR              reduce using rule 4 (cuerpo -> funcion_nparams .)
    XOR             reduce using rule 4 (cuerpo -> funcion_nparams .)
    IS_EQUAL        reduce using rule 4 (cuerpo -> funcion_nparams .)
    IS_NOT_EQUAL    reduce using rule 4 (cuerpo -> funcion_nparams .)
    IS_IDENTICAL    reduce using rule 4 (cuerpo -> funcion_nparams .)
    IS_NOT_IDENTICAL reduce using rule 4 (cuerpo -> funcion_nparams .)
    BOOLEAN_NOT     reduce using rule 4 (cuerpo -> funcion_nparams .)
    WHILE           reduce using rule 4 (cuerpo -> funcion_nparams .)
    FOR             reduce using rule 4 (cuerpo -> funcion_nparams .)
    FOREACH         reduce using rule 4 (cuerpo -> funcion_nparams .)
    TRY             reduce using rule 4 (cuerpo -> funcion_nparams .)
    IF              reduce using rule 4 (cuerpo -> funcion_nparams .)
    LPAREN          reduce using rule 4 (cuerpo -> funcion_nparams .)
    STRING          reduce using rule 4 (cuerpo -> funcion_nparams .)
    NOMBRE          reduce using rule 4 (cuerpo -> funcion_nparams .)
    ENTERO          reduce using rule 4 (cuerpo -> funcion_nparams .)
    DECIMAL         reduce using rule 4 (cuerpo -> funcion_nparams .)


state 6

    (5) cuerpo -> constante .

    $end            reduce using rule 5 (cuerpo -> constante .)
    RBRACE          reduce using rule 5 (cuerpo -> constante .)
    ECHO            reduce using rule 5 (cuerpo -> constante .)
    PRINT           reduce using rule 5 (cuerpo -> constante .)
    VARIABLE        reduce using rule 5 (cuerpo -> constante .)
    FUNCTION        reduce using rule 5 (cuerpo -> constante .)
    DEFINE          reduce using rule 5 (cuerpo -> constante .)
    READLINE        reduce using rule 5 (cuerpo -> constante .)
    SUMA            reduce using rule 5 (cuerpo -> constante .)
    RESTA           reduce using rule 5 (cuerpo -> constante .)
    MULTIPLICACION  reduce using rule 5 (cuerpo -> constante .)
    DIVISION        reduce using rule 5 (cuerpo -> constante .)
    MODULO          reduce using rule 5 (cuerpo -> constante .)
    SMALLER         reduce using rule 5 (cuerpo -> constante .)
    GREATER         reduce using rule 5 (cuerpo -> constante .)
    IS_SMALLER_OR_EQUAL reduce using rule 5 (cuerpo -> constante .)
    IS_GREATER_OR_EQUAL reduce using rule 5 (cuerpo -> constante .)
    AND             reduce using rule 5 (cuerpo -> constante .)
    OR              reduce using rule 5 (cuerpo -> constante .)
    XOR             reduce using rule 5 (cuerpo -> constante .)
    IS_EQUAL        reduce using rule 5 (cuerpo -> constante .)
    IS_NOT_EQUAL    reduce using rule 5 (cuerpo -> constante .)
    IS_IDENTICAL    reduce using rule 5 (cuerpo -> constante .)
    IS_NOT_IDENTICAL reduce using rule 5 (cuerpo -> constante .)
    BOOLEAN_NOT     reduce using rule 5 (cuerpo -> constante .)
    WHILE           reduce using rule 5 (cuerpo -> constante .)
    FOR             reduce using rule 5 (cuerpo -> constante .)
    FOREACH         reduce using rule 5 (cuerpo -> constante .)
    TRY             reduce using rule 5 (cuerpo -> constante .)
    IF              reduce using rule 5 (cuerpo -> constante .)
    LPAREN          reduce using rule 5 (cuerpo -> constante .)
    STRING          reduce using rule 5 (cuerpo -> constante .)
    NOMBRE          reduce using rule 5 (cuerpo -> constante .)
    ENTERO          reduce using rule 5 (cuerpo -> constante .)
    DECIMAL         reduce using rule 5 (cuerpo -> constante .)


state 7

    (6) cuerpo -> lectura .

    $end            reduce using rule 6 (cuerpo -> lectura .)
    RBRACE          reduce using rule 6 (cuerpo -> lectura .)
    ECHO            reduce using rule 6 (cuerpo -> lectura .)
    PRINT           reduce using rule 6 (cuerpo -> lectura .)
    VARIABLE        reduce using rule 6 (cuerpo -> lectura .)
    FUNCTION        reduce using rule 6 (cuerpo -> lectura .)
    DEFINE          reduce using rule 6 (cuerpo -> lectura .)
    READLINE        reduce using rule 6 (cuerpo -> lectura .)
    SUMA            reduce using rule 6 (cuerpo -> lectura .)
    RESTA           reduce using rule 6 (cuerpo -> lectura .)
    MULTIPLICACION  reduce using rule 6 (cuerpo -> lectura .)
    DIVISION        reduce using rule 6 (cuerpo -> lectura .)
    MODULO          reduce using rule 6 (cuerpo -> lectura .)
    SMALLER         reduce using rule 6 (cuerpo -> lectura .)
    GREATER         reduce using rule 6 (cuerpo -> lectura .)
    IS_SMALLER_OR_EQUAL reduce using rule 6 (cuerpo -> lectura .)
    IS_GREATER_OR_EQUAL reduce using rule 6 (cuerpo -> lectura .)
    AND             reduce using rule 6 (cuerpo -> lectura .)
    OR              reduce using rule 6 (cuerpo -> lectura .)
    XOR             reduce using rule 6 (cuerpo -> lectura .)
    IS_EQUAL        reduce using rule 6 (cuerpo -> lectura .)
    IS_NOT_EQUAL    reduce using rule 6 (cuerpo -> lectura .)
    IS_IDENTICAL    reduce using rule 6 (cuerpo -> lectura .)
    IS_NOT_IDENTICAL reduce using rule 6 (cuerpo -> lectura .)
    BOOLEAN_NOT     reduce using rule 6 (cuerpo -> lectura .)
    WHILE           reduce using rule 6 (cuerpo -> lectura .)
    FOR             reduce using rule 6 (cuerpo -> lectura .)
    FOREACH         reduce using rule 6 (cuerpo -> lectura .)
    TRY             reduce using rule 6 (cuerpo -> lectura .)
    IF              reduce using rule 6 (cuerpo -> lectura .)
    LPAREN          reduce using rule 6 (cuerpo -> lectura .)
    STRING          reduce using rule 6 (cuerpo -> lectura .)
    NOMBRE          reduce using rule 6 (cuerpo -> lectura .)
    ENTERO          reduce using rule 6 (cuerpo -> lectura .)
    DECIMAL         reduce using rule 6 (cuerpo -> lectura .)


state 8

    (7) cuerpo -> operadores .

    $end            reduce using rule 7 (cuerpo -> operadores .)
    RBRACE          reduce using rule 7 (cuerpo -> operadores .)
    ECHO            reduce using rule 7 (cuerpo -> operadores .)
    PRINT           reduce using rule 7 (cuerpo -> operadores .)
    VARIABLE        reduce using rule 7 (cuerpo -> operadores .)
    FUNCTION        reduce using rule 7 (cuerpo -> operadores .)
    DEFINE          reduce using rule 7 (cuerpo -> operadores .)
    READLINE        reduce using rule 7 (cuerpo -> operadores .)
    SUMA            reduce using rule 7 (cuerpo -> operadores .)
    RESTA           reduce using rule 7 (cuerpo -> operadores .)
    MULTIPLICACION  reduce using rule 7 (cuerpo -> operadores .)
    DIVISION        reduce using rule 7 (cuerpo -> operadores .)
    MODULO          reduce using rule 7 (cuerpo -> operadores .)
    SMALLER         reduce using rule 7 (cuerpo -> operadores .)
    GREATER         reduce using rule 7 (cuerpo -> operadores .)
    IS_SMALLER_OR_EQUAL reduce using rule 7 (cuerpo -> operadores .)
    IS_GREATER_OR_EQUAL reduce using rule 7 (cuerpo -> operadores .)
    AND             reduce using rule 7 (cuerpo -> operadores .)
    OR              reduce using rule 7 (cuerpo -> operadores .)
    XOR             reduce using rule 7 (cuerpo -> operadores .)
    IS_EQUAL        reduce using rule 7 (cuerpo -> operadores .)
    IS_NOT_EQUAL    reduce using rule 7 (cuerpo -> operadores .)
    IS_IDENTICAL    reduce using rule 7 (cuerpo -> operadores .)
    IS_NOT_IDENTICAL reduce using rule 7 (cuerpo -> operadores .)
    BOOLEAN_NOT     reduce using rule 7 (cuerpo -> operadores .)
    WHILE           reduce using rule 7 (cuerpo -> operadores .)
    FOR             reduce using rule 7 (cuerpo -> operadores .)
    FOREACH         reduce using rule 7 (cuerpo -> operadores .)
    TRY             reduce using rule 7 (cuerpo -> operadores .)
    IF              reduce using rule 7 (cuerpo -> operadores .)
    LPAREN          reduce using rule 7 (cuerpo -> operadores .)
    STRING          reduce using rule 7 (cuerpo -> operadores .)
    NOMBRE          reduce using rule 7 (cuerpo -> operadores .)
    ENTERO          reduce using rule 7 (cuerpo -> operadores .)
    DECIMAL         reduce using rule 7 (cuerpo -> operadores .)


state 9

    (8) cuerpo -> operador_logico .

    $end            reduce using rule 8 (cuerpo -> operador_logico .)
    RBRACE          reduce using rule 8 (cuerpo -> operador_logico .)
    ECHO            reduce using rule 8 (cuerpo -> operador_logico .)
    PRINT           reduce using rule 8 (cuerpo -> operador_logico .)
    VARIABLE        reduce using rule 8 (cuerpo -> operador_logico .)
    FUNCTION        reduce using rule 8 (cuerpo -> operador_logico .)
    DEFINE          reduce using rule 8 (cuerpo -> operador_logico .)
    READLINE        reduce using rule 8 (cuerpo -> operador_logico .)
    SUMA            reduce using rule 8 (cuerpo -> operador_logico .)
    RESTA           reduce using rule 8 (cuerpo -> operador_logico .)
    MULTIPLICACION  reduce using rule 8 (cuerpo -> operador_logico .)
    DIVISION        reduce using rule 8 (cuerpo -> operador_logico .)
    MODULO          reduce using rule 8 (cuerpo -> operador_logico .)
    SMALLER         reduce using rule 8 (cuerpo -> operador_logico .)
    GREATER         reduce using rule 8 (cuerpo -> operador_logico .)
    IS_SMALLER_OR_EQUAL reduce using rule 8 (cuerpo -> operador_logico .)
    IS_GREATER_OR_EQUAL reduce using rule 8 (cuerpo -> operador_logico .)
    AND             reduce using rule 8 (cuerpo -> operador_logico .)
    OR              reduce using rule 8 (cuerpo -> operador_logico .)
    XOR             reduce using rule 8 (cuerpo -> operador_logico .)
    IS_EQUAL        reduce using rule 8 (cuerpo -> operador_logico .)
    IS_NOT_EQUAL    reduce using rule 8 (cuerpo -> operador_logico .)
    IS_IDENTICAL    reduce using rule 8 (cuerpo -> operador_logico .)
    IS_NOT_IDENTICAL reduce using rule 8 (cuerpo -> operador_logico .)
    BOOLEAN_NOT     reduce using rule 8 (cuerpo -> operador_logico .)
    WHILE           reduce using rule 8 (cuerpo -> operador_logico .)
    FOR             reduce using rule 8 (cuerpo -> operador_logico .)
    FOREACH         reduce using rule 8 (cuerpo -> operador_logico .)
    TRY             reduce using rule 8 (cuerpo -> operador_logico .)
    IF              reduce using rule 8 (cuerpo -> operador_logico .)
    LPAREN          reduce using rule 8 (cuerpo -> operador_logico .)
    STRING          reduce using rule 8 (cuerpo -> operador_logico .)
    NOMBRE          reduce using rule 8 (cuerpo -> operador_logico .)
    ENTERO          reduce using rule 8 (cuerpo -> operador_logico .)
    DECIMAL         reduce using rule 8 (cuerpo -> operador_logico .)


state 10

    (9) cuerpo -> condicion_booleana .

    $end            reduce using rule 9 (cuerpo -> condicion_booleana .)
    RBRACE          reduce using rule 9 (cuerpo -> condicion_booleana .)
    ECHO            reduce using rule 9 (cuerpo -> condicion_booleana .)
    PRINT           reduce using rule 9 (cuerpo -> condicion_booleana .)
    VARIABLE        reduce using rule 9 (cuerpo -> condicion_booleana .)
    FUNCTION        reduce using rule 9 (cuerpo -> condicion_booleana .)
    DEFINE          reduce using rule 9 (cuerpo -> condicion_booleana .)
    READLINE        reduce using rule 9 (cuerpo -> condicion_booleana .)
    SUMA            reduce using rule 9 (cuerpo -> condicion_booleana .)
    RESTA           reduce using rule 9 (cuerpo -> condicion_booleana .)
    MULTIPLICACION  reduce using rule 9 (cuerpo -> condicion_booleana .)
    DIVISION        reduce using rule 9 (cuerpo -> condicion_booleana .)
    MODULO          reduce using rule 9 (cuerpo -> condicion_booleana .)
    SMALLER         reduce using rule 9 (cuerpo -> condicion_booleana .)
    GREATER         reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_SMALLER_OR_EQUAL reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_GREATER_OR_EQUAL reduce using rule 9 (cuerpo -> condicion_booleana .)
    AND             reduce using rule 9 (cuerpo -> condicion_booleana .)
    OR              reduce using rule 9 (cuerpo -> condicion_booleana .)
    XOR             reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_EQUAL        reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_NOT_EQUAL    reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_IDENTICAL    reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_NOT_IDENTICAL reduce using rule 9 (cuerpo -> condicion_booleana .)
    BOOLEAN_NOT     reduce using rule 9 (cuerpo -> condicion_booleana .)
    WHILE           reduce using rule 9 (cuerpo -> condicion_booleana .)
    FOR             reduce using rule 9 (cuerpo -> condicion_booleana .)
    FOREACH         reduce using rule 9 (cuerpo -> condicion_booleana .)
    TRY             reduce using rule 9 (cuerpo -> condicion_booleana .)
    IF              reduce using rule 9 (cuerpo -> condicion_booleana .)
    LPAREN          reduce using rule 9 (cuerpo -> condicion_booleana .)
    STRING          reduce using rule 9 (cuerpo -> condicion_booleana .)
    NOMBRE          reduce using rule 9 (cuerpo -> condicion_booleana .)
    ENTERO          reduce using rule 9 (cuerpo -> condicion_booleana .)
    DECIMAL         reduce using rule 9 (cuerpo -> condicion_booleana .)


state 11

    (10) cuerpo -> bwhile .

    $end            reduce using rule 10 (cuerpo -> bwhile .)
    RBRACE          reduce using rule 10 (cuerpo -> bwhile .)
    ECHO            reduce using rule 10 (cuerpo -> bwhile .)
    PRINT           reduce using rule 10 (cuerpo -> bwhile .)
    VARIABLE        reduce using rule 10 (cuerpo -> bwhile .)
    FUNCTION        reduce using rule 10 (cuerpo -> bwhile .)
    DEFINE          reduce using rule 10 (cuerpo -> bwhile .)
    READLINE        reduce using rule 10 (cuerpo -> bwhile .)
    SUMA            reduce using rule 10 (cuerpo -> bwhile .)
    RESTA           reduce using rule 10 (cuerpo -> bwhile .)
    MULTIPLICACION  reduce using rule 10 (cuerpo -> bwhile .)
    DIVISION        reduce using rule 10 (cuerpo -> bwhile .)
    MODULO          reduce using rule 10 (cuerpo -> bwhile .)
    SMALLER         reduce using rule 10 (cuerpo -> bwhile .)
    GREATER         reduce using rule 10 (cuerpo -> bwhile .)
    IS_SMALLER_OR_EQUAL reduce using rule 10 (cuerpo -> bwhile .)
    IS_GREATER_OR_EQUAL reduce using rule 10 (cuerpo -> bwhile .)
    AND             reduce using rule 10 (cuerpo -> bwhile .)
    OR              reduce using rule 10 (cuerpo -> bwhile .)
    XOR             reduce using rule 10 (cuerpo -> bwhile .)
    IS_EQUAL        reduce using rule 10 (cuerpo -> bwhile .)
    IS_NOT_EQUAL    reduce using rule 10 (cuerpo -> bwhile .)
    IS_IDENTICAL    reduce using rule 10 (cuerpo -> bwhile .)
    IS_NOT_IDENTICAL reduce using rule 10 (cuerpo -> bwhile .)
    BOOLEAN_NOT     reduce using rule 10 (cuerpo -> bwhile .)
    WHILE           reduce using rule 10 (cuerpo -> bwhile .)
    FOR             reduce using rule 10 (cuerpo -> bwhile .)
    FOREACH         reduce using rule 10 (cuerpo -> bwhile .)
    TRY             reduce using rule 10 (cuerpo -> bwhile .)
    IF              reduce using rule 10 (cuerpo -> bwhile .)
    LPAREN          reduce using rule 10 (cuerpo -> bwhile .)
    STRING          reduce using rule 10 (cuerpo -> bwhile .)
    NOMBRE          reduce using rule 10 (cuerpo -> bwhile .)
    ENTERO          reduce using rule 10 (cuerpo -> bwhile .)
    DECIMAL         reduce using rule 10 (cuerpo -> bwhile .)


state 12

    (11) cuerpo -> bfor .

    $end            reduce using rule 11 (cuerpo -> bfor .)
    RBRACE          reduce using rule 11 (cuerpo -> bfor .)
    ECHO            reduce using rule 11 (cuerpo -> bfor .)
    PRINT           reduce using rule 11 (cuerpo -> bfor .)
    VARIABLE        reduce using rule 11 (cuerpo -> bfor .)
    FUNCTION        reduce using rule 11 (cuerpo -> bfor .)
    DEFINE          reduce using rule 11 (cuerpo -> bfor .)
    READLINE        reduce using rule 11 (cuerpo -> bfor .)
    SUMA            reduce using rule 11 (cuerpo -> bfor .)
    RESTA           reduce using rule 11 (cuerpo -> bfor .)
    MULTIPLICACION  reduce using rule 11 (cuerpo -> bfor .)
    DIVISION        reduce using rule 11 (cuerpo -> bfor .)
    MODULO          reduce using rule 11 (cuerpo -> bfor .)
    SMALLER         reduce using rule 11 (cuerpo -> bfor .)
    GREATER         reduce using rule 11 (cuerpo -> bfor .)
    IS_SMALLER_OR_EQUAL reduce using rule 11 (cuerpo -> bfor .)
    IS_GREATER_OR_EQUAL reduce using rule 11 (cuerpo -> bfor .)
    AND             reduce using rule 11 (cuerpo -> bfor .)
    OR              reduce using rule 11 (cuerpo -> bfor .)
    XOR             reduce using rule 11 (cuerpo -> bfor .)
    IS_EQUAL        reduce using rule 11 (cuerpo -> bfor .)
    IS_NOT_EQUAL    reduce using rule 11 (cuerpo -> bfor .)
    IS_IDENTICAL    reduce using rule 11 (cuerpo -> bfor .)
    IS_NOT_IDENTICAL reduce using rule 11 (cuerpo -> bfor .)
    BOOLEAN_NOT     reduce using rule 11 (cuerpo -> bfor .)
    WHILE           reduce using rule 11 (cuerpo -> bfor .)
    FOR             reduce using rule 11 (cuerpo -> bfor .)
    FOREACH         reduce using rule 11 (cuerpo -> bfor .)
    TRY             reduce using rule 11 (cuerpo -> bfor .)
    IF              reduce using rule 11 (cuerpo -> bfor .)
    LPAREN          reduce using rule 11 (cuerpo -> bfor .)
    STRING          reduce using rule 11 (cuerpo -> bfor .)
    NOMBRE          reduce using rule 11 (cuerpo -> bfor .)
    ENTERO          reduce using rule 11 (cuerpo -> bfor .)
    DECIMAL         reduce using rule 11 (cuerpo -> bfor .)


state 13

    (12) cuerpo -> bforeach .

    $end            reduce using rule 12 (cuerpo -> bforeach .)
    RBRACE          reduce using rule 12 (cuerpo -> bforeach .)
    ECHO            reduce using rule 12 (cuerpo -> bforeach .)
    PRINT           reduce using rule 12 (cuerpo -> bforeach .)
    VARIABLE        reduce using rule 12 (cuerpo -> bforeach .)
    FUNCTION        reduce using rule 12 (cuerpo -> bforeach .)
    DEFINE          reduce using rule 12 (cuerpo -> bforeach .)
    READLINE        reduce using rule 12 (cuerpo -> bforeach .)
    SUMA            reduce using rule 12 (cuerpo -> bforeach .)
    RESTA           reduce using rule 12 (cuerpo -> bforeach .)
    MULTIPLICACION  reduce using rule 12 (cuerpo -> bforeach .)
    DIVISION        reduce using rule 12 (cuerpo -> bforeach .)
    MODULO          reduce using rule 12 (cuerpo -> bforeach .)
    SMALLER         reduce using rule 12 (cuerpo -> bforeach .)
    GREATER         reduce using rule 12 (cuerpo -> bforeach .)
    IS_SMALLER_OR_EQUAL reduce using rule 12 (cuerpo -> bforeach .)
    IS_GREATER_OR_EQUAL reduce using rule 12 (cuerpo -> bforeach .)
    AND             reduce using rule 12 (cuerpo -> bforeach .)
    OR              reduce using rule 12 (cuerpo -> bforeach .)
    XOR             reduce using rule 12 (cuerpo -> bforeach .)
    IS_EQUAL        reduce using rule 12 (cuerpo -> bforeach .)
    IS_NOT_EQUAL    reduce using rule 12 (cuerpo -> bforeach .)
    IS_IDENTICAL    reduce using rule 12 (cuerpo -> bforeach .)
    IS_NOT_IDENTICAL reduce using rule 12 (cuerpo -> bforeach .)
    BOOLEAN_NOT     reduce using rule 12 (cuerpo -> bforeach .)
    WHILE           reduce using rule 12 (cuerpo -> bforeach .)
    FOR             reduce using rule 12 (cuerpo -> bforeach .)
    FOREACH         reduce using rule 12 (cuerpo -> bforeach .)
    TRY             reduce using rule 12 (cuerpo -> bforeach .)
    IF              reduce using rule 12 (cuerpo -> bforeach .)
    LPAREN          reduce using rule 12 (cuerpo -> bforeach .)
    STRING          reduce using rule 12 (cuerpo -> bforeach .)
    NOMBRE          reduce using rule 12 (cuerpo -> bforeach .)
    ENTERO          reduce using rule 12 (cuerpo -> bforeach .)
    DECIMAL         reduce using rule 12 (cuerpo -> bforeach .)


state 14

    (13) cuerpo -> btry .

    $end            reduce using rule 13 (cuerpo -> btry .)
    RBRACE          reduce using rule 13 (cuerpo -> btry .)
    ECHO            reduce using rule 13 (cuerpo -> btry .)
    PRINT           reduce using rule 13 (cuerpo -> btry .)
    VARIABLE        reduce using rule 13 (cuerpo -> btry .)
    FUNCTION        reduce using rule 13 (cuerpo -> btry .)
    DEFINE          reduce using rule 13 (cuerpo -> btry .)
    READLINE        reduce using rule 13 (cuerpo -> btry .)
    SUMA            reduce using rule 13 (cuerpo -> btry .)
    RESTA           reduce using rule 13 (cuerpo -> btry .)
    MULTIPLICACION  reduce using rule 13 (cuerpo -> btry .)
    DIVISION        reduce using rule 13 (cuerpo -> btry .)
    MODULO          reduce using rule 13 (cuerpo -> btry .)
    SMALLER         reduce using rule 13 (cuerpo -> btry .)
    GREATER         reduce using rule 13 (cuerpo -> btry .)
    IS_SMALLER_OR_EQUAL reduce using rule 13 (cuerpo -> btry .)
    IS_GREATER_OR_EQUAL reduce using rule 13 (cuerpo -> btry .)
    AND             reduce using rule 13 (cuerpo -> btry .)
    OR              reduce using rule 13 (cuerpo -> btry .)
    XOR             reduce using rule 13 (cuerpo -> btry .)
    IS_EQUAL        reduce using rule 13 (cuerpo -> btry .)
    IS_NOT_EQUAL    reduce using rule 13 (cuerpo -> btry .)
    IS_IDENTICAL    reduce using rule 13 (cuerpo -> btry .)
    IS_NOT_IDENTICAL reduce using rule 13 (cuerpo -> btry .)
    BOOLEAN_NOT     reduce using rule 13 (cuerpo -> btry .)
    WHILE           reduce using rule 13 (cuerpo -> btry .)
    FOR             reduce using rule 13 (cuerpo -> btry .)
    FOREACH         reduce using rule 13 (cuerpo -> btry .)
    TRY             reduce using rule 13 (cuerpo -> btry .)
    IF              reduce using rule 13 (cuerpo -> btry .)
    LPAREN          reduce using rule 13 (cuerpo -> btry .)
    STRING          reduce using rule 13 (cuerpo -> btry .)
    NOMBRE          reduce using rule 13 (cuerpo -> btry .)
    ENTERO          reduce using rule 13 (cuerpo -> btry .)
    DECIMAL         reduce using rule 13 (cuerpo -> btry .)


state 15

    (14) cuerpo -> operaciones_mat .

    $end            reduce using rule 14 (cuerpo -> operaciones_mat .)
    RBRACE          reduce using rule 14 (cuerpo -> operaciones_mat .)
    ECHO            reduce using rule 14 (cuerpo -> operaciones_mat .)
    PRINT           reduce using rule 14 (cuerpo -> operaciones_mat .)
    VARIABLE        reduce using rule 14 (cuerpo -> operaciones_mat .)
    FUNCTION        reduce using rule 14 (cuerpo -> operaciones_mat .)
    DEFINE          reduce using rule 14 (cuerpo -> operaciones_mat .)
    READLINE        reduce using rule 14 (cuerpo -> operaciones_mat .)
    SUMA            reduce using rule 14 (cuerpo -> operaciones_mat .)
    RESTA           reduce using rule 14 (cuerpo -> operaciones_mat .)
    MULTIPLICACION  reduce using rule 14 (cuerpo -> operaciones_mat .)
    DIVISION        reduce using rule 14 (cuerpo -> operaciones_mat .)
    MODULO          reduce using rule 14 (cuerpo -> operaciones_mat .)
    SMALLER         reduce using rule 14 (cuerpo -> operaciones_mat .)
    GREATER         reduce using rule 14 (cuerpo -> operaciones_mat .)
    IS_SMALLER_OR_EQUAL reduce using rule 14 (cuerpo -> operaciones_mat .)
    IS_GREATER_OR_EQUAL reduce using rule 14 (cuerpo -> operaciones_mat .)
    AND             reduce using rule 14 (cuerpo -> operaciones_mat .)
    OR              reduce using rule 14 (cuerpo -> operaciones_mat .)
    XOR             reduce using rule 14 (cuerpo -> operaciones_mat .)
    IS_EQUAL        reduce using rule 14 (cuerpo -> operaciones_mat .)
    IS_NOT_EQUAL    reduce using rule 14 (cuerpo -> operaciones_mat .)
    IS_IDENTICAL    reduce using rule 14 (cuerpo -> operaciones_mat .)
    IS_NOT_IDENTICAL reduce using rule 14 (cuerpo -> operaciones_mat .)
    BOOLEAN_NOT     reduce using rule 14 (cuerpo -> operaciones_mat .)
    WHILE           reduce using rule 14 (cuerpo -> operaciones_mat .)
    FOR             reduce using rule 14 (cuerpo -> operaciones_mat .)
    FOREACH         reduce using rule 14 (cuerpo -> operaciones_mat .)
    TRY             reduce using rule 14 (cuerpo -> operaciones_mat .)
    IF              reduce using rule 14 (cuerpo -> operaciones_mat .)
    LPAREN          reduce using rule 14 (cuerpo -> operaciones_mat .)
    STRING          reduce using rule 14 (cuerpo -> operaciones_mat .)
    NOMBRE          reduce using rule 14 (cuerpo -> operaciones_mat .)
    ENTERO          reduce using rule 14 (cuerpo -> operaciones_mat .)
    DECIMAL         reduce using rule 14 (cuerpo -> operaciones_mat .)


state 16

    (15) cuerpo -> condicion_if .

    $end            reduce using rule 15 (cuerpo -> condicion_if .)
    RBRACE          reduce using rule 15 (cuerpo -> condicion_if .)
    ECHO            reduce using rule 15 (cuerpo -> condicion_if .)
    PRINT           reduce using rule 15 (cuerpo -> condicion_if .)
    VARIABLE        reduce using rule 15 (cuerpo -> condicion_if .)
    FUNCTION        reduce using rule 15 (cuerpo -> condicion_if .)
    DEFINE          reduce using rule 15 (cuerpo -> condicion_if .)
    READLINE        reduce using rule 15 (cuerpo -> condicion_if .)
    SUMA            reduce using rule 15 (cuerpo -> condicion_if .)
    RESTA           reduce using rule 15 (cuerpo -> condicion_if .)
    MULTIPLICACION  reduce using rule 15 (cuerpo -> condicion_if .)
    DIVISION        reduce using rule 15 (cuerpo -> condicion_if .)
    MODULO          reduce using rule 15 (cuerpo -> condicion_if .)
    SMALLER         reduce using rule 15 (cuerpo -> condicion_if .)
    GREATER         reduce using rule 15 (cuerpo -> condicion_if .)
    IS_SMALLER_OR_EQUAL reduce using rule 15 (cuerpo -> condicion_if .)
    IS_GREATER_OR_EQUAL reduce using rule 15 (cuerpo -> condicion_if .)
    AND             reduce using rule 15 (cuerpo -> condicion_if .)
    OR              reduce using rule 15 (cuerpo -> condicion_if .)
    XOR             reduce using rule 15 (cuerpo -> condicion_if .)
    IS_EQUAL        reduce using rule 15 (cuerpo -> condicion_if .)
    IS_NOT_EQUAL    reduce using rule 15 (cuerpo -> condicion_if .)
    IS_IDENTICAL    reduce using rule 15 (cuerpo -> condicion_if .)
    IS_NOT_IDENTICAL reduce using rule 15 (cuerpo -> condicion_if .)
    BOOLEAN_NOT     reduce using rule 15 (cuerpo -> condicion_if .)
    WHILE           reduce using rule 15 (cuerpo -> condicion_if .)
    FOR             reduce using rule 15 (cuerpo -> condicion_if .)
    FOREACH         reduce using rule 15 (cuerpo -> condicion_if .)
    TRY             reduce using rule 15 (cuerpo -> condicion_if .)
    IF              reduce using rule 15 (cuerpo -> condicion_if .)
    LPAREN          reduce using rule 15 (cuerpo -> condicion_if .)
    STRING          reduce using rule 15 (cuerpo -> condicion_if .)
    NOMBRE          reduce using rule 15 (cuerpo -> condicion_if .)
    ENTERO          reduce using rule 15 (cuerpo -> condicion_if .)
    DECIMAL         reduce using rule 15 (cuerpo -> condicion_if .)


state 17

    (16) imprimir -> ECHO . valor SEMI
    (19) imprimir -> ECHO . NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    NOMBRE          shift and go to state 55
    VARIABLE        shift and go to state 56
    STRING          shift and go to state 26
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    valor                          shift and go to state 54
    numero                         shift and go to state 52

state 18

    (46) op_basicas -> valor . operadores valor
    (48) op_recursivas -> valor . operadores op_recursivas
    (49) op_recursivas -> valor . LPAREN valor operadores valor RPAREN operaciones_mat
    (26) operadores -> . SUMA
    (27) operadores -> . RESTA
    (28) operadores -> . MULTIPLICACION
    (29) operadores -> . DIVISION
    (30) operadores -> . MODULO

    LPAREN          shift and go to state 58
    SUMA            shift and go to state 28
    RESTA           shift and go to state 29
    MULTIPLICACION  shift and go to state 30
    DIVISION        shift and go to state 31
    MODULO          shift and go to state 32

    operadores                     shift and go to state 57

state 19

    (17) imprimir -> PRINT . valor SEMI
    (18) imprimir -> PRINT . LPAREN valor RPAREN SEMI
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    LPAREN          shift and go to state 60
    VARIABLE        shift and go to state 56
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    valor                          shift and go to state 59
    numero                         shift and go to state 52

state 20

    (47) op_basicas -> LPAREN . valor operadores valor RPAREN
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 56
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    valor                          shift and go to state 61
    numero                         shift and go to state 52

state 21

    (23) valor -> NOMBRE .

    LPAREN          reduce using rule 23 (valor -> NOMBRE .)
    SUMA            reduce using rule 23 (valor -> NOMBRE .)
    RESTA           reduce using rule 23 (valor -> NOMBRE .)
    MULTIPLICACION  reduce using rule 23 (valor -> NOMBRE .)
    DIVISION        reduce using rule 23 (valor -> NOMBRE .)
    MODULO          reduce using rule 23 (valor -> NOMBRE .)
    SEMI            reduce using rule 23 (valor -> NOMBRE .)
    $end            reduce using rule 23 (valor -> NOMBRE .)
    RBRACE          reduce using rule 23 (valor -> NOMBRE .)
    ECHO            reduce using rule 23 (valor -> NOMBRE .)
    PRINT           reduce using rule 23 (valor -> NOMBRE .)
    VARIABLE        reduce using rule 23 (valor -> NOMBRE .)
    FUNCTION        reduce using rule 23 (valor -> NOMBRE .)
    DEFINE          reduce using rule 23 (valor -> NOMBRE .)
    READLINE        reduce using rule 23 (valor -> NOMBRE .)
    SMALLER         reduce using rule 23 (valor -> NOMBRE .)
    GREATER         reduce using rule 23 (valor -> NOMBRE .)
    IS_SMALLER_OR_EQUAL reduce using rule 23 (valor -> NOMBRE .)
    IS_GREATER_OR_EQUAL reduce using rule 23 (valor -> NOMBRE .)
    AND             reduce using rule 23 (valor -> NOMBRE .)
    OR              reduce using rule 23 (valor -> NOMBRE .)
    XOR             reduce using rule 23 (valor -> NOMBRE .)
    IS_EQUAL        reduce using rule 23 (valor -> NOMBRE .)
    IS_NOT_EQUAL    reduce using rule 23 (valor -> NOMBRE .)
    IS_IDENTICAL    reduce using rule 23 (valor -> NOMBRE .)
    IS_NOT_IDENTICAL reduce using rule 23 (valor -> NOMBRE .)
    BOOLEAN_NOT     reduce using rule 23 (valor -> NOMBRE .)
    WHILE           reduce using rule 23 (valor -> NOMBRE .)
    FOR             reduce using rule 23 (valor -> NOMBRE .)
    FOREACH         reduce using rule 23 (valor -> NOMBRE .)
    TRY             reduce using rule 23 (valor -> NOMBRE .)
    IF              reduce using rule 23 (valor -> NOMBRE .)
    STRING          reduce using rule 23 (valor -> NOMBRE .)
    NOMBRE          reduce using rule 23 (valor -> NOMBRE .)
    ENTERO          reduce using rule 23 (valor -> NOMBRE .)
    DECIMAL         reduce using rule 23 (valor -> NOMBRE .)
    RPAREN          reduce using rule 23 (valor -> NOMBRE .)


state 22

    (24) numero -> ENTERO .

    LPAREN          reduce using rule 24 (numero -> ENTERO .)
    SUMA            reduce using rule 24 (numero -> ENTERO .)
    RESTA           reduce using rule 24 (numero -> ENTERO .)
    MULTIPLICACION  reduce using rule 24 (numero -> ENTERO .)
    DIVISION        reduce using rule 24 (numero -> ENTERO .)
    MODULO          reduce using rule 24 (numero -> ENTERO .)
    SEMI            reduce using rule 24 (numero -> ENTERO .)
    $end            reduce using rule 24 (numero -> ENTERO .)
    RBRACE          reduce using rule 24 (numero -> ENTERO .)
    ECHO            reduce using rule 24 (numero -> ENTERO .)
    PRINT           reduce using rule 24 (numero -> ENTERO .)
    VARIABLE        reduce using rule 24 (numero -> ENTERO .)
    FUNCTION        reduce using rule 24 (numero -> ENTERO .)
    DEFINE          reduce using rule 24 (numero -> ENTERO .)
    READLINE        reduce using rule 24 (numero -> ENTERO .)
    SMALLER         reduce using rule 24 (numero -> ENTERO .)
    GREATER         reduce using rule 24 (numero -> ENTERO .)
    IS_SMALLER_OR_EQUAL reduce using rule 24 (numero -> ENTERO .)
    IS_GREATER_OR_EQUAL reduce using rule 24 (numero -> ENTERO .)
    AND             reduce using rule 24 (numero -> ENTERO .)
    OR              reduce using rule 24 (numero -> ENTERO .)
    XOR             reduce using rule 24 (numero -> ENTERO .)
    IS_EQUAL        reduce using rule 24 (numero -> ENTERO .)
    IS_NOT_EQUAL    reduce using rule 24 (numero -> ENTERO .)
    IS_IDENTICAL    reduce using rule 24 (numero -> ENTERO .)
    IS_NOT_IDENTICAL reduce using rule 24 (numero -> ENTERO .)
    BOOLEAN_NOT     reduce using rule 24 (numero -> ENTERO .)
    WHILE           reduce using rule 24 (numero -> ENTERO .)
    FOR             reduce using rule 24 (numero -> ENTERO .)
    FOREACH         reduce using rule 24 (numero -> ENTERO .)
    TRY             reduce using rule 24 (numero -> ENTERO .)
    IF              reduce using rule 24 (numero -> ENTERO .)
    STRING          reduce using rule 24 (numero -> ENTERO .)
    NOMBRE          reduce using rule 24 (numero -> ENTERO .)
    ENTERO          reduce using rule 24 (numero -> ENTERO .)
    DECIMAL         reduce using rule 24 (numero -> ENTERO .)
    RPAREN          reduce using rule 24 (numero -> ENTERO .)


state 23

    (50) asignacion -> VARIABLE . EQUALS valor SEMI
    (51) asignacion_array -> VARIABLE . EQUALS array_def SEMI
    (21) valor -> VARIABLE .

    EQUALS          shift and go to state 62
    LPAREN          reduce using rule 21 (valor -> VARIABLE .)
    SUMA            reduce using rule 21 (valor -> VARIABLE .)
    RESTA           reduce using rule 21 (valor -> VARIABLE .)
    MULTIPLICACION  reduce using rule 21 (valor -> VARIABLE .)
    DIVISION        reduce using rule 21 (valor -> VARIABLE .)
    MODULO          reduce using rule 21 (valor -> VARIABLE .)


state 24

    (58) funcion_nparams -> FUNCTION . NOMBRE LPAREN params_list RPAREN stc_bloque_def

    NOMBRE          shift and go to state 63


state 25

    (52) constante -> DEFINE . LPAREN STRING COMMA valor RPAREN SEMI
    (53) constante -> DEFINE . LPAREN NOMBRE COMMA ARRAY RPAREN SEMI

    LPAREN          shift and go to state 64


state 26

    (22) valor -> STRING .

    LPAREN          reduce using rule 22 (valor -> STRING .)
    SUMA            reduce using rule 22 (valor -> STRING .)
    RESTA           reduce using rule 22 (valor -> STRING .)
    MULTIPLICACION  reduce using rule 22 (valor -> STRING .)
    DIVISION        reduce using rule 22 (valor -> STRING .)
    MODULO          reduce using rule 22 (valor -> STRING .)
    SEMI            reduce using rule 22 (valor -> STRING .)
    $end            reduce using rule 22 (valor -> STRING .)
    RBRACE          reduce using rule 22 (valor -> STRING .)
    ECHO            reduce using rule 22 (valor -> STRING .)
    PRINT           reduce using rule 22 (valor -> STRING .)
    VARIABLE        reduce using rule 22 (valor -> STRING .)
    FUNCTION        reduce using rule 22 (valor -> STRING .)
    DEFINE          reduce using rule 22 (valor -> STRING .)
    READLINE        reduce using rule 22 (valor -> STRING .)
    SMALLER         reduce using rule 22 (valor -> STRING .)
    GREATER         reduce using rule 22 (valor -> STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 22 (valor -> STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 22 (valor -> STRING .)
    AND             reduce using rule 22 (valor -> STRING .)
    OR              reduce using rule 22 (valor -> STRING .)
    XOR             reduce using rule 22 (valor -> STRING .)
    IS_EQUAL        reduce using rule 22 (valor -> STRING .)
    IS_NOT_EQUAL    reduce using rule 22 (valor -> STRING .)
    IS_IDENTICAL    reduce using rule 22 (valor -> STRING .)
    IS_NOT_IDENTICAL reduce using rule 22 (valor -> STRING .)
    BOOLEAN_NOT     reduce using rule 22 (valor -> STRING .)
    WHILE           reduce using rule 22 (valor -> STRING .)
    FOR             reduce using rule 22 (valor -> STRING .)
    FOREACH         reduce using rule 22 (valor -> STRING .)
    TRY             reduce using rule 22 (valor -> STRING .)
    IF              reduce using rule 22 (valor -> STRING .)
    STRING          reduce using rule 22 (valor -> STRING .)
    NOMBRE          reduce using rule 22 (valor -> STRING .)
    ENTERO          reduce using rule 22 (valor -> STRING .)
    DECIMAL         reduce using rule 22 (valor -> STRING .)
    RPAREN          reduce using rule 22 (valor -> STRING .)


state 27

    (54) lectura -> READLINE . LPAREN STRING RPAREN SEMI
    (55) lectura -> READLINE . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 65


state 28

    (26) operadores -> SUMA .

    $end            reduce using rule 26 (operadores -> SUMA .)
    VARIABLE        reduce using rule 26 (operadores -> SUMA .)
    STRING          reduce using rule 26 (operadores -> SUMA .)
    NOMBRE          reduce using rule 26 (operadores -> SUMA .)
    ENTERO          reduce using rule 26 (operadores -> SUMA .)
    DECIMAL         reduce using rule 26 (operadores -> SUMA .)
    RBRACE          reduce using rule 26 (operadores -> SUMA .)
    ECHO            reduce using rule 26 (operadores -> SUMA .)
    PRINT           reduce using rule 26 (operadores -> SUMA .)
    FUNCTION        reduce using rule 26 (operadores -> SUMA .)
    DEFINE          reduce using rule 26 (operadores -> SUMA .)
    READLINE        reduce using rule 26 (operadores -> SUMA .)
    SUMA            reduce using rule 26 (operadores -> SUMA .)
    RESTA           reduce using rule 26 (operadores -> SUMA .)
    MULTIPLICACION  reduce using rule 26 (operadores -> SUMA .)
    DIVISION        reduce using rule 26 (operadores -> SUMA .)
    MODULO          reduce using rule 26 (operadores -> SUMA .)
    SMALLER         reduce using rule 26 (operadores -> SUMA .)
    GREATER         reduce using rule 26 (operadores -> SUMA .)
    IS_SMALLER_OR_EQUAL reduce using rule 26 (operadores -> SUMA .)
    IS_GREATER_OR_EQUAL reduce using rule 26 (operadores -> SUMA .)
    AND             reduce using rule 26 (operadores -> SUMA .)
    OR              reduce using rule 26 (operadores -> SUMA .)
    XOR             reduce using rule 26 (operadores -> SUMA .)
    IS_EQUAL        reduce using rule 26 (operadores -> SUMA .)
    IS_NOT_EQUAL    reduce using rule 26 (operadores -> SUMA .)
    IS_IDENTICAL    reduce using rule 26 (operadores -> SUMA .)
    IS_NOT_IDENTICAL reduce using rule 26 (operadores -> SUMA .)
    BOOLEAN_NOT     reduce using rule 26 (operadores -> SUMA .)
    WHILE           reduce using rule 26 (operadores -> SUMA .)
    FOR             reduce using rule 26 (operadores -> SUMA .)
    FOREACH         reduce using rule 26 (operadores -> SUMA .)
    TRY             reduce using rule 26 (operadores -> SUMA .)
    IF              reduce using rule 26 (operadores -> SUMA .)
    LPAREN          reduce using rule 26 (operadores -> SUMA .)


state 29

    (27) operadores -> RESTA .

    $end            reduce using rule 27 (operadores -> RESTA .)
    VARIABLE        reduce using rule 27 (operadores -> RESTA .)
    STRING          reduce using rule 27 (operadores -> RESTA .)
    NOMBRE          reduce using rule 27 (operadores -> RESTA .)
    ENTERO          reduce using rule 27 (operadores -> RESTA .)
    DECIMAL         reduce using rule 27 (operadores -> RESTA .)
    RBRACE          reduce using rule 27 (operadores -> RESTA .)
    ECHO            reduce using rule 27 (operadores -> RESTA .)
    PRINT           reduce using rule 27 (operadores -> RESTA .)
    FUNCTION        reduce using rule 27 (operadores -> RESTA .)
    DEFINE          reduce using rule 27 (operadores -> RESTA .)
    READLINE        reduce using rule 27 (operadores -> RESTA .)
    SUMA            reduce using rule 27 (operadores -> RESTA .)
    RESTA           reduce using rule 27 (operadores -> RESTA .)
    MULTIPLICACION  reduce using rule 27 (operadores -> RESTA .)
    DIVISION        reduce using rule 27 (operadores -> RESTA .)
    MODULO          reduce using rule 27 (operadores -> RESTA .)
    SMALLER         reduce using rule 27 (operadores -> RESTA .)
    GREATER         reduce using rule 27 (operadores -> RESTA .)
    IS_SMALLER_OR_EQUAL reduce using rule 27 (operadores -> RESTA .)
    IS_GREATER_OR_EQUAL reduce using rule 27 (operadores -> RESTA .)
    AND             reduce using rule 27 (operadores -> RESTA .)
    OR              reduce using rule 27 (operadores -> RESTA .)
    XOR             reduce using rule 27 (operadores -> RESTA .)
    IS_EQUAL        reduce using rule 27 (operadores -> RESTA .)
    IS_NOT_EQUAL    reduce using rule 27 (operadores -> RESTA .)
    IS_IDENTICAL    reduce using rule 27 (operadores -> RESTA .)
    IS_NOT_IDENTICAL reduce using rule 27 (operadores -> RESTA .)
    BOOLEAN_NOT     reduce using rule 27 (operadores -> RESTA .)
    WHILE           reduce using rule 27 (operadores -> RESTA .)
    FOR             reduce using rule 27 (operadores -> RESTA .)
    FOREACH         reduce using rule 27 (operadores -> RESTA .)
    TRY             reduce using rule 27 (operadores -> RESTA .)
    IF              reduce using rule 27 (operadores -> RESTA .)
    LPAREN          reduce using rule 27 (operadores -> RESTA .)


state 30

    (28) operadores -> MULTIPLICACION .

    $end            reduce using rule 28 (operadores -> MULTIPLICACION .)
    VARIABLE        reduce using rule 28 (operadores -> MULTIPLICACION .)
    STRING          reduce using rule 28 (operadores -> MULTIPLICACION .)
    NOMBRE          reduce using rule 28 (operadores -> MULTIPLICACION .)
    ENTERO          reduce using rule 28 (operadores -> MULTIPLICACION .)
    DECIMAL         reduce using rule 28 (operadores -> MULTIPLICACION .)
    RBRACE          reduce using rule 28 (operadores -> MULTIPLICACION .)
    ECHO            reduce using rule 28 (operadores -> MULTIPLICACION .)
    PRINT           reduce using rule 28 (operadores -> MULTIPLICACION .)
    FUNCTION        reduce using rule 28 (operadores -> MULTIPLICACION .)
    DEFINE          reduce using rule 28 (operadores -> MULTIPLICACION .)
    READLINE        reduce using rule 28 (operadores -> MULTIPLICACION .)
    SUMA            reduce using rule 28 (operadores -> MULTIPLICACION .)
    RESTA           reduce using rule 28 (operadores -> MULTIPLICACION .)
    MULTIPLICACION  reduce using rule 28 (operadores -> MULTIPLICACION .)
    DIVISION        reduce using rule 28 (operadores -> MULTIPLICACION .)
    MODULO          reduce using rule 28 (operadores -> MULTIPLICACION .)
    SMALLER         reduce using rule 28 (operadores -> MULTIPLICACION .)
    GREATER         reduce using rule 28 (operadores -> MULTIPLICACION .)
    IS_SMALLER_OR_EQUAL reduce using rule 28 (operadores -> MULTIPLICACION .)
    IS_GREATER_OR_EQUAL reduce using rule 28 (operadores -> MULTIPLICACION .)
    AND             reduce using rule 28 (operadores -> MULTIPLICACION .)
    OR              reduce using rule 28 (operadores -> MULTIPLICACION .)
    XOR             reduce using rule 28 (operadores -> MULTIPLICACION .)
    IS_EQUAL        reduce using rule 28 (operadores -> MULTIPLICACION .)
    IS_NOT_EQUAL    reduce using rule 28 (operadores -> MULTIPLICACION .)
    IS_IDENTICAL    reduce using rule 28 (operadores -> MULTIPLICACION .)
    IS_NOT_IDENTICAL reduce using rule 28 (operadores -> MULTIPLICACION .)
    BOOLEAN_NOT     reduce using rule 28 (operadores -> MULTIPLICACION .)
    WHILE           reduce using rule 28 (operadores -> MULTIPLICACION .)
    FOR             reduce using rule 28 (operadores -> MULTIPLICACION .)
    FOREACH         reduce using rule 28 (operadores -> MULTIPLICACION .)
    TRY             reduce using rule 28 (operadores -> MULTIPLICACION .)
    IF              reduce using rule 28 (operadores -> MULTIPLICACION .)
    LPAREN          reduce using rule 28 (operadores -> MULTIPLICACION .)


state 31

    (29) operadores -> DIVISION .

    $end            reduce using rule 29 (operadores -> DIVISION .)
    VARIABLE        reduce using rule 29 (operadores -> DIVISION .)
    STRING          reduce using rule 29 (operadores -> DIVISION .)
    NOMBRE          reduce using rule 29 (operadores -> DIVISION .)
    ENTERO          reduce using rule 29 (operadores -> DIVISION .)
    DECIMAL         reduce using rule 29 (operadores -> DIVISION .)
    RBRACE          reduce using rule 29 (operadores -> DIVISION .)
    ECHO            reduce using rule 29 (operadores -> DIVISION .)
    PRINT           reduce using rule 29 (operadores -> DIVISION .)
    FUNCTION        reduce using rule 29 (operadores -> DIVISION .)
    DEFINE          reduce using rule 29 (operadores -> DIVISION .)
    READLINE        reduce using rule 29 (operadores -> DIVISION .)
    SUMA            reduce using rule 29 (operadores -> DIVISION .)
    RESTA           reduce using rule 29 (operadores -> DIVISION .)
    MULTIPLICACION  reduce using rule 29 (operadores -> DIVISION .)
    DIVISION        reduce using rule 29 (operadores -> DIVISION .)
    MODULO          reduce using rule 29 (operadores -> DIVISION .)
    SMALLER         reduce using rule 29 (operadores -> DIVISION .)
    GREATER         reduce using rule 29 (operadores -> DIVISION .)
    IS_SMALLER_OR_EQUAL reduce using rule 29 (operadores -> DIVISION .)
    IS_GREATER_OR_EQUAL reduce using rule 29 (operadores -> DIVISION .)
    AND             reduce using rule 29 (operadores -> DIVISION .)
    OR              reduce using rule 29 (operadores -> DIVISION .)
    XOR             reduce using rule 29 (operadores -> DIVISION .)
    IS_EQUAL        reduce using rule 29 (operadores -> DIVISION .)
    IS_NOT_EQUAL    reduce using rule 29 (operadores -> DIVISION .)
    IS_IDENTICAL    reduce using rule 29 (operadores -> DIVISION .)
    IS_NOT_IDENTICAL reduce using rule 29 (operadores -> DIVISION .)
    BOOLEAN_NOT     reduce using rule 29 (operadores -> DIVISION .)
    WHILE           reduce using rule 29 (operadores -> DIVISION .)
    FOR             reduce using rule 29 (operadores -> DIVISION .)
    FOREACH         reduce using rule 29 (operadores -> DIVISION .)
    TRY             reduce using rule 29 (operadores -> DIVISION .)
    IF              reduce using rule 29 (operadores -> DIVISION .)
    LPAREN          reduce using rule 29 (operadores -> DIVISION .)


state 32

    (30) operadores -> MODULO .

    $end            reduce using rule 30 (operadores -> MODULO .)
    VARIABLE        reduce using rule 30 (operadores -> MODULO .)
    STRING          reduce using rule 30 (operadores -> MODULO .)
    NOMBRE          reduce using rule 30 (operadores -> MODULO .)
    ENTERO          reduce using rule 30 (operadores -> MODULO .)
    DECIMAL         reduce using rule 30 (operadores -> MODULO .)
    RBRACE          reduce using rule 30 (operadores -> MODULO .)
    ECHO            reduce using rule 30 (operadores -> MODULO .)
    PRINT           reduce using rule 30 (operadores -> MODULO .)
    FUNCTION        reduce using rule 30 (operadores -> MODULO .)
    DEFINE          reduce using rule 30 (operadores -> MODULO .)
    READLINE        reduce using rule 30 (operadores -> MODULO .)
    SUMA            reduce using rule 30 (operadores -> MODULO .)
    RESTA           reduce using rule 30 (operadores -> MODULO .)
    MULTIPLICACION  reduce using rule 30 (operadores -> MODULO .)
    DIVISION        reduce using rule 30 (operadores -> MODULO .)
    MODULO          reduce using rule 30 (operadores -> MODULO .)
    SMALLER         reduce using rule 30 (operadores -> MODULO .)
    GREATER         reduce using rule 30 (operadores -> MODULO .)
    IS_SMALLER_OR_EQUAL reduce using rule 30 (operadores -> MODULO .)
    IS_GREATER_OR_EQUAL reduce using rule 30 (operadores -> MODULO .)
    AND             reduce using rule 30 (operadores -> MODULO .)
    OR              reduce using rule 30 (operadores -> MODULO .)
    XOR             reduce using rule 30 (operadores -> MODULO .)
    IS_EQUAL        reduce using rule 30 (operadores -> MODULO .)
    IS_NOT_EQUAL    reduce using rule 30 (operadores -> MODULO .)
    IS_IDENTICAL    reduce using rule 30 (operadores -> MODULO .)
    IS_NOT_IDENTICAL reduce using rule 30 (operadores -> MODULO .)
    BOOLEAN_NOT     reduce using rule 30 (operadores -> MODULO .)
    WHILE           reduce using rule 30 (operadores -> MODULO .)
    FOR             reduce using rule 30 (operadores -> MODULO .)
    FOREACH         reduce using rule 30 (operadores -> MODULO .)
    TRY             reduce using rule 30 (operadores -> MODULO .)
    IF              reduce using rule 30 (operadores -> MODULO .)
    LPAREN          reduce using rule 30 (operadores -> MODULO .)


state 33

    (31) operador_logico -> SMALLER .

    $end            reduce using rule 31 (operador_logico -> SMALLER .)
    VARIABLE        reduce using rule 31 (operador_logico -> SMALLER .)
    STRING          reduce using rule 31 (operador_logico -> SMALLER .)
    NOMBRE          reduce using rule 31 (operador_logico -> SMALLER .)
    ENTERO          reduce using rule 31 (operador_logico -> SMALLER .)
    DECIMAL         reduce using rule 31 (operador_logico -> SMALLER .)
    RBRACE          reduce using rule 31 (operador_logico -> SMALLER .)
    ECHO            reduce using rule 31 (operador_logico -> SMALLER .)
    PRINT           reduce using rule 31 (operador_logico -> SMALLER .)
    FUNCTION        reduce using rule 31 (operador_logico -> SMALLER .)
    DEFINE          reduce using rule 31 (operador_logico -> SMALLER .)
    READLINE        reduce using rule 31 (operador_logico -> SMALLER .)
    SUMA            reduce using rule 31 (operador_logico -> SMALLER .)
    RESTA           reduce using rule 31 (operador_logico -> SMALLER .)
    MULTIPLICACION  reduce using rule 31 (operador_logico -> SMALLER .)
    DIVISION        reduce using rule 31 (operador_logico -> SMALLER .)
    MODULO          reduce using rule 31 (operador_logico -> SMALLER .)
    SMALLER         reduce using rule 31 (operador_logico -> SMALLER .)
    GREATER         reduce using rule 31 (operador_logico -> SMALLER .)
    IS_SMALLER_OR_EQUAL reduce using rule 31 (operador_logico -> SMALLER .)
    IS_GREATER_OR_EQUAL reduce using rule 31 (operador_logico -> SMALLER .)
    AND             reduce using rule 31 (operador_logico -> SMALLER .)
    OR              reduce using rule 31 (operador_logico -> SMALLER .)
    XOR             reduce using rule 31 (operador_logico -> SMALLER .)
    IS_EQUAL        reduce using rule 31 (operador_logico -> SMALLER .)
    IS_NOT_EQUAL    reduce using rule 31 (operador_logico -> SMALLER .)
    IS_IDENTICAL    reduce using rule 31 (operador_logico -> SMALLER .)
    IS_NOT_IDENTICAL reduce using rule 31 (operador_logico -> SMALLER .)
    BOOLEAN_NOT     reduce using rule 31 (operador_logico -> SMALLER .)
    WHILE           reduce using rule 31 (operador_logico -> SMALLER .)
    FOR             reduce using rule 31 (operador_logico -> SMALLER .)
    FOREACH         reduce using rule 31 (operador_logico -> SMALLER .)
    TRY             reduce using rule 31 (operador_logico -> SMALLER .)
    IF              reduce using rule 31 (operador_logico -> SMALLER .)
    LPAREN          reduce using rule 31 (operador_logico -> SMALLER .)


state 34

    (32) operador_logico -> GREATER .

    $end            reduce using rule 32 (operador_logico -> GREATER .)
    VARIABLE        reduce using rule 32 (operador_logico -> GREATER .)
    STRING          reduce using rule 32 (operador_logico -> GREATER .)
    NOMBRE          reduce using rule 32 (operador_logico -> GREATER .)
    ENTERO          reduce using rule 32 (operador_logico -> GREATER .)
    DECIMAL         reduce using rule 32 (operador_logico -> GREATER .)
    RBRACE          reduce using rule 32 (operador_logico -> GREATER .)
    ECHO            reduce using rule 32 (operador_logico -> GREATER .)
    PRINT           reduce using rule 32 (operador_logico -> GREATER .)
    FUNCTION        reduce using rule 32 (operador_logico -> GREATER .)
    DEFINE          reduce using rule 32 (operador_logico -> GREATER .)
    READLINE        reduce using rule 32 (operador_logico -> GREATER .)
    SUMA            reduce using rule 32 (operador_logico -> GREATER .)
    RESTA           reduce using rule 32 (operador_logico -> GREATER .)
    MULTIPLICACION  reduce using rule 32 (operador_logico -> GREATER .)
    DIVISION        reduce using rule 32 (operador_logico -> GREATER .)
    MODULO          reduce using rule 32 (operador_logico -> GREATER .)
    SMALLER         reduce using rule 32 (operador_logico -> GREATER .)
    GREATER         reduce using rule 32 (operador_logico -> GREATER .)
    IS_SMALLER_OR_EQUAL reduce using rule 32 (operador_logico -> GREATER .)
    IS_GREATER_OR_EQUAL reduce using rule 32 (operador_logico -> GREATER .)
    AND             reduce using rule 32 (operador_logico -> GREATER .)
    OR              reduce using rule 32 (operador_logico -> GREATER .)
    XOR             reduce using rule 32 (operador_logico -> GREATER .)
    IS_EQUAL        reduce using rule 32 (operador_logico -> GREATER .)
    IS_NOT_EQUAL    reduce using rule 32 (operador_logico -> GREATER .)
    IS_IDENTICAL    reduce using rule 32 (operador_logico -> GREATER .)
    IS_NOT_IDENTICAL reduce using rule 32 (operador_logico -> GREATER .)
    BOOLEAN_NOT     reduce using rule 32 (operador_logico -> GREATER .)
    WHILE           reduce using rule 32 (operador_logico -> GREATER .)
    FOR             reduce using rule 32 (operador_logico -> GREATER .)
    FOREACH         reduce using rule 32 (operador_logico -> GREATER .)
    TRY             reduce using rule 32 (operador_logico -> GREATER .)
    IF              reduce using rule 32 (operador_logico -> GREATER .)
    LPAREN          reduce using rule 32 (operador_logico -> GREATER .)


state 35

    (33) operador_logico -> IS_SMALLER_OR_EQUAL .

    $end            reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    VARIABLE        reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    STRING          reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    NOMBRE          reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    ENTERO          reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    DECIMAL         reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    RBRACE          reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    ECHO            reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    PRINT           reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    FUNCTION        reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    DEFINE          reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    READLINE        reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    SUMA            reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    RESTA           reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    MULTIPLICACION  reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    DIVISION        reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    MODULO          reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    SMALLER         reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    GREATER         reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_GREATER_OR_EQUAL reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    AND             reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    OR              reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    XOR             reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_EQUAL        reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_NOT_EQUAL    reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_IDENTICAL    reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_NOT_IDENTICAL reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    BOOLEAN_NOT     reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    WHILE           reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    FOR             reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    FOREACH         reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    TRY             reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IF              reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    LPAREN          reduce using rule 33 (operador_logico -> IS_SMALLER_OR_EQUAL .)


state 36

    (34) operador_logico -> IS_GREATER_OR_EQUAL .

    $end            reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    VARIABLE        reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    STRING          reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    NOMBRE          reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    ENTERO          reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    DECIMAL         reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    RBRACE          reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    ECHO            reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    PRINT           reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    FUNCTION        reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    DEFINE          reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    READLINE        reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    SUMA            reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    RESTA           reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    MULTIPLICACION  reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    DIVISION        reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    MODULO          reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    SMALLER         reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    GREATER         reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_GREATER_OR_EQUAL reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    AND             reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    OR              reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    XOR             reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_EQUAL        reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_NOT_EQUAL    reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_IDENTICAL    reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_NOT_IDENTICAL reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    BOOLEAN_NOT     reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    WHILE           reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    FOR             reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    FOREACH         reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    TRY             reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IF              reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)
    LPAREN          reduce using rule 34 (operador_logico -> IS_GREATER_OR_EQUAL .)


state 37

    (36) condicion_booleana -> AND .

    $end            reduce using rule 36 (condicion_booleana -> AND .)
    RBRACE          reduce using rule 36 (condicion_booleana -> AND .)
    ECHO            reduce using rule 36 (condicion_booleana -> AND .)
    PRINT           reduce using rule 36 (condicion_booleana -> AND .)
    VARIABLE        reduce using rule 36 (condicion_booleana -> AND .)
    FUNCTION        reduce using rule 36 (condicion_booleana -> AND .)
    DEFINE          reduce using rule 36 (condicion_booleana -> AND .)
    READLINE        reduce using rule 36 (condicion_booleana -> AND .)
    SUMA            reduce using rule 36 (condicion_booleana -> AND .)
    RESTA           reduce using rule 36 (condicion_booleana -> AND .)
    MULTIPLICACION  reduce using rule 36 (condicion_booleana -> AND .)
    DIVISION        reduce using rule 36 (condicion_booleana -> AND .)
    MODULO          reduce using rule 36 (condicion_booleana -> AND .)
    SMALLER         reduce using rule 36 (condicion_booleana -> AND .)
    GREATER         reduce using rule 36 (condicion_booleana -> AND .)
    IS_SMALLER_OR_EQUAL reduce using rule 36 (condicion_booleana -> AND .)
    IS_GREATER_OR_EQUAL reduce using rule 36 (condicion_booleana -> AND .)
    AND             reduce using rule 36 (condicion_booleana -> AND .)
    OR              reduce using rule 36 (condicion_booleana -> AND .)
    XOR             reduce using rule 36 (condicion_booleana -> AND .)
    IS_EQUAL        reduce using rule 36 (condicion_booleana -> AND .)
    IS_NOT_EQUAL    reduce using rule 36 (condicion_booleana -> AND .)
    IS_IDENTICAL    reduce using rule 36 (condicion_booleana -> AND .)
    IS_NOT_IDENTICAL reduce using rule 36 (condicion_booleana -> AND .)
    BOOLEAN_NOT     reduce using rule 36 (condicion_booleana -> AND .)
    WHILE           reduce using rule 36 (condicion_booleana -> AND .)
    FOR             reduce using rule 36 (condicion_booleana -> AND .)
    FOREACH         reduce using rule 36 (condicion_booleana -> AND .)
    TRY             reduce using rule 36 (condicion_booleana -> AND .)
    IF              reduce using rule 36 (condicion_booleana -> AND .)
    LPAREN          reduce using rule 36 (condicion_booleana -> AND .)
    STRING          reduce using rule 36 (condicion_booleana -> AND .)
    NOMBRE          reduce using rule 36 (condicion_booleana -> AND .)
    ENTERO          reduce using rule 36 (condicion_booleana -> AND .)
    DECIMAL         reduce using rule 36 (condicion_booleana -> AND .)


state 38

    (37) condicion_booleana -> OR .

    $end            reduce using rule 37 (condicion_booleana -> OR .)
    RBRACE          reduce using rule 37 (condicion_booleana -> OR .)
    ECHO            reduce using rule 37 (condicion_booleana -> OR .)
    PRINT           reduce using rule 37 (condicion_booleana -> OR .)
    VARIABLE        reduce using rule 37 (condicion_booleana -> OR .)
    FUNCTION        reduce using rule 37 (condicion_booleana -> OR .)
    DEFINE          reduce using rule 37 (condicion_booleana -> OR .)
    READLINE        reduce using rule 37 (condicion_booleana -> OR .)
    SUMA            reduce using rule 37 (condicion_booleana -> OR .)
    RESTA           reduce using rule 37 (condicion_booleana -> OR .)
    MULTIPLICACION  reduce using rule 37 (condicion_booleana -> OR .)
    DIVISION        reduce using rule 37 (condicion_booleana -> OR .)
    MODULO          reduce using rule 37 (condicion_booleana -> OR .)
    SMALLER         reduce using rule 37 (condicion_booleana -> OR .)
    GREATER         reduce using rule 37 (condicion_booleana -> OR .)
    IS_SMALLER_OR_EQUAL reduce using rule 37 (condicion_booleana -> OR .)
    IS_GREATER_OR_EQUAL reduce using rule 37 (condicion_booleana -> OR .)
    AND             reduce using rule 37 (condicion_booleana -> OR .)
    OR              reduce using rule 37 (condicion_booleana -> OR .)
    XOR             reduce using rule 37 (condicion_booleana -> OR .)
    IS_EQUAL        reduce using rule 37 (condicion_booleana -> OR .)
    IS_NOT_EQUAL    reduce using rule 37 (condicion_booleana -> OR .)
    IS_IDENTICAL    reduce using rule 37 (condicion_booleana -> OR .)
    IS_NOT_IDENTICAL reduce using rule 37 (condicion_booleana -> OR .)
    BOOLEAN_NOT     reduce using rule 37 (condicion_booleana -> OR .)
    WHILE           reduce using rule 37 (condicion_booleana -> OR .)
    FOR             reduce using rule 37 (condicion_booleana -> OR .)
    FOREACH         reduce using rule 37 (condicion_booleana -> OR .)
    TRY             reduce using rule 37 (condicion_booleana -> OR .)
    IF              reduce using rule 37 (condicion_booleana -> OR .)
    LPAREN          reduce using rule 37 (condicion_booleana -> OR .)
    STRING          reduce using rule 37 (condicion_booleana -> OR .)
    NOMBRE          reduce using rule 37 (condicion_booleana -> OR .)
    ENTERO          reduce using rule 37 (condicion_booleana -> OR .)
    DECIMAL         reduce using rule 37 (condicion_booleana -> OR .)


state 39

    (38) condicion_booleana -> XOR .

    $end            reduce using rule 38 (condicion_booleana -> XOR .)
    RBRACE          reduce using rule 38 (condicion_booleana -> XOR .)
    ECHO            reduce using rule 38 (condicion_booleana -> XOR .)
    PRINT           reduce using rule 38 (condicion_booleana -> XOR .)
    VARIABLE        reduce using rule 38 (condicion_booleana -> XOR .)
    FUNCTION        reduce using rule 38 (condicion_booleana -> XOR .)
    DEFINE          reduce using rule 38 (condicion_booleana -> XOR .)
    READLINE        reduce using rule 38 (condicion_booleana -> XOR .)
    SUMA            reduce using rule 38 (condicion_booleana -> XOR .)
    RESTA           reduce using rule 38 (condicion_booleana -> XOR .)
    MULTIPLICACION  reduce using rule 38 (condicion_booleana -> XOR .)
    DIVISION        reduce using rule 38 (condicion_booleana -> XOR .)
    MODULO          reduce using rule 38 (condicion_booleana -> XOR .)
    SMALLER         reduce using rule 38 (condicion_booleana -> XOR .)
    GREATER         reduce using rule 38 (condicion_booleana -> XOR .)
    IS_SMALLER_OR_EQUAL reduce using rule 38 (condicion_booleana -> XOR .)
    IS_GREATER_OR_EQUAL reduce using rule 38 (condicion_booleana -> XOR .)
    AND             reduce using rule 38 (condicion_booleana -> XOR .)
    OR              reduce using rule 38 (condicion_booleana -> XOR .)
    XOR             reduce using rule 38 (condicion_booleana -> XOR .)
    IS_EQUAL        reduce using rule 38 (condicion_booleana -> XOR .)
    IS_NOT_EQUAL    reduce using rule 38 (condicion_booleana -> XOR .)
    IS_IDENTICAL    reduce using rule 38 (condicion_booleana -> XOR .)
    IS_NOT_IDENTICAL reduce using rule 38 (condicion_booleana -> XOR .)
    BOOLEAN_NOT     reduce using rule 38 (condicion_booleana -> XOR .)
    WHILE           reduce using rule 38 (condicion_booleana -> XOR .)
    FOR             reduce using rule 38 (condicion_booleana -> XOR .)
    FOREACH         reduce using rule 38 (condicion_booleana -> XOR .)
    TRY             reduce using rule 38 (condicion_booleana -> XOR .)
    IF              reduce using rule 38 (condicion_booleana -> XOR .)
    LPAREN          reduce using rule 38 (condicion_booleana -> XOR .)
    STRING          reduce using rule 38 (condicion_booleana -> XOR .)
    NOMBRE          reduce using rule 38 (condicion_booleana -> XOR .)
    ENTERO          reduce using rule 38 (condicion_booleana -> XOR .)
    DECIMAL         reduce using rule 38 (condicion_booleana -> XOR .)


state 40

    (39) condicion_booleana -> IS_EQUAL .

    $end            reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    RBRACE          reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    ECHO            reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    PRINT           reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    VARIABLE        reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    FUNCTION        reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    DEFINE          reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    READLINE        reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    SUMA            reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    RESTA           reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    MULTIPLICACION  reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    DIVISION        reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    MODULO          reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    SMALLER         reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    GREATER         reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    IS_GREATER_OR_EQUAL reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    AND             reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    OR              reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    XOR             reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    IS_EQUAL        reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    IS_NOT_EQUAL    reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    IS_IDENTICAL    reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    IS_NOT_IDENTICAL reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    BOOLEAN_NOT     reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    WHILE           reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    FOR             reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    FOREACH         reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    TRY             reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    IF              reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    LPAREN          reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    STRING          reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    NOMBRE          reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    ENTERO          reduce using rule 39 (condicion_booleana -> IS_EQUAL .)
    DECIMAL         reduce using rule 39 (condicion_booleana -> IS_EQUAL .)


state 41

    (40) condicion_booleana -> IS_NOT_EQUAL .

    $end            reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    RBRACE          reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    ECHO            reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    PRINT           reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    VARIABLE        reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    FUNCTION        reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    DEFINE          reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    READLINE        reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    SUMA            reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    RESTA           reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    MULTIPLICACION  reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    DIVISION        reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    MODULO          reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    SMALLER         reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    GREATER         reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_GREATER_OR_EQUAL reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    AND             reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    OR              reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    XOR             reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_EQUAL        reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_NOT_EQUAL    reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_IDENTICAL    reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_NOT_IDENTICAL reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    BOOLEAN_NOT     reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    WHILE           reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    FOR             reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    FOREACH         reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    TRY             reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    IF              reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    LPAREN          reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    STRING          reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    NOMBRE          reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    ENTERO          reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)
    DECIMAL         reduce using rule 40 (condicion_booleana -> IS_NOT_EQUAL .)


state 42

    (41) condicion_booleana -> IS_IDENTICAL .

    $end            reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    RBRACE          reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    ECHO            reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    PRINT           reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    VARIABLE        reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    FUNCTION        reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    DEFINE          reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    READLINE        reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    SUMA            reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    RESTA           reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    MULTIPLICACION  reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    DIVISION        reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    MODULO          reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    SMALLER         reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    GREATER         reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    IS_GREATER_OR_EQUAL reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    AND             reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    OR              reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    XOR             reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    IS_EQUAL        reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    IS_NOT_EQUAL    reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    IS_IDENTICAL    reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    IS_NOT_IDENTICAL reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    BOOLEAN_NOT     reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    WHILE           reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    FOR             reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    FOREACH         reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    TRY             reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    IF              reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    LPAREN          reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    STRING          reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    NOMBRE          reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    ENTERO          reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)
    DECIMAL         reduce using rule 41 (condicion_booleana -> IS_IDENTICAL .)


state 43

    (42) condicion_booleana -> IS_NOT_IDENTICAL .

    $end            reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    RBRACE          reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    ECHO            reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    PRINT           reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    VARIABLE        reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    FUNCTION        reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    DEFINE          reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    READLINE        reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    SUMA            reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    RESTA           reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    MULTIPLICACION  reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    DIVISION        reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    MODULO          reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    SMALLER         reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    GREATER         reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_GREATER_OR_EQUAL reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    AND             reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    OR              reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    XOR             reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_EQUAL        reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_NOT_EQUAL    reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_IDENTICAL    reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_NOT_IDENTICAL reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    BOOLEAN_NOT     reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    WHILE           reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    FOR             reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    FOREACH         reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    TRY             reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IF              reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    LPAREN          reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    STRING          reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    NOMBRE          reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    ENTERO          reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)
    DECIMAL         reduce using rule 42 (condicion_booleana -> IS_NOT_IDENTICAL .)


state 44

    (43) condicion_booleana -> BOOLEAN_NOT .

    $end            reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    RBRACE          reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    ECHO            reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    PRINT           reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    VARIABLE        reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    FUNCTION        reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    DEFINE          reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    READLINE        reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    SUMA            reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    RESTA           reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    MULTIPLICACION  reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    DIVISION        reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    MODULO          reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    SMALLER         reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    GREATER         reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    IS_SMALLER_OR_EQUAL reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    IS_GREATER_OR_EQUAL reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    AND             reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    OR              reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    XOR             reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    IS_EQUAL        reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    IS_NOT_EQUAL    reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    IS_IDENTICAL    reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    IS_NOT_IDENTICAL reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    BOOLEAN_NOT     reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    WHILE           reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    FOR             reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    FOREACH         reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    TRY             reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    IF              reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    LPAREN          reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    STRING          reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    NOMBRE          reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    ENTERO          reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)
    DECIMAL         reduce using rule 43 (condicion_booleana -> BOOLEAN_NOT .)


state 45

    (63) bwhile -> WHILE . LPAREN condicion RPAREN LBRACE stc_bloque RBRACE

    LPAREN          shift and go to state 66


state 46

    (64) bfor -> FOR . LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def

    LPAREN          shift and go to state 67


state 47

    (74) bforeach -> FOREACH . LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def

    LPAREN          shift and go to state 68


state 48

    (79) btry -> TRY . LBRACE stc_bloque_def RBRACE catches

    LBRACE          shift and go to state 69


state 49

    (44) operaciones_mat -> op_basicas .

    $end            reduce using rule 44 (operaciones_mat -> op_basicas .)
    RBRACE          reduce using rule 44 (operaciones_mat -> op_basicas .)
    ECHO            reduce using rule 44 (operaciones_mat -> op_basicas .)
    PRINT           reduce using rule 44 (operaciones_mat -> op_basicas .)
    VARIABLE        reduce using rule 44 (operaciones_mat -> op_basicas .)
    FUNCTION        reduce using rule 44 (operaciones_mat -> op_basicas .)
    DEFINE          reduce using rule 44 (operaciones_mat -> op_basicas .)
    READLINE        reduce using rule 44 (operaciones_mat -> op_basicas .)
    SUMA            reduce using rule 44 (operaciones_mat -> op_basicas .)
    RESTA           reduce using rule 44 (operaciones_mat -> op_basicas .)
    MULTIPLICACION  reduce using rule 44 (operaciones_mat -> op_basicas .)
    DIVISION        reduce using rule 44 (operaciones_mat -> op_basicas .)
    MODULO          reduce using rule 44 (operaciones_mat -> op_basicas .)
    SMALLER         reduce using rule 44 (operaciones_mat -> op_basicas .)
    GREATER         reduce using rule 44 (operaciones_mat -> op_basicas .)
    IS_SMALLER_OR_EQUAL reduce using rule 44 (operaciones_mat -> op_basicas .)
    IS_GREATER_OR_EQUAL reduce using rule 44 (operaciones_mat -> op_basicas .)
    AND             reduce using rule 44 (operaciones_mat -> op_basicas .)
    OR              reduce using rule 44 (operaciones_mat -> op_basicas .)
    XOR             reduce using rule 44 (operaciones_mat -> op_basicas .)
    IS_EQUAL        reduce using rule 44 (operaciones_mat -> op_basicas .)
    IS_NOT_EQUAL    reduce using rule 44 (operaciones_mat -> op_basicas .)
    IS_IDENTICAL    reduce using rule 44 (operaciones_mat -> op_basicas .)
    IS_NOT_IDENTICAL reduce using rule 44 (operaciones_mat -> op_basicas .)
    BOOLEAN_NOT     reduce using rule 44 (operaciones_mat -> op_basicas .)
    WHILE           reduce using rule 44 (operaciones_mat -> op_basicas .)
    FOR             reduce using rule 44 (operaciones_mat -> op_basicas .)
    FOREACH         reduce using rule 44 (operaciones_mat -> op_basicas .)
    TRY             reduce using rule 44 (operaciones_mat -> op_basicas .)
    IF              reduce using rule 44 (operaciones_mat -> op_basicas .)
    LPAREN          reduce using rule 44 (operaciones_mat -> op_basicas .)
    STRING          reduce using rule 44 (operaciones_mat -> op_basicas .)
    NOMBRE          reduce using rule 44 (operaciones_mat -> op_basicas .)
    ENTERO          reduce using rule 44 (operaciones_mat -> op_basicas .)
    DECIMAL         reduce using rule 44 (operaciones_mat -> op_basicas .)


state 50

    (45) operaciones_mat -> op_recursivas .

    $end            reduce using rule 45 (operaciones_mat -> op_recursivas .)
    RBRACE          reduce using rule 45 (operaciones_mat -> op_recursivas .)
    ECHO            reduce using rule 45 (operaciones_mat -> op_recursivas .)
    PRINT           reduce using rule 45 (operaciones_mat -> op_recursivas .)
    VARIABLE        reduce using rule 45 (operaciones_mat -> op_recursivas .)
    FUNCTION        reduce using rule 45 (operaciones_mat -> op_recursivas .)
    DEFINE          reduce using rule 45 (operaciones_mat -> op_recursivas .)
    READLINE        reduce using rule 45 (operaciones_mat -> op_recursivas .)
    SUMA            reduce using rule 45 (operaciones_mat -> op_recursivas .)
    RESTA           reduce using rule 45 (operaciones_mat -> op_recursivas .)
    MULTIPLICACION  reduce using rule 45 (operaciones_mat -> op_recursivas .)
    DIVISION        reduce using rule 45 (operaciones_mat -> op_recursivas .)
    MODULO          reduce using rule 45 (operaciones_mat -> op_recursivas .)
    SMALLER         reduce using rule 45 (operaciones_mat -> op_recursivas .)
    GREATER         reduce using rule 45 (operaciones_mat -> op_recursivas .)
    IS_SMALLER_OR_EQUAL reduce using rule 45 (operaciones_mat -> op_recursivas .)
    IS_GREATER_OR_EQUAL reduce using rule 45 (operaciones_mat -> op_recursivas .)
    AND             reduce using rule 45 (operaciones_mat -> op_recursivas .)
    OR              reduce using rule 45 (operaciones_mat -> op_recursivas .)
    XOR             reduce using rule 45 (operaciones_mat -> op_recursivas .)
    IS_EQUAL        reduce using rule 45 (operaciones_mat -> op_recursivas .)
    IS_NOT_EQUAL    reduce using rule 45 (operaciones_mat -> op_recursivas .)
    IS_IDENTICAL    reduce using rule 45 (operaciones_mat -> op_recursivas .)
    IS_NOT_IDENTICAL reduce using rule 45 (operaciones_mat -> op_recursivas .)
    BOOLEAN_NOT     reduce using rule 45 (operaciones_mat -> op_recursivas .)
    WHILE           reduce using rule 45 (operaciones_mat -> op_recursivas .)
    FOR             reduce using rule 45 (operaciones_mat -> op_recursivas .)
    FOREACH         reduce using rule 45 (operaciones_mat -> op_recursivas .)
    TRY             reduce using rule 45 (operaciones_mat -> op_recursivas .)
    IF              reduce using rule 45 (operaciones_mat -> op_recursivas .)
    LPAREN          reduce using rule 45 (operaciones_mat -> op_recursivas .)
    STRING          reduce using rule 45 (operaciones_mat -> op_recursivas .)
    NOMBRE          reduce using rule 45 (operaciones_mat -> op_recursivas .)
    ENTERO          reduce using rule 45 (operaciones_mat -> op_recursivas .)
    DECIMAL         reduce using rule 45 (operaciones_mat -> op_recursivas .)


state 51

    (35) condicion_if -> IF . LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    LPAREN          shift and go to state 70


state 52

    (20) valor -> numero .

    LPAREN          reduce using rule 20 (valor -> numero .)
    SUMA            reduce using rule 20 (valor -> numero .)
    RESTA           reduce using rule 20 (valor -> numero .)
    MULTIPLICACION  reduce using rule 20 (valor -> numero .)
    DIVISION        reduce using rule 20 (valor -> numero .)
    MODULO          reduce using rule 20 (valor -> numero .)
    SEMI            reduce using rule 20 (valor -> numero .)
    $end            reduce using rule 20 (valor -> numero .)
    RBRACE          reduce using rule 20 (valor -> numero .)
    ECHO            reduce using rule 20 (valor -> numero .)
    PRINT           reduce using rule 20 (valor -> numero .)
    VARIABLE        reduce using rule 20 (valor -> numero .)
    FUNCTION        reduce using rule 20 (valor -> numero .)
    DEFINE          reduce using rule 20 (valor -> numero .)
    READLINE        reduce using rule 20 (valor -> numero .)
    SMALLER         reduce using rule 20 (valor -> numero .)
    GREATER         reduce using rule 20 (valor -> numero .)
    IS_SMALLER_OR_EQUAL reduce using rule 20 (valor -> numero .)
    IS_GREATER_OR_EQUAL reduce using rule 20 (valor -> numero .)
    AND             reduce using rule 20 (valor -> numero .)
    OR              reduce using rule 20 (valor -> numero .)
    XOR             reduce using rule 20 (valor -> numero .)
    IS_EQUAL        reduce using rule 20 (valor -> numero .)
    IS_NOT_EQUAL    reduce using rule 20 (valor -> numero .)
    IS_IDENTICAL    reduce using rule 20 (valor -> numero .)
    IS_NOT_IDENTICAL reduce using rule 20 (valor -> numero .)
    BOOLEAN_NOT     reduce using rule 20 (valor -> numero .)
    WHILE           reduce using rule 20 (valor -> numero .)
    FOR             reduce using rule 20 (valor -> numero .)
    FOREACH         reduce using rule 20 (valor -> numero .)
    TRY             reduce using rule 20 (valor -> numero .)
    IF              reduce using rule 20 (valor -> numero .)
    STRING          reduce using rule 20 (valor -> numero .)
    NOMBRE          reduce using rule 20 (valor -> numero .)
    ENTERO          reduce using rule 20 (valor -> numero .)
    DECIMAL         reduce using rule 20 (valor -> numero .)
    RPAREN          reduce using rule 20 (valor -> numero .)


state 53

    (25) numero -> DECIMAL .

    LPAREN          reduce using rule 25 (numero -> DECIMAL .)
    SUMA            reduce using rule 25 (numero -> DECIMAL .)
    RESTA           reduce using rule 25 (numero -> DECIMAL .)
    MULTIPLICACION  reduce using rule 25 (numero -> DECIMAL .)
    DIVISION        reduce using rule 25 (numero -> DECIMAL .)
    MODULO          reduce using rule 25 (numero -> DECIMAL .)
    SEMI            reduce using rule 25 (numero -> DECIMAL .)
    $end            reduce using rule 25 (numero -> DECIMAL .)
    RBRACE          reduce using rule 25 (numero -> DECIMAL .)
    ECHO            reduce using rule 25 (numero -> DECIMAL .)
    PRINT           reduce using rule 25 (numero -> DECIMAL .)
    VARIABLE        reduce using rule 25 (numero -> DECIMAL .)
    FUNCTION        reduce using rule 25 (numero -> DECIMAL .)
    DEFINE          reduce using rule 25 (numero -> DECIMAL .)
    READLINE        reduce using rule 25 (numero -> DECIMAL .)
    SMALLER         reduce using rule 25 (numero -> DECIMAL .)
    GREATER         reduce using rule 25 (numero -> DECIMAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 25 (numero -> DECIMAL .)
    IS_GREATER_OR_EQUAL reduce using rule 25 (numero -> DECIMAL .)
    AND             reduce using rule 25 (numero -> DECIMAL .)
    OR              reduce using rule 25 (numero -> DECIMAL .)
    XOR             reduce using rule 25 (numero -> DECIMAL .)
    IS_EQUAL        reduce using rule 25 (numero -> DECIMAL .)
    IS_NOT_EQUAL    reduce using rule 25 (numero -> DECIMAL .)
    IS_IDENTICAL    reduce using rule 25 (numero -> DECIMAL .)
    IS_NOT_IDENTICAL reduce using rule 25 (numero -> DECIMAL .)
    BOOLEAN_NOT     reduce using rule 25 (numero -> DECIMAL .)
    WHILE           reduce using rule 25 (numero -> DECIMAL .)
    FOR             reduce using rule 25 (numero -> DECIMAL .)
    FOREACH         reduce using rule 25 (numero -> DECIMAL .)
    TRY             reduce using rule 25 (numero -> DECIMAL .)
    IF              reduce using rule 25 (numero -> DECIMAL .)
    STRING          reduce using rule 25 (numero -> DECIMAL .)
    NOMBRE          reduce using rule 25 (numero -> DECIMAL .)
    ENTERO          reduce using rule 25 (numero -> DECIMAL .)
    DECIMAL         reduce using rule 25 (numero -> DECIMAL .)
    RPAREN          reduce using rule 25 (numero -> DECIMAL .)


state 54

    (16) imprimir -> ECHO valor . SEMI

    SEMI            shift and go to state 71


state 55

    (19) imprimir -> ECHO NOMBRE . LBRACKET ENTERO RBRACKET SEMI
    (23) valor -> NOMBRE .

    LBRACKET        shift and go to state 72
    SEMI            reduce using rule 23 (valor -> NOMBRE .)


state 56

    (21) valor -> VARIABLE .

    SEMI            reduce using rule 21 (valor -> VARIABLE .)
    SUMA            reduce using rule 21 (valor -> VARIABLE .)
    RESTA           reduce using rule 21 (valor -> VARIABLE .)
    MULTIPLICACION  reduce using rule 21 (valor -> VARIABLE .)
    DIVISION        reduce using rule 21 (valor -> VARIABLE .)
    MODULO          reduce using rule 21 (valor -> VARIABLE .)
    LPAREN          reduce using rule 21 (valor -> VARIABLE .)
    $end            reduce using rule 21 (valor -> VARIABLE .)
    RBRACE          reduce using rule 21 (valor -> VARIABLE .)
    ECHO            reduce using rule 21 (valor -> VARIABLE .)
    PRINT           reduce using rule 21 (valor -> VARIABLE .)
    VARIABLE        reduce using rule 21 (valor -> VARIABLE .)
    FUNCTION        reduce using rule 21 (valor -> VARIABLE .)
    DEFINE          reduce using rule 21 (valor -> VARIABLE .)
    READLINE        reduce using rule 21 (valor -> VARIABLE .)
    SMALLER         reduce using rule 21 (valor -> VARIABLE .)
    GREATER         reduce using rule 21 (valor -> VARIABLE .)
    IS_SMALLER_OR_EQUAL reduce using rule 21 (valor -> VARIABLE .)
    IS_GREATER_OR_EQUAL reduce using rule 21 (valor -> VARIABLE .)
    AND             reduce using rule 21 (valor -> VARIABLE .)
    OR              reduce using rule 21 (valor -> VARIABLE .)
    XOR             reduce using rule 21 (valor -> VARIABLE .)
    IS_EQUAL        reduce using rule 21 (valor -> VARIABLE .)
    IS_NOT_EQUAL    reduce using rule 21 (valor -> VARIABLE .)
    IS_IDENTICAL    reduce using rule 21 (valor -> VARIABLE .)
    IS_NOT_IDENTICAL reduce using rule 21 (valor -> VARIABLE .)
    BOOLEAN_NOT     reduce using rule 21 (valor -> VARIABLE .)
    WHILE           reduce using rule 21 (valor -> VARIABLE .)
    FOR             reduce using rule 21 (valor -> VARIABLE .)
    FOREACH         reduce using rule 21 (valor -> VARIABLE .)
    TRY             reduce using rule 21 (valor -> VARIABLE .)
    IF              reduce using rule 21 (valor -> VARIABLE .)
    STRING          reduce using rule 21 (valor -> VARIABLE .)
    NOMBRE          reduce using rule 21 (valor -> VARIABLE .)
    ENTERO          reduce using rule 21 (valor -> VARIABLE .)
    DECIMAL         reduce using rule 21 (valor -> VARIABLE .)
    RPAREN          reduce using rule 21 (valor -> VARIABLE .)


state 57

    (46) op_basicas -> valor operadores . valor
    (48) op_recursivas -> valor operadores . op_recursivas
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (48) op_recursivas -> . valor operadores op_recursivas
    (49) op_recursivas -> . valor LPAREN valor operadores valor RPAREN operaciones_mat
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 56
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    valor                          shift and go to state 73
    op_recursivas                  shift and go to state 74
    numero                         shift and go to state 52

state 58

    (49) op_recursivas -> valor LPAREN . valor operadores valor RPAREN operaciones_mat
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 56
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    valor                          shift and go to state 75
    numero                         shift and go to state 52

state 59

    (17) imprimir -> PRINT valor . SEMI

    SEMI            shift and go to state 76


state 60

    (18) imprimir -> PRINT LPAREN . valor RPAREN SEMI
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 56
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    valor                          shift and go to state 77
    numero                         shift and go to state 52

state 61

    (47) op_basicas -> LPAREN valor . operadores valor RPAREN
    (26) operadores -> . SUMA
    (27) operadores -> . RESTA
    (28) operadores -> . MULTIPLICACION
    (29) operadores -> . DIVISION
    (30) operadores -> . MODULO

    SUMA            shift and go to state 28
    RESTA           shift and go to state 29
    MULTIPLICACION  shift and go to state 30
    DIVISION        shift and go to state 31
    MODULO          shift and go to state 32

    operadores                     shift and go to state 78

state 62

    (50) asignacion -> VARIABLE EQUALS . valor SEMI
    (51) asignacion_array -> VARIABLE EQUALS . array_def SEMI
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (75) array_def -> . ARRAY LPAREN RPAREN
    (76) array_def -> . ARRAY LPAREN array_elmnt RPAREN
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 56
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ARRAY           shift and go to state 81
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    valor                          shift and go to state 79
    array_def                      shift and go to state 80
    numero                         shift and go to state 52

state 63

    (58) funcion_nparams -> FUNCTION NOMBRE . LPAREN params_list RPAREN stc_bloque_def

    LPAREN          shift and go to state 82


state 64

    (52) constante -> DEFINE LPAREN . STRING COMMA valor RPAREN SEMI
    (53) constante -> DEFINE LPAREN . NOMBRE COMMA ARRAY RPAREN SEMI

    STRING          shift and go to state 83
    NOMBRE          shift and go to state 84


state 65

    (54) lectura -> READLINE LPAREN . STRING RPAREN SEMI
    (55) lectura -> READLINE LPAREN . RPAREN SEMI

    STRING          shift and go to state 85
    RPAREN          shift and go to state 86


state 66

    (63) bwhile -> WHILE LPAREN . condicion RPAREN LBRACE stc_bloque RBRACE
    (61) condicion -> . VARIABLE operador_logico VARIABLE
    (62) condicion -> . valor operador_logico valor
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 88
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    condicion                      shift and go to state 87
    valor                          shift and go to state 89
    numero                         shift and go to state 52

state 67

    (64) bfor -> FOR LPAREN . asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (50) asignacion -> . VARIABLE EQUALS valor SEMI

    VARIABLE        shift and go to state 91

    asignacion                     shift and go to state 90

state 68

    (74) bforeach -> FOREACH LPAREN . VARIABLE AS VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 92


state 69

    (79) btry -> TRY LBRACE . stc_bloque_def RBRACE catches
    (67) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 93

    stc_bloque_def                 shift and go to state 94

state 70

    (35) condicion_if -> IF LPAREN . condicion RPAREN LBRACE cuerpo RBRACE
    (61) condicion -> . VARIABLE operador_logico VARIABLE
    (62) condicion -> . valor operador_logico valor
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 88
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    condicion                      shift and go to state 95
    valor                          shift and go to state 89
    numero                         shift and go to state 52

state 71

    (16) imprimir -> ECHO valor SEMI .

    $end            reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    RBRACE          reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    ECHO            reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    PRINT           reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    VARIABLE        reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    FUNCTION        reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    DEFINE          reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    READLINE        reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    SUMA            reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    RESTA           reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    MULTIPLICACION  reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    DIVISION        reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    MODULO          reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    SMALLER         reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    GREATER         reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    AND             reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    OR              reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    XOR             reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    IS_EQUAL        reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    IS_NOT_EQUAL    reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    IS_IDENTICAL    reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    IS_NOT_IDENTICAL reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    BOOLEAN_NOT     reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    WHILE           reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    FOR             reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    FOREACH         reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    TRY             reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    IF              reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    LPAREN          reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    STRING          reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    NOMBRE          reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    ENTERO          reduce using rule 16 (imprimir -> ECHO valor SEMI .)
    DECIMAL         reduce using rule 16 (imprimir -> ECHO valor SEMI .)


state 72

    (19) imprimir -> ECHO NOMBRE LBRACKET . ENTERO RBRACKET SEMI

    ENTERO          shift and go to state 96


state 73

    (46) op_basicas -> valor operadores valor .
    (48) op_recursivas -> valor . operadores op_recursivas
    (49) op_recursivas -> valor . LPAREN valor operadores valor RPAREN operaciones_mat
    (26) operadores -> . SUMA
    (27) operadores -> . RESTA
    (28) operadores -> . MULTIPLICACION
    (29) operadores -> . DIVISION
    (30) operadores -> . MODULO

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
    $end            reduce using rule 46 (op_basicas -> valor operadores valor .)
    RBRACE          reduce using rule 46 (op_basicas -> valor operadores valor .)
    ECHO            reduce using rule 46 (op_basicas -> valor operadores valor .)
    PRINT           reduce using rule 46 (op_basicas -> valor operadores valor .)
    VARIABLE        reduce using rule 46 (op_basicas -> valor operadores valor .)
    FUNCTION        reduce using rule 46 (op_basicas -> valor operadores valor .)
    DEFINE          reduce using rule 46 (op_basicas -> valor operadores valor .)
    READLINE        reduce using rule 46 (op_basicas -> valor operadores valor .)
    SMALLER         reduce using rule 46 (op_basicas -> valor operadores valor .)
    GREATER         reduce using rule 46 (op_basicas -> valor operadores valor .)
    IS_SMALLER_OR_EQUAL reduce using rule 46 (op_basicas -> valor operadores valor .)
    IS_GREATER_OR_EQUAL reduce using rule 46 (op_basicas -> valor operadores valor .)
    AND             reduce using rule 46 (op_basicas -> valor operadores valor .)
    OR              reduce using rule 46 (op_basicas -> valor operadores valor .)
    XOR             reduce using rule 46 (op_basicas -> valor operadores valor .)
    IS_EQUAL        reduce using rule 46 (op_basicas -> valor operadores valor .)
    IS_NOT_EQUAL    reduce using rule 46 (op_basicas -> valor operadores valor .)
    IS_IDENTICAL    reduce using rule 46 (op_basicas -> valor operadores valor .)
    IS_NOT_IDENTICAL reduce using rule 46 (op_basicas -> valor operadores valor .)
    BOOLEAN_NOT     reduce using rule 46 (op_basicas -> valor operadores valor .)
    WHILE           reduce using rule 46 (op_basicas -> valor operadores valor .)
    FOR             reduce using rule 46 (op_basicas -> valor operadores valor .)
    FOREACH         reduce using rule 46 (op_basicas -> valor operadores valor .)
    TRY             reduce using rule 46 (op_basicas -> valor operadores valor .)
    IF              reduce using rule 46 (op_basicas -> valor operadores valor .)
    STRING          reduce using rule 46 (op_basicas -> valor operadores valor .)
    NOMBRE          reduce using rule 46 (op_basicas -> valor operadores valor .)
    ENTERO          reduce using rule 46 (op_basicas -> valor operadores valor .)
    DECIMAL         reduce using rule 46 (op_basicas -> valor operadores valor .)
    LPAREN          shift and go to state 58
    SUMA            shift and go to state 28
    RESTA           shift and go to state 29
    MULTIPLICACION  shift and go to state 30
    DIVISION        shift and go to state 31
    MODULO          shift and go to state 32

  ! SUMA            [ reduce using rule 46 (op_basicas -> valor operadores valor .) ]
  ! RESTA           [ reduce using rule 46 (op_basicas -> valor operadores valor .) ]
  ! MULTIPLICACION  [ reduce using rule 46 (op_basicas -> valor operadores valor .) ]
  ! DIVISION        [ reduce using rule 46 (op_basicas -> valor operadores valor .) ]
  ! MODULO          [ reduce using rule 46 (op_basicas -> valor operadores valor .) ]
  ! LPAREN          [ reduce using rule 46 (op_basicas -> valor operadores valor .) ]

    operadores                     shift and go to state 97

state 74

    (48) op_recursivas -> valor operadores op_recursivas .

    $end            reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    RBRACE          reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    ECHO            reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    PRINT           reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    VARIABLE        reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    FUNCTION        reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    DEFINE          reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    READLINE        reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    SUMA            reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    RESTA           reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    MULTIPLICACION  reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    DIVISION        reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    MODULO          reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    SMALLER         reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    GREATER         reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    IS_SMALLER_OR_EQUAL reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    IS_GREATER_OR_EQUAL reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    AND             reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    OR              reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    XOR             reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    IS_EQUAL        reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    IS_NOT_EQUAL    reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    IS_IDENTICAL    reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    IS_NOT_IDENTICAL reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    BOOLEAN_NOT     reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    WHILE           reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    FOR             reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    FOREACH         reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    TRY             reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    IF              reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    LPAREN          reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    STRING          reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    NOMBRE          reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    ENTERO          reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)
    DECIMAL         reduce using rule 48 (op_recursivas -> valor operadores op_recursivas .)


state 75

    (49) op_recursivas -> valor LPAREN valor . operadores valor RPAREN operaciones_mat
    (26) operadores -> . SUMA
    (27) operadores -> . RESTA
    (28) operadores -> . MULTIPLICACION
    (29) operadores -> . DIVISION
    (30) operadores -> . MODULO

    SUMA            shift and go to state 28
    RESTA           shift and go to state 29
    MULTIPLICACION  shift and go to state 30
    DIVISION        shift and go to state 31
    MODULO          shift and go to state 32

    operadores                     shift and go to state 98

state 76

    (17) imprimir -> PRINT valor SEMI .

    $end            reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    RBRACE          reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    ECHO            reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    PRINT           reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    VARIABLE        reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    FUNCTION        reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    DEFINE          reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    READLINE        reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    SUMA            reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    RESTA           reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    MULTIPLICACION  reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    DIVISION        reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    MODULO          reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    SMALLER         reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    GREATER         reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    AND             reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    OR              reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    XOR             reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    IS_EQUAL        reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    IS_NOT_EQUAL    reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    IS_IDENTICAL    reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    IS_NOT_IDENTICAL reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    BOOLEAN_NOT     reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    WHILE           reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    FOR             reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    FOREACH         reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    TRY             reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    IF              reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    LPAREN          reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    STRING          reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    NOMBRE          reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    ENTERO          reduce using rule 17 (imprimir -> PRINT valor SEMI .)
    DECIMAL         reduce using rule 17 (imprimir -> PRINT valor SEMI .)


state 77

    (18) imprimir -> PRINT LPAREN valor . RPAREN SEMI

    RPAREN          shift and go to state 99


state 78

    (47) op_basicas -> LPAREN valor operadores . valor RPAREN
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 56
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    valor                          shift and go to state 100
    numero                         shift and go to state 52

state 79

    (50) asignacion -> VARIABLE EQUALS valor . SEMI

    SEMI            shift and go to state 101


state 80

    (51) asignacion_array -> VARIABLE EQUALS array_def . SEMI

    SEMI            shift and go to state 102


state 81

    (75) array_def -> ARRAY . LPAREN RPAREN
    (76) array_def -> ARRAY . LPAREN array_elmnt RPAREN

    LPAREN          shift and go to state 103


state 82

    (58) funcion_nparams -> FUNCTION NOMBRE LPAREN . params_list RPAREN stc_bloque_def
    (59) params_list -> . params_list COMMA param
    (60) params_list -> . param
    (56) param -> . VARIABLE
    (57) param -> . asignacion
    (50) asignacion -> . VARIABLE EQUALS valor SEMI

    VARIABLE        shift and go to state 106

    params_list                    shift and go to state 104
    param                          shift and go to state 105
    asignacion                     shift and go to state 107

state 83

    (52) constante -> DEFINE LPAREN STRING . COMMA valor RPAREN SEMI

    COMMA           shift and go to state 108


state 84

    (53) constante -> DEFINE LPAREN NOMBRE . COMMA ARRAY RPAREN SEMI

    COMMA           shift and go to state 109


state 85

    (54) lectura -> READLINE LPAREN STRING . RPAREN SEMI

    RPAREN          shift and go to state 110


state 86

    (55) lectura -> READLINE LPAREN RPAREN . SEMI

    SEMI            shift and go to state 111


state 87

    (63) bwhile -> WHILE LPAREN condicion . RPAREN LBRACE stc_bloque RBRACE

    RPAREN          shift and go to state 112


state 88

    (61) condicion -> VARIABLE . operador_logico VARIABLE
    (21) valor -> VARIABLE .
    (31) operador_logico -> . SMALLER
    (32) operador_logico -> . GREATER
    (33) operador_logico -> . IS_SMALLER_OR_EQUAL
    (34) operador_logico -> . IS_GREATER_OR_EQUAL

  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for IS_SMALLER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for IS_GREATER_OR_EQUAL resolved as shift
    SMALLER         shift and go to state 33
    GREATER         shift and go to state 34
    IS_SMALLER_OR_EQUAL shift and go to state 35
    IS_GREATER_OR_EQUAL shift and go to state 36

  ! SMALLER         [ reduce using rule 21 (valor -> VARIABLE .) ]
  ! GREATER         [ reduce using rule 21 (valor -> VARIABLE .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 21 (valor -> VARIABLE .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 21 (valor -> VARIABLE .) ]

    operador_logico                shift and go to state 113

state 89

    (62) condicion -> valor . operador_logico valor
    (31) operador_logico -> . SMALLER
    (32) operador_logico -> . GREATER
    (33) operador_logico -> . IS_SMALLER_OR_EQUAL
    (34) operador_logico -> . IS_GREATER_OR_EQUAL

    SMALLER         shift and go to state 33
    GREATER         shift and go to state 34
    IS_SMALLER_OR_EQUAL shift and go to state 35
    IS_GREATER_OR_EQUAL shift and go to state 36

    operador_logico                shift and go to state 114

state 90

    (64) bfor -> FOR LPAREN asignacion . SEMI condicion SEMI for_incr RPAREN stc_bloque_def

    SEMI            shift and go to state 115


state 91

    (50) asignacion -> VARIABLE . EQUALS valor SEMI

    EQUALS          shift and go to state 116


state 92

    (74) bforeach -> FOREACH LPAREN VARIABLE . AS VARIABLE RPAREN stc_bloque_def

    AS              shift and go to state 117


state 93

    (67) stc_bloque_def -> LBRACE . stc_bloque RBRACE
    (65) stc_bloque -> . stc_bloque cuerpo
    (66) stc_bloque -> . empty
    (82) empty -> .

    RBRACE          reduce using rule 82 (empty -> .)
    ECHO            reduce using rule 82 (empty -> .)
    PRINT           reduce using rule 82 (empty -> .)
    VARIABLE        reduce using rule 82 (empty -> .)
    FUNCTION        reduce using rule 82 (empty -> .)
    DEFINE          reduce using rule 82 (empty -> .)
    READLINE        reduce using rule 82 (empty -> .)
    SUMA            reduce using rule 82 (empty -> .)
    RESTA           reduce using rule 82 (empty -> .)
    MULTIPLICACION  reduce using rule 82 (empty -> .)
    DIVISION        reduce using rule 82 (empty -> .)
    MODULO          reduce using rule 82 (empty -> .)
    SMALLER         reduce using rule 82 (empty -> .)
    GREATER         reduce using rule 82 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 82 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 82 (empty -> .)
    AND             reduce using rule 82 (empty -> .)
    OR              reduce using rule 82 (empty -> .)
    XOR             reduce using rule 82 (empty -> .)
    IS_EQUAL        reduce using rule 82 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 82 (empty -> .)
    IS_IDENTICAL    reduce using rule 82 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 82 (empty -> .)
    BOOLEAN_NOT     reduce using rule 82 (empty -> .)
    WHILE           reduce using rule 82 (empty -> .)
    FOR             reduce using rule 82 (empty -> .)
    FOREACH         reduce using rule 82 (empty -> .)
    TRY             reduce using rule 82 (empty -> .)
    IF              reduce using rule 82 (empty -> .)
    LPAREN          reduce using rule 82 (empty -> .)
    STRING          reduce using rule 82 (empty -> .)
    NOMBRE          reduce using rule 82 (empty -> .)
    ENTERO          reduce using rule 82 (empty -> .)
    DECIMAL         reduce using rule 82 (empty -> .)

    stc_bloque                     shift and go to state 118
    empty                          shift and go to state 119

state 94

    (79) btry -> TRY LBRACE stc_bloque_def . RBRACE catches

    RBRACE          shift and go to state 120


state 95

    (35) condicion_if -> IF LPAREN condicion . RPAREN LBRACE cuerpo RBRACE

    RPAREN          shift and go to state 121


state 96

    (19) imprimir -> ECHO NOMBRE LBRACKET ENTERO . RBRACKET SEMI

    RBRACKET        shift and go to state 122


state 97

    (48) op_recursivas -> valor operadores . op_recursivas
    (48) op_recursivas -> . valor operadores op_recursivas
    (49) op_recursivas -> . valor LPAREN valor operadores valor RPAREN operaciones_mat
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 56
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    valor                          shift and go to state 123
    op_recursivas                  shift and go to state 74
    numero                         shift and go to state 52

state 98

    (49) op_recursivas -> valor LPAREN valor operadores . valor RPAREN operaciones_mat
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 56
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    valor                          shift and go to state 124
    numero                         shift and go to state 52

state 99

    (18) imprimir -> PRINT LPAREN valor RPAREN . SEMI

    SEMI            shift and go to state 125


state 100

    (47) op_basicas -> LPAREN valor operadores valor . RPAREN

    RPAREN          shift and go to state 126


state 101

    (50) asignacion -> VARIABLE EQUALS valor SEMI .

    $end            reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    SEMI            reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    RPAREN          reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    COMMA           reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    RBRACE          reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    ECHO            reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    PRINT           reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    VARIABLE        reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    FUNCTION        reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    DEFINE          reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    READLINE        reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    SUMA            reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    RESTA           reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    MULTIPLICACION  reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    DIVISION        reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    MODULO          reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    SMALLER         reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    GREATER         reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    AND             reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    OR              reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    XOR             reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_EQUAL        reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_NOT_EQUAL    reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_IDENTICAL    reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_NOT_IDENTICAL reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    BOOLEAN_NOT     reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    WHILE           reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    FOR             reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    FOREACH         reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    TRY             reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IF              reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    LPAREN          reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    STRING          reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    NOMBRE          reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    ENTERO          reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)
    DECIMAL         reduce using rule 50 (asignacion -> VARIABLE EQUALS valor SEMI .)


state 102

    (51) asignacion_array -> VARIABLE EQUALS array_def SEMI .

    $end            reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    RBRACE          reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    ECHO            reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    PRINT           reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    VARIABLE        reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    FUNCTION        reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    DEFINE          reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    READLINE        reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    SUMA            reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    RESTA           reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    MULTIPLICACION  reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    DIVISION        reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    MODULO          reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    SMALLER         reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    GREATER         reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    AND             reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    OR              reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    XOR             reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_EQUAL        reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_NOT_EQUAL    reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_IDENTICAL    reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_NOT_IDENTICAL reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    BOOLEAN_NOT     reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    WHILE           reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    FOR             reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    FOREACH         reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    TRY             reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IF              reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    LPAREN          reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    STRING          reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    NOMBRE          reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    ENTERO          reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    DECIMAL         reduce using rule 51 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)


state 103

    (75) array_def -> ARRAY LPAREN . RPAREN
    (76) array_def -> ARRAY LPAREN . array_elmnt RPAREN
    (77) array_elmnt -> . valor
    (78) array_elmnt -> . empty
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (82) empty -> .
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 127
    VARIABLE        shift and go to state 56
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

  ! RPAREN          [ reduce using rule 82 (empty -> .) ]

    array_elmnt                    shift and go to state 128
    valor                          shift and go to state 129
    empty                          shift and go to state 130
    numero                         shift and go to state 52

state 104

    (58) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list . RPAREN stc_bloque_def
    (59) params_list -> params_list . COMMA param

    RPAREN          shift and go to state 131
    COMMA           shift and go to state 132


state 105

    (60) params_list -> param .

    RPAREN          reduce using rule 60 (params_list -> param .)
    COMMA           reduce using rule 60 (params_list -> param .)


state 106

    (56) param -> VARIABLE .
    (50) asignacion -> VARIABLE . EQUALS valor SEMI

    RPAREN          reduce using rule 56 (param -> VARIABLE .)
    COMMA           reduce using rule 56 (param -> VARIABLE .)
    EQUALS          shift and go to state 116


state 107

    (57) param -> asignacion .

    RPAREN          reduce using rule 57 (param -> asignacion .)
    COMMA           reduce using rule 57 (param -> asignacion .)


state 108

    (52) constante -> DEFINE LPAREN STRING COMMA . valor RPAREN SEMI
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 56
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    valor                          shift and go to state 133
    numero                         shift and go to state 52

state 109

    (53) constante -> DEFINE LPAREN NOMBRE COMMA . ARRAY RPAREN SEMI

    ARRAY           shift and go to state 134


state 110

    (54) lectura -> READLINE LPAREN STRING RPAREN . SEMI

    SEMI            shift and go to state 135


state 111

    (55) lectura -> READLINE LPAREN RPAREN SEMI .

    $end            reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    ECHO            reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    FUNCTION        reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    DEFINE          reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    READLINE        reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    SUMA            reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    RESTA           reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    DIVISION        reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    MODULO          reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    SMALLER         reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    GREATER         reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    AND             reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    OR              reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    XOR             reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_EQUAL        reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    FOR             reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    FOREACH         reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    TRY             reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IF              reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    LPAREN          reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    STRING          reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    NOMBRE          reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    ENTERO          reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)
    DECIMAL         reduce using rule 55 (lectura -> READLINE LPAREN RPAREN SEMI .)


state 112

    (63) bwhile -> WHILE LPAREN condicion RPAREN . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 136


state 113

    (61) condicion -> VARIABLE operador_logico . VARIABLE

    VARIABLE        shift and go to state 137


state 114

    (62) condicion -> valor operador_logico . valor
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 56
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    valor                          shift and go to state 138
    numero                         shift and go to state 52

state 115

    (64) bfor -> FOR LPAREN asignacion SEMI . condicion SEMI for_incr RPAREN stc_bloque_def
    (61) condicion -> . VARIABLE operador_logico VARIABLE
    (62) condicion -> . valor operador_logico valor
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 88
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    condicion                      shift and go to state 139
    valor                          shift and go to state 89
    numero                         shift and go to state 52

state 116

    (50) asignacion -> VARIABLE EQUALS . valor SEMI
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    VARIABLE        shift and go to state 56
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    valor                          shift and go to state 79
    numero                         shift and go to state 52

state 117

    (74) bforeach -> FOREACH LPAREN VARIABLE AS . VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 140


state 118

    (67) stc_bloque_def -> LBRACE stc_bloque . RBRACE
    (65) stc_bloque -> stc_bloque . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funcion_nparams
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bfor
    (12) cuerpo -> . bforeach
    (13) cuerpo -> . btry
    (14) cuerpo -> . operaciones_mat
    (15) cuerpo -> . condicion_if
    (16) imprimir -> . ECHO valor SEMI
    (17) imprimir -> . PRINT valor SEMI
    (18) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (19) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (50) asignacion -> . VARIABLE EQUALS valor SEMI
    (51) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (58) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (52) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (53) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (54) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (55) lectura -> . READLINE LPAREN RPAREN SEMI
    (26) operadores -> . SUMA
    (27) operadores -> . RESTA
    (28) operadores -> . MULTIPLICACION
    (29) operadores -> . DIVISION
    (30) operadores -> . MODULO
    (31) operador_logico -> . SMALLER
    (32) operador_logico -> . GREATER
    (33) operador_logico -> . IS_SMALLER_OR_EQUAL
    (34) operador_logico -> . IS_GREATER_OR_EQUAL
    (36) condicion_booleana -> . AND
    (37) condicion_booleana -> . OR
    (38) condicion_booleana -> . XOR
    (39) condicion_booleana -> . IS_EQUAL
    (40) condicion_booleana -> . IS_NOT_EQUAL
    (41) condicion_booleana -> . IS_IDENTICAL
    (42) condicion_booleana -> . IS_NOT_IDENTICAL
    (43) condicion_booleana -> . BOOLEAN_NOT
    (63) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (64) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (74) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (79) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (44) operaciones_mat -> . op_basicas
    (45) operaciones_mat -> . op_recursivas
    (35) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (46) op_basicas -> . valor operadores valor
    (47) op_basicas -> . LPAREN valor operadores valor RPAREN
    (48) op_recursivas -> . valor operadores op_recursivas
    (49) op_recursivas -> . valor LPAREN valor operadores valor RPAREN operaciones_mat
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    RBRACE          shift and go to state 141
    ECHO            shift and go to state 17
    PRINT           shift and go to state 19
    VARIABLE        shift and go to state 23
    FUNCTION        shift and go to state 24
    DEFINE          shift and go to state 25
    READLINE        shift and go to state 27
    SUMA            shift and go to state 28
    RESTA           shift and go to state 29
    MULTIPLICACION  shift and go to state 30
    DIVISION        shift and go to state 31
    MODULO          shift and go to state 32
    SMALLER         shift and go to state 33
    GREATER         shift and go to state 34
    IS_SMALLER_OR_EQUAL shift and go to state 35
    IS_GREATER_OR_EQUAL shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    IS_EQUAL        shift and go to state 40
    IS_NOT_EQUAL    shift and go to state 41
    IS_IDENTICAL    shift and go to state 42
    IS_NOT_IDENTICAL shift and go to state 43
    BOOLEAN_NOT     shift and go to state 44
    WHILE           shift and go to state 45
    FOR             shift and go to state 46
    FOREACH         shift and go to state 47
    TRY             shift and go to state 48
    IF              shift and go to state 51
    LPAREN          shift and go to state 20
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    cuerpo                         shift and go to state 142
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funcion_nparams                shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bfor                           shift and go to state 12
    bforeach                       shift and go to state 13
    btry                           shift and go to state 14
    operaciones_mat                shift and go to state 15
    condicion_if                   shift and go to state 16
    valor                          shift and go to state 18
    op_basicas                     shift and go to state 49
    op_recursivas                  shift and go to state 50
    numero                         shift and go to state 52

state 119

    (66) stc_bloque -> empty .

    RBRACE          reduce using rule 66 (stc_bloque -> empty .)
    ECHO            reduce using rule 66 (stc_bloque -> empty .)
    PRINT           reduce using rule 66 (stc_bloque -> empty .)
    VARIABLE        reduce using rule 66 (stc_bloque -> empty .)
    FUNCTION        reduce using rule 66 (stc_bloque -> empty .)
    DEFINE          reduce using rule 66 (stc_bloque -> empty .)
    READLINE        reduce using rule 66 (stc_bloque -> empty .)
    SUMA            reduce using rule 66 (stc_bloque -> empty .)
    RESTA           reduce using rule 66 (stc_bloque -> empty .)
    MULTIPLICACION  reduce using rule 66 (stc_bloque -> empty .)
    DIVISION        reduce using rule 66 (stc_bloque -> empty .)
    MODULO          reduce using rule 66 (stc_bloque -> empty .)
    SMALLER         reduce using rule 66 (stc_bloque -> empty .)
    GREATER         reduce using rule 66 (stc_bloque -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 66 (stc_bloque -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 66 (stc_bloque -> empty .)
    AND             reduce using rule 66 (stc_bloque -> empty .)
    OR              reduce using rule 66 (stc_bloque -> empty .)
    XOR             reduce using rule 66 (stc_bloque -> empty .)
    IS_EQUAL        reduce using rule 66 (stc_bloque -> empty .)
    IS_NOT_EQUAL    reduce using rule 66 (stc_bloque -> empty .)
    IS_IDENTICAL    reduce using rule 66 (stc_bloque -> empty .)
    IS_NOT_IDENTICAL reduce using rule 66 (stc_bloque -> empty .)
    BOOLEAN_NOT     reduce using rule 66 (stc_bloque -> empty .)
    WHILE           reduce using rule 66 (stc_bloque -> empty .)
    FOR             reduce using rule 66 (stc_bloque -> empty .)
    FOREACH         reduce using rule 66 (stc_bloque -> empty .)
    TRY             reduce using rule 66 (stc_bloque -> empty .)
    IF              reduce using rule 66 (stc_bloque -> empty .)
    LPAREN          reduce using rule 66 (stc_bloque -> empty .)
    STRING          reduce using rule 66 (stc_bloque -> empty .)
    NOMBRE          reduce using rule 66 (stc_bloque -> empty .)
    ENTERO          reduce using rule 66 (stc_bloque -> empty .)
    DECIMAL         reduce using rule 66 (stc_bloque -> empty .)


state 120

    (79) btry -> TRY LBRACE stc_bloque_def RBRACE . catches
    (80) catches -> . catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def
    (81) catches -> . empty
    (82) empty -> .

    CATCH           reduce using rule 82 (empty -> .)
    $end            reduce using rule 82 (empty -> .)
    RBRACE          reduce using rule 82 (empty -> .)
    ECHO            reduce using rule 82 (empty -> .)
    PRINT           reduce using rule 82 (empty -> .)
    VARIABLE        reduce using rule 82 (empty -> .)
    FUNCTION        reduce using rule 82 (empty -> .)
    DEFINE          reduce using rule 82 (empty -> .)
    READLINE        reduce using rule 82 (empty -> .)
    SUMA            reduce using rule 82 (empty -> .)
    RESTA           reduce using rule 82 (empty -> .)
    MULTIPLICACION  reduce using rule 82 (empty -> .)
    DIVISION        reduce using rule 82 (empty -> .)
    MODULO          reduce using rule 82 (empty -> .)
    SMALLER         reduce using rule 82 (empty -> .)
    GREATER         reduce using rule 82 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 82 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 82 (empty -> .)
    AND             reduce using rule 82 (empty -> .)
    OR              reduce using rule 82 (empty -> .)
    XOR             reduce using rule 82 (empty -> .)
    IS_EQUAL        reduce using rule 82 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 82 (empty -> .)
    IS_IDENTICAL    reduce using rule 82 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 82 (empty -> .)
    BOOLEAN_NOT     reduce using rule 82 (empty -> .)
    WHILE           reduce using rule 82 (empty -> .)
    FOR             reduce using rule 82 (empty -> .)
    FOREACH         reduce using rule 82 (empty -> .)
    TRY             reduce using rule 82 (empty -> .)
    IF              reduce using rule 82 (empty -> .)
    LPAREN          reduce using rule 82 (empty -> .)
    STRING          reduce using rule 82 (empty -> .)
    NOMBRE          reduce using rule 82 (empty -> .)
    ENTERO          reduce using rule 82 (empty -> .)
    DECIMAL         reduce using rule 82 (empty -> .)

    catches                        shift and go to state 143
    empty                          shift and go to state 144

state 121

    (35) condicion_if -> IF LPAREN condicion RPAREN . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 145


state 122

    (19) imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET . SEMI

    SEMI            shift and go to state 146


state 123

    (48) op_recursivas -> valor . operadores op_recursivas
    (49) op_recursivas -> valor . LPAREN valor operadores valor RPAREN operaciones_mat
    (26) operadores -> . SUMA
    (27) operadores -> . RESTA
    (28) operadores -> . MULTIPLICACION
    (29) operadores -> . DIVISION
    (30) operadores -> . MODULO

    LPAREN          shift and go to state 58
    SUMA            shift and go to state 28
    RESTA           shift and go to state 29
    MULTIPLICACION  shift and go to state 30
    DIVISION        shift and go to state 31
    MODULO          shift and go to state 32

    operadores                     shift and go to state 97

state 124

    (49) op_recursivas -> valor LPAREN valor operadores valor . RPAREN operaciones_mat

    RPAREN          shift and go to state 147


state 125

    (18) imprimir -> PRINT LPAREN valor RPAREN SEMI .

    $end            reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    RBRACE          reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    ECHO            reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    PRINT           reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    VARIABLE        reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    FUNCTION        reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    DEFINE          reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    READLINE        reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    SUMA            reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    RESTA           reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    DIVISION        reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    MODULO          reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    SMALLER         reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    GREATER         reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    AND             reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    OR              reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    XOR             reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_EQUAL        reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    WHILE           reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    FOR             reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    FOREACH         reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    TRY             reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IF              reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    LPAREN          reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    STRING          reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    NOMBRE          reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    ENTERO          reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    DECIMAL         reduce using rule 18 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)


state 126

    (47) op_basicas -> LPAREN valor operadores valor RPAREN .

    $end            reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    RBRACE          reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    ECHO            reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    PRINT           reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    VARIABLE        reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    FUNCTION        reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    DEFINE          reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    READLINE        reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    SUMA            reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    RESTA           reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    MULTIPLICACION  reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    DIVISION        reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    MODULO          reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    SMALLER         reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    GREATER         reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    AND             reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    OR              reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    XOR             reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    IS_EQUAL        reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    IS_NOT_EQUAL    reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    IS_IDENTICAL    reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    BOOLEAN_NOT     reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    WHILE           reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    FOR             reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    FOREACH         reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    TRY             reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    IF              reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    LPAREN          reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    STRING          reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    NOMBRE          reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    ENTERO          reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)
    DECIMAL         reduce using rule 47 (op_basicas -> LPAREN valor operadores valor RPAREN .)


state 127

    (75) array_def -> ARRAY LPAREN RPAREN .

    SEMI            reduce using rule 75 (array_def -> ARRAY LPAREN RPAREN .)


state 128

    (76) array_def -> ARRAY LPAREN array_elmnt . RPAREN

    RPAREN          shift and go to state 148


state 129

    (77) array_elmnt -> valor .

    RPAREN          reduce using rule 77 (array_elmnt -> valor .)


state 130

    (78) array_elmnt -> empty .

    RPAREN          reduce using rule 78 (array_elmnt -> empty .)


state 131

    (58) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN . stc_bloque_def
    (67) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 93

    stc_bloque_def                 shift and go to state 149

state 132

    (59) params_list -> params_list COMMA . param
    (56) param -> . VARIABLE
    (57) param -> . asignacion
    (50) asignacion -> . VARIABLE EQUALS valor SEMI

    VARIABLE        shift and go to state 106

    param                          shift and go to state 150
    asignacion                     shift and go to state 107

state 133

    (52) constante -> DEFINE LPAREN STRING COMMA valor . RPAREN SEMI

    RPAREN          shift and go to state 151


state 134

    (53) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY . RPAREN SEMI

    RPAREN          shift and go to state 152


state 135

    (54) lectura -> READLINE LPAREN STRING RPAREN SEMI .

    $end            reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    RBRACE          reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    ECHO            reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    PRINT           reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    VARIABLE        reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    FUNCTION        reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    DEFINE          reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    READLINE        reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    SUMA            reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    RESTA           reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    DIVISION        reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    MODULO          reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    SMALLER         reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    GREATER         reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    AND             reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    OR              reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    XOR             reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_EQUAL        reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    WHILE           reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    FOR             reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    FOREACH         reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    TRY             reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IF              reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    LPAREN          reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    STRING          reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    NOMBRE          reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    ENTERO          reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    DECIMAL         reduce using rule 54 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)


state 136

    (63) bwhile -> WHILE LPAREN condicion RPAREN LBRACE . stc_bloque RBRACE
    (65) stc_bloque -> . stc_bloque cuerpo
    (66) stc_bloque -> . empty
    (82) empty -> .

    RBRACE          reduce using rule 82 (empty -> .)
    ECHO            reduce using rule 82 (empty -> .)
    PRINT           reduce using rule 82 (empty -> .)
    VARIABLE        reduce using rule 82 (empty -> .)
    FUNCTION        reduce using rule 82 (empty -> .)
    DEFINE          reduce using rule 82 (empty -> .)
    READLINE        reduce using rule 82 (empty -> .)
    SUMA            reduce using rule 82 (empty -> .)
    RESTA           reduce using rule 82 (empty -> .)
    MULTIPLICACION  reduce using rule 82 (empty -> .)
    DIVISION        reduce using rule 82 (empty -> .)
    MODULO          reduce using rule 82 (empty -> .)
    SMALLER         reduce using rule 82 (empty -> .)
    GREATER         reduce using rule 82 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 82 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 82 (empty -> .)
    AND             reduce using rule 82 (empty -> .)
    OR              reduce using rule 82 (empty -> .)
    XOR             reduce using rule 82 (empty -> .)
    IS_EQUAL        reduce using rule 82 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 82 (empty -> .)
    IS_IDENTICAL    reduce using rule 82 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 82 (empty -> .)
    BOOLEAN_NOT     reduce using rule 82 (empty -> .)
    WHILE           reduce using rule 82 (empty -> .)
    FOR             reduce using rule 82 (empty -> .)
    FOREACH         reduce using rule 82 (empty -> .)
    TRY             reduce using rule 82 (empty -> .)
    IF              reduce using rule 82 (empty -> .)
    LPAREN          reduce using rule 82 (empty -> .)
    STRING          reduce using rule 82 (empty -> .)
    NOMBRE          reduce using rule 82 (empty -> .)
    ENTERO          reduce using rule 82 (empty -> .)
    DECIMAL         reduce using rule 82 (empty -> .)

    stc_bloque                     shift and go to state 153
    empty                          shift and go to state 119

state 137

    (61) condicion -> VARIABLE operador_logico VARIABLE .

    RPAREN          reduce using rule 61 (condicion -> VARIABLE operador_logico VARIABLE .)
    SEMI            reduce using rule 61 (condicion -> VARIABLE operador_logico VARIABLE .)


state 138

    (62) condicion -> valor operador_logico valor .

    RPAREN          reduce using rule 62 (condicion -> valor operador_logico valor .)
    SEMI            reduce using rule 62 (condicion -> valor operador_logico valor .)


state 139

    (64) bfor -> FOR LPAREN asignacion SEMI condicion . SEMI for_incr RPAREN stc_bloque_def

    SEMI            shift and go to state 154


state 140

    (74) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE . RPAREN stc_bloque_def

    RPAREN          shift and go to state 155


state 141

    (67) stc_bloque_def -> LBRACE stc_bloque RBRACE .

    RBRACE          reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    $end            reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    ECHO            reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    PRINT           reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    VARIABLE        reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    FUNCTION        reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    DEFINE          reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    READLINE        reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    SUMA            reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    RESTA           reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    MULTIPLICACION  reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    DIVISION        reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    MODULO          reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    SMALLER         reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    GREATER         reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    AND             reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    OR              reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    XOR             reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_EQUAL        reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_NOT_EQUAL    reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_IDENTICAL    reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    BOOLEAN_NOT     reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    WHILE           reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    FOR             reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    FOREACH         reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    TRY             reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IF              reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    LPAREN          reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    STRING          reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    NOMBRE          reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    ENTERO          reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    DECIMAL         reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    CATCH           reduce using rule 67 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)


state 142

    (65) stc_bloque -> stc_bloque cuerpo .

    RBRACE          reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    ECHO            reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    PRINT           reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    VARIABLE        reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    FUNCTION        reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    DEFINE          reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    READLINE        reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    SUMA            reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    RESTA           reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    MULTIPLICACION  reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    DIVISION        reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    MODULO          reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    SMALLER         reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    GREATER         reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    IS_SMALLER_OR_EQUAL reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    IS_GREATER_OR_EQUAL reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    AND             reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    OR              reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    XOR             reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    IS_EQUAL        reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    IS_NOT_EQUAL    reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    IS_IDENTICAL    reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    IS_NOT_IDENTICAL reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    BOOLEAN_NOT     reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    WHILE           reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    FOR             reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    FOREACH         reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    TRY             reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    IF              reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    LPAREN          reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    STRING          reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    NOMBRE          reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    ENTERO          reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)
    DECIMAL         reduce using rule 65 (stc_bloque -> stc_bloque cuerpo .)


state 143

    (79) btry -> TRY LBRACE stc_bloque_def RBRACE catches .
    (80) catches -> catches . CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def

    $end            reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    RBRACE          reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    ECHO            reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    PRINT           reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    VARIABLE        reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    FUNCTION        reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    DEFINE          reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    READLINE        reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    SUMA            reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    RESTA           reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    MULTIPLICACION  reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    DIVISION        reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    MODULO          reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    SMALLER         reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    GREATER         reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_SMALLER_OR_EQUAL reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_GREATER_OR_EQUAL reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    AND             reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    OR              reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    XOR             reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_EQUAL        reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_NOT_EQUAL    reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_IDENTICAL    reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_NOT_IDENTICAL reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    BOOLEAN_NOT     reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    WHILE           reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    FOR             reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    FOREACH         reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    TRY             reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IF              reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    LPAREN          reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    STRING          reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    NOMBRE          reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    ENTERO          reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    DECIMAL         reduce using rule 79 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    CATCH           shift and go to state 156


state 144

    (81) catches -> empty .

    CATCH           reduce using rule 81 (catches -> empty .)
    $end            reduce using rule 81 (catches -> empty .)
    RBRACE          reduce using rule 81 (catches -> empty .)
    ECHO            reduce using rule 81 (catches -> empty .)
    PRINT           reduce using rule 81 (catches -> empty .)
    VARIABLE        reduce using rule 81 (catches -> empty .)
    FUNCTION        reduce using rule 81 (catches -> empty .)
    DEFINE          reduce using rule 81 (catches -> empty .)
    READLINE        reduce using rule 81 (catches -> empty .)
    SUMA            reduce using rule 81 (catches -> empty .)
    RESTA           reduce using rule 81 (catches -> empty .)
    MULTIPLICACION  reduce using rule 81 (catches -> empty .)
    DIVISION        reduce using rule 81 (catches -> empty .)
    MODULO          reduce using rule 81 (catches -> empty .)
    SMALLER         reduce using rule 81 (catches -> empty .)
    GREATER         reduce using rule 81 (catches -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 81 (catches -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 81 (catches -> empty .)
    AND             reduce using rule 81 (catches -> empty .)
    OR              reduce using rule 81 (catches -> empty .)
    XOR             reduce using rule 81 (catches -> empty .)
    IS_EQUAL        reduce using rule 81 (catches -> empty .)
    IS_NOT_EQUAL    reduce using rule 81 (catches -> empty .)
    IS_IDENTICAL    reduce using rule 81 (catches -> empty .)
    IS_NOT_IDENTICAL reduce using rule 81 (catches -> empty .)
    BOOLEAN_NOT     reduce using rule 81 (catches -> empty .)
    WHILE           reduce using rule 81 (catches -> empty .)
    FOR             reduce using rule 81 (catches -> empty .)
    FOREACH         reduce using rule 81 (catches -> empty .)
    TRY             reduce using rule 81 (catches -> empty .)
    IF              reduce using rule 81 (catches -> empty .)
    LPAREN          reduce using rule 81 (catches -> empty .)
    STRING          reduce using rule 81 (catches -> empty .)
    NOMBRE          reduce using rule 81 (catches -> empty .)
    ENTERO          reduce using rule 81 (catches -> empty .)
    DECIMAL         reduce using rule 81 (catches -> empty .)


state 145

    (35) condicion_if -> IF LPAREN condicion RPAREN LBRACE . cuerpo RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funcion_nparams
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bfor
    (12) cuerpo -> . bforeach
    (13) cuerpo -> . btry
    (14) cuerpo -> . operaciones_mat
    (15) cuerpo -> . condicion_if
    (16) imprimir -> . ECHO valor SEMI
    (17) imprimir -> . PRINT valor SEMI
    (18) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (19) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (50) asignacion -> . VARIABLE EQUALS valor SEMI
    (51) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (58) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (52) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (53) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (54) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (55) lectura -> . READLINE LPAREN RPAREN SEMI
    (26) operadores -> . SUMA
    (27) operadores -> . RESTA
    (28) operadores -> . MULTIPLICACION
    (29) operadores -> . DIVISION
    (30) operadores -> . MODULO
    (31) operador_logico -> . SMALLER
    (32) operador_logico -> . GREATER
    (33) operador_logico -> . IS_SMALLER_OR_EQUAL
    (34) operador_logico -> . IS_GREATER_OR_EQUAL
    (36) condicion_booleana -> . AND
    (37) condicion_booleana -> . OR
    (38) condicion_booleana -> . XOR
    (39) condicion_booleana -> . IS_EQUAL
    (40) condicion_booleana -> . IS_NOT_EQUAL
    (41) condicion_booleana -> . IS_IDENTICAL
    (42) condicion_booleana -> . IS_NOT_IDENTICAL
    (43) condicion_booleana -> . BOOLEAN_NOT
    (63) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (64) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (74) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (79) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (44) operaciones_mat -> . op_basicas
    (45) operaciones_mat -> . op_recursivas
    (35) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (46) op_basicas -> . valor operadores valor
    (47) op_basicas -> . LPAREN valor operadores valor RPAREN
    (48) op_recursivas -> . valor operadores op_recursivas
    (49) op_recursivas -> . valor LPAREN valor operadores valor RPAREN operaciones_mat
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    ECHO            shift and go to state 17
    PRINT           shift and go to state 19
    VARIABLE        shift and go to state 23
    FUNCTION        shift and go to state 24
    DEFINE          shift and go to state 25
    READLINE        shift and go to state 27
    SUMA            shift and go to state 28
    RESTA           shift and go to state 29
    MULTIPLICACION  shift and go to state 30
    DIVISION        shift and go to state 31
    MODULO          shift and go to state 32
    SMALLER         shift and go to state 33
    GREATER         shift and go to state 34
    IS_SMALLER_OR_EQUAL shift and go to state 35
    IS_GREATER_OR_EQUAL shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    IS_EQUAL        shift and go to state 40
    IS_NOT_EQUAL    shift and go to state 41
    IS_IDENTICAL    shift and go to state 42
    IS_NOT_IDENTICAL shift and go to state 43
    BOOLEAN_NOT     shift and go to state 44
    WHILE           shift and go to state 45
    FOR             shift and go to state 46
    FOREACH         shift and go to state 47
    TRY             shift and go to state 48
    IF              shift and go to state 51
    LPAREN          shift and go to state 20
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    cuerpo                         shift and go to state 157
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funcion_nparams                shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bfor                           shift and go to state 12
    bforeach                       shift and go to state 13
    btry                           shift and go to state 14
    operaciones_mat                shift and go to state 15
    condicion_if                   shift and go to state 16
    valor                          shift and go to state 18
    op_basicas                     shift and go to state 49
    op_recursivas                  shift and go to state 50
    numero                         shift and go to state 52

state 146

    (19) imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .

    $end            reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    RBRACE          reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    ECHO            reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    PRINT           reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    VARIABLE        reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    FUNCTION        reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    DEFINE          reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    READLINE        reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    SUMA            reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    RESTA           reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    MULTIPLICACION  reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    DIVISION        reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    MODULO          reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    SMALLER         reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    GREATER         reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    AND             reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    OR              reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    XOR             reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_EQUAL        reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_NOT_EQUAL    reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_IDENTICAL    reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_NOT_IDENTICAL reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    BOOLEAN_NOT     reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    WHILE           reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    FOR             reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    FOREACH         reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    TRY             reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IF              reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    LPAREN          reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    STRING          reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    NOMBRE          reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    ENTERO          reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    DECIMAL         reduce using rule 19 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)


state 147

    (49) op_recursivas -> valor LPAREN valor operadores valor RPAREN . operaciones_mat
    (44) operaciones_mat -> . op_basicas
    (45) operaciones_mat -> . op_recursivas
    (46) op_basicas -> . valor operadores valor
    (47) op_basicas -> . LPAREN valor operadores valor RPAREN
    (48) op_recursivas -> . valor operadores op_recursivas
    (49) op_recursivas -> . valor LPAREN valor operadores valor RPAREN operaciones_mat
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    LPAREN          shift and go to state 20
    VARIABLE        shift and go to state 56
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    valor                          shift and go to state 18
    operaciones_mat                shift and go to state 158
    op_basicas                     shift and go to state 49
    op_recursivas                  shift and go to state 50
    numero                         shift and go to state 52

state 148

    (76) array_def -> ARRAY LPAREN array_elmnt RPAREN .

    SEMI            reduce using rule 76 (array_def -> ARRAY LPAREN array_elmnt RPAREN .)


state 149

    (58) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .

    $end            reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    ECHO            reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    PRINT           reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    VARIABLE        reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    FUNCTION        reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    DEFINE          reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    READLINE        reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    SUMA            reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    RESTA           reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    MULTIPLICACION  reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    DIVISION        reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    MODULO          reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    SMALLER         reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    GREATER         reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_SMALLER_OR_EQUAL reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_GREATER_OR_EQUAL reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    AND             reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    OR              reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    XOR             reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_EQUAL        reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_NOT_EQUAL    reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_IDENTICAL    reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_NOT_IDENTICAL reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    BOOLEAN_NOT     reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    WHILE           reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    FOR             reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    FOREACH         reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    TRY             reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IF              reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    LPAREN          reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    STRING          reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    NOMBRE          reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    ENTERO          reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    DECIMAL         reduce using rule 58 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)


state 150

    (59) params_list -> params_list COMMA param .

    RPAREN          reduce using rule 59 (params_list -> params_list COMMA param .)
    COMMA           reduce using rule 59 (params_list -> params_list COMMA param .)


state 151

    (52) constante -> DEFINE LPAREN STRING COMMA valor RPAREN . SEMI

    SEMI            shift and go to state 159


state 152

    (53) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN . SEMI

    SEMI            shift and go to state 160


state 153

    (63) bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque . RBRACE
    (65) stc_bloque -> stc_bloque . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funcion_nparams
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bfor
    (12) cuerpo -> . bforeach
    (13) cuerpo -> . btry
    (14) cuerpo -> . operaciones_mat
    (15) cuerpo -> . condicion_if
    (16) imprimir -> . ECHO valor SEMI
    (17) imprimir -> . PRINT valor SEMI
    (18) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (19) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (50) asignacion -> . VARIABLE EQUALS valor SEMI
    (51) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (58) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (52) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (53) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (54) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (55) lectura -> . READLINE LPAREN RPAREN SEMI
    (26) operadores -> . SUMA
    (27) operadores -> . RESTA
    (28) operadores -> . MULTIPLICACION
    (29) operadores -> . DIVISION
    (30) operadores -> . MODULO
    (31) operador_logico -> . SMALLER
    (32) operador_logico -> . GREATER
    (33) operador_logico -> . IS_SMALLER_OR_EQUAL
    (34) operador_logico -> . IS_GREATER_OR_EQUAL
    (36) condicion_booleana -> . AND
    (37) condicion_booleana -> . OR
    (38) condicion_booleana -> . XOR
    (39) condicion_booleana -> . IS_EQUAL
    (40) condicion_booleana -> . IS_NOT_EQUAL
    (41) condicion_booleana -> . IS_IDENTICAL
    (42) condicion_booleana -> . IS_NOT_IDENTICAL
    (43) condicion_booleana -> . BOOLEAN_NOT
    (63) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (64) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (74) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (79) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (44) operaciones_mat -> . op_basicas
    (45) operaciones_mat -> . op_recursivas
    (35) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (46) op_basicas -> . valor operadores valor
    (47) op_basicas -> . LPAREN valor operadores valor RPAREN
    (48) op_recursivas -> . valor operadores op_recursivas
    (49) op_recursivas -> . valor LPAREN valor operadores valor RPAREN operaciones_mat
    (20) valor -> . numero
    (21) valor -> . VARIABLE
    (22) valor -> . STRING
    (23) valor -> . NOMBRE
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    RBRACE          shift and go to state 161
    ECHO            shift and go to state 17
    PRINT           shift and go to state 19
    VARIABLE        shift and go to state 23
    FUNCTION        shift and go to state 24
    DEFINE          shift and go to state 25
    READLINE        shift and go to state 27
    SUMA            shift and go to state 28
    RESTA           shift and go to state 29
    MULTIPLICACION  shift and go to state 30
    DIVISION        shift and go to state 31
    MODULO          shift and go to state 32
    SMALLER         shift and go to state 33
    GREATER         shift and go to state 34
    IS_SMALLER_OR_EQUAL shift and go to state 35
    IS_GREATER_OR_EQUAL shift and go to state 36
    AND             shift and go to state 37
    OR              shift and go to state 38
    XOR             shift and go to state 39
    IS_EQUAL        shift and go to state 40
    IS_NOT_EQUAL    shift and go to state 41
    IS_IDENTICAL    shift and go to state 42
    IS_NOT_IDENTICAL shift and go to state 43
    BOOLEAN_NOT     shift and go to state 44
    WHILE           shift and go to state 45
    FOR             shift and go to state 46
    FOREACH         shift and go to state 47
    TRY             shift and go to state 48
    IF              shift and go to state 51
    LPAREN          shift and go to state 20
    STRING          shift and go to state 26
    NOMBRE          shift and go to state 21
    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    cuerpo                         shift and go to state 142
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funcion_nparams                shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bfor                           shift and go to state 12
    bforeach                       shift and go to state 13
    btry                           shift and go to state 14
    operaciones_mat                shift and go to state 15
    condicion_if                   shift and go to state 16
    valor                          shift and go to state 18
    op_basicas                     shift and go to state 49
    op_recursivas                  shift and go to state 50
    numero                         shift and go to state 52

state 154

    (64) bfor -> FOR LPAREN asignacion SEMI condicion SEMI . for_incr RPAREN stc_bloque_def
    (68) for_incr -> . VARIABLE SUMA SUMA
    (69) for_incr -> . SUMA SUMA VARIABLE
    (70) for_incr -> . VARIABLE RESTA RESTA
    (71) for_incr -> . RESTA RESTA VARIABLE
    (72) for_incr -> . VARIABLE SUMA EQUALS numero
    (73) for_incr -> . VARIABLE RESTA EQUALS numero

    VARIABLE        shift and go to state 163
    SUMA            shift and go to state 164
    RESTA           shift and go to state 165

    for_incr                       shift and go to state 162

state 155

    (74) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN . stc_bloque_def
    (67) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 93

    stc_bloque_def                 shift and go to state 166

state 156

    (80) catches -> catches CATCH . LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def

    LPAREN          shift and go to state 167


state 157

    (35) condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 168


state 158

    (49) op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .

    $end            reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    RBRACE          reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    ECHO            reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    PRINT           reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    VARIABLE        reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    FUNCTION        reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    DEFINE          reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    READLINE        reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    SUMA            reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    RESTA           reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    MULTIPLICACION  reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    DIVISION        reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    MODULO          reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    SMALLER         reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    GREATER         reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    IS_SMALLER_OR_EQUAL reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    IS_GREATER_OR_EQUAL reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    AND             reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    OR              reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    XOR             reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    IS_EQUAL        reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    IS_NOT_EQUAL    reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    IS_IDENTICAL    reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    IS_NOT_IDENTICAL reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    BOOLEAN_NOT     reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    WHILE           reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    FOR             reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    FOREACH         reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    TRY             reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    IF              reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    LPAREN          reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    STRING          reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    NOMBRE          reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    ENTERO          reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)
    DECIMAL         reduce using rule 49 (op_recursivas -> valor LPAREN valor operadores valor RPAREN operaciones_mat .)


state 159

    (52) constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .

    $end            reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    RBRACE          reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    ECHO            reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    PRINT           reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    VARIABLE        reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    FUNCTION        reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    DEFINE          reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    READLINE        reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    SUMA            reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    RESTA           reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    DIVISION        reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    MODULO          reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    SMALLER         reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    GREATER         reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    AND             reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    OR              reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    XOR             reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_EQUAL        reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    WHILE           reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    FOR             reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    FOREACH         reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    TRY             reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IF              reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    LPAREN          reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    STRING          reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    NOMBRE          reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    ENTERO          reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    DECIMAL         reduce using rule 52 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)


state 160

    (53) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .

    $end            reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    RBRACE          reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    ECHO            reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    PRINT           reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    VARIABLE        reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    FUNCTION        reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    DEFINE          reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    READLINE        reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    SUMA            reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    RESTA           reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    DIVISION        reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    MODULO          reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    SMALLER         reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    GREATER         reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    AND             reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    OR              reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    XOR             reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_EQUAL        reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    WHILE           reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    FOR             reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    FOREACH         reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    TRY             reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IF              reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    LPAREN          reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    STRING          reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    NOMBRE          reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    ENTERO          reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    DECIMAL         reduce using rule 53 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)


state 161

    (63) bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .

    $end            reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    RBRACE          reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    ECHO            reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    PRINT           reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    VARIABLE        reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    FUNCTION        reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    DEFINE          reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    READLINE        reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    SUMA            reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    RESTA           reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    MULTIPLICACION  reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    DIVISION        reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    MODULO          reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    SMALLER         reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    GREATER         reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    AND             reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    OR              reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    XOR             reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_EQUAL        reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_NOT_EQUAL    reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_IDENTICAL    reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    BOOLEAN_NOT     reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    WHILE           reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    FOR             reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    FOREACH         reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    TRY             reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IF              reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    LPAREN          reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    STRING          reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    NOMBRE          reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    ENTERO          reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    DECIMAL         reduce using rule 63 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)


state 162

    (64) bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr . RPAREN stc_bloque_def

    RPAREN          shift and go to state 169


state 163

    (68) for_incr -> VARIABLE . SUMA SUMA
    (70) for_incr -> VARIABLE . RESTA RESTA
    (72) for_incr -> VARIABLE . SUMA EQUALS numero
    (73) for_incr -> VARIABLE . RESTA EQUALS numero

    SUMA            shift and go to state 170
    RESTA           shift and go to state 171


state 164

    (69) for_incr -> SUMA . SUMA VARIABLE

    SUMA            shift and go to state 172


state 165

    (71) for_incr -> RESTA . RESTA VARIABLE

    RESTA           shift and go to state 173


state 166

    (74) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .

    $end            reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    ECHO            reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    PRINT           reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    VARIABLE        reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    FUNCTION        reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    DEFINE          reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    READLINE        reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    SUMA            reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    RESTA           reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    MULTIPLICACION  reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    DIVISION        reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    MODULO          reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    SMALLER         reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    GREATER         reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_SMALLER_OR_EQUAL reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_GREATER_OR_EQUAL reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    AND             reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    OR              reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    XOR             reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_EQUAL        reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_NOT_EQUAL    reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_IDENTICAL    reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_NOT_IDENTICAL reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    BOOLEAN_NOT     reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    WHILE           reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    FOR             reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    FOREACH         reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    TRY             reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IF              reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    LPAREN          reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    STRING          reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    NOMBRE          reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    ENTERO          reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    DECIMAL         reduce using rule 74 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)


state 167

    (80) catches -> catches CATCH LPAREN . NOMBRE VARIABLE RPAREN stc_bloque_def

    NOMBRE          shift and go to state 174


state 168

    (35) condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .

    $end            reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    ECHO            reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PRINT           reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    VARIABLE        reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FUNCTION        reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DEFINE          reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    READLINE        reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SUMA            reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RESTA           reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    MULTIPLICACION  reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DIVISION        reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    MODULO          reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SMALLER         reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    GREATER         reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    AND             reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    OR              reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    XOR             reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_EQUAL        reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_NOT_EQUAL    reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_IDENTICAL    reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    BOOLEAN_NOT     reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    WHILE           reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FOR             reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FOREACH         reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    TRY             reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IF              reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    LPAREN          reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    STRING          reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    NOMBRE          reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    ENTERO          reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DECIMAL         reduce using rule 35 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)


state 169

    (64) bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN . stc_bloque_def
    (67) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 93

    stc_bloque_def                 shift and go to state 175

state 170

    (68) for_incr -> VARIABLE SUMA . SUMA
    (72) for_incr -> VARIABLE SUMA . EQUALS numero

    SUMA            shift and go to state 176
    EQUALS          shift and go to state 177


state 171

    (70) for_incr -> VARIABLE RESTA . RESTA
    (73) for_incr -> VARIABLE RESTA . EQUALS numero

    RESTA           shift and go to state 178
    EQUALS          shift and go to state 179


state 172

    (69) for_incr -> SUMA SUMA . VARIABLE

    VARIABLE        shift and go to state 180


state 173

    (71) for_incr -> RESTA RESTA . VARIABLE

    VARIABLE        shift and go to state 181


state 174

    (80) catches -> catches CATCH LPAREN NOMBRE . VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 182


state 175

    (64) bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .

    $end            reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    ECHO            reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    PRINT           reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    VARIABLE        reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    FUNCTION        reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    DEFINE          reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    READLINE        reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    SUMA            reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    RESTA           reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    MULTIPLICACION  reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    DIVISION        reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    MODULO          reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    SMALLER         reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    GREATER         reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_SMALLER_OR_EQUAL reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_GREATER_OR_EQUAL reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    AND             reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    OR              reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    XOR             reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_EQUAL        reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_NOT_EQUAL    reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_IDENTICAL    reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_NOT_IDENTICAL reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    BOOLEAN_NOT     reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    WHILE           reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    FOR             reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    FOREACH         reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    TRY             reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IF              reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    LPAREN          reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    STRING          reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    NOMBRE          reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    ENTERO          reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    DECIMAL         reduce using rule 64 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)


state 176

    (68) for_incr -> VARIABLE SUMA SUMA .

    RPAREN          reduce using rule 68 (for_incr -> VARIABLE SUMA SUMA .)


state 177

    (72) for_incr -> VARIABLE SUMA EQUALS . numero
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    numero                         shift and go to state 183

state 178

    (70) for_incr -> VARIABLE RESTA RESTA .

    RPAREN          reduce using rule 70 (for_incr -> VARIABLE RESTA RESTA .)


state 179

    (73) for_incr -> VARIABLE RESTA EQUALS . numero
    (24) numero -> . ENTERO
    (25) numero -> . DECIMAL

    ENTERO          shift and go to state 22
    DECIMAL         shift and go to state 53

    numero                         shift and go to state 184

state 180

    (69) for_incr -> SUMA SUMA VARIABLE .

    RPAREN          reduce using rule 69 (for_incr -> SUMA SUMA VARIABLE .)


state 181

    (71) for_incr -> RESTA RESTA VARIABLE .

    RPAREN          reduce using rule 71 (for_incr -> RESTA RESTA VARIABLE .)


state 182

    (80) catches -> catches CATCH LPAREN NOMBRE VARIABLE . RPAREN stc_bloque_def

    RPAREN          shift and go to state 185


state 183

    (72) for_incr -> VARIABLE SUMA EQUALS numero .

    RPAREN          reduce using rule 72 (for_incr -> VARIABLE SUMA EQUALS numero .)


state 184

    (73) for_incr -> VARIABLE RESTA EQUALS numero .

    RPAREN          reduce using rule 73 (for_incr -> VARIABLE RESTA EQUALS numero .)


state 185

    (80) catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN . stc_bloque_def
    (67) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 93

    stc_bloque_def                 shift and go to state 186

state 186

    (80) catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .

    CATCH           reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    $end            reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    ECHO            reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    PRINT           reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    VARIABLE        reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    FUNCTION        reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    DEFINE          reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    READLINE        reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    SUMA            reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    RESTA           reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    MULTIPLICACION  reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    DIVISION        reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    MODULO          reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    SMALLER         reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    GREATER         reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_SMALLER_OR_EQUAL reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_GREATER_OR_EQUAL reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    AND             reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    OR              reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    XOR             reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_EQUAL        reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_NOT_EQUAL    reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_IDENTICAL    reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_NOT_IDENTICAL reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    BOOLEAN_NOT     reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    WHILE           reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    FOR             reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    FOREACH         reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    TRY             reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IF              reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    LPAREN          reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    STRING          reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    NOMBRE          reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    ENTERO          reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    DECIMAL         reduce using rule 80 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 73 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 73 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 73 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 73 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 73 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 73 resolved as shift
WARNING: shift/reduce conflict for SMALLER in state 88 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 88 resolved as shift
WARNING: shift/reduce conflict for IS_SMALLER_OR_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for IS_GREATER_OR_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 103 resolved as shift
