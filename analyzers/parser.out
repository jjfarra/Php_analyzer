Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CLOSE_TAG
    OPEN_TAG

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> imprimir
Rule 2     cuerpo -> asignacion
Rule 3     cuerpo -> asignacion_array
Rule 4     cuerpo -> funciones
Rule 5     cuerpo -> constante
Rule 6     cuerpo -> lectura
Rule 7     cuerpo -> bwhile
Rule 8     cuerpo -> bdo
Rule 9     cuerpo -> bfor
Rule 10    cuerpo -> bforeach
Rule 11    cuerpo -> btry
Rule 12    cuerpo -> operaciones_mat
Rule 13    cuerpo -> condicion_ifelse
Rule 14    cuerpo -> condicion_elseif
Rule 15    cuerpo -> condicion_else
Rule 16    cuerpo -> bswitch
Rule 17    cuerpo -> bcase
Rule 18    cuerpo -> bgoto
Rule 19    cuerpo -> bcolas
Rule 20    cuerpo -> bpila
Rule 21    cuerpo -> incrementos_mat
Rule 22    cuerpo -> bcortes
Rule 23    cuerpo -> brand
Rule 24    cuerpo -> escribir
Rule 25    cuerpo -> btrim
Rule 26    cuerpo -> otros
Rule 27    cuerpo -> breturn
Rule 28    cuerpo -> comment
Rule 29    cuerpo -> casting
Rule 30    asignacion -> VARIABLE EQUALS valor SEMI
Rule 31    asignacion -> VAR asignacion
Rule 32    asignacion -> proteccion asignacion
Rule 33    asignacion -> VARIABLE EQUALS brand
Rule 34    asignacion -> VARIABLE EQUALS escribir
Rule 35    asignacion -> VARIABLE EQUALS btrim
Rule 36    asignacion -> VARIABLE EQUALS lectura
Rule 37    asignacion -> VARIABLE EQUALS bconcat
Rule 38    asignacion_array -> VARIABLE EQUALS array_def SEMI
Rule 39    constante -> DEFINE LPAREN CADENA COMMA valor RPAREN SEMI
Rule 40    constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
Rule 41    valor -> tipoDato
Rule 42    valor -> bcolas
Rule 43    valor -> bpila
Rule 44    tipoDato -> numero
Rule 45    tipoDato -> CADENA
Rule 46    tipoDato -> BOOLEANO
Rule 47    numero -> ENTERO
Rule 48    numero -> DECIMAL
Rule 49    imprimir -> ECHO valor SEMI
Rule 50    imprimir -> PRINT valor SEMI
Rule 51    imprimir -> PRINT LPAREN valor RPAREN SEMI
Rule 52    imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
Rule 53    imprimir -> ECHO bconcat
Rule 54    condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
Rule 55    condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
Rule 56    condicion_else -> ELSE LBRACE cuerpo RBRACE
Rule 57    condicion_ifelse -> condicion_if
Rule 58    condicion_ifelse -> condicion_if condicion_else
Rule 59    condicion_ifelse -> condicion_if condicion_elseif
Rule 60    condicion_ifelse -> condicion_if condicion_elseif condicion_else
Rule 61    condicion -> VARIABLE operador_logico VARIABLE
Rule 62    condicion -> valor operador_logico valor
Rule 63    condicion -> VARIABLE operador_logico valor
Rule 64    condicion -> VARIABLE condicion_booleana VARIABLE
Rule 65    condicion -> valor condicion_booleana valor
Rule 66    condicion -> VARIABLE condicion_booleana valor
Rule 67    bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
Rule 68    stc_bloque -> stc_bloque SEMI cuerpo
Rule 69    stc_bloque -> breturn
Rule 70    stc_bloque_def -> LBRACE stc_bloque RBRACE
Rule 71    for_incr -> VARIABLE SUMA SUMA
Rule 72    for_incr -> SUMA SUMA VARIABLE
Rule 73    for_incr -> VARIABLE RESTA RESTA
Rule 74    for_incr -> RESTA RESTA VARIABLE
Rule 75    for_incr -> VARIABLE SUMA EQUALS numero
Rule 76    for_incr -> VARIABLE RESTA EQUALS numero
Rule 77    bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
Rule 78    bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
Rule 79    bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque
Rule 80    bdo -> DO LBRACE cuerpo RBRACE bwhile
Rule 81    bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE
Rule 82    bcase -> CASE ENTERO COLON
Rule 83    innerSwitch -> bcase cuerpo BREAK SEMI
Rule 84    innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch
Rule 85    btry -> TRY LBRACE stc_bloque_def RBRACE catches
Rule 86    catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def
Rule 87    catches -> empty
Rule 88    operadores -> SUMA
Rule 89    operadores -> RESTA
Rule 90    operadores -> MULTIPLICACION
Rule 91    operadores -> DIVISION
Rule 92    operadores -> MODULO
Rule 93    operador_logico -> SMALLER
Rule 94    operador_logico -> GREATER
Rule 95    operador_logico -> IS_SMALLER_OR_EQUAL
Rule 96    operador_logico -> IS_GREATER_OR_EQUAL
Rule 97    incrementos_mat -> MINUS_EQUAL
Rule 98    incrementos_mat -> MOD_EQUAL
Rule 99    incrementos_mat -> MUL_EQUAL
Rule 100   incrementos_mat -> PLUS_EQUAL
Rule 101   incrementos_mat -> DIV_EQUAL
Rule 102   condicion_booleana -> AND
Rule 103   condicion_booleana -> OR
Rule 104   condicion_booleana -> XOR
Rule 105   condicion_booleana -> IS_EQUAL
Rule 106   condicion_booleana -> IS_NOT_EQUAL
Rule 107   condicion_booleana -> IS_IDENTICAL
Rule 108   condicion_booleana -> IS_NOT_IDENTICAL
Rule 109   operaciones_mat -> valor operadores valor
Rule 110   operaciones_mat -> valor operadores operaciones_mat
Rule 111   operaciones_mat -> operaciones_mat_par
Rule 112   operaciones_mat_par -> LPAREN valor operadores valor RPAREN
Rule 113   operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN
Rule 114   funciones -> funcion_nparams
Rule 115   funciones -> proteccion funcion_nparams
Rule 116   funciones -> funcion_blank
Rule 117   funciones -> proteccion funcion_blank
Rule 118   funciones -> funcion_void
Rule 119   param -> VARIABLE
Rule 120   param -> asignacion
Rule 121   funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
Rule 122   params_list -> params_list COMMA param
Rule 123   params_list -> param
Rule 124   funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
Rule 125   funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
Rule 126   funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
Rule 127   brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
Rule 128   proteccion -> PUBLIC
Rule 129   proteccion -> PRIVATE
Rule 130   proteccion -> PROTECTED
Rule 131   proteccion -> STATIC
Rule 132   breturn -> empty
Rule 133   breturn -> RETURN SEMI
Rule 134   breturn -> RETURN NULL SEMI
Rule 135   breturn -> RETURN VARIABLE SEMI
Rule 136   breturn -> RETURN BOOLEANO SEMI
Rule 137   array_def -> ARRAY LPAREN RPAREN
Rule 138   array_def -> ARRAY LPAREN array_elmnt RPAREN
Rule 139   array_elmnt -> array_elmnt COMMA valor
Rule 140   array_elmnt -> valor
Rule 141   empty -> <empty>
Rule 142   bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
Rule 143   bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
Rule 144   lectura -> READLINE LPAREN CADENA RPAREN SEMI
Rule 145   lectura -> READLINE LPAREN RPAREN SEMI
Rule 146   escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI
Rule 147   btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
Rule 148   comment -> COMENTARIOS
Rule 149   comment -> DOC_COMENTARIOS
Rule 150   bgoto -> GOTO NOMBRE SEMI
Rule 151   bcortes -> EXIT SEMI
Rule 152   bcortes -> BREAK SEMI
Rule 153   bcortes -> DEFAULT SEMI
Rule 154   bcortes -> CONTINUE SEMI
Rule 155   otros -> SMALLER NOMBRE GREATER
Rule 156   bconcat -> CADENA CONCAT CADENA SEMI
Rule 157   bconcat -> VARIABLE CONCAT VARIABLE SEMI
Rule 158   bconcat -> VARIABLE CONCAT CADENA SEMI
Rule 159   bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI
Rule 160   bconcat -> CADENA CONCAT_EQUAL CADENA SEMI
Rule 161   tiposCast -> STRING
Rule 162   tiposCast -> BOOL
Rule 163   tiposCast -> DOUBLE
Rule 164   tiposCast -> FLOAT
Rule 165   tiposCast -> ARRAY
Rule 166   tiposCast -> OBJECT
Rule 167   tiposCast -> INTEGER
Rule 168   tiposCast -> INT
Rule 169   casting -> VARIABLE LPAREN tiposCast RPAREN VARIABLE SEMI

Terminals, with rules where they appear

AND                  : 102
ARRAY                : 40 137 138 165
AS                   : 77
BOOL                 : 162
BOOLEANO             : 46 136
BREAK                : 83 84 152
CADENA               : 39 45 144 146 156 156 158 159 160 160
CASE                 : 82 84
CATCH                : 86
CLOSE_TAG            : 
COLON                : 79 82 84 124
COMENTARIOS          : 148
COMMA                : 39 40 122 127 139 146
CONCAT               : 156 157 158
CONCAT_EQUAL         : 159 160
CONTINUE             : 154
DECIMAL              : 48
DEFAULT              : 153
DEFINE               : 39 40
DIVISION             : 91
DIV_EQUAL            : 101
DO                   : 80
DOC_COMENTARIOS      : 149
DOUBLE               : 163
ECHO                 : 49 52 53
ELSE                 : 56
ELSEIF               : 55
ENTERO               : 47 52 82 84 127 127
EQUALS               : 30 33 34 35 36 37 38 75 76 142 143
EXIT                 : 151
FLOAT                : 164
FOR                  : 67
FOREACH              : 77
FUNCTION             : 121 124 125 126
FWRITE               : 146
GOTO                 : 150
GREATER              : 94 155
IF                   : 54
INT                  : 168
INTEGER              : 167
IS_EQUAL             : 105
IS_GREATER_OR_EQUAL  : 96
IS_IDENTICAL         : 107
IS_NOT_EQUAL         : 106
IS_NOT_IDENTICAL     : 108
IS_SMALLER_OR_EQUAL  : 95
LBRACE               : 54 55 56 70 78 80 81 85 124 126
LBRACKET             : 52
LPAREN               : 39 40 51 54 55 67 77 78 79 81 86 112 113 121 124 125 126 127 137 138 142 143 144 145 146 147 147 169
MINUS_EQUAL          : 97
MODULO               : 92
MOD_EQUAL            : 98
MULTIPLICACION       : 90
MUL_EQUAL            : 99
NEW                  : 142 143
NOMBRE               : 40 52 86 121 124 125 126 146 147 147 150 155
NULL                 : 134
OBJECT               : 166
OPEN_TAG             : 
OR                   : 103
PLUS_EQUAL           : 100
PRINT                : 50 51
PRIVATE              : 129
PROTECTED            : 130
PUBLIC               : 128
RAND                 : 127
RBRACE               : 54 55 56 70 78 80 81 85 124 126
RBRACKET             : 52
READLINE             : 144 145
RESTA                : 73 73 74 74 76 89
RETURN               : 133 134 135 136
RPAREN               : 39 40 51 54 55 67 77 78 79 81 86 112 113 121 124 125 126 127 137 138 142 143 144 145 146 147 147 169
SEMI                 : 30 38 39 40 49 50 51 52 67 68 81 83 84 127 133 134 135 136 142 143 144 145 146 147 150 151 152 153 154 156 157 158 159 160 169
SMALLER              : 93 155
SPLQUEUE             : 142
SPLSTACK             : 143
STATIC               : 131
STRING               : 161
SUMA                 : 71 71 72 72 75 88
SWITCH               : 81
TRIM                 : 147
TRY                  : 85
VAR                  : 31
VARIABLE             : 30 33 34 35 36 37 38 61 61 63 64 64 66 71 72 73 74 75 76 77 77 81 86 119 135 142 143 157 157 158 159 169 169
VOID                 : 124
WHILE                : 78 79
XOR                  : 104
error                : 

Nonterminals, with rules where they appear

array_def            : 38
array_elmnt          : 138 139
asignacion           : 2 31 32 67 120
asignacion_array     : 3
bcase                : 17 83
bcolas               : 19 42
bconcat              : 37 53
bcortes              : 22
bdo                  : 8
bfor                 : 9
bforeach             : 10
bgoto                : 18
bpila                : 20 43
brand                : 23 33
breturn              : 27 69
bswitch              : 16
btrim                : 25 35
btry                 : 11
bwhile               : 7 80
casting              : 29
catches              : 85 86
comment              : 28
condicion            : 54 55 67 78 79
condicion_booleana   : 64 65 66
condicion_else       : 15 58 60
condicion_elseif     : 14 59 60
condicion_if         : 57 58 59 60
condicion_ifelse     : 13
constante            : 5
cuerpo               : 54 55 56 68 80 81 83 84 0
empty                : 87 124 126 132
escribir             : 24 34
for_incr             : 67
funcion_blank        : 116 117
funcion_nparams      : 114 115
funcion_void         : 118
funciones            : 4
imprimir             : 1
incrementos_mat      : 21
innerSwitch          : 84
lectura              : 6 36
numero               : 44 75 76
operaciones_mat      : 12 110
operaciones_mat_par  : 111 113
operador_logico      : 61 62 63
operadores           : 109 110 112 113
otros                : 26
param                : 122 123
params_list          : 121 122
proteccion           : 32 115 117
stc_bloque           : 68 70 78 79
stc_bloque_def       : 67 77 85 86 121 125
tipoDato             : 41
tiposCast            : 169
valor                : 30 39 49 50 51 62 62 63 65 65 66 109 109 110 112 112 113 139 140

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . bwhile
    (8) cuerpo -> . bdo
    (9) cuerpo -> . bfor
    (10) cuerpo -> . bforeach
    (11) cuerpo -> . btry
    (12) cuerpo -> . operaciones_mat
    (13) cuerpo -> . condicion_ifelse
    (14) cuerpo -> . condicion_elseif
    (15) cuerpo -> . condicion_else
    (16) cuerpo -> . bswitch
    (17) cuerpo -> . bcase
    (18) cuerpo -> . bgoto
    (19) cuerpo -> . bcolas
    (20) cuerpo -> . bpila
    (21) cuerpo -> . incrementos_mat
    (22) cuerpo -> . bcortes
    (23) cuerpo -> . brand
    (24) cuerpo -> . escribir
    (25) cuerpo -> . btrim
    (26) cuerpo -> . otros
    (27) cuerpo -> . breturn
    (28) cuerpo -> . comment
    (29) cuerpo -> . casting
    (49) imprimir -> . ECHO valor SEMI
    (50) imprimir -> . PRINT valor SEMI
    (51) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (52) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (53) imprimir -> . ECHO bconcat
    (30) asignacion -> . VARIABLE EQUALS valor SEMI
    (31) asignacion -> . VAR asignacion
    (32) asignacion -> . proteccion asignacion
    (33) asignacion -> . VARIABLE EQUALS brand
    (34) asignacion -> . VARIABLE EQUALS escribir
    (35) asignacion -> . VARIABLE EQUALS btrim
    (36) asignacion -> . VARIABLE EQUALS lectura
    (37) asignacion -> . VARIABLE EQUALS bconcat
    (38) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (114) funciones -> . funcion_nparams
    (115) funciones -> . proteccion funcion_nparams
    (116) funciones -> . funcion_blank
    (117) funciones -> . proteccion funcion_blank
    (118) funciones -> . funcion_void
    (39) constante -> . DEFINE LPAREN CADENA COMMA valor RPAREN SEMI
    (40) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (144) lectura -> . READLINE LPAREN CADENA RPAREN SEMI
    (145) lectura -> . READLINE LPAREN RPAREN SEMI
    (78) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (79) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (80) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (67) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (77) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (85) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (109) operaciones_mat -> . valor operadores valor
    (110) operaciones_mat -> . valor operadores operaciones_mat
    (111) operaciones_mat -> . operaciones_mat_par
    (57) condicion_ifelse -> . condicion_if
    (58) condicion_ifelse -> . condicion_if condicion_else
    (59) condicion_ifelse -> . condicion_if condicion_elseif
    (60) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (55) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (56) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (81) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE
    (82) bcase -> . CASE ENTERO COLON
    (150) bgoto -> . GOTO NOMBRE SEMI
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (97) incrementos_mat -> . MINUS_EQUAL
    (98) incrementos_mat -> . MOD_EQUAL
    (99) incrementos_mat -> . MUL_EQUAL
    (100) incrementos_mat -> . PLUS_EQUAL
    (101) incrementos_mat -> . DIV_EQUAL
    (151) bcortes -> . EXIT SEMI
    (152) bcortes -> . BREAK SEMI
    (153) bcortes -> . DEFAULT SEMI
    (154) bcortes -> . CONTINUE SEMI
    (127) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (146) escribir -> . FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI
    (147) btrim -> . TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
    (155) otros -> . SMALLER NOMBRE GREATER
    (132) breturn -> . empty
    (133) breturn -> . RETURN SEMI
    (134) breturn -> . RETURN NULL SEMI
    (135) breturn -> . RETURN VARIABLE SEMI
    (136) breturn -> . RETURN BOOLEANO SEMI
    (148) comment -> . COMENTARIOS
    (149) comment -> . DOC_COMENTARIOS
    (169) casting -> . VARIABLE LPAREN tiposCast RPAREN VARIABLE SEMI
    (128) proteccion -> . PUBLIC
    (129) proteccion -> . PRIVATE
    (130) proteccion -> . PROTECTED
    (131) proteccion -> . STATIC
    (121) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (125) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (126) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (124) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (112) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (113) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (54) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (141) empty -> .
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    ECHO            shift and go to state 31
    PRINT           shift and go to state 33
    VARIABLE        shift and go to state 36
    VAR             shift and go to state 37
    DEFINE          shift and go to state 42
    READLINE        shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    FOREACH         shift and go to state 48
    TRY             shift and go to state 49
    ELSEIF          shift and go to state 52
    ELSE            shift and go to state 53
    SWITCH          shift and go to state 54
    CASE            shift and go to state 55
    GOTO            shift and go to state 56
    MINUS_EQUAL     shift and go to state 57
    MOD_EQUAL       shift and go to state 58
    MUL_EQUAL       shift and go to state 59
    PLUS_EQUAL      shift and go to state 60
    DIV_EQUAL       shift and go to state 61
    EXIT            shift and go to state 62
    BREAK           shift and go to state 63
    DEFAULT         shift and go to state 64
    CONTINUE        shift and go to state 65
    RAND            shift and go to state 66
    FWRITE          shift and go to state 67
    TRIM            shift and go to state 68
    SMALLER         shift and go to state 69
    RETURN          shift and go to state 71
    COMENTARIOS     shift and go to state 73
    DOC_COMENTARIOS shift and go to state 74
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78
    FUNCTION        shift and go to state 79
    LPAREN          shift and go to state 34
    IF              shift and go to state 81
    $end            reduce using rule 141 (empty -> .)
    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    cuerpo                         shift and go to state 1
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    bwhile                         shift and go to state 8
    bdo                            shift and go to state 9
    bfor                           shift and go to state 10
    bforeach                       shift and go to state 11
    btry                           shift and go to state 12
    operaciones_mat                shift and go to state 13
    condicion_ifelse               shift and go to state 14
    condicion_elseif               shift and go to state 15
    condicion_else                 shift and go to state 16
    bswitch                        shift and go to state 17
    bcase                          shift and go to state 18
    bgoto                          shift and go to state 19
    bcolas                         shift and go to state 20
    bpila                          shift and go to state 21
    incrementos_mat                shift and go to state 22
    bcortes                        shift and go to state 23
    brand                          shift and go to state 24
    escribir                       shift and go to state 25
    btrim                          shift and go to state 26
    otros                          shift and go to state 27
    breturn                        shift and go to state 28
    comment                        shift and go to state 29
    casting                        shift and go to state 30
    valor                          shift and go to state 32
    proteccion                     shift and go to state 38
    funcion_nparams                shift and go to state 39
    funcion_blank                  shift and go to state 40
    funcion_void                   shift and go to state 41
    operaciones_mat_par            shift and go to state 50
    condicion_if                   shift and go to state 51
    empty                          shift and go to state 70
    tipoDato                       shift and go to state 80
    numero                         shift and go to state 82

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> imprimir .

    $end            reduce using rule 1 (cuerpo -> imprimir .)
    RBRACE          reduce using rule 1 (cuerpo -> imprimir .)
    SEMI            reduce using rule 1 (cuerpo -> imprimir .)


state 3

    (2) cuerpo -> asignacion .

    $end            reduce using rule 2 (cuerpo -> asignacion .)
    RBRACE          reduce using rule 2 (cuerpo -> asignacion .)
    SEMI            reduce using rule 2 (cuerpo -> asignacion .)


state 4

    (3) cuerpo -> asignacion_array .

    $end            reduce using rule 3 (cuerpo -> asignacion_array .)
    RBRACE          reduce using rule 3 (cuerpo -> asignacion_array .)
    SEMI            reduce using rule 3 (cuerpo -> asignacion_array .)


state 5

    (4) cuerpo -> funciones .

    $end            reduce using rule 4 (cuerpo -> funciones .)
    RBRACE          reduce using rule 4 (cuerpo -> funciones .)
    SEMI            reduce using rule 4 (cuerpo -> funciones .)


state 6

    (5) cuerpo -> constante .

    $end            reduce using rule 5 (cuerpo -> constante .)
    RBRACE          reduce using rule 5 (cuerpo -> constante .)
    SEMI            reduce using rule 5 (cuerpo -> constante .)


state 7

    (6) cuerpo -> lectura .

    $end            reduce using rule 6 (cuerpo -> lectura .)
    RBRACE          reduce using rule 6 (cuerpo -> lectura .)
    SEMI            reduce using rule 6 (cuerpo -> lectura .)


state 8

    (7) cuerpo -> bwhile .

    $end            reduce using rule 7 (cuerpo -> bwhile .)
    RBRACE          reduce using rule 7 (cuerpo -> bwhile .)
    SEMI            reduce using rule 7 (cuerpo -> bwhile .)


state 9

    (8) cuerpo -> bdo .

    $end            reduce using rule 8 (cuerpo -> bdo .)
    RBRACE          reduce using rule 8 (cuerpo -> bdo .)
    SEMI            reduce using rule 8 (cuerpo -> bdo .)


state 10

    (9) cuerpo -> bfor .

    $end            reduce using rule 9 (cuerpo -> bfor .)
    RBRACE          reduce using rule 9 (cuerpo -> bfor .)
    SEMI            reduce using rule 9 (cuerpo -> bfor .)


state 11

    (10) cuerpo -> bforeach .

    $end            reduce using rule 10 (cuerpo -> bforeach .)
    RBRACE          reduce using rule 10 (cuerpo -> bforeach .)
    SEMI            reduce using rule 10 (cuerpo -> bforeach .)


state 12

    (11) cuerpo -> btry .

    $end            reduce using rule 11 (cuerpo -> btry .)
    RBRACE          reduce using rule 11 (cuerpo -> btry .)
    SEMI            reduce using rule 11 (cuerpo -> btry .)


state 13

    (12) cuerpo -> operaciones_mat .

    $end            reduce using rule 12 (cuerpo -> operaciones_mat .)
    RBRACE          reduce using rule 12 (cuerpo -> operaciones_mat .)
    SEMI            reduce using rule 12 (cuerpo -> operaciones_mat .)


state 14

    (13) cuerpo -> condicion_ifelse .

    $end            reduce using rule 13 (cuerpo -> condicion_ifelse .)
    RBRACE          reduce using rule 13 (cuerpo -> condicion_ifelse .)
    SEMI            reduce using rule 13 (cuerpo -> condicion_ifelse .)


state 15

    (14) cuerpo -> condicion_elseif .

    $end            reduce using rule 14 (cuerpo -> condicion_elseif .)
    RBRACE          reduce using rule 14 (cuerpo -> condicion_elseif .)
    SEMI            reduce using rule 14 (cuerpo -> condicion_elseif .)


state 16

    (15) cuerpo -> condicion_else .

    $end            reduce using rule 15 (cuerpo -> condicion_else .)
    RBRACE          reduce using rule 15 (cuerpo -> condicion_else .)
    SEMI            reduce using rule 15 (cuerpo -> condicion_else .)


state 17

    (16) cuerpo -> bswitch .

    $end            reduce using rule 16 (cuerpo -> bswitch .)
    RBRACE          reduce using rule 16 (cuerpo -> bswitch .)
    SEMI            reduce using rule 16 (cuerpo -> bswitch .)


state 18

    (17) cuerpo -> bcase .

    $end            reduce using rule 17 (cuerpo -> bcase .)
    RBRACE          reduce using rule 17 (cuerpo -> bcase .)
    SEMI            reduce using rule 17 (cuerpo -> bcase .)


state 19

    (18) cuerpo -> bgoto .

    $end            reduce using rule 18 (cuerpo -> bgoto .)
    RBRACE          reduce using rule 18 (cuerpo -> bgoto .)
    SEMI            reduce using rule 18 (cuerpo -> bgoto .)


state 20

    (19) cuerpo -> bcolas .
    (42) valor -> bcolas .

    $end            reduce using rule 19 (cuerpo -> bcolas .)
    RBRACE          reduce using rule 19 (cuerpo -> bcolas .)
    SEMI            reduce using rule 19 (cuerpo -> bcolas .)
    SUMA            reduce using rule 42 (valor -> bcolas .)
    RESTA           reduce using rule 42 (valor -> bcolas .)
    MULTIPLICACION  reduce using rule 42 (valor -> bcolas .)
    DIVISION        reduce using rule 42 (valor -> bcolas .)
    MODULO          reduce using rule 42 (valor -> bcolas .)


state 21

    (20) cuerpo -> bpila .
    (43) valor -> bpila .

    $end            reduce using rule 20 (cuerpo -> bpila .)
    RBRACE          reduce using rule 20 (cuerpo -> bpila .)
    SEMI            reduce using rule 20 (cuerpo -> bpila .)
    SUMA            reduce using rule 43 (valor -> bpila .)
    RESTA           reduce using rule 43 (valor -> bpila .)
    MULTIPLICACION  reduce using rule 43 (valor -> bpila .)
    DIVISION        reduce using rule 43 (valor -> bpila .)
    MODULO          reduce using rule 43 (valor -> bpila .)


state 22

    (21) cuerpo -> incrementos_mat .

    $end            reduce using rule 21 (cuerpo -> incrementos_mat .)
    RBRACE          reduce using rule 21 (cuerpo -> incrementos_mat .)
    SEMI            reduce using rule 21 (cuerpo -> incrementos_mat .)


state 23

    (22) cuerpo -> bcortes .

    $end            reduce using rule 22 (cuerpo -> bcortes .)
    RBRACE          reduce using rule 22 (cuerpo -> bcortes .)
    SEMI            reduce using rule 22 (cuerpo -> bcortes .)


state 24

    (23) cuerpo -> brand .

    $end            reduce using rule 23 (cuerpo -> brand .)
    RBRACE          reduce using rule 23 (cuerpo -> brand .)
    SEMI            reduce using rule 23 (cuerpo -> brand .)


state 25

    (24) cuerpo -> escribir .

    $end            reduce using rule 24 (cuerpo -> escribir .)
    RBRACE          reduce using rule 24 (cuerpo -> escribir .)
    SEMI            reduce using rule 24 (cuerpo -> escribir .)


state 26

    (25) cuerpo -> btrim .

    $end            reduce using rule 25 (cuerpo -> btrim .)
    RBRACE          reduce using rule 25 (cuerpo -> btrim .)
    SEMI            reduce using rule 25 (cuerpo -> btrim .)


state 27

    (26) cuerpo -> otros .

    $end            reduce using rule 26 (cuerpo -> otros .)
    RBRACE          reduce using rule 26 (cuerpo -> otros .)
    SEMI            reduce using rule 26 (cuerpo -> otros .)


state 28

    (27) cuerpo -> breturn .

    $end            reduce using rule 27 (cuerpo -> breturn .)
    RBRACE          reduce using rule 27 (cuerpo -> breturn .)
    SEMI            reduce using rule 27 (cuerpo -> breturn .)


state 29

    (28) cuerpo -> comment .

    $end            reduce using rule 28 (cuerpo -> comment .)
    RBRACE          reduce using rule 28 (cuerpo -> comment .)
    SEMI            reduce using rule 28 (cuerpo -> comment .)


state 30

    (29) cuerpo -> casting .

    $end            reduce using rule 29 (cuerpo -> casting .)
    RBRACE          reduce using rule 29 (cuerpo -> casting .)
    SEMI            reduce using rule 29 (cuerpo -> casting .)


state 31

    (49) imprimir -> ECHO . valor SEMI
    (52) imprimir -> ECHO . NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (53) imprimir -> ECHO . bconcat
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (156) bconcat -> . CADENA CONCAT CADENA SEMI
    (157) bconcat -> . VARIABLE CONCAT VARIABLE SEMI
    (158) bconcat -> . VARIABLE CONCAT CADENA SEMI
    (159) bconcat -> . VARIABLE CONCAT_EQUAL CADENA SEMI
    (160) bconcat -> . CADENA CONCAT_EQUAL CADENA SEMI
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    NOMBRE          shift and go to state 85
    CADENA          shift and go to state 89
    VARIABLE        shift and go to state 90
    BOOLEANO        shift and go to state 72
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    valor                          shift and go to state 84
    bconcat                        shift and go to state 86
    tipoDato                       shift and go to state 80
    bcolas                         shift and go to state 87
    bpila                          shift and go to state 88
    numero                         shift and go to state 82

state 32

    (109) operaciones_mat -> valor . operadores valor
    (110) operaciones_mat -> valor . operadores operaciones_mat
    (88) operadores -> . SUMA
    (89) operadores -> . RESTA
    (90) operadores -> . MULTIPLICACION
    (91) operadores -> . DIVISION
    (92) operadores -> . MODULO

    SUMA            shift and go to state 92
    RESTA           shift and go to state 93
    MULTIPLICACION  shift and go to state 94
    DIVISION        shift and go to state 95
    MODULO          shift and go to state 96

    operadores                     shift and go to state 91

state 33

    (50) imprimir -> PRINT . valor SEMI
    (51) imprimir -> PRINT . LPAREN valor RPAREN SEMI
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    LPAREN          shift and go to state 98
    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    VARIABLE        shift and go to state 99
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    valor                          shift and go to state 97
    tipoDato                       shift and go to state 80
    bcolas                         shift and go to state 87
    bpila                          shift and go to state 88
    numero                         shift and go to state 82

state 34

    (112) operaciones_mat_par -> LPAREN . valor operadores valor RPAREN
    (113) operaciones_mat_par -> LPAREN . valor operadores operaciones_mat_par RPAREN
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    VARIABLE        shift and go to state 99
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    valor                          shift and go to state 100
    tipoDato                       shift and go to state 80
    bcolas                         shift and go to state 87
    bpila                          shift and go to state 88
    numero                         shift and go to state 82

state 35

    (47) numero -> ENTERO .

    SUMA            reduce using rule 47 (numero -> ENTERO .)
    RESTA           reduce using rule 47 (numero -> ENTERO .)
    MULTIPLICACION  reduce using rule 47 (numero -> ENTERO .)
    DIVISION        reduce using rule 47 (numero -> ENTERO .)
    MODULO          reduce using rule 47 (numero -> ENTERO .)
    SEMI            reduce using rule 47 (numero -> ENTERO .)
    $end            reduce using rule 47 (numero -> ENTERO .)
    RBRACE          reduce using rule 47 (numero -> ENTERO .)
    RPAREN          reduce using rule 47 (numero -> ENTERO .)
    SMALLER         reduce using rule 47 (numero -> ENTERO .)
    GREATER         reduce using rule 47 (numero -> ENTERO .)
    IS_SMALLER_OR_EQUAL reduce using rule 47 (numero -> ENTERO .)
    IS_GREATER_OR_EQUAL reduce using rule 47 (numero -> ENTERO .)
    AND             reduce using rule 47 (numero -> ENTERO .)
    OR              reduce using rule 47 (numero -> ENTERO .)
    XOR             reduce using rule 47 (numero -> ENTERO .)
    IS_EQUAL        reduce using rule 47 (numero -> ENTERO .)
    IS_NOT_EQUAL    reduce using rule 47 (numero -> ENTERO .)
    IS_IDENTICAL    reduce using rule 47 (numero -> ENTERO .)
    IS_NOT_IDENTICAL reduce using rule 47 (numero -> ENTERO .)
    COMMA           reduce using rule 47 (numero -> ENTERO .)


state 36

    (30) asignacion -> VARIABLE . EQUALS valor SEMI
    (33) asignacion -> VARIABLE . EQUALS brand
    (34) asignacion -> VARIABLE . EQUALS escribir
    (35) asignacion -> VARIABLE . EQUALS btrim
    (36) asignacion -> VARIABLE . EQUALS lectura
    (37) asignacion -> VARIABLE . EQUALS bconcat
    (38) asignacion_array -> VARIABLE . EQUALS array_def SEMI
    (142) bcolas -> VARIABLE . EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> VARIABLE . EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (169) casting -> VARIABLE . LPAREN tiposCast RPAREN VARIABLE SEMI

    EQUALS          shift and go to state 101
    LPAREN          shift and go to state 102


state 37

    (31) asignacion -> VAR . asignacion
    (30) asignacion -> . VARIABLE EQUALS valor SEMI
    (31) asignacion -> . VAR asignacion
    (32) asignacion -> . proteccion asignacion
    (33) asignacion -> . VARIABLE EQUALS brand
    (34) asignacion -> . VARIABLE EQUALS escribir
    (35) asignacion -> . VARIABLE EQUALS btrim
    (36) asignacion -> . VARIABLE EQUALS lectura
    (37) asignacion -> . VARIABLE EQUALS bconcat
    (128) proteccion -> . PUBLIC
    (129) proteccion -> . PRIVATE
    (130) proteccion -> . PROTECTED
    (131) proteccion -> . STATIC

    VARIABLE        shift and go to state 104
    VAR             shift and go to state 37
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78

    asignacion                     shift and go to state 103
    proteccion                     shift and go to state 105

state 38

    (32) asignacion -> proteccion . asignacion
    (115) funciones -> proteccion . funcion_nparams
    (117) funciones -> proteccion . funcion_blank
    (30) asignacion -> . VARIABLE EQUALS valor SEMI
    (31) asignacion -> . VAR asignacion
    (32) asignacion -> . proteccion asignacion
    (33) asignacion -> . VARIABLE EQUALS brand
    (34) asignacion -> . VARIABLE EQUALS escribir
    (35) asignacion -> . VARIABLE EQUALS btrim
    (36) asignacion -> . VARIABLE EQUALS lectura
    (37) asignacion -> . VARIABLE EQUALS bconcat
    (121) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (125) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (126) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (128) proteccion -> . PUBLIC
    (129) proteccion -> . PRIVATE
    (130) proteccion -> . PROTECTED
    (131) proteccion -> . STATIC

    VARIABLE        shift and go to state 104
    VAR             shift and go to state 37
    FUNCTION        shift and go to state 109
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78

    proteccion                     shift and go to state 105
    asignacion                     shift and go to state 106
    funcion_nparams                shift and go to state 107
    funcion_blank                  shift and go to state 108

state 39

    (114) funciones -> funcion_nparams .

    $end            reduce using rule 114 (funciones -> funcion_nparams .)
    RBRACE          reduce using rule 114 (funciones -> funcion_nparams .)
    SEMI            reduce using rule 114 (funciones -> funcion_nparams .)


state 40

    (116) funciones -> funcion_blank .

    $end            reduce using rule 116 (funciones -> funcion_blank .)
    RBRACE          reduce using rule 116 (funciones -> funcion_blank .)
    SEMI            reduce using rule 116 (funciones -> funcion_blank .)


state 41

    (118) funciones -> funcion_void .

    $end            reduce using rule 118 (funciones -> funcion_void .)
    RBRACE          reduce using rule 118 (funciones -> funcion_void .)
    SEMI            reduce using rule 118 (funciones -> funcion_void .)


state 42

    (39) constante -> DEFINE . LPAREN CADENA COMMA valor RPAREN SEMI
    (40) constante -> DEFINE . LPAREN NOMBRE COMMA ARRAY RPAREN SEMI

    LPAREN          shift and go to state 110


state 43

    (45) tipoDato -> CADENA .

    SUMA            reduce using rule 45 (tipoDato -> CADENA .)
    RESTA           reduce using rule 45 (tipoDato -> CADENA .)
    MULTIPLICACION  reduce using rule 45 (tipoDato -> CADENA .)
    DIVISION        reduce using rule 45 (tipoDato -> CADENA .)
    MODULO          reduce using rule 45 (tipoDato -> CADENA .)
    SEMI            reduce using rule 45 (tipoDato -> CADENA .)
    $end            reduce using rule 45 (tipoDato -> CADENA .)
    RBRACE          reduce using rule 45 (tipoDato -> CADENA .)
    RPAREN          reduce using rule 45 (tipoDato -> CADENA .)
    SMALLER         reduce using rule 45 (tipoDato -> CADENA .)
    GREATER         reduce using rule 45 (tipoDato -> CADENA .)
    IS_SMALLER_OR_EQUAL reduce using rule 45 (tipoDato -> CADENA .)
    IS_GREATER_OR_EQUAL reduce using rule 45 (tipoDato -> CADENA .)
    AND             reduce using rule 45 (tipoDato -> CADENA .)
    OR              reduce using rule 45 (tipoDato -> CADENA .)
    XOR             reduce using rule 45 (tipoDato -> CADENA .)
    IS_EQUAL        reduce using rule 45 (tipoDato -> CADENA .)
    IS_NOT_EQUAL    reduce using rule 45 (tipoDato -> CADENA .)
    IS_IDENTICAL    reduce using rule 45 (tipoDato -> CADENA .)
    IS_NOT_IDENTICAL reduce using rule 45 (tipoDato -> CADENA .)
    COMMA           reduce using rule 45 (tipoDato -> CADENA .)


state 44

    (144) lectura -> READLINE . LPAREN CADENA RPAREN SEMI
    (145) lectura -> READLINE . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 111


state 45

    (78) bwhile -> WHILE . LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (79) bwhile -> WHILE . LPAREN condicion RPAREN COLON stc_bloque

    LPAREN          shift and go to state 112


state 46

    (80) bdo -> DO . LBRACE cuerpo RBRACE bwhile

    LBRACE          shift and go to state 113


state 47

    (67) bfor -> FOR . LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def

    LPAREN          shift and go to state 114


state 48

    (77) bforeach -> FOREACH . LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def

    LPAREN          shift and go to state 115


state 49

    (85) btry -> TRY . LBRACE stc_bloque_def RBRACE catches

    LBRACE          shift and go to state 116


state 50

    (111) operaciones_mat -> operaciones_mat_par .

    $end            reduce using rule 111 (operaciones_mat -> operaciones_mat_par .)
    RBRACE          reduce using rule 111 (operaciones_mat -> operaciones_mat_par .)
    SEMI            reduce using rule 111 (operaciones_mat -> operaciones_mat_par .)


state 51

    (57) condicion_ifelse -> condicion_if .
    (58) condicion_ifelse -> condicion_if . condicion_else
    (59) condicion_ifelse -> condicion_if . condicion_elseif
    (60) condicion_ifelse -> condicion_if . condicion_elseif condicion_else
    (56) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (55) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    $end            reduce using rule 57 (condicion_ifelse -> condicion_if .)
    RBRACE          reduce using rule 57 (condicion_ifelse -> condicion_if .)
    SEMI            reduce using rule 57 (condicion_ifelse -> condicion_if .)
    ELSE            shift and go to state 53
    ELSEIF          shift and go to state 52

    condicion_else                 shift and go to state 117
    condicion_elseif               shift and go to state 118

state 52

    (55) condicion_elseif -> ELSEIF . LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    LPAREN          shift and go to state 119


state 53

    (56) condicion_else -> ELSE . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 120


state 54

    (81) bswitch -> SWITCH . LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE

    LPAREN          shift and go to state 121


state 55

    (82) bcase -> CASE . ENTERO COLON

    ENTERO          shift and go to state 122


state 56

    (150) bgoto -> GOTO . NOMBRE SEMI

    NOMBRE          shift and go to state 123


state 57

    (97) incrementos_mat -> MINUS_EQUAL .

    $end            reduce using rule 97 (incrementos_mat -> MINUS_EQUAL .)
    RBRACE          reduce using rule 97 (incrementos_mat -> MINUS_EQUAL .)
    SEMI            reduce using rule 97 (incrementos_mat -> MINUS_EQUAL .)


state 58

    (98) incrementos_mat -> MOD_EQUAL .

    $end            reduce using rule 98 (incrementos_mat -> MOD_EQUAL .)
    RBRACE          reduce using rule 98 (incrementos_mat -> MOD_EQUAL .)
    SEMI            reduce using rule 98 (incrementos_mat -> MOD_EQUAL .)


state 59

    (99) incrementos_mat -> MUL_EQUAL .

    $end            reduce using rule 99 (incrementos_mat -> MUL_EQUAL .)
    RBRACE          reduce using rule 99 (incrementos_mat -> MUL_EQUAL .)
    SEMI            reduce using rule 99 (incrementos_mat -> MUL_EQUAL .)


state 60

    (100) incrementos_mat -> PLUS_EQUAL .

    $end            reduce using rule 100 (incrementos_mat -> PLUS_EQUAL .)
    RBRACE          reduce using rule 100 (incrementos_mat -> PLUS_EQUAL .)
    SEMI            reduce using rule 100 (incrementos_mat -> PLUS_EQUAL .)


state 61

    (101) incrementos_mat -> DIV_EQUAL .

    $end            reduce using rule 101 (incrementos_mat -> DIV_EQUAL .)
    RBRACE          reduce using rule 101 (incrementos_mat -> DIV_EQUAL .)
    SEMI            reduce using rule 101 (incrementos_mat -> DIV_EQUAL .)


state 62

    (151) bcortes -> EXIT . SEMI

    SEMI            shift and go to state 124


state 63

    (152) bcortes -> BREAK . SEMI

    SEMI            shift and go to state 125


state 64

    (153) bcortes -> DEFAULT . SEMI

    SEMI            shift and go to state 126


state 65

    (154) bcortes -> CONTINUE . SEMI

    SEMI            shift and go to state 127


state 66

    (127) brand -> RAND . LPAREN ENTERO COMMA ENTERO RPAREN SEMI

    LPAREN          shift and go to state 128


state 67

    (146) escribir -> FWRITE . LPAREN NOMBRE COMMA CADENA RPAREN SEMI

    LPAREN          shift and go to state 129


state 68

    (147) btrim -> TRIM . LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI

    LPAREN          shift and go to state 130


state 69

    (155) otros -> SMALLER . NOMBRE GREATER

    NOMBRE          shift and go to state 131


state 70

    (132) breturn -> empty .

    $end            reduce using rule 132 (breturn -> empty .)
    RBRACE          reduce using rule 132 (breturn -> empty .)
    SEMI            reduce using rule 132 (breturn -> empty .)


state 71

    (133) breturn -> RETURN . SEMI
    (134) breturn -> RETURN . NULL SEMI
    (135) breturn -> RETURN . VARIABLE SEMI
    (136) breturn -> RETURN . BOOLEANO SEMI

    SEMI            shift and go to state 132
    NULL            shift and go to state 133
    VARIABLE        shift and go to state 134
    BOOLEANO        shift and go to state 135


state 72

    (46) tipoDato -> BOOLEANO .

    SUMA            reduce using rule 46 (tipoDato -> BOOLEANO .)
    RESTA           reduce using rule 46 (tipoDato -> BOOLEANO .)
    MULTIPLICACION  reduce using rule 46 (tipoDato -> BOOLEANO .)
    DIVISION        reduce using rule 46 (tipoDato -> BOOLEANO .)
    MODULO          reduce using rule 46 (tipoDato -> BOOLEANO .)
    SEMI            reduce using rule 46 (tipoDato -> BOOLEANO .)
    $end            reduce using rule 46 (tipoDato -> BOOLEANO .)
    RBRACE          reduce using rule 46 (tipoDato -> BOOLEANO .)
    RPAREN          reduce using rule 46 (tipoDato -> BOOLEANO .)
    SMALLER         reduce using rule 46 (tipoDato -> BOOLEANO .)
    GREATER         reduce using rule 46 (tipoDato -> BOOLEANO .)
    IS_SMALLER_OR_EQUAL reduce using rule 46 (tipoDato -> BOOLEANO .)
    IS_GREATER_OR_EQUAL reduce using rule 46 (tipoDato -> BOOLEANO .)
    AND             reduce using rule 46 (tipoDato -> BOOLEANO .)
    OR              reduce using rule 46 (tipoDato -> BOOLEANO .)
    XOR             reduce using rule 46 (tipoDato -> BOOLEANO .)
    IS_EQUAL        reduce using rule 46 (tipoDato -> BOOLEANO .)
    IS_NOT_EQUAL    reduce using rule 46 (tipoDato -> BOOLEANO .)
    IS_IDENTICAL    reduce using rule 46 (tipoDato -> BOOLEANO .)
    IS_NOT_IDENTICAL reduce using rule 46 (tipoDato -> BOOLEANO .)
    COMMA           reduce using rule 46 (tipoDato -> BOOLEANO .)


state 73

    (148) comment -> COMENTARIOS .

    $end            reduce using rule 148 (comment -> COMENTARIOS .)
    RBRACE          reduce using rule 148 (comment -> COMENTARIOS .)
    SEMI            reduce using rule 148 (comment -> COMENTARIOS .)


state 74

    (149) comment -> DOC_COMENTARIOS .

    $end            reduce using rule 149 (comment -> DOC_COMENTARIOS .)
    RBRACE          reduce using rule 149 (comment -> DOC_COMENTARIOS .)
    SEMI            reduce using rule 149 (comment -> DOC_COMENTARIOS .)


state 75

    (128) proteccion -> PUBLIC .

    VARIABLE        reduce using rule 128 (proteccion -> PUBLIC .)
    VAR             reduce using rule 128 (proteccion -> PUBLIC .)
    FUNCTION        reduce using rule 128 (proteccion -> PUBLIC .)
    PUBLIC          reduce using rule 128 (proteccion -> PUBLIC .)
    PRIVATE         reduce using rule 128 (proteccion -> PUBLIC .)
    PROTECTED       reduce using rule 128 (proteccion -> PUBLIC .)
    STATIC          reduce using rule 128 (proteccion -> PUBLIC .)


state 76

    (129) proteccion -> PRIVATE .

    VARIABLE        reduce using rule 129 (proteccion -> PRIVATE .)
    VAR             reduce using rule 129 (proteccion -> PRIVATE .)
    FUNCTION        reduce using rule 129 (proteccion -> PRIVATE .)
    PUBLIC          reduce using rule 129 (proteccion -> PRIVATE .)
    PRIVATE         reduce using rule 129 (proteccion -> PRIVATE .)
    PROTECTED       reduce using rule 129 (proteccion -> PRIVATE .)
    STATIC          reduce using rule 129 (proteccion -> PRIVATE .)


state 77

    (130) proteccion -> PROTECTED .

    VARIABLE        reduce using rule 130 (proteccion -> PROTECTED .)
    VAR             reduce using rule 130 (proteccion -> PROTECTED .)
    FUNCTION        reduce using rule 130 (proteccion -> PROTECTED .)
    PUBLIC          reduce using rule 130 (proteccion -> PROTECTED .)
    PRIVATE         reduce using rule 130 (proteccion -> PROTECTED .)
    PROTECTED       reduce using rule 130 (proteccion -> PROTECTED .)
    STATIC          reduce using rule 130 (proteccion -> PROTECTED .)


state 78

    (131) proteccion -> STATIC .

    VARIABLE        reduce using rule 131 (proteccion -> STATIC .)
    VAR             reduce using rule 131 (proteccion -> STATIC .)
    FUNCTION        reduce using rule 131 (proteccion -> STATIC .)
    PUBLIC          reduce using rule 131 (proteccion -> STATIC .)
    PRIVATE         reduce using rule 131 (proteccion -> STATIC .)
    PROTECTED       reduce using rule 131 (proteccion -> STATIC .)
    STATIC          reduce using rule 131 (proteccion -> STATIC .)


state 79

    (121) funcion_nparams -> FUNCTION . NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (125) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN stc_bloque_def
    (126) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (124) funcion_void -> FUNCTION . NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE

    NOMBRE          shift and go to state 136


state 80

    (41) valor -> tipoDato .

    SUMA            reduce using rule 41 (valor -> tipoDato .)
    RESTA           reduce using rule 41 (valor -> tipoDato .)
    MULTIPLICACION  reduce using rule 41 (valor -> tipoDato .)
    DIVISION        reduce using rule 41 (valor -> tipoDato .)
    MODULO          reduce using rule 41 (valor -> tipoDato .)
    SEMI            reduce using rule 41 (valor -> tipoDato .)
    $end            reduce using rule 41 (valor -> tipoDato .)
    RBRACE          reduce using rule 41 (valor -> tipoDato .)
    RPAREN          reduce using rule 41 (valor -> tipoDato .)
    SMALLER         reduce using rule 41 (valor -> tipoDato .)
    GREATER         reduce using rule 41 (valor -> tipoDato .)
    IS_SMALLER_OR_EQUAL reduce using rule 41 (valor -> tipoDato .)
    IS_GREATER_OR_EQUAL reduce using rule 41 (valor -> tipoDato .)
    AND             reduce using rule 41 (valor -> tipoDato .)
    OR              reduce using rule 41 (valor -> tipoDato .)
    XOR             reduce using rule 41 (valor -> tipoDato .)
    IS_EQUAL        reduce using rule 41 (valor -> tipoDato .)
    IS_NOT_EQUAL    reduce using rule 41 (valor -> tipoDato .)
    IS_IDENTICAL    reduce using rule 41 (valor -> tipoDato .)
    IS_NOT_IDENTICAL reduce using rule 41 (valor -> tipoDato .)
    COMMA           reduce using rule 41 (valor -> tipoDato .)


state 81

    (54) condicion_if -> IF . LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    LPAREN          shift and go to state 137


state 82

    (44) tipoDato -> numero .

    SUMA            reduce using rule 44 (tipoDato -> numero .)
    RESTA           reduce using rule 44 (tipoDato -> numero .)
    MULTIPLICACION  reduce using rule 44 (tipoDato -> numero .)
    DIVISION        reduce using rule 44 (tipoDato -> numero .)
    MODULO          reduce using rule 44 (tipoDato -> numero .)
    SEMI            reduce using rule 44 (tipoDato -> numero .)
    $end            reduce using rule 44 (tipoDato -> numero .)
    RBRACE          reduce using rule 44 (tipoDato -> numero .)
    RPAREN          reduce using rule 44 (tipoDato -> numero .)
    SMALLER         reduce using rule 44 (tipoDato -> numero .)
    GREATER         reduce using rule 44 (tipoDato -> numero .)
    IS_SMALLER_OR_EQUAL reduce using rule 44 (tipoDato -> numero .)
    IS_GREATER_OR_EQUAL reduce using rule 44 (tipoDato -> numero .)
    AND             reduce using rule 44 (tipoDato -> numero .)
    OR              reduce using rule 44 (tipoDato -> numero .)
    XOR             reduce using rule 44 (tipoDato -> numero .)
    IS_EQUAL        reduce using rule 44 (tipoDato -> numero .)
    IS_NOT_EQUAL    reduce using rule 44 (tipoDato -> numero .)
    IS_IDENTICAL    reduce using rule 44 (tipoDato -> numero .)
    IS_NOT_IDENTICAL reduce using rule 44 (tipoDato -> numero .)
    COMMA           reduce using rule 44 (tipoDato -> numero .)


state 83

    (48) numero -> DECIMAL .

    SUMA            reduce using rule 48 (numero -> DECIMAL .)
    RESTA           reduce using rule 48 (numero -> DECIMAL .)
    MULTIPLICACION  reduce using rule 48 (numero -> DECIMAL .)
    DIVISION        reduce using rule 48 (numero -> DECIMAL .)
    MODULO          reduce using rule 48 (numero -> DECIMAL .)
    SEMI            reduce using rule 48 (numero -> DECIMAL .)
    $end            reduce using rule 48 (numero -> DECIMAL .)
    RBRACE          reduce using rule 48 (numero -> DECIMAL .)
    RPAREN          reduce using rule 48 (numero -> DECIMAL .)
    SMALLER         reduce using rule 48 (numero -> DECIMAL .)
    GREATER         reduce using rule 48 (numero -> DECIMAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 48 (numero -> DECIMAL .)
    IS_GREATER_OR_EQUAL reduce using rule 48 (numero -> DECIMAL .)
    AND             reduce using rule 48 (numero -> DECIMAL .)
    OR              reduce using rule 48 (numero -> DECIMAL .)
    XOR             reduce using rule 48 (numero -> DECIMAL .)
    IS_EQUAL        reduce using rule 48 (numero -> DECIMAL .)
    IS_NOT_EQUAL    reduce using rule 48 (numero -> DECIMAL .)
    IS_IDENTICAL    reduce using rule 48 (numero -> DECIMAL .)
    IS_NOT_IDENTICAL reduce using rule 48 (numero -> DECIMAL .)
    COMMA           reduce using rule 48 (numero -> DECIMAL .)


state 84

    (49) imprimir -> ECHO valor . SEMI

    SEMI            shift and go to state 138


state 85

    (52) imprimir -> ECHO NOMBRE . LBRACKET ENTERO RBRACKET SEMI

    LBRACKET        shift and go to state 139


state 86

    (53) imprimir -> ECHO bconcat .

    $end            reduce using rule 53 (imprimir -> ECHO bconcat .)
    RBRACE          reduce using rule 53 (imprimir -> ECHO bconcat .)
    SEMI            reduce using rule 53 (imprimir -> ECHO bconcat .)


state 87

    (42) valor -> bcolas .

    SEMI            reduce using rule 42 (valor -> bcolas .)
    SUMA            reduce using rule 42 (valor -> bcolas .)
    RESTA           reduce using rule 42 (valor -> bcolas .)
    MULTIPLICACION  reduce using rule 42 (valor -> bcolas .)
    DIVISION        reduce using rule 42 (valor -> bcolas .)
    MODULO          reduce using rule 42 (valor -> bcolas .)
    $end            reduce using rule 42 (valor -> bcolas .)
    RBRACE          reduce using rule 42 (valor -> bcolas .)
    RPAREN          reduce using rule 42 (valor -> bcolas .)
    SMALLER         reduce using rule 42 (valor -> bcolas .)
    GREATER         reduce using rule 42 (valor -> bcolas .)
    IS_SMALLER_OR_EQUAL reduce using rule 42 (valor -> bcolas .)
    IS_GREATER_OR_EQUAL reduce using rule 42 (valor -> bcolas .)
    AND             reduce using rule 42 (valor -> bcolas .)
    OR              reduce using rule 42 (valor -> bcolas .)
    XOR             reduce using rule 42 (valor -> bcolas .)
    IS_EQUAL        reduce using rule 42 (valor -> bcolas .)
    IS_NOT_EQUAL    reduce using rule 42 (valor -> bcolas .)
    IS_IDENTICAL    reduce using rule 42 (valor -> bcolas .)
    IS_NOT_IDENTICAL reduce using rule 42 (valor -> bcolas .)
    COMMA           reduce using rule 42 (valor -> bcolas .)


state 88

    (43) valor -> bpila .

    SEMI            reduce using rule 43 (valor -> bpila .)
    SUMA            reduce using rule 43 (valor -> bpila .)
    RESTA           reduce using rule 43 (valor -> bpila .)
    MULTIPLICACION  reduce using rule 43 (valor -> bpila .)
    DIVISION        reduce using rule 43 (valor -> bpila .)
    MODULO          reduce using rule 43 (valor -> bpila .)
    $end            reduce using rule 43 (valor -> bpila .)
    RBRACE          reduce using rule 43 (valor -> bpila .)
    RPAREN          reduce using rule 43 (valor -> bpila .)
    SMALLER         reduce using rule 43 (valor -> bpila .)
    GREATER         reduce using rule 43 (valor -> bpila .)
    IS_SMALLER_OR_EQUAL reduce using rule 43 (valor -> bpila .)
    IS_GREATER_OR_EQUAL reduce using rule 43 (valor -> bpila .)
    AND             reduce using rule 43 (valor -> bpila .)
    OR              reduce using rule 43 (valor -> bpila .)
    XOR             reduce using rule 43 (valor -> bpila .)
    IS_EQUAL        reduce using rule 43 (valor -> bpila .)
    IS_NOT_EQUAL    reduce using rule 43 (valor -> bpila .)
    IS_IDENTICAL    reduce using rule 43 (valor -> bpila .)
    IS_NOT_IDENTICAL reduce using rule 43 (valor -> bpila .)
    COMMA           reduce using rule 43 (valor -> bpila .)


state 89

    (156) bconcat -> CADENA . CONCAT CADENA SEMI
    (160) bconcat -> CADENA . CONCAT_EQUAL CADENA SEMI
    (45) tipoDato -> CADENA .

    CONCAT          shift and go to state 140
    CONCAT_EQUAL    shift and go to state 141
    SEMI            reduce using rule 45 (tipoDato -> CADENA .)


state 90

    (157) bconcat -> VARIABLE . CONCAT VARIABLE SEMI
    (158) bconcat -> VARIABLE . CONCAT CADENA SEMI
    (159) bconcat -> VARIABLE . CONCAT_EQUAL CADENA SEMI
    (142) bcolas -> VARIABLE . EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> VARIABLE . EQUALS NEW SPLSTACK LPAREN RPAREN SEMI

    CONCAT          shift and go to state 142
    CONCAT_EQUAL    shift and go to state 143
    EQUALS          shift and go to state 144


state 91

    (109) operaciones_mat -> valor operadores . valor
    (110) operaciones_mat -> valor operadores . operaciones_mat
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (109) operaciones_mat -> . valor operadores valor
    (110) operaciones_mat -> . valor operadores operaciones_mat
    (111) operaciones_mat -> . operaciones_mat_par
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (112) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (113) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    VARIABLE        shift and go to state 99
    LPAREN          shift and go to state 34
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    valor                          shift and go to state 145
    operaciones_mat                shift and go to state 146
    tipoDato                       shift and go to state 80
    bcolas                         shift and go to state 87
    bpila                          shift and go to state 88
    operaciones_mat_par            shift and go to state 50
    numero                         shift and go to state 82

state 92

    (88) operadores -> SUMA .

    CADENA          reduce using rule 88 (operadores -> SUMA .)
    BOOLEANO        reduce using rule 88 (operadores -> SUMA .)
    VARIABLE        reduce using rule 88 (operadores -> SUMA .)
    LPAREN          reduce using rule 88 (operadores -> SUMA .)
    ENTERO          reduce using rule 88 (operadores -> SUMA .)
    DECIMAL         reduce using rule 88 (operadores -> SUMA .)


state 93

    (89) operadores -> RESTA .

    CADENA          reduce using rule 89 (operadores -> RESTA .)
    BOOLEANO        reduce using rule 89 (operadores -> RESTA .)
    VARIABLE        reduce using rule 89 (operadores -> RESTA .)
    LPAREN          reduce using rule 89 (operadores -> RESTA .)
    ENTERO          reduce using rule 89 (operadores -> RESTA .)
    DECIMAL         reduce using rule 89 (operadores -> RESTA .)


state 94

    (90) operadores -> MULTIPLICACION .

    CADENA          reduce using rule 90 (operadores -> MULTIPLICACION .)
    BOOLEANO        reduce using rule 90 (operadores -> MULTIPLICACION .)
    VARIABLE        reduce using rule 90 (operadores -> MULTIPLICACION .)
    LPAREN          reduce using rule 90 (operadores -> MULTIPLICACION .)
    ENTERO          reduce using rule 90 (operadores -> MULTIPLICACION .)
    DECIMAL         reduce using rule 90 (operadores -> MULTIPLICACION .)


state 95

    (91) operadores -> DIVISION .

    CADENA          reduce using rule 91 (operadores -> DIVISION .)
    BOOLEANO        reduce using rule 91 (operadores -> DIVISION .)
    VARIABLE        reduce using rule 91 (operadores -> DIVISION .)
    LPAREN          reduce using rule 91 (operadores -> DIVISION .)
    ENTERO          reduce using rule 91 (operadores -> DIVISION .)
    DECIMAL         reduce using rule 91 (operadores -> DIVISION .)


state 96

    (92) operadores -> MODULO .

    CADENA          reduce using rule 92 (operadores -> MODULO .)
    BOOLEANO        reduce using rule 92 (operadores -> MODULO .)
    VARIABLE        reduce using rule 92 (operadores -> MODULO .)
    LPAREN          reduce using rule 92 (operadores -> MODULO .)
    ENTERO          reduce using rule 92 (operadores -> MODULO .)
    DECIMAL         reduce using rule 92 (operadores -> MODULO .)


state 97

    (50) imprimir -> PRINT valor . SEMI

    SEMI            shift and go to state 147


state 98

    (51) imprimir -> PRINT LPAREN . valor RPAREN SEMI
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    VARIABLE        shift and go to state 99
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    valor                          shift and go to state 148
    tipoDato                       shift and go to state 80
    bcolas                         shift and go to state 87
    bpila                          shift and go to state 88
    numero                         shift and go to state 82

state 99

    (142) bcolas -> VARIABLE . EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> VARIABLE . EQUALS NEW SPLSTACK LPAREN RPAREN SEMI

    EQUALS          shift and go to state 144


state 100

    (112) operaciones_mat_par -> LPAREN valor . operadores valor RPAREN
    (113) operaciones_mat_par -> LPAREN valor . operadores operaciones_mat_par RPAREN
    (88) operadores -> . SUMA
    (89) operadores -> . RESTA
    (90) operadores -> . MULTIPLICACION
    (91) operadores -> . DIVISION
    (92) operadores -> . MODULO

    SUMA            shift and go to state 92
    RESTA           shift and go to state 93
    MULTIPLICACION  shift and go to state 94
    DIVISION        shift and go to state 95
    MODULO          shift and go to state 96

    operadores                     shift and go to state 149

state 101

    (30) asignacion -> VARIABLE EQUALS . valor SEMI
    (33) asignacion -> VARIABLE EQUALS . brand
    (34) asignacion -> VARIABLE EQUALS . escribir
    (35) asignacion -> VARIABLE EQUALS . btrim
    (36) asignacion -> VARIABLE EQUALS . lectura
    (37) asignacion -> VARIABLE EQUALS . bconcat
    (38) asignacion_array -> VARIABLE EQUALS . array_def SEMI
    (142) bcolas -> VARIABLE EQUALS . NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> VARIABLE EQUALS . NEW SPLSTACK LPAREN RPAREN SEMI
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (127) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (146) escribir -> . FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI
    (147) btrim -> . TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
    (144) lectura -> . READLINE LPAREN CADENA RPAREN SEMI
    (145) lectura -> . READLINE LPAREN RPAREN SEMI
    (156) bconcat -> . CADENA CONCAT CADENA SEMI
    (157) bconcat -> . VARIABLE CONCAT VARIABLE SEMI
    (158) bconcat -> . VARIABLE CONCAT CADENA SEMI
    (159) bconcat -> . VARIABLE CONCAT_EQUAL CADENA SEMI
    (160) bconcat -> . CADENA CONCAT_EQUAL CADENA SEMI
    (137) array_def -> . ARRAY LPAREN RPAREN
    (138) array_def -> . ARRAY LPAREN array_elmnt RPAREN
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    NEW             shift and go to state 157
    RAND            shift and go to state 66
    FWRITE          shift and go to state 67
    TRIM            shift and go to state 68
    READLINE        shift and go to state 44
    CADENA          shift and go to state 89
    VARIABLE        shift and go to state 90
    ARRAY           shift and go to state 158
    BOOLEANO        shift and go to state 72
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    valor                          shift and go to state 150
    brand                          shift and go to state 151
    escribir                       shift and go to state 152
    btrim                          shift and go to state 153
    lectura                        shift and go to state 154
    bconcat                        shift and go to state 155
    array_def                      shift and go to state 156
    tipoDato                       shift and go to state 80
    bcolas                         shift and go to state 87
    bpila                          shift and go to state 88
    numero                         shift and go to state 82

state 102

    (169) casting -> VARIABLE LPAREN . tiposCast RPAREN VARIABLE SEMI
    (161) tiposCast -> . STRING
    (162) tiposCast -> . BOOL
    (163) tiposCast -> . DOUBLE
    (164) tiposCast -> . FLOAT
    (165) tiposCast -> . ARRAY
    (166) tiposCast -> . OBJECT
    (167) tiposCast -> . INTEGER
    (168) tiposCast -> . INT

    STRING          shift and go to state 160
    BOOL            shift and go to state 161
    DOUBLE          shift and go to state 162
    FLOAT           shift and go to state 163
    ARRAY           shift and go to state 164
    OBJECT          shift and go to state 165
    INTEGER         shift and go to state 166
    INT             shift and go to state 167

    tiposCast                      shift and go to state 159

state 103

    (31) asignacion -> VAR asignacion .

    $end            reduce using rule 31 (asignacion -> VAR asignacion .)
    RBRACE          reduce using rule 31 (asignacion -> VAR asignacion .)
    SEMI            reduce using rule 31 (asignacion -> VAR asignacion .)
    VARIABLE        reduce using rule 31 (asignacion -> VAR asignacion .)
    CADENA          reduce using rule 31 (asignacion -> VAR asignacion .)
    BOOLEANO        reduce using rule 31 (asignacion -> VAR asignacion .)
    ENTERO          reduce using rule 31 (asignacion -> VAR asignacion .)
    DECIMAL         reduce using rule 31 (asignacion -> VAR asignacion .)
    RPAREN          reduce using rule 31 (asignacion -> VAR asignacion .)
    COMMA           reduce using rule 31 (asignacion -> VAR asignacion .)


state 104

    (30) asignacion -> VARIABLE . EQUALS valor SEMI
    (33) asignacion -> VARIABLE . EQUALS brand
    (34) asignacion -> VARIABLE . EQUALS escribir
    (35) asignacion -> VARIABLE . EQUALS btrim
    (36) asignacion -> VARIABLE . EQUALS lectura
    (37) asignacion -> VARIABLE . EQUALS bconcat

    EQUALS          shift and go to state 168


state 105

    (32) asignacion -> proteccion . asignacion
    (30) asignacion -> . VARIABLE EQUALS valor SEMI
    (31) asignacion -> . VAR asignacion
    (32) asignacion -> . proteccion asignacion
    (33) asignacion -> . VARIABLE EQUALS brand
    (34) asignacion -> . VARIABLE EQUALS escribir
    (35) asignacion -> . VARIABLE EQUALS btrim
    (36) asignacion -> . VARIABLE EQUALS lectura
    (37) asignacion -> . VARIABLE EQUALS bconcat
    (128) proteccion -> . PUBLIC
    (129) proteccion -> . PRIVATE
    (130) proteccion -> . PROTECTED
    (131) proteccion -> . STATIC

    VARIABLE        shift and go to state 104
    VAR             shift and go to state 37
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78

    proteccion                     shift and go to state 105
    asignacion                     shift and go to state 106

state 106

    (32) asignacion -> proteccion asignacion .

    $end            reduce using rule 32 (asignacion -> proteccion asignacion .)
    RBRACE          reduce using rule 32 (asignacion -> proteccion asignacion .)
    SEMI            reduce using rule 32 (asignacion -> proteccion asignacion .)
    VARIABLE        reduce using rule 32 (asignacion -> proteccion asignacion .)
    CADENA          reduce using rule 32 (asignacion -> proteccion asignacion .)
    BOOLEANO        reduce using rule 32 (asignacion -> proteccion asignacion .)
    ENTERO          reduce using rule 32 (asignacion -> proteccion asignacion .)
    DECIMAL         reduce using rule 32 (asignacion -> proteccion asignacion .)
    RPAREN          reduce using rule 32 (asignacion -> proteccion asignacion .)
    COMMA           reduce using rule 32 (asignacion -> proteccion asignacion .)


state 107

    (115) funciones -> proteccion funcion_nparams .

    $end            reduce using rule 115 (funciones -> proteccion funcion_nparams .)
    RBRACE          reduce using rule 115 (funciones -> proteccion funcion_nparams .)
    SEMI            reduce using rule 115 (funciones -> proteccion funcion_nparams .)


state 108

    (117) funciones -> proteccion funcion_blank .

    $end            reduce using rule 117 (funciones -> proteccion funcion_blank .)
    RBRACE          reduce using rule 117 (funciones -> proteccion funcion_blank .)
    SEMI            reduce using rule 117 (funciones -> proteccion funcion_blank .)


state 109

    (121) funcion_nparams -> FUNCTION . NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (125) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN stc_bloque_def
    (126) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN LBRACE empty RBRACE

    NOMBRE          shift and go to state 169


state 110

    (39) constante -> DEFINE LPAREN . CADENA COMMA valor RPAREN SEMI
    (40) constante -> DEFINE LPAREN . NOMBRE COMMA ARRAY RPAREN SEMI

    CADENA          shift and go to state 170
    NOMBRE          shift and go to state 171


state 111

    (144) lectura -> READLINE LPAREN . CADENA RPAREN SEMI
    (145) lectura -> READLINE LPAREN . RPAREN SEMI

    CADENA          shift and go to state 172
    RPAREN          shift and go to state 173


state 112

    (78) bwhile -> WHILE LPAREN . condicion RPAREN LBRACE stc_bloque RBRACE
    (79) bwhile -> WHILE LPAREN . condicion RPAREN COLON stc_bloque
    (61) condicion -> . VARIABLE operador_logico VARIABLE
    (62) condicion -> . valor operador_logico valor
    (63) condicion -> . VARIABLE operador_logico valor
    (64) condicion -> . VARIABLE condicion_booleana VARIABLE
    (65) condicion -> . valor condicion_booleana valor
    (66) condicion -> . VARIABLE condicion_booleana valor
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    VARIABLE        shift and go to state 175
    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    condicion                      shift and go to state 174
    valor                          shift and go to state 176
    tipoDato                       shift and go to state 80
    bcolas                         shift and go to state 87
    bpila                          shift and go to state 88
    numero                         shift and go to state 82

state 113

    (80) bdo -> DO LBRACE . cuerpo RBRACE bwhile
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . bwhile
    (8) cuerpo -> . bdo
    (9) cuerpo -> . bfor
    (10) cuerpo -> . bforeach
    (11) cuerpo -> . btry
    (12) cuerpo -> . operaciones_mat
    (13) cuerpo -> . condicion_ifelse
    (14) cuerpo -> . condicion_elseif
    (15) cuerpo -> . condicion_else
    (16) cuerpo -> . bswitch
    (17) cuerpo -> . bcase
    (18) cuerpo -> . bgoto
    (19) cuerpo -> . bcolas
    (20) cuerpo -> . bpila
    (21) cuerpo -> . incrementos_mat
    (22) cuerpo -> . bcortes
    (23) cuerpo -> . brand
    (24) cuerpo -> . escribir
    (25) cuerpo -> . btrim
    (26) cuerpo -> . otros
    (27) cuerpo -> . breturn
    (28) cuerpo -> . comment
    (29) cuerpo -> . casting
    (49) imprimir -> . ECHO valor SEMI
    (50) imprimir -> . PRINT valor SEMI
    (51) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (52) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (53) imprimir -> . ECHO bconcat
    (30) asignacion -> . VARIABLE EQUALS valor SEMI
    (31) asignacion -> . VAR asignacion
    (32) asignacion -> . proteccion asignacion
    (33) asignacion -> . VARIABLE EQUALS brand
    (34) asignacion -> . VARIABLE EQUALS escribir
    (35) asignacion -> . VARIABLE EQUALS btrim
    (36) asignacion -> . VARIABLE EQUALS lectura
    (37) asignacion -> . VARIABLE EQUALS bconcat
    (38) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (114) funciones -> . funcion_nparams
    (115) funciones -> . proteccion funcion_nparams
    (116) funciones -> . funcion_blank
    (117) funciones -> . proteccion funcion_blank
    (118) funciones -> . funcion_void
    (39) constante -> . DEFINE LPAREN CADENA COMMA valor RPAREN SEMI
    (40) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (144) lectura -> . READLINE LPAREN CADENA RPAREN SEMI
    (145) lectura -> . READLINE LPAREN RPAREN SEMI
    (78) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (79) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (80) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (67) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (77) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (85) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (109) operaciones_mat -> . valor operadores valor
    (110) operaciones_mat -> . valor operadores operaciones_mat
    (111) operaciones_mat -> . operaciones_mat_par
    (57) condicion_ifelse -> . condicion_if
    (58) condicion_ifelse -> . condicion_if condicion_else
    (59) condicion_ifelse -> . condicion_if condicion_elseif
    (60) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (55) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (56) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (81) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE
    (82) bcase -> . CASE ENTERO COLON
    (150) bgoto -> . GOTO NOMBRE SEMI
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (97) incrementos_mat -> . MINUS_EQUAL
    (98) incrementos_mat -> . MOD_EQUAL
    (99) incrementos_mat -> . MUL_EQUAL
    (100) incrementos_mat -> . PLUS_EQUAL
    (101) incrementos_mat -> . DIV_EQUAL
    (151) bcortes -> . EXIT SEMI
    (152) bcortes -> . BREAK SEMI
    (153) bcortes -> . DEFAULT SEMI
    (154) bcortes -> . CONTINUE SEMI
    (127) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (146) escribir -> . FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI
    (147) btrim -> . TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
    (155) otros -> . SMALLER NOMBRE GREATER
    (132) breturn -> . empty
    (133) breturn -> . RETURN SEMI
    (134) breturn -> . RETURN NULL SEMI
    (135) breturn -> . RETURN VARIABLE SEMI
    (136) breturn -> . RETURN BOOLEANO SEMI
    (148) comment -> . COMENTARIOS
    (149) comment -> . DOC_COMENTARIOS
    (169) casting -> . VARIABLE LPAREN tiposCast RPAREN VARIABLE SEMI
    (128) proteccion -> . PUBLIC
    (129) proteccion -> . PRIVATE
    (130) proteccion -> . PROTECTED
    (131) proteccion -> . STATIC
    (121) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (125) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (126) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (124) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (112) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (113) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (54) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (141) empty -> .
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    ECHO            shift and go to state 31
    PRINT           shift and go to state 33
    VARIABLE        shift and go to state 36
    VAR             shift and go to state 37
    DEFINE          shift and go to state 42
    READLINE        shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    FOREACH         shift and go to state 48
    TRY             shift and go to state 49
    ELSEIF          shift and go to state 52
    ELSE            shift and go to state 53
    SWITCH          shift and go to state 54
    CASE            shift and go to state 55
    GOTO            shift and go to state 56
    MINUS_EQUAL     shift and go to state 57
    MOD_EQUAL       shift and go to state 58
    MUL_EQUAL       shift and go to state 59
    PLUS_EQUAL      shift and go to state 60
    DIV_EQUAL       shift and go to state 61
    EXIT            shift and go to state 62
    BREAK           shift and go to state 63
    DEFAULT         shift and go to state 64
    CONTINUE        shift and go to state 65
    RAND            shift and go to state 66
    FWRITE          shift and go to state 67
    TRIM            shift and go to state 68
    SMALLER         shift and go to state 69
    RETURN          shift and go to state 71
    COMENTARIOS     shift and go to state 73
    DOC_COMENTARIOS shift and go to state 74
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78
    FUNCTION        shift and go to state 79
    LPAREN          shift and go to state 34
    IF              shift and go to state 81
    RBRACE          reduce using rule 141 (empty -> .)
    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    cuerpo                         shift and go to state 177
    bwhile                         shift and go to state 8
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    bdo                            shift and go to state 9
    bfor                           shift and go to state 10
    bforeach                       shift and go to state 11
    btry                           shift and go to state 12
    operaciones_mat                shift and go to state 13
    condicion_ifelse               shift and go to state 14
    condicion_elseif               shift and go to state 15
    condicion_else                 shift and go to state 16
    bswitch                        shift and go to state 17
    bcase                          shift and go to state 18
    bgoto                          shift and go to state 19
    bcolas                         shift and go to state 20
    bpila                          shift and go to state 21
    incrementos_mat                shift and go to state 22
    bcortes                        shift and go to state 23
    brand                          shift and go to state 24
    escribir                       shift and go to state 25
    btrim                          shift and go to state 26
    otros                          shift and go to state 27
    breturn                        shift and go to state 28
    comment                        shift and go to state 29
    casting                        shift and go to state 30
    valor                          shift and go to state 32
    proteccion                     shift and go to state 38
    funcion_nparams                shift and go to state 39
    funcion_blank                  shift and go to state 40
    funcion_void                   shift and go to state 41
    operaciones_mat_par            shift and go to state 50
    condicion_if                   shift and go to state 51
    empty                          shift and go to state 70
    tipoDato                       shift and go to state 80
    numero                         shift and go to state 82

state 114

    (67) bfor -> FOR LPAREN . asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (30) asignacion -> . VARIABLE EQUALS valor SEMI
    (31) asignacion -> . VAR asignacion
    (32) asignacion -> . proteccion asignacion
    (33) asignacion -> . VARIABLE EQUALS brand
    (34) asignacion -> . VARIABLE EQUALS escribir
    (35) asignacion -> . VARIABLE EQUALS btrim
    (36) asignacion -> . VARIABLE EQUALS lectura
    (37) asignacion -> . VARIABLE EQUALS bconcat
    (128) proteccion -> . PUBLIC
    (129) proteccion -> . PRIVATE
    (130) proteccion -> . PROTECTED
    (131) proteccion -> . STATIC

    VARIABLE        shift and go to state 104
    VAR             shift and go to state 37
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78

    asignacion                     shift and go to state 178
    proteccion                     shift and go to state 105

state 115

    (77) bforeach -> FOREACH LPAREN . VARIABLE AS VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 179


state 116

    (85) btry -> TRY LBRACE . stc_bloque_def RBRACE catches
    (70) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 180

    stc_bloque_def                 shift and go to state 181

state 117

    (58) condicion_ifelse -> condicion_if condicion_else .

    $end            reduce using rule 58 (condicion_ifelse -> condicion_if condicion_else .)
    RBRACE          reduce using rule 58 (condicion_ifelse -> condicion_if condicion_else .)
    SEMI            reduce using rule 58 (condicion_ifelse -> condicion_if condicion_else .)


state 118

    (59) condicion_ifelse -> condicion_if condicion_elseif .
    (60) condicion_ifelse -> condicion_if condicion_elseif . condicion_else
    (56) condicion_else -> . ELSE LBRACE cuerpo RBRACE

    $end            reduce using rule 59 (condicion_ifelse -> condicion_if condicion_elseif .)
    RBRACE          reduce using rule 59 (condicion_ifelse -> condicion_if condicion_elseif .)
    SEMI            reduce using rule 59 (condicion_ifelse -> condicion_if condicion_elseif .)
    ELSE            shift and go to state 53

    condicion_else                 shift and go to state 182

state 119

    (55) condicion_elseif -> ELSEIF LPAREN . condicion RPAREN LBRACE cuerpo RBRACE
    (61) condicion -> . VARIABLE operador_logico VARIABLE
    (62) condicion -> . valor operador_logico valor
    (63) condicion -> . VARIABLE operador_logico valor
    (64) condicion -> . VARIABLE condicion_booleana VARIABLE
    (65) condicion -> . valor condicion_booleana valor
    (66) condicion -> . VARIABLE condicion_booleana valor
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    VARIABLE        shift and go to state 175
    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    condicion                      shift and go to state 183
    valor                          shift and go to state 176
    tipoDato                       shift and go to state 80
    bcolas                         shift and go to state 87
    bpila                          shift and go to state 88
    numero                         shift and go to state 82

state 120

    (56) condicion_else -> ELSE LBRACE . cuerpo RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . bwhile
    (8) cuerpo -> . bdo
    (9) cuerpo -> . bfor
    (10) cuerpo -> . bforeach
    (11) cuerpo -> . btry
    (12) cuerpo -> . operaciones_mat
    (13) cuerpo -> . condicion_ifelse
    (14) cuerpo -> . condicion_elseif
    (15) cuerpo -> . condicion_else
    (16) cuerpo -> . bswitch
    (17) cuerpo -> . bcase
    (18) cuerpo -> . bgoto
    (19) cuerpo -> . bcolas
    (20) cuerpo -> . bpila
    (21) cuerpo -> . incrementos_mat
    (22) cuerpo -> . bcortes
    (23) cuerpo -> . brand
    (24) cuerpo -> . escribir
    (25) cuerpo -> . btrim
    (26) cuerpo -> . otros
    (27) cuerpo -> . breturn
    (28) cuerpo -> . comment
    (29) cuerpo -> . casting
    (49) imprimir -> . ECHO valor SEMI
    (50) imprimir -> . PRINT valor SEMI
    (51) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (52) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (53) imprimir -> . ECHO bconcat
    (30) asignacion -> . VARIABLE EQUALS valor SEMI
    (31) asignacion -> . VAR asignacion
    (32) asignacion -> . proteccion asignacion
    (33) asignacion -> . VARIABLE EQUALS brand
    (34) asignacion -> . VARIABLE EQUALS escribir
    (35) asignacion -> . VARIABLE EQUALS btrim
    (36) asignacion -> . VARIABLE EQUALS lectura
    (37) asignacion -> . VARIABLE EQUALS bconcat
    (38) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (114) funciones -> . funcion_nparams
    (115) funciones -> . proteccion funcion_nparams
    (116) funciones -> . funcion_blank
    (117) funciones -> . proteccion funcion_blank
    (118) funciones -> . funcion_void
    (39) constante -> . DEFINE LPAREN CADENA COMMA valor RPAREN SEMI
    (40) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (144) lectura -> . READLINE LPAREN CADENA RPAREN SEMI
    (145) lectura -> . READLINE LPAREN RPAREN SEMI
    (78) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (79) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (80) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (67) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (77) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (85) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (109) operaciones_mat -> . valor operadores valor
    (110) operaciones_mat -> . valor operadores operaciones_mat
    (111) operaciones_mat -> . operaciones_mat_par
    (57) condicion_ifelse -> . condicion_if
    (58) condicion_ifelse -> . condicion_if condicion_else
    (59) condicion_ifelse -> . condicion_if condicion_elseif
    (60) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (55) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (56) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (81) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE
    (82) bcase -> . CASE ENTERO COLON
    (150) bgoto -> . GOTO NOMBRE SEMI
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (97) incrementos_mat -> . MINUS_EQUAL
    (98) incrementos_mat -> . MOD_EQUAL
    (99) incrementos_mat -> . MUL_EQUAL
    (100) incrementos_mat -> . PLUS_EQUAL
    (101) incrementos_mat -> . DIV_EQUAL
    (151) bcortes -> . EXIT SEMI
    (152) bcortes -> . BREAK SEMI
    (153) bcortes -> . DEFAULT SEMI
    (154) bcortes -> . CONTINUE SEMI
    (127) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (146) escribir -> . FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI
    (147) btrim -> . TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
    (155) otros -> . SMALLER NOMBRE GREATER
    (132) breturn -> . empty
    (133) breturn -> . RETURN SEMI
    (134) breturn -> . RETURN NULL SEMI
    (135) breturn -> . RETURN VARIABLE SEMI
    (136) breturn -> . RETURN BOOLEANO SEMI
    (148) comment -> . COMENTARIOS
    (149) comment -> . DOC_COMENTARIOS
    (169) casting -> . VARIABLE LPAREN tiposCast RPAREN VARIABLE SEMI
    (128) proteccion -> . PUBLIC
    (129) proteccion -> . PRIVATE
    (130) proteccion -> . PROTECTED
    (131) proteccion -> . STATIC
    (121) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (125) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (126) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (124) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (112) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (113) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (54) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (141) empty -> .
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    ECHO            shift and go to state 31
    PRINT           shift and go to state 33
    VARIABLE        shift and go to state 36
    VAR             shift and go to state 37
    DEFINE          shift and go to state 42
    READLINE        shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    FOREACH         shift and go to state 48
    TRY             shift and go to state 49
    ELSEIF          shift and go to state 52
    ELSE            shift and go to state 53
    SWITCH          shift and go to state 54
    CASE            shift and go to state 55
    GOTO            shift and go to state 56
    MINUS_EQUAL     shift and go to state 57
    MOD_EQUAL       shift and go to state 58
    MUL_EQUAL       shift and go to state 59
    PLUS_EQUAL      shift and go to state 60
    DIV_EQUAL       shift and go to state 61
    EXIT            shift and go to state 62
    BREAK           shift and go to state 63
    DEFAULT         shift and go to state 64
    CONTINUE        shift and go to state 65
    RAND            shift and go to state 66
    FWRITE          shift and go to state 67
    TRIM            shift and go to state 68
    SMALLER         shift and go to state 69
    RETURN          shift and go to state 71
    COMENTARIOS     shift and go to state 73
    DOC_COMENTARIOS shift and go to state 74
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78
    FUNCTION        shift and go to state 79
    LPAREN          shift and go to state 34
    IF              shift and go to state 81
    RBRACE          reduce using rule 141 (empty -> .)
    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    cuerpo                         shift and go to state 184
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    bwhile                         shift and go to state 8
    bdo                            shift and go to state 9
    bfor                           shift and go to state 10
    bforeach                       shift and go to state 11
    btry                           shift and go to state 12
    operaciones_mat                shift and go to state 13
    condicion_ifelse               shift and go to state 14
    condicion_elseif               shift and go to state 15
    condicion_else                 shift and go to state 16
    bswitch                        shift and go to state 17
    bcase                          shift and go to state 18
    bgoto                          shift and go to state 19
    bcolas                         shift and go to state 20
    bpila                          shift and go to state 21
    incrementos_mat                shift and go to state 22
    bcortes                        shift and go to state 23
    brand                          shift and go to state 24
    escribir                       shift and go to state 25
    btrim                          shift and go to state 26
    otros                          shift and go to state 27
    breturn                        shift and go to state 28
    comment                        shift and go to state 29
    casting                        shift and go to state 30
    valor                          shift and go to state 32
    proteccion                     shift and go to state 38
    funcion_nparams                shift and go to state 39
    funcion_blank                  shift and go to state 40
    funcion_void                   shift and go to state 41
    operaciones_mat_par            shift and go to state 50
    condicion_if                   shift and go to state 51
    empty                          shift and go to state 70
    tipoDato                       shift and go to state 80
    numero                         shift and go to state 82

state 121

    (81) bswitch -> SWITCH LPAREN . VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE

    VARIABLE        shift and go to state 185


state 122

    (82) bcase -> CASE ENTERO . COLON

    COLON           shift and go to state 186


state 123

    (150) bgoto -> GOTO NOMBRE . SEMI

    SEMI            shift and go to state 187


state 124

    (151) bcortes -> EXIT SEMI .

    $end            reduce using rule 151 (bcortes -> EXIT SEMI .)
    RBRACE          reduce using rule 151 (bcortes -> EXIT SEMI .)
    SEMI            reduce using rule 151 (bcortes -> EXIT SEMI .)


state 125

    (152) bcortes -> BREAK SEMI .

    $end            reduce using rule 152 (bcortes -> BREAK SEMI .)
    RBRACE          reduce using rule 152 (bcortes -> BREAK SEMI .)
    SEMI            reduce using rule 152 (bcortes -> BREAK SEMI .)


state 126

    (153) bcortes -> DEFAULT SEMI .

    $end            reduce using rule 153 (bcortes -> DEFAULT SEMI .)
    RBRACE          reduce using rule 153 (bcortes -> DEFAULT SEMI .)
    SEMI            reduce using rule 153 (bcortes -> DEFAULT SEMI .)


state 127

    (154) bcortes -> CONTINUE SEMI .

    $end            reduce using rule 154 (bcortes -> CONTINUE SEMI .)
    RBRACE          reduce using rule 154 (bcortes -> CONTINUE SEMI .)
    SEMI            reduce using rule 154 (bcortes -> CONTINUE SEMI .)


state 128

    (127) brand -> RAND LPAREN . ENTERO COMMA ENTERO RPAREN SEMI

    ENTERO          shift and go to state 188


state 129

    (146) escribir -> FWRITE LPAREN . NOMBRE COMMA CADENA RPAREN SEMI

    NOMBRE          shift and go to state 189


state 130

    (147) btrim -> TRIM LPAREN . NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI

    NOMBRE          shift and go to state 190


state 131

    (155) otros -> SMALLER NOMBRE . GREATER

    GREATER         shift and go to state 191


state 132

    (133) breturn -> RETURN SEMI .

    $end            reduce using rule 133 (breturn -> RETURN SEMI .)
    RBRACE          reduce using rule 133 (breturn -> RETURN SEMI .)
    SEMI            reduce using rule 133 (breturn -> RETURN SEMI .)


state 133

    (134) breturn -> RETURN NULL . SEMI

    SEMI            shift and go to state 192


state 134

    (135) breturn -> RETURN VARIABLE . SEMI

    SEMI            shift and go to state 193


state 135

    (136) breturn -> RETURN BOOLEANO . SEMI

    SEMI            shift and go to state 194


state 136

    (121) funcion_nparams -> FUNCTION NOMBRE . LPAREN params_list RPAREN stc_bloque_def
    (125) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN stc_bloque_def
    (126) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN LBRACE empty RBRACE
    (124) funcion_void -> FUNCTION NOMBRE . LPAREN RPAREN COLON VOID LBRACE empty RBRACE

    LPAREN          shift and go to state 195


state 137

    (54) condicion_if -> IF LPAREN . condicion RPAREN LBRACE cuerpo RBRACE
    (61) condicion -> . VARIABLE operador_logico VARIABLE
    (62) condicion -> . valor operador_logico valor
    (63) condicion -> . VARIABLE operador_logico valor
    (64) condicion -> . VARIABLE condicion_booleana VARIABLE
    (65) condicion -> . valor condicion_booleana valor
    (66) condicion -> . VARIABLE condicion_booleana valor
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    VARIABLE        shift and go to state 175
    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    condicion                      shift and go to state 196
    valor                          shift and go to state 176
    tipoDato                       shift and go to state 80
    bcolas                         shift and go to state 87
    bpila                          shift and go to state 88
    numero                         shift and go to state 82

state 138

    (49) imprimir -> ECHO valor SEMI .

    $end            reduce using rule 49 (imprimir -> ECHO valor SEMI .)
    RBRACE          reduce using rule 49 (imprimir -> ECHO valor SEMI .)
    SEMI            reduce using rule 49 (imprimir -> ECHO valor SEMI .)


state 139

    (52) imprimir -> ECHO NOMBRE LBRACKET . ENTERO RBRACKET SEMI

    ENTERO          shift and go to state 197


state 140

    (156) bconcat -> CADENA CONCAT . CADENA SEMI

    CADENA          shift and go to state 198


state 141

    (160) bconcat -> CADENA CONCAT_EQUAL . CADENA SEMI

    CADENA          shift and go to state 199


state 142

    (157) bconcat -> VARIABLE CONCAT . VARIABLE SEMI
    (158) bconcat -> VARIABLE CONCAT . CADENA SEMI

    VARIABLE        shift and go to state 200
    CADENA          shift and go to state 201


state 143

    (159) bconcat -> VARIABLE CONCAT_EQUAL . CADENA SEMI

    CADENA          shift and go to state 202


state 144

    (142) bcolas -> VARIABLE EQUALS . NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> VARIABLE EQUALS . NEW SPLSTACK LPAREN RPAREN SEMI

    NEW             shift and go to state 157


state 145

    (109) operaciones_mat -> valor operadores valor .
    (109) operaciones_mat -> valor . operadores valor
    (110) operaciones_mat -> valor . operadores operaciones_mat
    (88) operadores -> . SUMA
    (89) operadores -> . RESTA
    (90) operadores -> . MULTIPLICACION
    (91) operadores -> . DIVISION
    (92) operadores -> . MODULO

    $end            reduce using rule 109 (operaciones_mat -> valor operadores valor .)
    RBRACE          reduce using rule 109 (operaciones_mat -> valor operadores valor .)
    SEMI            reduce using rule 109 (operaciones_mat -> valor operadores valor .)
    SUMA            shift and go to state 92
    RESTA           shift and go to state 93
    MULTIPLICACION  shift and go to state 94
    DIVISION        shift and go to state 95
    MODULO          shift and go to state 96

    operadores                     shift and go to state 91

state 146

    (110) operaciones_mat -> valor operadores operaciones_mat .

    $end            reduce using rule 110 (operaciones_mat -> valor operadores operaciones_mat .)
    RBRACE          reduce using rule 110 (operaciones_mat -> valor operadores operaciones_mat .)
    SEMI            reduce using rule 110 (operaciones_mat -> valor operadores operaciones_mat .)


state 147

    (50) imprimir -> PRINT valor SEMI .

    $end            reduce using rule 50 (imprimir -> PRINT valor SEMI .)
    RBRACE          reduce using rule 50 (imprimir -> PRINT valor SEMI .)
    SEMI            reduce using rule 50 (imprimir -> PRINT valor SEMI .)


state 148

    (51) imprimir -> PRINT LPAREN valor . RPAREN SEMI

    RPAREN          shift and go to state 203


state 149

    (112) operaciones_mat_par -> LPAREN valor operadores . valor RPAREN
    (113) operaciones_mat_par -> LPAREN valor operadores . operaciones_mat_par RPAREN
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (112) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (113) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    LPAREN          shift and go to state 34
    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    VARIABLE        shift and go to state 99
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    valor                          shift and go to state 204
    operaciones_mat_par            shift and go to state 205
    tipoDato                       shift and go to state 80
    bcolas                         shift and go to state 87
    bpila                          shift and go to state 88
    numero                         shift and go to state 82

state 150

    (30) asignacion -> VARIABLE EQUALS valor . SEMI

    SEMI            shift and go to state 206


state 151

    (33) asignacion -> VARIABLE EQUALS brand .

    $end            reduce using rule 33 (asignacion -> VARIABLE EQUALS brand .)
    RBRACE          reduce using rule 33 (asignacion -> VARIABLE EQUALS brand .)
    SEMI            reduce using rule 33 (asignacion -> VARIABLE EQUALS brand .)
    VARIABLE        reduce using rule 33 (asignacion -> VARIABLE EQUALS brand .)
    CADENA          reduce using rule 33 (asignacion -> VARIABLE EQUALS brand .)
    BOOLEANO        reduce using rule 33 (asignacion -> VARIABLE EQUALS brand .)
    ENTERO          reduce using rule 33 (asignacion -> VARIABLE EQUALS brand .)
    DECIMAL         reduce using rule 33 (asignacion -> VARIABLE EQUALS brand .)
    RPAREN          reduce using rule 33 (asignacion -> VARIABLE EQUALS brand .)
    COMMA           reduce using rule 33 (asignacion -> VARIABLE EQUALS brand .)


state 152

    (34) asignacion -> VARIABLE EQUALS escribir .

    $end            reduce using rule 34 (asignacion -> VARIABLE EQUALS escribir .)
    RBRACE          reduce using rule 34 (asignacion -> VARIABLE EQUALS escribir .)
    SEMI            reduce using rule 34 (asignacion -> VARIABLE EQUALS escribir .)
    VARIABLE        reduce using rule 34 (asignacion -> VARIABLE EQUALS escribir .)
    CADENA          reduce using rule 34 (asignacion -> VARIABLE EQUALS escribir .)
    BOOLEANO        reduce using rule 34 (asignacion -> VARIABLE EQUALS escribir .)
    ENTERO          reduce using rule 34 (asignacion -> VARIABLE EQUALS escribir .)
    DECIMAL         reduce using rule 34 (asignacion -> VARIABLE EQUALS escribir .)
    RPAREN          reduce using rule 34 (asignacion -> VARIABLE EQUALS escribir .)
    COMMA           reduce using rule 34 (asignacion -> VARIABLE EQUALS escribir .)


state 153

    (35) asignacion -> VARIABLE EQUALS btrim .

    $end            reduce using rule 35 (asignacion -> VARIABLE EQUALS btrim .)
    RBRACE          reduce using rule 35 (asignacion -> VARIABLE EQUALS btrim .)
    SEMI            reduce using rule 35 (asignacion -> VARIABLE EQUALS btrim .)
    VARIABLE        reduce using rule 35 (asignacion -> VARIABLE EQUALS btrim .)
    CADENA          reduce using rule 35 (asignacion -> VARIABLE EQUALS btrim .)
    BOOLEANO        reduce using rule 35 (asignacion -> VARIABLE EQUALS btrim .)
    ENTERO          reduce using rule 35 (asignacion -> VARIABLE EQUALS btrim .)
    DECIMAL         reduce using rule 35 (asignacion -> VARIABLE EQUALS btrim .)
    RPAREN          reduce using rule 35 (asignacion -> VARIABLE EQUALS btrim .)
    COMMA           reduce using rule 35 (asignacion -> VARIABLE EQUALS btrim .)


state 154

    (36) asignacion -> VARIABLE EQUALS lectura .

    $end            reduce using rule 36 (asignacion -> VARIABLE EQUALS lectura .)
    RBRACE          reduce using rule 36 (asignacion -> VARIABLE EQUALS lectura .)
    SEMI            reduce using rule 36 (asignacion -> VARIABLE EQUALS lectura .)
    VARIABLE        reduce using rule 36 (asignacion -> VARIABLE EQUALS lectura .)
    CADENA          reduce using rule 36 (asignacion -> VARIABLE EQUALS lectura .)
    BOOLEANO        reduce using rule 36 (asignacion -> VARIABLE EQUALS lectura .)
    ENTERO          reduce using rule 36 (asignacion -> VARIABLE EQUALS lectura .)
    DECIMAL         reduce using rule 36 (asignacion -> VARIABLE EQUALS lectura .)
    RPAREN          reduce using rule 36 (asignacion -> VARIABLE EQUALS lectura .)
    COMMA           reduce using rule 36 (asignacion -> VARIABLE EQUALS lectura .)


state 155

    (37) asignacion -> VARIABLE EQUALS bconcat .

    $end            reduce using rule 37 (asignacion -> VARIABLE EQUALS bconcat .)
    RBRACE          reduce using rule 37 (asignacion -> VARIABLE EQUALS bconcat .)
    SEMI            reduce using rule 37 (asignacion -> VARIABLE EQUALS bconcat .)
    VARIABLE        reduce using rule 37 (asignacion -> VARIABLE EQUALS bconcat .)
    CADENA          reduce using rule 37 (asignacion -> VARIABLE EQUALS bconcat .)
    BOOLEANO        reduce using rule 37 (asignacion -> VARIABLE EQUALS bconcat .)
    ENTERO          reduce using rule 37 (asignacion -> VARIABLE EQUALS bconcat .)
    DECIMAL         reduce using rule 37 (asignacion -> VARIABLE EQUALS bconcat .)
    RPAREN          reduce using rule 37 (asignacion -> VARIABLE EQUALS bconcat .)
    COMMA           reduce using rule 37 (asignacion -> VARIABLE EQUALS bconcat .)


state 156

    (38) asignacion_array -> VARIABLE EQUALS array_def . SEMI

    SEMI            shift and go to state 207


state 157

    (142) bcolas -> VARIABLE EQUALS NEW . SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> VARIABLE EQUALS NEW . SPLSTACK LPAREN RPAREN SEMI

    SPLQUEUE        shift and go to state 208
    SPLSTACK        shift and go to state 209


state 158

    (137) array_def -> ARRAY . LPAREN RPAREN
    (138) array_def -> ARRAY . LPAREN array_elmnt RPAREN

    LPAREN          shift and go to state 210


state 159

    (169) casting -> VARIABLE LPAREN tiposCast . RPAREN VARIABLE SEMI

    RPAREN          shift and go to state 211


state 160

    (161) tiposCast -> STRING .

    RPAREN          reduce using rule 161 (tiposCast -> STRING .)


state 161

    (162) tiposCast -> BOOL .

    RPAREN          reduce using rule 162 (tiposCast -> BOOL .)


state 162

    (163) tiposCast -> DOUBLE .

    RPAREN          reduce using rule 163 (tiposCast -> DOUBLE .)


state 163

    (164) tiposCast -> FLOAT .

    RPAREN          reduce using rule 164 (tiposCast -> FLOAT .)


state 164

    (165) tiposCast -> ARRAY .

    RPAREN          reduce using rule 165 (tiposCast -> ARRAY .)


state 165

    (166) tiposCast -> OBJECT .

    RPAREN          reduce using rule 166 (tiposCast -> OBJECT .)


state 166

    (167) tiposCast -> INTEGER .

    RPAREN          reduce using rule 167 (tiposCast -> INTEGER .)


state 167

    (168) tiposCast -> INT .

    RPAREN          reduce using rule 168 (tiposCast -> INT .)


state 168

    (30) asignacion -> VARIABLE EQUALS . valor SEMI
    (33) asignacion -> VARIABLE EQUALS . brand
    (34) asignacion -> VARIABLE EQUALS . escribir
    (35) asignacion -> VARIABLE EQUALS . btrim
    (36) asignacion -> VARIABLE EQUALS . lectura
    (37) asignacion -> VARIABLE EQUALS . bconcat
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (127) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (146) escribir -> . FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI
    (147) btrim -> . TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
    (144) lectura -> . READLINE LPAREN CADENA RPAREN SEMI
    (145) lectura -> . READLINE LPAREN RPAREN SEMI
    (156) bconcat -> . CADENA CONCAT CADENA SEMI
    (157) bconcat -> . VARIABLE CONCAT VARIABLE SEMI
    (158) bconcat -> . VARIABLE CONCAT CADENA SEMI
    (159) bconcat -> . VARIABLE CONCAT_EQUAL CADENA SEMI
    (160) bconcat -> . CADENA CONCAT_EQUAL CADENA SEMI
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    RAND            shift and go to state 66
    FWRITE          shift and go to state 67
    TRIM            shift and go to state 68
    READLINE        shift and go to state 44
    CADENA          shift and go to state 89
    VARIABLE        shift and go to state 90
    BOOLEANO        shift and go to state 72
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    valor                          shift and go to state 150
    brand                          shift and go to state 151
    escribir                       shift and go to state 152
    btrim                          shift and go to state 153
    lectura                        shift and go to state 154
    bconcat                        shift and go to state 155
    tipoDato                       shift and go to state 80
    bcolas                         shift and go to state 87
    bpila                          shift and go to state 88
    numero                         shift and go to state 82

state 169

    (121) funcion_nparams -> FUNCTION NOMBRE . LPAREN params_list RPAREN stc_bloque_def
    (125) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN stc_bloque_def
    (126) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN LBRACE empty RBRACE

    LPAREN          shift and go to state 212


state 170

    (39) constante -> DEFINE LPAREN CADENA . COMMA valor RPAREN SEMI

    COMMA           shift and go to state 213


state 171

    (40) constante -> DEFINE LPAREN NOMBRE . COMMA ARRAY RPAREN SEMI

    COMMA           shift and go to state 214


state 172

    (144) lectura -> READLINE LPAREN CADENA . RPAREN SEMI

    RPAREN          shift and go to state 215


state 173

    (145) lectura -> READLINE LPAREN RPAREN . SEMI

    SEMI            shift and go to state 216


state 174

    (78) bwhile -> WHILE LPAREN condicion . RPAREN LBRACE stc_bloque RBRACE
    (79) bwhile -> WHILE LPAREN condicion . RPAREN COLON stc_bloque

    RPAREN          shift and go to state 217


state 175

    (61) condicion -> VARIABLE . operador_logico VARIABLE
    (63) condicion -> VARIABLE . operador_logico valor
    (64) condicion -> VARIABLE . condicion_booleana VARIABLE
    (66) condicion -> VARIABLE . condicion_booleana valor
    (142) bcolas -> VARIABLE . EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> VARIABLE . EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (93) operador_logico -> . SMALLER
    (94) operador_logico -> . GREATER
    (95) operador_logico -> . IS_SMALLER_OR_EQUAL
    (96) operador_logico -> . IS_GREATER_OR_EQUAL
    (102) condicion_booleana -> . AND
    (103) condicion_booleana -> . OR
    (104) condicion_booleana -> . XOR
    (105) condicion_booleana -> . IS_EQUAL
    (106) condicion_booleana -> . IS_NOT_EQUAL
    (107) condicion_booleana -> . IS_IDENTICAL
    (108) condicion_booleana -> . IS_NOT_IDENTICAL

    EQUALS          shift and go to state 144
    SMALLER         shift and go to state 220
    GREATER         shift and go to state 221
    IS_SMALLER_OR_EQUAL shift and go to state 222
    IS_GREATER_OR_EQUAL shift and go to state 223
    AND             shift and go to state 224
    OR              shift and go to state 225
    XOR             shift and go to state 226
    IS_EQUAL        shift and go to state 227
    IS_NOT_EQUAL    shift and go to state 228
    IS_IDENTICAL    shift and go to state 229
    IS_NOT_IDENTICAL shift and go to state 230

    operador_logico                shift and go to state 218
    condicion_booleana             shift and go to state 219

state 176

    (62) condicion -> valor . operador_logico valor
    (65) condicion -> valor . condicion_booleana valor
    (93) operador_logico -> . SMALLER
    (94) operador_logico -> . GREATER
    (95) operador_logico -> . IS_SMALLER_OR_EQUAL
    (96) operador_logico -> . IS_GREATER_OR_EQUAL
    (102) condicion_booleana -> . AND
    (103) condicion_booleana -> . OR
    (104) condicion_booleana -> . XOR
    (105) condicion_booleana -> . IS_EQUAL
    (106) condicion_booleana -> . IS_NOT_EQUAL
    (107) condicion_booleana -> . IS_IDENTICAL
    (108) condicion_booleana -> . IS_NOT_IDENTICAL

    SMALLER         shift and go to state 220
    GREATER         shift and go to state 221
    IS_SMALLER_OR_EQUAL shift and go to state 222
    IS_GREATER_OR_EQUAL shift and go to state 223
    AND             shift and go to state 224
    OR              shift and go to state 225
    XOR             shift and go to state 226
    IS_EQUAL        shift and go to state 227
    IS_NOT_EQUAL    shift and go to state 228
    IS_IDENTICAL    shift and go to state 229
    IS_NOT_IDENTICAL shift and go to state 230

    operador_logico                shift and go to state 231
    condicion_booleana             shift and go to state 232

state 177

    (80) bdo -> DO LBRACE cuerpo . RBRACE bwhile

    RBRACE          shift and go to state 233


state 178

    (67) bfor -> FOR LPAREN asignacion . condicion SEMI for_incr RPAREN stc_bloque_def
    (61) condicion -> . VARIABLE operador_logico VARIABLE
    (62) condicion -> . valor operador_logico valor
    (63) condicion -> . VARIABLE operador_logico valor
    (64) condicion -> . VARIABLE condicion_booleana VARIABLE
    (65) condicion -> . valor condicion_booleana valor
    (66) condicion -> . VARIABLE condicion_booleana valor
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    VARIABLE        shift and go to state 175
    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    condicion                      shift and go to state 234
    valor                          shift and go to state 176
    tipoDato                       shift and go to state 80
    bcolas                         shift and go to state 87
    bpila                          shift and go to state 88
    numero                         shift and go to state 82

state 179

    (77) bforeach -> FOREACH LPAREN VARIABLE . AS VARIABLE RPAREN stc_bloque_def

    AS              shift and go to state 235


state 180

    (70) stc_bloque_def -> LBRACE . stc_bloque RBRACE
    (68) stc_bloque -> . stc_bloque SEMI cuerpo
    (69) stc_bloque -> . breturn
    (132) breturn -> . empty
    (133) breturn -> . RETURN SEMI
    (134) breturn -> . RETURN NULL SEMI
    (135) breturn -> . RETURN VARIABLE SEMI
    (136) breturn -> . RETURN BOOLEANO SEMI
    (141) empty -> .

    RETURN          shift and go to state 71
    RBRACE          reduce using rule 141 (empty -> .)
    SEMI            reduce using rule 141 (empty -> .)

    stc_bloque                     shift and go to state 236
    breturn                        shift and go to state 237
    empty                          shift and go to state 70

state 181

    (85) btry -> TRY LBRACE stc_bloque_def . RBRACE catches

    RBRACE          shift and go to state 238


state 182

    (60) condicion_ifelse -> condicion_if condicion_elseif condicion_else .

    $end            reduce using rule 60 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    RBRACE          reduce using rule 60 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    SEMI            reduce using rule 60 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)


state 183

    (55) condicion_elseif -> ELSEIF LPAREN condicion . RPAREN LBRACE cuerpo RBRACE

    RPAREN          shift and go to state 239


state 184

    (56) condicion_else -> ELSE LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 240


state 185

    (81) bswitch -> SWITCH LPAREN VARIABLE . RPAREN LBRACE cuerpo SEMI RBRACE

    RPAREN          shift and go to state 241


state 186

    (82) bcase -> CASE ENTERO COLON .

    $end            reduce using rule 82 (bcase -> CASE ENTERO COLON .)
    RBRACE          reduce using rule 82 (bcase -> CASE ENTERO COLON .)
    SEMI            reduce using rule 82 (bcase -> CASE ENTERO COLON .)


state 187

    (150) bgoto -> GOTO NOMBRE SEMI .

    $end            reduce using rule 150 (bgoto -> GOTO NOMBRE SEMI .)
    RBRACE          reduce using rule 150 (bgoto -> GOTO NOMBRE SEMI .)
    SEMI            reduce using rule 150 (bgoto -> GOTO NOMBRE SEMI .)


state 188

    (127) brand -> RAND LPAREN ENTERO . COMMA ENTERO RPAREN SEMI

    COMMA           shift and go to state 242


state 189

    (146) escribir -> FWRITE LPAREN NOMBRE . COMMA CADENA RPAREN SEMI

    COMMA           shift and go to state 243


state 190

    (147) btrim -> TRIM LPAREN NOMBRE . LPAREN NOMBRE RPAREN RPAREN SEMI

    LPAREN          shift and go to state 244


state 191

    (155) otros -> SMALLER NOMBRE GREATER .

    $end            reduce using rule 155 (otros -> SMALLER NOMBRE GREATER .)
    RBRACE          reduce using rule 155 (otros -> SMALLER NOMBRE GREATER .)
    SEMI            reduce using rule 155 (otros -> SMALLER NOMBRE GREATER .)


state 192

    (134) breturn -> RETURN NULL SEMI .

    $end            reduce using rule 134 (breturn -> RETURN NULL SEMI .)
    RBRACE          reduce using rule 134 (breturn -> RETURN NULL SEMI .)
    SEMI            reduce using rule 134 (breturn -> RETURN NULL SEMI .)


state 193

    (135) breturn -> RETURN VARIABLE SEMI .

    $end            reduce using rule 135 (breturn -> RETURN VARIABLE SEMI .)
    RBRACE          reduce using rule 135 (breturn -> RETURN VARIABLE SEMI .)
    SEMI            reduce using rule 135 (breturn -> RETURN VARIABLE SEMI .)


state 194

    (136) breturn -> RETURN BOOLEANO SEMI .

    $end            reduce using rule 136 (breturn -> RETURN BOOLEANO SEMI .)
    RBRACE          reduce using rule 136 (breturn -> RETURN BOOLEANO SEMI .)
    SEMI            reduce using rule 136 (breturn -> RETURN BOOLEANO SEMI .)


state 195

    (121) funcion_nparams -> FUNCTION NOMBRE LPAREN . params_list RPAREN stc_bloque_def
    (125) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN stc_bloque_def
    (126) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN LBRACE empty RBRACE
    (124) funcion_void -> FUNCTION NOMBRE LPAREN . RPAREN COLON VOID LBRACE empty RBRACE
    (122) params_list -> . params_list COMMA param
    (123) params_list -> . param
    (119) param -> . VARIABLE
    (120) param -> . asignacion
    (30) asignacion -> . VARIABLE EQUALS valor SEMI
    (31) asignacion -> . VAR asignacion
    (32) asignacion -> . proteccion asignacion
    (33) asignacion -> . VARIABLE EQUALS brand
    (34) asignacion -> . VARIABLE EQUALS escribir
    (35) asignacion -> . VARIABLE EQUALS btrim
    (36) asignacion -> . VARIABLE EQUALS lectura
    (37) asignacion -> . VARIABLE EQUALS bconcat
    (128) proteccion -> . PUBLIC
    (129) proteccion -> . PRIVATE
    (130) proteccion -> . PROTECTED
    (131) proteccion -> . STATIC

    RPAREN          shift and go to state 246
    VARIABLE        shift and go to state 248
    VAR             shift and go to state 37
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78

    params_list                    shift and go to state 245
    param                          shift and go to state 247
    asignacion                     shift and go to state 249
    proteccion                     shift and go to state 105

state 196

    (54) condicion_if -> IF LPAREN condicion . RPAREN LBRACE cuerpo RBRACE

    RPAREN          shift and go to state 250


state 197

    (52) imprimir -> ECHO NOMBRE LBRACKET ENTERO . RBRACKET SEMI

    RBRACKET        shift and go to state 251


state 198

    (156) bconcat -> CADENA CONCAT CADENA . SEMI

    SEMI            shift and go to state 252


state 199

    (160) bconcat -> CADENA CONCAT_EQUAL CADENA . SEMI

    SEMI            shift and go to state 253


state 200

    (157) bconcat -> VARIABLE CONCAT VARIABLE . SEMI

    SEMI            shift and go to state 254


state 201

    (158) bconcat -> VARIABLE CONCAT CADENA . SEMI

    SEMI            shift and go to state 255


state 202

    (159) bconcat -> VARIABLE CONCAT_EQUAL CADENA . SEMI

    SEMI            shift and go to state 256


state 203

    (51) imprimir -> PRINT LPAREN valor RPAREN . SEMI

    SEMI            shift and go to state 257


state 204

    (112) operaciones_mat_par -> LPAREN valor operadores valor . RPAREN

    RPAREN          shift and go to state 258


state 205

    (113) operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par . RPAREN

    RPAREN          shift and go to state 259


state 206

    (30) asignacion -> VARIABLE EQUALS valor SEMI .

    $end            reduce using rule 30 (asignacion -> VARIABLE EQUALS valor SEMI .)
    RBRACE          reduce using rule 30 (asignacion -> VARIABLE EQUALS valor SEMI .)
    SEMI            reduce using rule 30 (asignacion -> VARIABLE EQUALS valor SEMI .)
    VARIABLE        reduce using rule 30 (asignacion -> VARIABLE EQUALS valor SEMI .)
    CADENA          reduce using rule 30 (asignacion -> VARIABLE EQUALS valor SEMI .)
    BOOLEANO        reduce using rule 30 (asignacion -> VARIABLE EQUALS valor SEMI .)
    ENTERO          reduce using rule 30 (asignacion -> VARIABLE EQUALS valor SEMI .)
    DECIMAL         reduce using rule 30 (asignacion -> VARIABLE EQUALS valor SEMI .)
    RPAREN          reduce using rule 30 (asignacion -> VARIABLE EQUALS valor SEMI .)
    COMMA           reduce using rule 30 (asignacion -> VARIABLE EQUALS valor SEMI .)


state 207

    (38) asignacion_array -> VARIABLE EQUALS array_def SEMI .

    $end            reduce using rule 38 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    RBRACE          reduce using rule 38 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    SEMI            reduce using rule 38 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)


state 208

    (142) bcolas -> VARIABLE EQUALS NEW SPLQUEUE . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 260


state 209

    (143) bpila -> VARIABLE EQUALS NEW SPLSTACK . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 261


state 210

    (137) array_def -> ARRAY LPAREN . RPAREN
    (138) array_def -> ARRAY LPAREN . array_elmnt RPAREN
    (139) array_elmnt -> . array_elmnt COMMA valor
    (140) array_elmnt -> . valor
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    RPAREN          shift and go to state 262
    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    VARIABLE        shift and go to state 99
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    array_elmnt                    shift and go to state 263
    valor                          shift and go to state 264
    tipoDato                       shift and go to state 80
    bcolas                         shift and go to state 87
    bpila                          shift and go to state 88
    numero                         shift and go to state 82

state 211

    (169) casting -> VARIABLE LPAREN tiposCast RPAREN . VARIABLE SEMI

    VARIABLE        shift and go to state 265


state 212

    (121) funcion_nparams -> FUNCTION NOMBRE LPAREN . params_list RPAREN stc_bloque_def
    (125) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN stc_bloque_def
    (126) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN LBRACE empty RBRACE
    (122) params_list -> . params_list COMMA param
    (123) params_list -> . param
    (119) param -> . VARIABLE
    (120) param -> . asignacion
    (30) asignacion -> . VARIABLE EQUALS valor SEMI
    (31) asignacion -> . VAR asignacion
    (32) asignacion -> . proteccion asignacion
    (33) asignacion -> . VARIABLE EQUALS brand
    (34) asignacion -> . VARIABLE EQUALS escribir
    (35) asignacion -> . VARIABLE EQUALS btrim
    (36) asignacion -> . VARIABLE EQUALS lectura
    (37) asignacion -> . VARIABLE EQUALS bconcat
    (128) proteccion -> . PUBLIC
    (129) proteccion -> . PRIVATE
    (130) proteccion -> . PROTECTED
    (131) proteccion -> . STATIC

    RPAREN          shift and go to state 266
    VARIABLE        shift and go to state 248
    VAR             shift and go to state 37
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78

    params_list                    shift and go to state 245
    param                          shift and go to state 247
    asignacion                     shift and go to state 249
    proteccion                     shift and go to state 105

state 213

    (39) constante -> DEFINE LPAREN CADENA COMMA . valor RPAREN SEMI
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    VARIABLE        shift and go to state 99
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    valor                          shift and go to state 267
    tipoDato                       shift and go to state 80
    bcolas                         shift and go to state 87
    bpila                          shift and go to state 88
    numero                         shift and go to state 82

state 214

    (40) constante -> DEFINE LPAREN NOMBRE COMMA . ARRAY RPAREN SEMI

    ARRAY           shift and go to state 268


state 215

    (144) lectura -> READLINE LPAREN CADENA RPAREN . SEMI

    SEMI            shift and go to state 269


state 216

    (145) lectura -> READLINE LPAREN RPAREN SEMI .

    $end            reduce using rule 145 (lectura -> READLINE LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 145 (lectura -> READLINE LPAREN RPAREN SEMI .)
    SEMI            reduce using rule 145 (lectura -> READLINE LPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 145 (lectura -> READLINE LPAREN RPAREN SEMI .)
    CADENA          reduce using rule 145 (lectura -> READLINE LPAREN RPAREN SEMI .)
    BOOLEANO        reduce using rule 145 (lectura -> READLINE LPAREN RPAREN SEMI .)
    ENTERO          reduce using rule 145 (lectura -> READLINE LPAREN RPAREN SEMI .)
    DECIMAL         reduce using rule 145 (lectura -> READLINE LPAREN RPAREN SEMI .)
    RPAREN          reduce using rule 145 (lectura -> READLINE LPAREN RPAREN SEMI .)
    COMMA           reduce using rule 145 (lectura -> READLINE LPAREN RPAREN SEMI .)


state 217

    (78) bwhile -> WHILE LPAREN condicion RPAREN . LBRACE stc_bloque RBRACE
    (79) bwhile -> WHILE LPAREN condicion RPAREN . COLON stc_bloque

    LBRACE          shift and go to state 270
    COLON           shift and go to state 271


state 218

    (61) condicion -> VARIABLE operador_logico . VARIABLE
    (63) condicion -> VARIABLE operador_logico . valor
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    VARIABLE        shift and go to state 272
    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    valor                          shift and go to state 273
    tipoDato                       shift and go to state 80
    bcolas                         shift and go to state 87
    bpila                          shift and go to state 88
    numero                         shift and go to state 82

state 219

    (64) condicion -> VARIABLE condicion_booleana . VARIABLE
    (66) condicion -> VARIABLE condicion_booleana . valor
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    VARIABLE        shift and go to state 274
    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    valor                          shift and go to state 275
    tipoDato                       shift and go to state 80
    bcolas                         shift and go to state 87
    bpila                          shift and go to state 88
    numero                         shift and go to state 82

state 220

    (93) operador_logico -> SMALLER .

    VARIABLE        reduce using rule 93 (operador_logico -> SMALLER .)
    CADENA          reduce using rule 93 (operador_logico -> SMALLER .)
    BOOLEANO        reduce using rule 93 (operador_logico -> SMALLER .)
    ENTERO          reduce using rule 93 (operador_logico -> SMALLER .)
    DECIMAL         reduce using rule 93 (operador_logico -> SMALLER .)


state 221

    (94) operador_logico -> GREATER .

    VARIABLE        reduce using rule 94 (operador_logico -> GREATER .)
    CADENA          reduce using rule 94 (operador_logico -> GREATER .)
    BOOLEANO        reduce using rule 94 (operador_logico -> GREATER .)
    ENTERO          reduce using rule 94 (operador_logico -> GREATER .)
    DECIMAL         reduce using rule 94 (operador_logico -> GREATER .)


state 222

    (95) operador_logico -> IS_SMALLER_OR_EQUAL .

    VARIABLE        reduce using rule 95 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    CADENA          reduce using rule 95 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    BOOLEANO        reduce using rule 95 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    ENTERO          reduce using rule 95 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    DECIMAL         reduce using rule 95 (operador_logico -> IS_SMALLER_OR_EQUAL .)


state 223

    (96) operador_logico -> IS_GREATER_OR_EQUAL .

    VARIABLE        reduce using rule 96 (operador_logico -> IS_GREATER_OR_EQUAL .)
    CADENA          reduce using rule 96 (operador_logico -> IS_GREATER_OR_EQUAL .)
    BOOLEANO        reduce using rule 96 (operador_logico -> IS_GREATER_OR_EQUAL .)
    ENTERO          reduce using rule 96 (operador_logico -> IS_GREATER_OR_EQUAL .)
    DECIMAL         reduce using rule 96 (operador_logico -> IS_GREATER_OR_EQUAL .)


state 224

    (102) condicion_booleana -> AND .

    VARIABLE        reduce using rule 102 (condicion_booleana -> AND .)
    CADENA          reduce using rule 102 (condicion_booleana -> AND .)
    BOOLEANO        reduce using rule 102 (condicion_booleana -> AND .)
    ENTERO          reduce using rule 102 (condicion_booleana -> AND .)
    DECIMAL         reduce using rule 102 (condicion_booleana -> AND .)


state 225

    (103) condicion_booleana -> OR .

    VARIABLE        reduce using rule 103 (condicion_booleana -> OR .)
    CADENA          reduce using rule 103 (condicion_booleana -> OR .)
    BOOLEANO        reduce using rule 103 (condicion_booleana -> OR .)
    ENTERO          reduce using rule 103 (condicion_booleana -> OR .)
    DECIMAL         reduce using rule 103 (condicion_booleana -> OR .)


state 226

    (104) condicion_booleana -> XOR .

    VARIABLE        reduce using rule 104 (condicion_booleana -> XOR .)
    CADENA          reduce using rule 104 (condicion_booleana -> XOR .)
    BOOLEANO        reduce using rule 104 (condicion_booleana -> XOR .)
    ENTERO          reduce using rule 104 (condicion_booleana -> XOR .)
    DECIMAL         reduce using rule 104 (condicion_booleana -> XOR .)


state 227

    (105) condicion_booleana -> IS_EQUAL .

    VARIABLE        reduce using rule 105 (condicion_booleana -> IS_EQUAL .)
    CADENA          reduce using rule 105 (condicion_booleana -> IS_EQUAL .)
    BOOLEANO        reduce using rule 105 (condicion_booleana -> IS_EQUAL .)
    ENTERO          reduce using rule 105 (condicion_booleana -> IS_EQUAL .)
    DECIMAL         reduce using rule 105 (condicion_booleana -> IS_EQUAL .)


state 228

    (106) condicion_booleana -> IS_NOT_EQUAL .

    VARIABLE        reduce using rule 106 (condicion_booleana -> IS_NOT_EQUAL .)
    CADENA          reduce using rule 106 (condicion_booleana -> IS_NOT_EQUAL .)
    BOOLEANO        reduce using rule 106 (condicion_booleana -> IS_NOT_EQUAL .)
    ENTERO          reduce using rule 106 (condicion_booleana -> IS_NOT_EQUAL .)
    DECIMAL         reduce using rule 106 (condicion_booleana -> IS_NOT_EQUAL .)


state 229

    (107) condicion_booleana -> IS_IDENTICAL .

    VARIABLE        reduce using rule 107 (condicion_booleana -> IS_IDENTICAL .)
    CADENA          reduce using rule 107 (condicion_booleana -> IS_IDENTICAL .)
    BOOLEANO        reduce using rule 107 (condicion_booleana -> IS_IDENTICAL .)
    ENTERO          reduce using rule 107 (condicion_booleana -> IS_IDENTICAL .)
    DECIMAL         reduce using rule 107 (condicion_booleana -> IS_IDENTICAL .)


state 230

    (108) condicion_booleana -> IS_NOT_IDENTICAL .

    VARIABLE        reduce using rule 108 (condicion_booleana -> IS_NOT_IDENTICAL .)
    CADENA          reduce using rule 108 (condicion_booleana -> IS_NOT_IDENTICAL .)
    BOOLEANO        reduce using rule 108 (condicion_booleana -> IS_NOT_IDENTICAL .)
    ENTERO          reduce using rule 108 (condicion_booleana -> IS_NOT_IDENTICAL .)
    DECIMAL         reduce using rule 108 (condicion_booleana -> IS_NOT_IDENTICAL .)


state 231

    (62) condicion -> valor operador_logico . valor
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    VARIABLE        shift and go to state 99
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    valor                          shift and go to state 276
    tipoDato                       shift and go to state 80
    bcolas                         shift and go to state 87
    bpila                          shift and go to state 88
    numero                         shift and go to state 82

state 232

    (65) condicion -> valor condicion_booleana . valor
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    VARIABLE        shift and go to state 99
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    valor                          shift and go to state 277
    tipoDato                       shift and go to state 80
    bcolas                         shift and go to state 87
    bpila                          shift and go to state 88
    numero                         shift and go to state 82

state 233

    (80) bdo -> DO LBRACE cuerpo RBRACE . bwhile
    (78) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (79) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque

    WHILE           shift and go to state 45

    bwhile                         shift and go to state 278

state 234

    (67) bfor -> FOR LPAREN asignacion condicion . SEMI for_incr RPAREN stc_bloque_def

    SEMI            shift and go to state 279


state 235

    (77) bforeach -> FOREACH LPAREN VARIABLE AS . VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 280


state 236

    (70) stc_bloque_def -> LBRACE stc_bloque . RBRACE
    (68) stc_bloque -> stc_bloque . SEMI cuerpo

    RBRACE          shift and go to state 281
    SEMI            shift and go to state 282


state 237

    (69) stc_bloque -> breturn .

    RBRACE          reduce using rule 69 (stc_bloque -> breturn .)
    SEMI            reduce using rule 69 (stc_bloque -> breturn .)
    $end            reduce using rule 69 (stc_bloque -> breturn .)


state 238

    (85) btry -> TRY LBRACE stc_bloque_def RBRACE . catches
    (86) catches -> . catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def
    (87) catches -> . empty
    (141) empty -> .

    CATCH           reduce using rule 141 (empty -> .)
    $end            reduce using rule 141 (empty -> .)
    RBRACE          reduce using rule 141 (empty -> .)
    SEMI            reduce using rule 141 (empty -> .)

    catches                        shift and go to state 283
    empty                          shift and go to state 284

state 239

    (55) condicion_elseif -> ELSEIF LPAREN condicion RPAREN . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 285


state 240

    (56) condicion_else -> ELSE LBRACE cuerpo RBRACE .

    $end            reduce using rule 56 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 56 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    SEMI            reduce using rule 56 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)


state 241

    (81) bswitch -> SWITCH LPAREN VARIABLE RPAREN . LBRACE cuerpo SEMI RBRACE

    LBRACE          shift and go to state 286


state 242

    (127) brand -> RAND LPAREN ENTERO COMMA . ENTERO RPAREN SEMI

    ENTERO          shift and go to state 287


state 243

    (146) escribir -> FWRITE LPAREN NOMBRE COMMA . CADENA RPAREN SEMI

    CADENA          shift and go to state 288


state 244

    (147) btrim -> TRIM LPAREN NOMBRE LPAREN . NOMBRE RPAREN RPAREN SEMI

    NOMBRE          shift and go to state 289


state 245

    (121) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list . RPAREN stc_bloque_def
    (122) params_list -> params_list . COMMA param

    RPAREN          shift and go to state 290
    COMMA           shift and go to state 291


state 246

    (125) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . stc_bloque_def
    (126) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . LBRACE empty RBRACE
    (124) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN . COLON VOID LBRACE empty RBRACE
    (70) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 293
    COLON           shift and go to state 294

    stc_bloque_def                 shift and go to state 292

state 247

    (123) params_list -> param .

    RPAREN          reduce using rule 123 (params_list -> param .)
    COMMA           reduce using rule 123 (params_list -> param .)


state 248

    (119) param -> VARIABLE .
    (30) asignacion -> VARIABLE . EQUALS valor SEMI
    (33) asignacion -> VARIABLE . EQUALS brand
    (34) asignacion -> VARIABLE . EQUALS escribir
    (35) asignacion -> VARIABLE . EQUALS btrim
    (36) asignacion -> VARIABLE . EQUALS lectura
    (37) asignacion -> VARIABLE . EQUALS bconcat

    RPAREN          reduce using rule 119 (param -> VARIABLE .)
    COMMA           reduce using rule 119 (param -> VARIABLE .)
    EQUALS          shift and go to state 168


state 249

    (120) param -> asignacion .

    RPAREN          reduce using rule 120 (param -> asignacion .)
    COMMA           reduce using rule 120 (param -> asignacion .)


state 250

    (54) condicion_if -> IF LPAREN condicion RPAREN . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 295


state 251

    (52) imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET . SEMI

    SEMI            shift and go to state 296


state 252

    (156) bconcat -> CADENA CONCAT CADENA SEMI .

    $end            reduce using rule 156 (bconcat -> CADENA CONCAT CADENA SEMI .)
    RBRACE          reduce using rule 156 (bconcat -> CADENA CONCAT CADENA SEMI .)
    SEMI            reduce using rule 156 (bconcat -> CADENA CONCAT CADENA SEMI .)
    VARIABLE        reduce using rule 156 (bconcat -> CADENA CONCAT CADENA SEMI .)
    CADENA          reduce using rule 156 (bconcat -> CADENA CONCAT CADENA SEMI .)
    BOOLEANO        reduce using rule 156 (bconcat -> CADENA CONCAT CADENA SEMI .)
    ENTERO          reduce using rule 156 (bconcat -> CADENA CONCAT CADENA SEMI .)
    DECIMAL         reduce using rule 156 (bconcat -> CADENA CONCAT CADENA SEMI .)
    RPAREN          reduce using rule 156 (bconcat -> CADENA CONCAT CADENA SEMI .)
    COMMA           reduce using rule 156 (bconcat -> CADENA CONCAT CADENA SEMI .)


state 253

    (160) bconcat -> CADENA CONCAT_EQUAL CADENA SEMI .

    $end            reduce using rule 160 (bconcat -> CADENA CONCAT_EQUAL CADENA SEMI .)
    RBRACE          reduce using rule 160 (bconcat -> CADENA CONCAT_EQUAL CADENA SEMI .)
    SEMI            reduce using rule 160 (bconcat -> CADENA CONCAT_EQUAL CADENA SEMI .)
    VARIABLE        reduce using rule 160 (bconcat -> CADENA CONCAT_EQUAL CADENA SEMI .)
    CADENA          reduce using rule 160 (bconcat -> CADENA CONCAT_EQUAL CADENA SEMI .)
    BOOLEANO        reduce using rule 160 (bconcat -> CADENA CONCAT_EQUAL CADENA SEMI .)
    ENTERO          reduce using rule 160 (bconcat -> CADENA CONCAT_EQUAL CADENA SEMI .)
    DECIMAL         reduce using rule 160 (bconcat -> CADENA CONCAT_EQUAL CADENA SEMI .)
    RPAREN          reduce using rule 160 (bconcat -> CADENA CONCAT_EQUAL CADENA SEMI .)
    COMMA           reduce using rule 160 (bconcat -> CADENA CONCAT_EQUAL CADENA SEMI .)


state 254

    (157) bconcat -> VARIABLE CONCAT VARIABLE SEMI .

    $end            reduce using rule 157 (bconcat -> VARIABLE CONCAT VARIABLE SEMI .)
    RBRACE          reduce using rule 157 (bconcat -> VARIABLE CONCAT VARIABLE SEMI .)
    SEMI            reduce using rule 157 (bconcat -> VARIABLE CONCAT VARIABLE SEMI .)
    VARIABLE        reduce using rule 157 (bconcat -> VARIABLE CONCAT VARIABLE SEMI .)
    CADENA          reduce using rule 157 (bconcat -> VARIABLE CONCAT VARIABLE SEMI .)
    BOOLEANO        reduce using rule 157 (bconcat -> VARIABLE CONCAT VARIABLE SEMI .)
    ENTERO          reduce using rule 157 (bconcat -> VARIABLE CONCAT VARIABLE SEMI .)
    DECIMAL         reduce using rule 157 (bconcat -> VARIABLE CONCAT VARIABLE SEMI .)
    RPAREN          reduce using rule 157 (bconcat -> VARIABLE CONCAT VARIABLE SEMI .)
    COMMA           reduce using rule 157 (bconcat -> VARIABLE CONCAT VARIABLE SEMI .)


state 255

    (158) bconcat -> VARIABLE CONCAT CADENA SEMI .

    $end            reduce using rule 158 (bconcat -> VARIABLE CONCAT CADENA SEMI .)
    RBRACE          reduce using rule 158 (bconcat -> VARIABLE CONCAT CADENA SEMI .)
    SEMI            reduce using rule 158 (bconcat -> VARIABLE CONCAT CADENA SEMI .)
    VARIABLE        reduce using rule 158 (bconcat -> VARIABLE CONCAT CADENA SEMI .)
    CADENA          reduce using rule 158 (bconcat -> VARIABLE CONCAT CADENA SEMI .)
    BOOLEANO        reduce using rule 158 (bconcat -> VARIABLE CONCAT CADENA SEMI .)
    ENTERO          reduce using rule 158 (bconcat -> VARIABLE CONCAT CADENA SEMI .)
    DECIMAL         reduce using rule 158 (bconcat -> VARIABLE CONCAT CADENA SEMI .)
    RPAREN          reduce using rule 158 (bconcat -> VARIABLE CONCAT CADENA SEMI .)
    COMMA           reduce using rule 158 (bconcat -> VARIABLE CONCAT CADENA SEMI .)


state 256

    (159) bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI .

    $end            reduce using rule 159 (bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI .)
    RBRACE          reduce using rule 159 (bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI .)
    SEMI            reduce using rule 159 (bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI .)
    VARIABLE        reduce using rule 159 (bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI .)
    CADENA          reduce using rule 159 (bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI .)
    BOOLEANO        reduce using rule 159 (bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI .)
    ENTERO          reduce using rule 159 (bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI .)
    DECIMAL         reduce using rule 159 (bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI .)
    RPAREN          reduce using rule 159 (bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI .)
    COMMA           reduce using rule 159 (bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI .)


state 257

    (51) imprimir -> PRINT LPAREN valor RPAREN SEMI .

    $end            reduce using rule 51 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    RBRACE          reduce using rule 51 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    SEMI            reduce using rule 51 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)


state 258

    (112) operaciones_mat_par -> LPAREN valor operadores valor RPAREN .

    $end            reduce using rule 112 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    RBRACE          reduce using rule 112 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    SEMI            reduce using rule 112 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    RPAREN          reduce using rule 112 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)


state 259

    (113) operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .

    $end            reduce using rule 113 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    RBRACE          reduce using rule 113 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    SEMI            reduce using rule 113 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    RPAREN          reduce using rule 113 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)


state 260

    (142) bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 297


state 261

    (143) bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 298


state 262

    (137) array_def -> ARRAY LPAREN RPAREN .

    SEMI            reduce using rule 137 (array_def -> ARRAY LPAREN RPAREN .)


state 263

    (138) array_def -> ARRAY LPAREN array_elmnt . RPAREN
    (139) array_elmnt -> array_elmnt . COMMA valor

    RPAREN          shift and go to state 299
    COMMA           shift and go to state 300


state 264

    (140) array_elmnt -> valor .

    RPAREN          reduce using rule 140 (array_elmnt -> valor .)
    COMMA           reduce using rule 140 (array_elmnt -> valor .)


state 265

    (169) casting -> VARIABLE LPAREN tiposCast RPAREN VARIABLE . SEMI

    SEMI            shift and go to state 301


state 266

    (125) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . stc_bloque_def
    (126) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . LBRACE empty RBRACE
    (70) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 293

    stc_bloque_def                 shift and go to state 292

state 267

    (39) constante -> DEFINE LPAREN CADENA COMMA valor . RPAREN SEMI

    RPAREN          shift and go to state 302


state 268

    (40) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY . RPAREN SEMI

    RPAREN          shift and go to state 303


state 269

    (144) lectura -> READLINE LPAREN CADENA RPAREN SEMI .

    $end            reduce using rule 144 (lectura -> READLINE LPAREN CADENA RPAREN SEMI .)
    RBRACE          reduce using rule 144 (lectura -> READLINE LPAREN CADENA RPAREN SEMI .)
    SEMI            reduce using rule 144 (lectura -> READLINE LPAREN CADENA RPAREN SEMI .)
    VARIABLE        reduce using rule 144 (lectura -> READLINE LPAREN CADENA RPAREN SEMI .)
    CADENA          reduce using rule 144 (lectura -> READLINE LPAREN CADENA RPAREN SEMI .)
    BOOLEANO        reduce using rule 144 (lectura -> READLINE LPAREN CADENA RPAREN SEMI .)
    ENTERO          reduce using rule 144 (lectura -> READLINE LPAREN CADENA RPAREN SEMI .)
    DECIMAL         reduce using rule 144 (lectura -> READLINE LPAREN CADENA RPAREN SEMI .)
    RPAREN          reduce using rule 144 (lectura -> READLINE LPAREN CADENA RPAREN SEMI .)
    COMMA           reduce using rule 144 (lectura -> READLINE LPAREN CADENA RPAREN SEMI .)


state 270

    (78) bwhile -> WHILE LPAREN condicion RPAREN LBRACE . stc_bloque RBRACE
    (68) stc_bloque -> . stc_bloque SEMI cuerpo
    (69) stc_bloque -> . breturn
    (132) breturn -> . empty
    (133) breturn -> . RETURN SEMI
    (134) breturn -> . RETURN NULL SEMI
    (135) breturn -> . RETURN VARIABLE SEMI
    (136) breturn -> . RETURN BOOLEANO SEMI
    (141) empty -> .

    RETURN          shift and go to state 71
    RBRACE          reduce using rule 141 (empty -> .)
    SEMI            reduce using rule 141 (empty -> .)

    stc_bloque                     shift and go to state 304
    breturn                        shift and go to state 237
    empty                          shift and go to state 70

state 271

    (79) bwhile -> WHILE LPAREN condicion RPAREN COLON . stc_bloque
    (68) stc_bloque -> . stc_bloque SEMI cuerpo
    (69) stc_bloque -> . breturn
    (132) breturn -> . empty
    (133) breturn -> . RETURN SEMI
    (134) breturn -> . RETURN NULL SEMI
    (135) breturn -> . RETURN VARIABLE SEMI
    (136) breturn -> . RETURN BOOLEANO SEMI
    (141) empty -> .

    RETURN          shift and go to state 71
    RBRACE          reduce using rule 141 (empty -> .)
    SEMI            reduce using rule 141 (empty -> .)
    $end            reduce using rule 141 (empty -> .)

    stc_bloque                     shift and go to state 305
    breturn                        shift and go to state 237
    empty                          shift and go to state 70

state 272

    (61) condicion -> VARIABLE operador_logico VARIABLE .
    (142) bcolas -> VARIABLE . EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> VARIABLE . EQUALS NEW SPLSTACK LPAREN RPAREN SEMI

    RPAREN          reduce using rule 61 (condicion -> VARIABLE operador_logico VARIABLE .)
    SEMI            reduce using rule 61 (condicion -> VARIABLE operador_logico VARIABLE .)
    EQUALS          shift and go to state 144


state 273

    (63) condicion -> VARIABLE operador_logico valor .

    RPAREN          reduce using rule 63 (condicion -> VARIABLE operador_logico valor .)
    SEMI            reduce using rule 63 (condicion -> VARIABLE operador_logico valor .)


state 274

    (64) condicion -> VARIABLE condicion_booleana VARIABLE .
    (142) bcolas -> VARIABLE . EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> VARIABLE . EQUALS NEW SPLSTACK LPAREN RPAREN SEMI

    RPAREN          reduce using rule 64 (condicion -> VARIABLE condicion_booleana VARIABLE .)
    SEMI            reduce using rule 64 (condicion -> VARIABLE condicion_booleana VARIABLE .)
    EQUALS          shift and go to state 144


state 275

    (66) condicion -> VARIABLE condicion_booleana valor .

    RPAREN          reduce using rule 66 (condicion -> VARIABLE condicion_booleana valor .)
    SEMI            reduce using rule 66 (condicion -> VARIABLE condicion_booleana valor .)


state 276

    (62) condicion -> valor operador_logico valor .

    RPAREN          reduce using rule 62 (condicion -> valor operador_logico valor .)
    SEMI            reduce using rule 62 (condicion -> valor operador_logico valor .)


state 277

    (65) condicion -> valor condicion_booleana valor .

    RPAREN          reduce using rule 65 (condicion -> valor condicion_booleana valor .)
    SEMI            reduce using rule 65 (condicion -> valor condicion_booleana valor .)


state 278

    (80) bdo -> DO LBRACE cuerpo RBRACE bwhile .

    $end            reduce using rule 80 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    RBRACE          reduce using rule 80 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    SEMI            reduce using rule 80 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)


state 279

    (67) bfor -> FOR LPAREN asignacion condicion SEMI . for_incr RPAREN stc_bloque_def
    (71) for_incr -> . VARIABLE SUMA SUMA
    (72) for_incr -> . SUMA SUMA VARIABLE
    (73) for_incr -> . VARIABLE RESTA RESTA
    (74) for_incr -> . RESTA RESTA VARIABLE
    (75) for_incr -> . VARIABLE SUMA EQUALS numero
    (76) for_incr -> . VARIABLE RESTA EQUALS numero

    VARIABLE        shift and go to state 307
    SUMA            shift and go to state 308
    RESTA           shift and go to state 309

    for_incr                       shift and go to state 306

state 280

    (77) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE . RPAREN stc_bloque_def

    RPAREN          shift and go to state 310


state 281

    (70) stc_bloque_def -> LBRACE stc_bloque RBRACE .

    RBRACE          reduce using rule 70 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    $end            reduce using rule 70 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    SEMI            reduce using rule 70 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    CATCH           reduce using rule 70 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)


state 282

    (68) stc_bloque -> stc_bloque SEMI . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . bwhile
    (8) cuerpo -> . bdo
    (9) cuerpo -> . bfor
    (10) cuerpo -> . bforeach
    (11) cuerpo -> . btry
    (12) cuerpo -> . operaciones_mat
    (13) cuerpo -> . condicion_ifelse
    (14) cuerpo -> . condicion_elseif
    (15) cuerpo -> . condicion_else
    (16) cuerpo -> . bswitch
    (17) cuerpo -> . bcase
    (18) cuerpo -> . bgoto
    (19) cuerpo -> . bcolas
    (20) cuerpo -> . bpila
    (21) cuerpo -> . incrementos_mat
    (22) cuerpo -> . bcortes
    (23) cuerpo -> . brand
    (24) cuerpo -> . escribir
    (25) cuerpo -> . btrim
    (26) cuerpo -> . otros
    (27) cuerpo -> . breturn
    (28) cuerpo -> . comment
    (29) cuerpo -> . casting
    (49) imprimir -> . ECHO valor SEMI
    (50) imprimir -> . PRINT valor SEMI
    (51) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (52) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (53) imprimir -> . ECHO bconcat
    (30) asignacion -> . VARIABLE EQUALS valor SEMI
    (31) asignacion -> . VAR asignacion
    (32) asignacion -> . proteccion asignacion
    (33) asignacion -> . VARIABLE EQUALS brand
    (34) asignacion -> . VARIABLE EQUALS escribir
    (35) asignacion -> . VARIABLE EQUALS btrim
    (36) asignacion -> . VARIABLE EQUALS lectura
    (37) asignacion -> . VARIABLE EQUALS bconcat
    (38) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (114) funciones -> . funcion_nparams
    (115) funciones -> . proteccion funcion_nparams
    (116) funciones -> . funcion_blank
    (117) funciones -> . proteccion funcion_blank
    (118) funciones -> . funcion_void
    (39) constante -> . DEFINE LPAREN CADENA COMMA valor RPAREN SEMI
    (40) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (144) lectura -> . READLINE LPAREN CADENA RPAREN SEMI
    (145) lectura -> . READLINE LPAREN RPAREN SEMI
    (78) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (79) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (80) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (67) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (77) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (85) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (109) operaciones_mat -> . valor operadores valor
    (110) operaciones_mat -> . valor operadores operaciones_mat
    (111) operaciones_mat -> . operaciones_mat_par
    (57) condicion_ifelse -> . condicion_if
    (58) condicion_ifelse -> . condicion_if condicion_else
    (59) condicion_ifelse -> . condicion_if condicion_elseif
    (60) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (55) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (56) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (81) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE
    (82) bcase -> . CASE ENTERO COLON
    (150) bgoto -> . GOTO NOMBRE SEMI
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (97) incrementos_mat -> . MINUS_EQUAL
    (98) incrementos_mat -> . MOD_EQUAL
    (99) incrementos_mat -> . MUL_EQUAL
    (100) incrementos_mat -> . PLUS_EQUAL
    (101) incrementos_mat -> . DIV_EQUAL
    (151) bcortes -> . EXIT SEMI
    (152) bcortes -> . BREAK SEMI
    (153) bcortes -> . DEFAULT SEMI
    (154) bcortes -> . CONTINUE SEMI
    (127) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (146) escribir -> . FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI
    (147) btrim -> . TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
    (155) otros -> . SMALLER NOMBRE GREATER
    (132) breturn -> . empty
    (133) breturn -> . RETURN SEMI
    (134) breturn -> . RETURN NULL SEMI
    (135) breturn -> . RETURN VARIABLE SEMI
    (136) breturn -> . RETURN BOOLEANO SEMI
    (148) comment -> . COMENTARIOS
    (149) comment -> . DOC_COMENTARIOS
    (169) casting -> . VARIABLE LPAREN tiposCast RPAREN VARIABLE SEMI
    (128) proteccion -> . PUBLIC
    (129) proteccion -> . PRIVATE
    (130) proteccion -> . PROTECTED
    (131) proteccion -> . STATIC
    (121) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (125) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (126) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (124) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (112) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (113) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (54) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (141) empty -> .
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    ECHO            shift and go to state 31
    PRINT           shift and go to state 33
    VARIABLE        shift and go to state 36
    VAR             shift and go to state 37
    DEFINE          shift and go to state 42
    READLINE        shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    FOREACH         shift and go to state 48
    TRY             shift and go to state 49
    ELSEIF          shift and go to state 52
    ELSE            shift and go to state 53
    SWITCH          shift and go to state 54
    CASE            shift and go to state 55
    GOTO            shift and go to state 56
    MINUS_EQUAL     shift and go to state 57
    MOD_EQUAL       shift and go to state 58
    MUL_EQUAL       shift and go to state 59
    PLUS_EQUAL      shift and go to state 60
    DIV_EQUAL       shift and go to state 61
    EXIT            shift and go to state 62
    BREAK           shift and go to state 63
    DEFAULT         shift and go to state 64
    CONTINUE        shift and go to state 65
    RAND            shift and go to state 66
    FWRITE          shift and go to state 67
    TRIM            shift and go to state 68
    SMALLER         shift and go to state 69
    RETURN          shift and go to state 71
    COMENTARIOS     shift and go to state 73
    DOC_COMENTARIOS shift and go to state 74
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78
    FUNCTION        shift and go to state 79
    LPAREN          shift and go to state 34
    IF              shift and go to state 81
    RBRACE          reduce using rule 141 (empty -> .)
    SEMI            reduce using rule 141 (empty -> .)
    $end            reduce using rule 141 (empty -> .)
    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    cuerpo                         shift and go to state 311
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    bwhile                         shift and go to state 8
    bdo                            shift and go to state 9
    bfor                           shift and go to state 10
    bforeach                       shift and go to state 11
    btry                           shift and go to state 12
    operaciones_mat                shift and go to state 13
    condicion_ifelse               shift and go to state 14
    condicion_elseif               shift and go to state 15
    condicion_else                 shift and go to state 16
    bswitch                        shift and go to state 17
    bcase                          shift and go to state 18
    bgoto                          shift and go to state 19
    bcolas                         shift and go to state 20
    bpila                          shift and go to state 21
    incrementos_mat                shift and go to state 22
    bcortes                        shift and go to state 23
    brand                          shift and go to state 24
    escribir                       shift and go to state 25
    btrim                          shift and go to state 26
    otros                          shift and go to state 27
    breturn                        shift and go to state 28
    comment                        shift and go to state 29
    casting                        shift and go to state 30
    valor                          shift and go to state 32
    proteccion                     shift and go to state 38
    funcion_nparams                shift and go to state 39
    funcion_blank                  shift and go to state 40
    funcion_void                   shift and go to state 41
    operaciones_mat_par            shift and go to state 50
    condicion_if                   shift and go to state 51
    empty                          shift and go to state 70
    tipoDato                       shift and go to state 80
    numero                         shift and go to state 82

state 283

    (85) btry -> TRY LBRACE stc_bloque_def RBRACE catches .
    (86) catches -> catches . CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def

    $end            reduce using rule 85 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    RBRACE          reduce using rule 85 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    SEMI            reduce using rule 85 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    CATCH           shift and go to state 312


state 284

    (87) catches -> empty .

    CATCH           reduce using rule 87 (catches -> empty .)
    $end            reduce using rule 87 (catches -> empty .)
    RBRACE          reduce using rule 87 (catches -> empty .)
    SEMI            reduce using rule 87 (catches -> empty .)


state 285

    (55) condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE . cuerpo RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . bwhile
    (8) cuerpo -> . bdo
    (9) cuerpo -> . bfor
    (10) cuerpo -> . bforeach
    (11) cuerpo -> . btry
    (12) cuerpo -> . operaciones_mat
    (13) cuerpo -> . condicion_ifelse
    (14) cuerpo -> . condicion_elseif
    (15) cuerpo -> . condicion_else
    (16) cuerpo -> . bswitch
    (17) cuerpo -> . bcase
    (18) cuerpo -> . bgoto
    (19) cuerpo -> . bcolas
    (20) cuerpo -> . bpila
    (21) cuerpo -> . incrementos_mat
    (22) cuerpo -> . bcortes
    (23) cuerpo -> . brand
    (24) cuerpo -> . escribir
    (25) cuerpo -> . btrim
    (26) cuerpo -> . otros
    (27) cuerpo -> . breturn
    (28) cuerpo -> . comment
    (29) cuerpo -> . casting
    (49) imprimir -> . ECHO valor SEMI
    (50) imprimir -> . PRINT valor SEMI
    (51) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (52) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (53) imprimir -> . ECHO bconcat
    (30) asignacion -> . VARIABLE EQUALS valor SEMI
    (31) asignacion -> . VAR asignacion
    (32) asignacion -> . proteccion asignacion
    (33) asignacion -> . VARIABLE EQUALS brand
    (34) asignacion -> . VARIABLE EQUALS escribir
    (35) asignacion -> . VARIABLE EQUALS btrim
    (36) asignacion -> . VARIABLE EQUALS lectura
    (37) asignacion -> . VARIABLE EQUALS bconcat
    (38) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (114) funciones -> . funcion_nparams
    (115) funciones -> . proteccion funcion_nparams
    (116) funciones -> . funcion_blank
    (117) funciones -> . proteccion funcion_blank
    (118) funciones -> . funcion_void
    (39) constante -> . DEFINE LPAREN CADENA COMMA valor RPAREN SEMI
    (40) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (144) lectura -> . READLINE LPAREN CADENA RPAREN SEMI
    (145) lectura -> . READLINE LPAREN RPAREN SEMI
    (78) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (79) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (80) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (67) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (77) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (85) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (109) operaciones_mat -> . valor operadores valor
    (110) operaciones_mat -> . valor operadores operaciones_mat
    (111) operaciones_mat -> . operaciones_mat_par
    (57) condicion_ifelse -> . condicion_if
    (58) condicion_ifelse -> . condicion_if condicion_else
    (59) condicion_ifelse -> . condicion_if condicion_elseif
    (60) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (55) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (56) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (81) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE
    (82) bcase -> . CASE ENTERO COLON
    (150) bgoto -> . GOTO NOMBRE SEMI
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (97) incrementos_mat -> . MINUS_EQUAL
    (98) incrementos_mat -> . MOD_EQUAL
    (99) incrementos_mat -> . MUL_EQUAL
    (100) incrementos_mat -> . PLUS_EQUAL
    (101) incrementos_mat -> . DIV_EQUAL
    (151) bcortes -> . EXIT SEMI
    (152) bcortes -> . BREAK SEMI
    (153) bcortes -> . DEFAULT SEMI
    (154) bcortes -> . CONTINUE SEMI
    (127) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (146) escribir -> . FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI
    (147) btrim -> . TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
    (155) otros -> . SMALLER NOMBRE GREATER
    (132) breturn -> . empty
    (133) breturn -> . RETURN SEMI
    (134) breturn -> . RETURN NULL SEMI
    (135) breturn -> . RETURN VARIABLE SEMI
    (136) breturn -> . RETURN BOOLEANO SEMI
    (148) comment -> . COMENTARIOS
    (149) comment -> . DOC_COMENTARIOS
    (169) casting -> . VARIABLE LPAREN tiposCast RPAREN VARIABLE SEMI
    (128) proteccion -> . PUBLIC
    (129) proteccion -> . PRIVATE
    (130) proteccion -> . PROTECTED
    (131) proteccion -> . STATIC
    (121) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (125) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (126) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (124) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (112) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (113) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (54) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (141) empty -> .
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    ECHO            shift and go to state 31
    PRINT           shift and go to state 33
    VARIABLE        shift and go to state 36
    VAR             shift and go to state 37
    DEFINE          shift and go to state 42
    READLINE        shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    FOREACH         shift and go to state 48
    TRY             shift and go to state 49
    ELSEIF          shift and go to state 52
    ELSE            shift and go to state 53
    SWITCH          shift and go to state 54
    CASE            shift and go to state 55
    GOTO            shift and go to state 56
    MINUS_EQUAL     shift and go to state 57
    MOD_EQUAL       shift and go to state 58
    MUL_EQUAL       shift and go to state 59
    PLUS_EQUAL      shift and go to state 60
    DIV_EQUAL       shift and go to state 61
    EXIT            shift and go to state 62
    BREAK           shift and go to state 63
    DEFAULT         shift and go to state 64
    CONTINUE        shift and go to state 65
    RAND            shift and go to state 66
    FWRITE          shift and go to state 67
    TRIM            shift and go to state 68
    SMALLER         shift and go to state 69
    RETURN          shift and go to state 71
    COMENTARIOS     shift and go to state 73
    DOC_COMENTARIOS shift and go to state 74
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78
    FUNCTION        shift and go to state 79
    LPAREN          shift and go to state 34
    IF              shift and go to state 81
    RBRACE          reduce using rule 141 (empty -> .)
    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    cuerpo                         shift and go to state 313
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    bwhile                         shift and go to state 8
    bdo                            shift and go to state 9
    bfor                           shift and go to state 10
    bforeach                       shift and go to state 11
    btry                           shift and go to state 12
    operaciones_mat                shift and go to state 13
    condicion_ifelse               shift and go to state 14
    condicion_elseif               shift and go to state 15
    condicion_else                 shift and go to state 16
    bswitch                        shift and go to state 17
    bcase                          shift and go to state 18
    bgoto                          shift and go to state 19
    bcolas                         shift and go to state 20
    bpila                          shift and go to state 21
    incrementos_mat                shift and go to state 22
    bcortes                        shift and go to state 23
    brand                          shift and go to state 24
    escribir                       shift and go to state 25
    btrim                          shift and go to state 26
    otros                          shift and go to state 27
    breturn                        shift and go to state 28
    comment                        shift and go to state 29
    casting                        shift and go to state 30
    valor                          shift and go to state 32
    proteccion                     shift and go to state 38
    funcion_nparams                shift and go to state 39
    funcion_blank                  shift and go to state 40
    funcion_void                   shift and go to state 41
    operaciones_mat_par            shift and go to state 50
    condicion_if                   shift and go to state 51
    empty                          shift and go to state 70
    tipoDato                       shift and go to state 80
    numero                         shift and go to state 82

state 286

    (81) bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE . cuerpo SEMI RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . bwhile
    (8) cuerpo -> . bdo
    (9) cuerpo -> . bfor
    (10) cuerpo -> . bforeach
    (11) cuerpo -> . btry
    (12) cuerpo -> . operaciones_mat
    (13) cuerpo -> . condicion_ifelse
    (14) cuerpo -> . condicion_elseif
    (15) cuerpo -> . condicion_else
    (16) cuerpo -> . bswitch
    (17) cuerpo -> . bcase
    (18) cuerpo -> . bgoto
    (19) cuerpo -> . bcolas
    (20) cuerpo -> . bpila
    (21) cuerpo -> . incrementos_mat
    (22) cuerpo -> . bcortes
    (23) cuerpo -> . brand
    (24) cuerpo -> . escribir
    (25) cuerpo -> . btrim
    (26) cuerpo -> . otros
    (27) cuerpo -> . breturn
    (28) cuerpo -> . comment
    (29) cuerpo -> . casting
    (49) imprimir -> . ECHO valor SEMI
    (50) imprimir -> . PRINT valor SEMI
    (51) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (52) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (53) imprimir -> . ECHO bconcat
    (30) asignacion -> . VARIABLE EQUALS valor SEMI
    (31) asignacion -> . VAR asignacion
    (32) asignacion -> . proteccion asignacion
    (33) asignacion -> . VARIABLE EQUALS brand
    (34) asignacion -> . VARIABLE EQUALS escribir
    (35) asignacion -> . VARIABLE EQUALS btrim
    (36) asignacion -> . VARIABLE EQUALS lectura
    (37) asignacion -> . VARIABLE EQUALS bconcat
    (38) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (114) funciones -> . funcion_nparams
    (115) funciones -> . proteccion funcion_nparams
    (116) funciones -> . funcion_blank
    (117) funciones -> . proteccion funcion_blank
    (118) funciones -> . funcion_void
    (39) constante -> . DEFINE LPAREN CADENA COMMA valor RPAREN SEMI
    (40) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (144) lectura -> . READLINE LPAREN CADENA RPAREN SEMI
    (145) lectura -> . READLINE LPAREN RPAREN SEMI
    (78) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (79) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (80) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (67) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (77) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (85) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (109) operaciones_mat -> . valor operadores valor
    (110) operaciones_mat -> . valor operadores operaciones_mat
    (111) operaciones_mat -> . operaciones_mat_par
    (57) condicion_ifelse -> . condicion_if
    (58) condicion_ifelse -> . condicion_if condicion_else
    (59) condicion_ifelse -> . condicion_if condicion_elseif
    (60) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (55) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (56) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (81) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE
    (82) bcase -> . CASE ENTERO COLON
    (150) bgoto -> . GOTO NOMBRE SEMI
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (97) incrementos_mat -> . MINUS_EQUAL
    (98) incrementos_mat -> . MOD_EQUAL
    (99) incrementos_mat -> . MUL_EQUAL
    (100) incrementos_mat -> . PLUS_EQUAL
    (101) incrementos_mat -> . DIV_EQUAL
    (151) bcortes -> . EXIT SEMI
    (152) bcortes -> . BREAK SEMI
    (153) bcortes -> . DEFAULT SEMI
    (154) bcortes -> . CONTINUE SEMI
    (127) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (146) escribir -> . FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI
    (147) btrim -> . TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
    (155) otros -> . SMALLER NOMBRE GREATER
    (132) breturn -> . empty
    (133) breturn -> . RETURN SEMI
    (134) breturn -> . RETURN NULL SEMI
    (135) breturn -> . RETURN VARIABLE SEMI
    (136) breturn -> . RETURN BOOLEANO SEMI
    (148) comment -> . COMENTARIOS
    (149) comment -> . DOC_COMENTARIOS
    (169) casting -> . VARIABLE LPAREN tiposCast RPAREN VARIABLE SEMI
    (128) proteccion -> . PUBLIC
    (129) proteccion -> . PRIVATE
    (130) proteccion -> . PROTECTED
    (131) proteccion -> . STATIC
    (121) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (125) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (126) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (124) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (112) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (113) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (54) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (141) empty -> .
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    ECHO            shift and go to state 31
    PRINT           shift and go to state 33
    VARIABLE        shift and go to state 36
    VAR             shift and go to state 37
    DEFINE          shift and go to state 42
    READLINE        shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    FOREACH         shift and go to state 48
    TRY             shift and go to state 49
    ELSEIF          shift and go to state 52
    ELSE            shift and go to state 53
    SWITCH          shift and go to state 54
    CASE            shift and go to state 55
    GOTO            shift and go to state 56
    MINUS_EQUAL     shift and go to state 57
    MOD_EQUAL       shift and go to state 58
    MUL_EQUAL       shift and go to state 59
    PLUS_EQUAL      shift and go to state 60
    DIV_EQUAL       shift and go to state 61
    EXIT            shift and go to state 62
    BREAK           shift and go to state 63
    DEFAULT         shift and go to state 64
    CONTINUE        shift and go to state 65
    RAND            shift and go to state 66
    FWRITE          shift and go to state 67
    TRIM            shift and go to state 68
    SMALLER         shift and go to state 69
    RETURN          shift and go to state 71
    COMENTARIOS     shift and go to state 73
    DOC_COMENTARIOS shift and go to state 74
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78
    FUNCTION        shift and go to state 79
    LPAREN          shift and go to state 34
    IF              shift and go to state 81
    SEMI            reduce using rule 141 (empty -> .)
    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    cuerpo                         shift and go to state 314
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    bwhile                         shift and go to state 8
    bdo                            shift and go to state 9
    bfor                           shift and go to state 10
    bforeach                       shift and go to state 11
    btry                           shift and go to state 12
    operaciones_mat                shift and go to state 13
    condicion_ifelse               shift and go to state 14
    condicion_elseif               shift and go to state 15
    condicion_else                 shift and go to state 16
    bswitch                        shift and go to state 17
    bcase                          shift and go to state 18
    bgoto                          shift and go to state 19
    bcolas                         shift and go to state 20
    bpila                          shift and go to state 21
    incrementos_mat                shift and go to state 22
    bcortes                        shift and go to state 23
    brand                          shift and go to state 24
    escribir                       shift and go to state 25
    btrim                          shift and go to state 26
    otros                          shift and go to state 27
    breturn                        shift and go to state 28
    comment                        shift and go to state 29
    casting                        shift and go to state 30
    valor                          shift and go to state 32
    proteccion                     shift and go to state 38
    funcion_nparams                shift and go to state 39
    funcion_blank                  shift and go to state 40
    funcion_void                   shift and go to state 41
    operaciones_mat_par            shift and go to state 50
    condicion_if                   shift and go to state 51
    empty                          shift and go to state 70
    tipoDato                       shift and go to state 80
    numero                         shift and go to state 82

state 287

    (127) brand -> RAND LPAREN ENTERO COMMA ENTERO . RPAREN SEMI

    RPAREN          shift and go to state 315


state 288

    (146) escribir -> FWRITE LPAREN NOMBRE COMMA CADENA . RPAREN SEMI

    RPAREN          shift and go to state 316


state 289

    (147) btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE . RPAREN RPAREN SEMI

    RPAREN          shift and go to state 317


state 290

    (121) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN . stc_bloque_def
    (70) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 180

    stc_bloque_def                 shift and go to state 318

state 291

    (122) params_list -> params_list COMMA . param
    (119) param -> . VARIABLE
    (120) param -> . asignacion
    (30) asignacion -> . VARIABLE EQUALS valor SEMI
    (31) asignacion -> . VAR asignacion
    (32) asignacion -> . proteccion asignacion
    (33) asignacion -> . VARIABLE EQUALS brand
    (34) asignacion -> . VARIABLE EQUALS escribir
    (35) asignacion -> . VARIABLE EQUALS btrim
    (36) asignacion -> . VARIABLE EQUALS lectura
    (37) asignacion -> . VARIABLE EQUALS bconcat
    (128) proteccion -> . PUBLIC
    (129) proteccion -> . PRIVATE
    (130) proteccion -> . PROTECTED
    (131) proteccion -> . STATIC

    VARIABLE        shift and go to state 248
    VAR             shift and go to state 37
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78

    param                          shift and go to state 319
    asignacion                     shift and go to state 249
    proteccion                     shift and go to state 105

state 292

    (125) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .

    $end            reduce using rule 125 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 125 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    SEMI            reduce using rule 125 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)


state 293

    (126) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE . empty RBRACE
    (70) stc_bloque_def -> LBRACE . stc_bloque RBRACE
    (141) empty -> .
    (68) stc_bloque -> . stc_bloque SEMI cuerpo
    (69) stc_bloque -> . breturn
    (132) breturn -> . empty
    (133) breturn -> . RETURN SEMI
    (134) breturn -> . RETURN NULL SEMI
    (135) breturn -> . RETURN VARIABLE SEMI
    (136) breturn -> . RETURN BOOLEANO SEMI

    RBRACE          reduce using rule 141 (empty -> .)
    SEMI            reduce using rule 141 (empty -> .)
    RETURN          shift and go to state 71

    empty                          shift and go to state 320
    stc_bloque                     shift and go to state 236
    breturn                        shift and go to state 237

state 294

    (124) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON . VOID LBRACE empty RBRACE

    VOID            shift and go to state 321


state 295

    (54) condicion_if -> IF LPAREN condicion RPAREN LBRACE . cuerpo RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . bwhile
    (8) cuerpo -> . bdo
    (9) cuerpo -> . bfor
    (10) cuerpo -> . bforeach
    (11) cuerpo -> . btry
    (12) cuerpo -> . operaciones_mat
    (13) cuerpo -> . condicion_ifelse
    (14) cuerpo -> . condicion_elseif
    (15) cuerpo -> . condicion_else
    (16) cuerpo -> . bswitch
    (17) cuerpo -> . bcase
    (18) cuerpo -> . bgoto
    (19) cuerpo -> . bcolas
    (20) cuerpo -> . bpila
    (21) cuerpo -> . incrementos_mat
    (22) cuerpo -> . bcortes
    (23) cuerpo -> . brand
    (24) cuerpo -> . escribir
    (25) cuerpo -> . btrim
    (26) cuerpo -> . otros
    (27) cuerpo -> . breturn
    (28) cuerpo -> . comment
    (29) cuerpo -> . casting
    (49) imprimir -> . ECHO valor SEMI
    (50) imprimir -> . PRINT valor SEMI
    (51) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (52) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (53) imprimir -> . ECHO bconcat
    (30) asignacion -> . VARIABLE EQUALS valor SEMI
    (31) asignacion -> . VAR asignacion
    (32) asignacion -> . proteccion asignacion
    (33) asignacion -> . VARIABLE EQUALS brand
    (34) asignacion -> . VARIABLE EQUALS escribir
    (35) asignacion -> . VARIABLE EQUALS btrim
    (36) asignacion -> . VARIABLE EQUALS lectura
    (37) asignacion -> . VARIABLE EQUALS bconcat
    (38) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (114) funciones -> . funcion_nparams
    (115) funciones -> . proteccion funcion_nparams
    (116) funciones -> . funcion_blank
    (117) funciones -> . proteccion funcion_blank
    (118) funciones -> . funcion_void
    (39) constante -> . DEFINE LPAREN CADENA COMMA valor RPAREN SEMI
    (40) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (144) lectura -> . READLINE LPAREN CADENA RPAREN SEMI
    (145) lectura -> . READLINE LPAREN RPAREN SEMI
    (78) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (79) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (80) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (67) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (77) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (85) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (109) operaciones_mat -> . valor operadores valor
    (110) operaciones_mat -> . valor operadores operaciones_mat
    (111) operaciones_mat -> . operaciones_mat_par
    (57) condicion_ifelse -> . condicion_if
    (58) condicion_ifelse -> . condicion_if condicion_else
    (59) condicion_ifelse -> . condicion_if condicion_elseif
    (60) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (55) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (56) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (81) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE
    (82) bcase -> . CASE ENTERO COLON
    (150) bgoto -> . GOTO NOMBRE SEMI
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (97) incrementos_mat -> . MINUS_EQUAL
    (98) incrementos_mat -> . MOD_EQUAL
    (99) incrementos_mat -> . MUL_EQUAL
    (100) incrementos_mat -> . PLUS_EQUAL
    (101) incrementos_mat -> . DIV_EQUAL
    (151) bcortes -> . EXIT SEMI
    (152) bcortes -> . BREAK SEMI
    (153) bcortes -> . DEFAULT SEMI
    (154) bcortes -> . CONTINUE SEMI
    (127) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (146) escribir -> . FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI
    (147) btrim -> . TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
    (155) otros -> . SMALLER NOMBRE GREATER
    (132) breturn -> . empty
    (133) breturn -> . RETURN SEMI
    (134) breturn -> . RETURN NULL SEMI
    (135) breturn -> . RETURN VARIABLE SEMI
    (136) breturn -> . RETURN BOOLEANO SEMI
    (148) comment -> . COMENTARIOS
    (149) comment -> . DOC_COMENTARIOS
    (169) casting -> . VARIABLE LPAREN tiposCast RPAREN VARIABLE SEMI
    (128) proteccion -> . PUBLIC
    (129) proteccion -> . PRIVATE
    (130) proteccion -> . PROTECTED
    (131) proteccion -> . STATIC
    (121) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (125) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (126) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (124) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (112) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (113) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (54) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (141) empty -> .
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    ECHO            shift and go to state 31
    PRINT           shift and go to state 33
    VARIABLE        shift and go to state 36
    VAR             shift and go to state 37
    DEFINE          shift and go to state 42
    READLINE        shift and go to state 44
    WHILE           shift and go to state 45
    DO              shift and go to state 46
    FOR             shift and go to state 47
    FOREACH         shift and go to state 48
    TRY             shift and go to state 49
    ELSEIF          shift and go to state 52
    ELSE            shift and go to state 53
    SWITCH          shift and go to state 54
    CASE            shift and go to state 55
    GOTO            shift and go to state 56
    MINUS_EQUAL     shift and go to state 57
    MOD_EQUAL       shift and go to state 58
    MUL_EQUAL       shift and go to state 59
    PLUS_EQUAL      shift and go to state 60
    DIV_EQUAL       shift and go to state 61
    EXIT            shift and go to state 62
    BREAK           shift and go to state 63
    DEFAULT         shift and go to state 64
    CONTINUE        shift and go to state 65
    RAND            shift and go to state 66
    FWRITE          shift and go to state 67
    TRIM            shift and go to state 68
    SMALLER         shift and go to state 69
    RETURN          shift and go to state 71
    COMENTARIOS     shift and go to state 73
    DOC_COMENTARIOS shift and go to state 74
    PUBLIC          shift and go to state 75
    PRIVATE         shift and go to state 76
    PROTECTED       shift and go to state 77
    STATIC          shift and go to state 78
    FUNCTION        shift and go to state 79
    LPAREN          shift and go to state 34
    IF              shift and go to state 81
    RBRACE          reduce using rule 141 (empty -> .)
    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    cuerpo                         shift and go to state 322
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    bwhile                         shift and go to state 8
    bdo                            shift and go to state 9
    bfor                           shift and go to state 10
    bforeach                       shift and go to state 11
    btry                           shift and go to state 12
    operaciones_mat                shift and go to state 13
    condicion_ifelse               shift and go to state 14
    condicion_elseif               shift and go to state 15
    condicion_else                 shift and go to state 16
    bswitch                        shift and go to state 17
    bcase                          shift and go to state 18
    bgoto                          shift and go to state 19
    bcolas                         shift and go to state 20
    bpila                          shift and go to state 21
    incrementos_mat                shift and go to state 22
    bcortes                        shift and go to state 23
    brand                          shift and go to state 24
    escribir                       shift and go to state 25
    btrim                          shift and go to state 26
    otros                          shift and go to state 27
    breturn                        shift and go to state 28
    comment                        shift and go to state 29
    casting                        shift and go to state 30
    valor                          shift and go to state 32
    proteccion                     shift and go to state 38
    funcion_nparams                shift and go to state 39
    funcion_blank                  shift and go to state 40
    funcion_void                   shift and go to state 41
    operaciones_mat_par            shift and go to state 50
    condicion_if                   shift and go to state 51
    empty                          shift and go to state 70
    tipoDato                       shift and go to state 80
    numero                         shift and go to state 82

state 296

    (52) imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .

    $end            reduce using rule 52 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    RBRACE          reduce using rule 52 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    SEMI            reduce using rule 52 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)


state 297

    (142) bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN . SEMI

    SEMI            shift and go to state 323


state 298

    (143) bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN . SEMI

    SEMI            shift and go to state 324


state 299

    (138) array_def -> ARRAY LPAREN array_elmnt RPAREN .

    SEMI            reduce using rule 138 (array_def -> ARRAY LPAREN array_elmnt RPAREN .)


state 300

    (139) array_elmnt -> array_elmnt COMMA . valor
    (41) valor -> . tipoDato
    (42) valor -> . bcolas
    (43) valor -> . bpila
    (44) tipoDato -> . numero
    (45) tipoDato -> . CADENA
    (46) tipoDato -> . BOOLEANO
    (142) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (143) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    CADENA          shift and go to state 43
    BOOLEANO        shift and go to state 72
    VARIABLE        shift and go to state 99
    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    valor                          shift and go to state 325
    tipoDato                       shift and go to state 80
    bcolas                         shift and go to state 87
    bpila                          shift and go to state 88
    numero                         shift and go to state 82

state 301

    (169) casting -> VARIABLE LPAREN tiposCast RPAREN VARIABLE SEMI .

    $end            reduce using rule 169 (casting -> VARIABLE LPAREN tiposCast RPAREN VARIABLE SEMI .)
    RBRACE          reduce using rule 169 (casting -> VARIABLE LPAREN tiposCast RPAREN VARIABLE SEMI .)
    SEMI            reduce using rule 169 (casting -> VARIABLE LPAREN tiposCast RPAREN VARIABLE SEMI .)


state 302

    (39) constante -> DEFINE LPAREN CADENA COMMA valor RPAREN . SEMI

    SEMI            shift and go to state 326


state 303

    (40) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN . SEMI

    SEMI            shift and go to state 327


state 304

    (78) bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque . RBRACE
    (68) stc_bloque -> stc_bloque . SEMI cuerpo

    RBRACE          shift and go to state 328
    SEMI            shift and go to state 282


state 305

    (79) bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .
    (68) stc_bloque -> stc_bloque . SEMI cuerpo

  ! shift/reduce conflict for SEMI resolved as shift
    $end            reduce using rule 79 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .)
    RBRACE          reduce using rule 79 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .)
    SEMI            shift and go to state 282

  ! SEMI            [ reduce using rule 79 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]


state 306

    (67) bfor -> FOR LPAREN asignacion condicion SEMI for_incr . RPAREN stc_bloque_def

    RPAREN          shift and go to state 329


state 307

    (71) for_incr -> VARIABLE . SUMA SUMA
    (73) for_incr -> VARIABLE . RESTA RESTA
    (75) for_incr -> VARIABLE . SUMA EQUALS numero
    (76) for_incr -> VARIABLE . RESTA EQUALS numero

    SUMA            shift and go to state 330
    RESTA           shift and go to state 331


state 308

    (72) for_incr -> SUMA . SUMA VARIABLE

    SUMA            shift and go to state 332


state 309

    (74) for_incr -> RESTA . RESTA VARIABLE

    RESTA           shift and go to state 333


state 310

    (77) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN . stc_bloque_def
    (70) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 180

    stc_bloque_def                 shift and go to state 334

state 311

    (68) stc_bloque -> stc_bloque SEMI cuerpo .

    RBRACE          reduce using rule 68 (stc_bloque -> stc_bloque SEMI cuerpo .)
    SEMI            reduce using rule 68 (stc_bloque -> stc_bloque SEMI cuerpo .)
    $end            reduce using rule 68 (stc_bloque -> stc_bloque SEMI cuerpo .)


state 312

    (86) catches -> catches CATCH . LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def

    LPAREN          shift and go to state 335


state 313

    (55) condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 336


state 314

    (81) bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo . SEMI RBRACE

    SEMI            shift and go to state 337


state 315

    (127) brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN . SEMI

    SEMI            shift and go to state 338


state 316

    (146) escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN . SEMI

    SEMI            shift and go to state 339


state 317

    (147) btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN . RPAREN SEMI

    RPAREN          shift and go to state 340


state 318

    (121) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .

    $end            reduce using rule 121 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 121 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    SEMI            reduce using rule 121 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)


state 319

    (122) params_list -> params_list COMMA param .

    RPAREN          reduce using rule 122 (params_list -> params_list COMMA param .)
    COMMA           reduce using rule 122 (params_list -> params_list COMMA param .)


state 320

    (126) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty . RBRACE
    (132) breturn -> empty .

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 341
    SEMI            reduce using rule 132 (breturn -> empty .)

  ! RBRACE          [ reduce using rule 132 (breturn -> empty .) ]


state 321

    (124) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID . LBRACE empty RBRACE

    LBRACE          shift and go to state 342


state 322

    (54) condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 343


state 323

    (142) bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .

    $end            reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    SUMA            reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    RESTA           reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    DIVISION        reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    MODULO          reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    SEMI            reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    RPAREN          reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    SMALLER         reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    GREATER         reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    AND             reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    OR              reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    XOR             reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    IS_EQUAL        reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    COMMA           reduce using rule 142 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)


state 324

    (143) bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .

    $end            reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    SUMA            reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    RESTA           reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    DIVISION        reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    MODULO          reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    SEMI            reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    RPAREN          reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    SMALLER         reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    GREATER         reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    AND             reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    OR              reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    XOR             reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    IS_EQUAL        reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    COMMA           reduce using rule 143 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)


state 325

    (139) array_elmnt -> array_elmnt COMMA valor .

    RPAREN          reduce using rule 139 (array_elmnt -> array_elmnt COMMA valor .)
    COMMA           reduce using rule 139 (array_elmnt -> array_elmnt COMMA valor .)


state 326

    (39) constante -> DEFINE LPAREN CADENA COMMA valor RPAREN SEMI .

    $end            reduce using rule 39 (constante -> DEFINE LPAREN CADENA COMMA valor RPAREN SEMI .)
    RBRACE          reduce using rule 39 (constante -> DEFINE LPAREN CADENA COMMA valor RPAREN SEMI .)
    SEMI            reduce using rule 39 (constante -> DEFINE LPAREN CADENA COMMA valor RPAREN SEMI .)


state 327

    (40) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .

    $end            reduce using rule 40 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    RBRACE          reduce using rule 40 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    SEMI            reduce using rule 40 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)


state 328

    (78) bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .

    $end            reduce using rule 78 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    RBRACE          reduce using rule 78 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    SEMI            reduce using rule 78 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)


state 329

    (67) bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN . stc_bloque_def
    (70) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 180

    stc_bloque_def                 shift and go to state 344

state 330

    (71) for_incr -> VARIABLE SUMA . SUMA
    (75) for_incr -> VARIABLE SUMA . EQUALS numero

    SUMA            shift and go to state 345
    EQUALS          shift and go to state 346


state 331

    (73) for_incr -> VARIABLE RESTA . RESTA
    (76) for_incr -> VARIABLE RESTA . EQUALS numero

    RESTA           shift and go to state 347
    EQUALS          shift and go to state 348


state 332

    (72) for_incr -> SUMA SUMA . VARIABLE

    VARIABLE        shift and go to state 349


state 333

    (74) for_incr -> RESTA RESTA . VARIABLE

    VARIABLE        shift and go to state 350


state 334

    (77) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .

    $end            reduce using rule 77 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 77 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    SEMI            reduce using rule 77 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)


state 335

    (86) catches -> catches CATCH LPAREN . NOMBRE VARIABLE RPAREN stc_bloque_def

    NOMBRE          shift and go to state 351


state 336

    (55) condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .

    $end            reduce using rule 55 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    ELSE            reduce using rule 55 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 55 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SEMI            reduce using rule 55 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)


state 337

    (81) bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI . RBRACE

    RBRACE          shift and go to state 352


state 338

    (127) brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .

    $end            reduce using rule 127 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    RBRACE          reduce using rule 127 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    SEMI            reduce using rule 127 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    VARIABLE        reduce using rule 127 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    CADENA          reduce using rule 127 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    BOOLEANO        reduce using rule 127 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    ENTERO          reduce using rule 127 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    DECIMAL         reduce using rule 127 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    RPAREN          reduce using rule 127 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    COMMA           reduce using rule 127 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)


state 339

    (146) escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI .

    $end            reduce using rule 146 (escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI .)
    RBRACE          reduce using rule 146 (escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI .)
    SEMI            reduce using rule 146 (escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI .)
    VARIABLE        reduce using rule 146 (escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI .)
    CADENA          reduce using rule 146 (escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI .)
    BOOLEANO        reduce using rule 146 (escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI .)
    ENTERO          reduce using rule 146 (escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI .)
    DECIMAL         reduce using rule 146 (escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI .)
    RPAREN          reduce using rule 146 (escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI .)
    COMMA           reduce using rule 146 (escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI .)


state 340

    (147) btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN . SEMI

    SEMI            shift and go to state 353


state 341

    (126) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .

    $end            reduce using rule 126 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    RBRACE          reduce using rule 126 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    SEMI            reduce using rule 126 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)


state 342

    (124) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE . empty RBRACE
    (141) empty -> .

    RBRACE          reduce using rule 141 (empty -> .)

    empty                          shift and go to state 354

state 343

    (54) condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .

    ELSE            reduce using rule 54 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    ELSEIF          reduce using rule 54 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    $end            reduce using rule 54 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 54 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SEMI            reduce using rule 54 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)


state 344

    (67) bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def .

    $end            reduce using rule 67 (bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 67 (bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def .)
    SEMI            reduce using rule 67 (bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def .)


state 345

    (71) for_incr -> VARIABLE SUMA SUMA .

    RPAREN          reduce using rule 71 (for_incr -> VARIABLE SUMA SUMA .)


state 346

    (75) for_incr -> VARIABLE SUMA EQUALS . numero
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    numero                         shift and go to state 355

state 347

    (73) for_incr -> VARIABLE RESTA RESTA .

    RPAREN          reduce using rule 73 (for_incr -> VARIABLE RESTA RESTA .)


state 348

    (76) for_incr -> VARIABLE RESTA EQUALS . numero
    (47) numero -> . ENTERO
    (48) numero -> . DECIMAL

    ENTERO          shift and go to state 35
    DECIMAL         shift and go to state 83

    numero                         shift and go to state 356

state 349

    (72) for_incr -> SUMA SUMA VARIABLE .

    RPAREN          reduce using rule 72 (for_incr -> SUMA SUMA VARIABLE .)


state 350

    (74) for_incr -> RESTA RESTA VARIABLE .

    RPAREN          reduce using rule 74 (for_incr -> RESTA RESTA VARIABLE .)


state 351

    (86) catches -> catches CATCH LPAREN NOMBRE . VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 357


state 352

    (81) bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE .

    $end            reduce using rule 81 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE .)
    RBRACE          reduce using rule 81 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE .)
    SEMI            reduce using rule 81 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE .)


state 353

    (147) btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .

    $end            reduce using rule 147 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 147 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    SEMI            reduce using rule 147 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 147 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    CADENA          reduce using rule 147 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    BOOLEANO        reduce using rule 147 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    ENTERO          reduce using rule 147 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    DECIMAL         reduce using rule 147 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    RPAREN          reduce using rule 147 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    COMMA           reduce using rule 147 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)


state 354

    (124) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty . RBRACE

    RBRACE          shift and go to state 358


state 355

    (75) for_incr -> VARIABLE SUMA EQUALS numero .

    RPAREN          reduce using rule 75 (for_incr -> VARIABLE SUMA EQUALS numero .)


state 356

    (76) for_incr -> VARIABLE RESTA EQUALS numero .

    RPAREN          reduce using rule 76 (for_incr -> VARIABLE RESTA EQUALS numero .)


state 357

    (86) catches -> catches CATCH LPAREN NOMBRE VARIABLE . RPAREN stc_bloque_def

    RPAREN          shift and go to state 359


state 358

    (124) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .

    $end            reduce using rule 124 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    RBRACE          reduce using rule 124 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    SEMI            reduce using rule 124 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)


state 359

    (86) catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN . stc_bloque_def
    (70) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 180

    stc_bloque_def                 shift and go to state 360

state 360

    (86) catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .

    CATCH           reduce using rule 86 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    $end            reduce using rule 86 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 86 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    SEMI            reduce using rule 86 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMI in state 305 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 320 resolved as shift
