Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AT
    BOOL
    CLOSE_TAG
    COMENTARIOS
    DIV_EQUAL
    DOC_COMENTARIOS
    DOUBLE
    FLOAT
    INT
    NOT
    OPEN_TAG

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> imprimir
Rule 2     cuerpo -> asignacion
Rule 3     cuerpo -> asignacion_array
Rule 4     cuerpo -> funciones
Rule 5     cuerpo -> constante
Rule 6     cuerpo -> lectura
Rule 7     cuerpo -> operadores
Rule 8     cuerpo -> operador_logico
Rule 9     cuerpo -> condicion_booleana
Rule 10    cuerpo -> bwhile
Rule 11    cuerpo -> bdo
Rule 12    cuerpo -> bfor
Rule 13    cuerpo -> bforeach
Rule 14    cuerpo -> btry
Rule 15    cuerpo -> operaciones_mat
Rule 16    cuerpo -> condicion_ifelse
Rule 17    cuerpo -> condicion_elseif
Rule 18    cuerpo -> condicion_else
Rule 19    cuerpo -> bswitch
Rule 20    cuerpo -> bcase
Rule 21    cuerpo -> bgoto
Rule 22    cuerpo -> bcolas
Rule 23    cuerpo -> bpila
Rule 24    cuerpo -> incrementos_mat
Rule 25    cuerpo -> bcortes
Rule 26    cuerpo -> brand
Rule 27    cuerpo -> bconcat
Rule 28    cuerpo -> escribir
Rule 29    cuerpo -> btrim
Rule 30    cuerpo -> leer
Rule 31    cuerpo -> boolean_answer
Rule 32    cuerpo -> otros
Rule 33    cuerpo -> breturn
Rule 34    imprimir -> ECHO valor SEMI
Rule 35    imprimir -> PRINT valor SEMI
Rule 36    imprimir -> PRINT LPAREN valor RPAREN SEMI
Rule 37    imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
Rule 38    imprimir -> ECHO bconcat
Rule 39    valor -> numero
Rule 40    valor -> VARIABLE
Rule 41    valor -> STRING
Rule 42    valor -> NOMBRE
Rule 43    valor -> boolean_answer
Rule 44    numero -> ENTERO
Rule 45    numero -> DECIMAL
Rule 46    operadores -> SUMA
Rule 47    operadores -> RESTA
Rule 48    operadores -> MULTIPLICACION
Rule 49    operadores -> DIVISION
Rule 50    operadores -> MODULO
Rule 51    operador_logico -> SMALLER
Rule 52    operador_logico -> GREATER
Rule 53    operador_logico -> IS_SMALLER_OR_EQUAL
Rule 54    operador_logico -> IS_GREATER_OR_EQUAL
Rule 55    incrementos_mat -> MINUS_EQUAL
Rule 56    incrementos_mat -> MOD_EQUAL
Rule 57    incrementos_mat -> MUL_EQUAL
Rule 58    incrementos_mat -> PLUS_EQUAL
Rule 59    boolean_answer -> TRUE
Rule 60    boolean_answer -> FALSE
Rule 61    condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
Rule 62    condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
Rule 63    condicion_else -> ELSE LBRACE cuerpo RBRACE
Rule 64    condicion_ifelse -> condicion_if
Rule 65    condicion_ifelse -> condicion_if condicion_else
Rule 66    condicion_ifelse -> condicion_if condicion_elseif
Rule 67    condicion_ifelse -> condicion_if condicion_elseif condicion_else
Rule 68    condicion_booleana -> AND
Rule 69    condicion_booleana -> OR
Rule 70    condicion_booleana -> XOR
Rule 71    condicion_booleana -> IS_EQUAL
Rule 72    condicion_booleana -> IS_NOT_EQUAL
Rule 73    condicion_booleana -> IS_IDENTICAL
Rule 74    condicion_booleana -> IS_NOT_IDENTICAL
Rule 75    condicion_booleana -> BOOLEAN_NOT
Rule 76    operaciones_mat -> valor operadores valor
Rule 77    operaciones_mat -> valor operadores operaciones_mat
Rule 78    operaciones_mat -> operaciones_mat_par
Rule 79    operaciones_mat_par -> LPAREN valor operadores valor RPAREN
Rule 80    operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN
Rule 81    operaciones_mat_par -> valor operadores operaciones_mat_par
Rule 82    asignacion -> VARIABLE EQUALS valor SEMI
Rule 83    asignacion -> VAR asignacion
Rule 84    asignacion -> proteccion asignacion
Rule 85    asignacion -> VARIABLE EQUALS brand
Rule 86    asignacion -> VARIABLE EQUALS escribir
Rule 87    asignacion -> VARIABLE EQUALS btrim
Rule 88    asignacion -> VARIABLE EQUALS leer
Rule 89    asignacion_array -> VARIABLE EQUALS array_def SEMI
Rule 90    constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI
Rule 91    constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
Rule 92    lectura -> READLINE LPAREN STRING RPAREN SEMI
Rule 93    lectura -> READLINE LPAREN RPAREN SEMI
Rule 94    brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
Rule 95    proteccion -> PUBLIC
Rule 96    proteccion -> PRIVATE
Rule 97    proteccion -> PROTECTED
Rule 98    proteccion -> STATIC
Rule 99    funciones -> funcion_nparams
Rule 100   funciones -> proteccion funcion_nparams
Rule 101   funciones -> funcion_blank
Rule 102   funciones -> proteccion funcion_blank
Rule 103   funciones -> funcion_void
Rule 104   param -> VARIABLE
Rule 105   param -> asignacion
Rule 106   funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
Rule 107   params_list -> params_list COMMA param
Rule 108   params_list -> param
Rule 109   funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
Rule 110   funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
Rule 111   funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
Rule 112   condicion -> VARIABLE operador_logico VARIABLE
Rule 113   condicion -> valor operador_logico valor
Rule 114   condicion -> VARIABLE operador_logico valor
Rule 115   bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
Rule 116   bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque
Rule 117   bdo -> DO LBRACE cuerpo RBRACE bwhile
Rule 118   bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE
Rule 119   bcase -> CASE ENTERO COLON
Rule 120   bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
Rule 121   bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
Rule 122   stc_bloque -> stc_bloque SEMI cuerpo
Rule 123   stc_bloque -> breturn
Rule 124   breturn -> empty
Rule 125   breturn -> RETURN SEMI
Rule 126   breturn -> RETURN NULL SEMI
Rule 127   breturn -> RETURN VARIABLE SEMI
Rule 128   breturn -> RETURN NOMBRE SEMI
Rule 129   breturn -> RETURN boolean_answer SEMI
Rule 130   stc_bloque_def -> LBRACE stc_bloque RBRACE
Rule 131   for_incr -> VARIABLE SUMA SUMA
Rule 132   for_incr -> SUMA SUMA VARIABLE
Rule 133   for_incr -> VARIABLE RESTA RESTA
Rule 134   for_incr -> RESTA RESTA VARIABLE
Rule 135   for_incr -> VARIABLE SUMA EQUALS numero
Rule 136   for_incr -> VARIABLE RESTA EQUALS numero
Rule 137   bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
Rule 138   array_def -> ARRAY LPAREN RPAREN
Rule 139   array_def -> ARRAY LPAREN array_elmnt RPAREN
Rule 140   array_elmnt -> array_elmnt COMMA valor
Rule 141   array_elmnt -> valor
Rule 142   btry -> TRY LBRACE stc_bloque_def RBRACE catches
Rule 143   catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def
Rule 144   catches -> empty
Rule 145   empty -> <empty>
Rule 146   bgoto -> GOTO NOMBRE SEMI
Rule 147   bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
Rule 148   bcortes -> EXIT SEMI
Rule 149   bcortes -> BREAK SEMI
Rule 150   bcortes -> DEFAULT SEMI
Rule 151   bcortes -> CONTINUE SEMI
Rule 152   bconcat -> STRING CONCAT STRING SEMI
Rule 153   bconcat -> VARIABLE EQUALS VARIABLE CONCAT VARIABLE SEMI
Rule 154   escribir -> FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI
Rule 155   btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
Rule 156   leer -> READLINE LPAREN STRING RPAREN SEMI
Rule 157   otros -> SMALLER NOMBRE GREATER

Terminals, with rules where they appear

AND                  : 68
ARRAY                : 91 138 139
AS                   : 137
AT                   : 
BOOL                 : 
BOOLEAN_NOT          : 75
BREAK                : 149
CASE                 : 119
CATCH                : 143
CLOSE_TAG            : 
COLON                : 109 116 119
COMENTARIOS          : 
COMMA                : 90 91 94 107 140 154
CONCAT               : 152 153
CONTINUE             : 151
DECIMAL              : 45
DEFAULT              : 150
DEFINE               : 90 91
DIVISION             : 49
DIV_EQUAL            : 
DO                   : 117
DOC_COMENTARIOS      : 
DOUBLE               : 
ECHO                 : 34 37 38
ELSE                 : 63
ELSEIF               : 62
ENTERO               : 37 44 94 94 119
EQUALS               : 82 85 86 87 88 89 120 135 136 147 153
EXIT                 : 148
FALSE                : 60
FLOAT                : 
FOR                  : 121
FOREACH              : 137
FUNCTION             : 106 109 110 111
FWRITE               : 154
GOTO                 : 146
GREATER              : 52 157
IF                   : 61
INT                  : 
IS_EQUAL             : 71
IS_GREATER_OR_EQUAL  : 54
IS_IDENTICAL         : 73
IS_NOT_EQUAL         : 72
IS_NOT_IDENTICAL     : 74
IS_SMALLER_OR_EQUAL  : 53
LBRACE               : 61 62 63 109 111 115 117 118 130 142
LBRACKET             : 37
LPAREN               : 36 61 62 79 80 90 91 92 93 94 106 109 110 111 115 116 118 120 121 137 138 139 143 147 154 155 155 156
MINUS_EQUAL          : 55
MODULO               : 50
MOD_EQUAL            : 56
MULTIPLICACION       : 48
MUL_EQUAL            : 57
NEW                  : 120 147
NOMBRE               : 37 42 91 106 109 110 111 128 143 146 154 155 155 157
NOT                  : 
NULL                 : 126
OPEN_TAG             : 
OR                   : 69
PLUS_EQUAL           : 58
PRINT                : 35 36
PRIVATE              : 96
PROTECTED            : 97
PUBLIC               : 95
RAND                 : 94
RBRACE               : 61 62 63 109 111 115 117 118 130 142
RBRACKET             : 37
READLINE             : 92 93 156
RESTA                : 47 133 133 134 134 136
RETURN               : 125 126 127 128 129
RPAREN               : 36 61 62 79 80 90 91 92 93 94 106 109 110 111 115 116 118 120 121 137 138 139 143 147 154 155 155 156
SEMI                 : 34 35 36 37 82 89 90 91 92 93 94 118 120 121 122 125 126 127 128 129 146 147 148 149 150 151 152 153 154 155 156
SMALLER              : 51 157
SPLQUEUE             : 120
SPLSTACK             : 147
STATIC               : 98
STRING               : 41 90 92 152 152 154 156
SUMA                 : 46 131 131 132 132 135
SWITCH               : 118
TRIM                 : 155
TRUE                 : 59
TRY                  : 142
VAR                  : 83
VARIABLE             : 40 82 85 86 87 88 89 104 112 112 114 118 120 127 131 132 133 134 135 136 137 137 143 147 153 153 153
VOID                 : 109
WHILE                : 115 116
XOR                  : 70
error                : 

Nonterminals, with rules where they appear

array_def            : 89
array_elmnt          : 139 140
asignacion           : 2 83 84 105 121
asignacion_array     : 3
bcase                : 20
bcolas               : 22
bconcat              : 27 38
bcortes              : 25
bdo                  : 11
bfor                 : 12
bforeach             : 13
bgoto                : 21
boolean_answer       : 31 43 129
bpila                : 23
brand                : 26 85
breturn              : 33 123
bswitch              : 19
btrim                : 29 87
btry                 : 14
bwhile               : 10 117
catches              : 142 143
condicion            : 61 62 115 116 121
condicion_booleana   : 9
condicion_else       : 18 65 67
condicion_elseif     : 17 66 67
condicion_if         : 64 65 66 67
condicion_ifelse     : 16
constante            : 5
cuerpo               : 61 62 63 117 118 122 0
empty                : 109 111 124 144
escribir             : 28 86
for_incr             : 121
funcion_blank        : 101 102
funcion_nparams      : 99 100
funcion_void         : 103
funciones            : 4
imprimir             : 1
incrementos_mat      : 24
lectura              : 6
leer                 : 30 88
numero               : 39 135 136
operaciones_mat      : 15 77
operaciones_mat_par  : 78 80 81
operador_logico      : 8 112 113 114
operadores           : 7 76 77 79 80 81
otros                : 32
param                : 107 108
params_list          : 106 107
proteccion           : 84 100 102
stc_bloque           : 115 116 122 130
stc_bloque_def       : 106 110 121 137 142 143
valor                : 34 35 36 76 76 77 79 79 80 81 82 90 113 113 114 140 141

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . condicion_elseif
    (18) cuerpo -> . condicion_else
    (19) cuerpo -> . bswitch
    (20) cuerpo -> . bcase
    (21) cuerpo -> . bgoto
    (22) cuerpo -> . bcolas
    (23) cuerpo -> . bpila
    (24) cuerpo -> . incrementos_mat
    (25) cuerpo -> . bcortes
    (26) cuerpo -> . brand
    (27) cuerpo -> . bconcat
    (28) cuerpo -> . escribir
    (29) cuerpo -> . btrim
    (30) cuerpo -> . leer
    (31) cuerpo -> . boolean_answer
    (32) cuerpo -> . otros
    (33) cuerpo -> . breturn
    (34) imprimir -> . ECHO valor SEMI
    (35) imprimir -> . PRINT valor SEMI
    (36) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (37) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (38) imprimir -> . ECHO bconcat
    (82) asignacion -> . VARIABLE EQUALS valor SEMI
    (83) asignacion -> . VAR asignacion
    (84) asignacion -> . proteccion asignacion
    (85) asignacion -> . VARIABLE EQUALS brand
    (86) asignacion -> . VARIABLE EQUALS escribir
    (87) asignacion -> . VARIABLE EQUALS btrim
    (88) asignacion -> . VARIABLE EQUALS leer
    (89) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (99) funciones -> . funcion_nparams
    (100) funciones -> . proteccion funcion_nparams
    (101) funciones -> . funcion_blank
    (102) funciones -> . proteccion funcion_blank
    (103) funciones -> . funcion_void
    (90) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (91) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (92) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (93) lectura -> . READLINE LPAREN RPAREN SEMI
    (46) operadores -> . SUMA
    (47) operadores -> . RESTA
    (48) operadores -> . MULTIPLICACION
    (49) operadores -> . DIVISION
    (50) operadores -> . MODULO
    (51) operador_logico -> . SMALLER
    (52) operador_logico -> . GREATER
    (53) operador_logico -> . IS_SMALLER_OR_EQUAL
    (54) operador_logico -> . IS_GREATER_OR_EQUAL
    (68) condicion_booleana -> . AND
    (69) condicion_booleana -> . OR
    (70) condicion_booleana -> . XOR
    (71) condicion_booleana -> . IS_EQUAL
    (72) condicion_booleana -> . IS_NOT_EQUAL
    (73) condicion_booleana -> . IS_IDENTICAL
    (74) condicion_booleana -> . IS_NOT_IDENTICAL
    (75) condicion_booleana -> . BOOLEAN_NOT
    (115) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (116) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (117) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (121) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (137) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (142) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (76) operaciones_mat -> . valor operadores valor
    (77) operaciones_mat -> . valor operadores operaciones_mat
    (78) operaciones_mat -> . operaciones_mat_par
    (64) condicion_ifelse -> . condicion_if
    (65) condicion_ifelse -> . condicion_if condicion_else
    (66) condicion_ifelse -> . condicion_if condicion_elseif
    (67) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (62) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (63) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (118) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE
    (119) bcase -> . CASE ENTERO COLON
    (146) bgoto -> . GOTO NOMBRE SEMI
    (120) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (147) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (55) incrementos_mat -> . MINUS_EQUAL
    (56) incrementos_mat -> . MOD_EQUAL
    (57) incrementos_mat -> . MUL_EQUAL
    (58) incrementos_mat -> . PLUS_EQUAL
    (148) bcortes -> . EXIT SEMI
    (149) bcortes -> . BREAK SEMI
    (150) bcortes -> . DEFAULT SEMI
    (151) bcortes -> . CONTINUE SEMI
    (94) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (152) bconcat -> . STRING CONCAT STRING SEMI
    (153) bconcat -> . VARIABLE EQUALS VARIABLE CONCAT VARIABLE SEMI
    (154) escribir -> . FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI
    (155) btrim -> . TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
    (156) leer -> . READLINE LPAREN STRING RPAREN SEMI
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE
    (157) otros -> . SMALLER NOMBRE GREATER
    (124) breturn -> . empty
    (125) breturn -> . RETURN SEMI
    (126) breturn -> . RETURN NULL SEMI
    (127) breturn -> . RETURN VARIABLE SEMI
    (128) breturn -> . RETURN NOMBRE SEMI
    (129) breturn -> . RETURN boolean_answer SEMI
    (95) proteccion -> . PUBLIC
    (96) proteccion -> . PRIVATE
    (97) proteccion -> . PROTECTED
    (98) proteccion -> . STATIC
    (106) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (110) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (111) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (109) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (79) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (80) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (81) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (61) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (145) empty -> .
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL

    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    VARIABLE        shift and go to state 41
    VAR             shift and go to state 42
    DEFINE          shift and go to state 47
    READLINE        shift and go to state 49
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    MODULO          shift and go to state 54
    SMALLER         shift and go to state 55
    GREATER         shift and go to state 56
    IS_SMALLER_OR_EQUAL shift and go to state 57
    IS_GREATER_OR_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    XOR             shift and go to state 61
    IS_EQUAL        shift and go to state 62
    IS_NOT_EQUAL    shift and go to state 63
    IS_IDENTICAL    shift and go to state 64
    IS_NOT_IDENTICAL shift and go to state 65
    BOOLEAN_NOT     shift and go to state 66
    WHILE           shift and go to state 67
    DO              shift and go to state 68
    FOR             shift and go to state 69
    FOREACH         shift and go to state 70
    TRY             shift and go to state 71
    ELSEIF          shift and go to state 74
    ELSE            shift and go to state 75
    SWITCH          shift and go to state 76
    CASE            shift and go to state 77
    GOTO            shift and go to state 78
    MINUS_EQUAL     shift and go to state 79
    MOD_EQUAL       shift and go to state 80
    MUL_EQUAL       shift and go to state 81
    PLUS_EQUAL      shift and go to state 82
    EXIT            shift and go to state 83
    BREAK           shift and go to state 84
    DEFAULT         shift and go to state 85
    CONTINUE        shift and go to state 86
    RAND            shift and go to state 87
    STRING          shift and go to state 48
    FWRITE          shift and go to state 88
    TRIM            shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    RETURN          shift and go to state 93
    PUBLIC          shift and go to state 94
    PRIVATE         shift and go to state 95
    PROTECTED       shift and go to state 96
    STATIC          shift and go to state 97
    FUNCTION        shift and go to state 98
    NOMBRE          shift and go to state 39
    LPAREN          shift and go to state 38
    IF              shift and go to state 100
    $end            reduce using rule 145 (empty -> .)
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101

    cuerpo                         shift and go to state 1
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat                shift and go to state 16
    condicion_ifelse               shift and go to state 17
    condicion_elseif               shift and go to state 18
    condicion_else                 shift and go to state 19
    bswitch                        shift and go to state 20
    bcase                          shift and go to state 21
    bgoto                          shift and go to state 22
    bcolas                         shift and go to state 23
    bpila                          shift and go to state 24
    incrementos_mat                shift and go to state 25
    bcortes                        shift and go to state 26
    brand                          shift and go to state 27
    bconcat                        shift and go to state 28
    escribir                       shift and go to state 29
    btrim                          shift and go to state 30
    leer                           shift and go to state 31
    boolean_answer                 shift and go to state 32
    otros                          shift and go to state 33
    breturn                        shift and go to state 34
    valor                          shift and go to state 36
    proteccion                     shift and go to state 43
    funcion_nparams                shift and go to state 44
    funcion_blank                  shift and go to state 45
    funcion_void                   shift and go to state 46
    operaciones_mat_par            shift and go to state 72
    condicion_if                   shift and go to state 73
    empty                          shift and go to state 92
    numero                         shift and go to state 99

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> imprimir .

    $end            reduce using rule 1 (cuerpo -> imprimir .)
    RBRACE          reduce using rule 1 (cuerpo -> imprimir .)
    SEMI            reduce using rule 1 (cuerpo -> imprimir .)


state 3

    (2) cuerpo -> asignacion .

    $end            reduce using rule 2 (cuerpo -> asignacion .)
    RBRACE          reduce using rule 2 (cuerpo -> asignacion .)
    SEMI            reduce using rule 2 (cuerpo -> asignacion .)


state 4

    (3) cuerpo -> asignacion_array .

    $end            reduce using rule 3 (cuerpo -> asignacion_array .)
    RBRACE          reduce using rule 3 (cuerpo -> asignacion_array .)
    SEMI            reduce using rule 3 (cuerpo -> asignacion_array .)


state 5

    (4) cuerpo -> funciones .

    $end            reduce using rule 4 (cuerpo -> funciones .)
    RBRACE          reduce using rule 4 (cuerpo -> funciones .)
    SEMI            reduce using rule 4 (cuerpo -> funciones .)


state 6

    (5) cuerpo -> constante .

    $end            reduce using rule 5 (cuerpo -> constante .)
    RBRACE          reduce using rule 5 (cuerpo -> constante .)
    SEMI            reduce using rule 5 (cuerpo -> constante .)


state 7

    (6) cuerpo -> lectura .

    $end            reduce using rule 6 (cuerpo -> lectura .)
    RBRACE          reduce using rule 6 (cuerpo -> lectura .)
    SEMI            reduce using rule 6 (cuerpo -> lectura .)


state 8

    (7) cuerpo -> operadores .

    $end            reduce using rule 7 (cuerpo -> operadores .)
    RBRACE          reduce using rule 7 (cuerpo -> operadores .)
    SEMI            reduce using rule 7 (cuerpo -> operadores .)


state 9

    (8) cuerpo -> operador_logico .

    $end            reduce using rule 8 (cuerpo -> operador_logico .)
    RBRACE          reduce using rule 8 (cuerpo -> operador_logico .)
    SEMI            reduce using rule 8 (cuerpo -> operador_logico .)


state 10

    (9) cuerpo -> condicion_booleana .

    $end            reduce using rule 9 (cuerpo -> condicion_booleana .)
    RBRACE          reduce using rule 9 (cuerpo -> condicion_booleana .)
    SEMI            reduce using rule 9 (cuerpo -> condicion_booleana .)


state 11

    (10) cuerpo -> bwhile .

    $end            reduce using rule 10 (cuerpo -> bwhile .)
    RBRACE          reduce using rule 10 (cuerpo -> bwhile .)
    SEMI            reduce using rule 10 (cuerpo -> bwhile .)


state 12

    (11) cuerpo -> bdo .

    $end            reduce using rule 11 (cuerpo -> bdo .)
    RBRACE          reduce using rule 11 (cuerpo -> bdo .)
    SEMI            reduce using rule 11 (cuerpo -> bdo .)


state 13

    (12) cuerpo -> bfor .

    $end            reduce using rule 12 (cuerpo -> bfor .)
    RBRACE          reduce using rule 12 (cuerpo -> bfor .)
    SEMI            reduce using rule 12 (cuerpo -> bfor .)


state 14

    (13) cuerpo -> bforeach .

    $end            reduce using rule 13 (cuerpo -> bforeach .)
    RBRACE          reduce using rule 13 (cuerpo -> bforeach .)
    SEMI            reduce using rule 13 (cuerpo -> bforeach .)


state 15

    (14) cuerpo -> btry .

    $end            reduce using rule 14 (cuerpo -> btry .)
    RBRACE          reduce using rule 14 (cuerpo -> btry .)
    SEMI            reduce using rule 14 (cuerpo -> btry .)


state 16

    (15) cuerpo -> operaciones_mat .

    $end            reduce using rule 15 (cuerpo -> operaciones_mat .)
    RBRACE          reduce using rule 15 (cuerpo -> operaciones_mat .)
    SEMI            reduce using rule 15 (cuerpo -> operaciones_mat .)


state 17

    (16) cuerpo -> condicion_ifelse .

    $end            reduce using rule 16 (cuerpo -> condicion_ifelse .)
    RBRACE          reduce using rule 16 (cuerpo -> condicion_ifelse .)
    SEMI            reduce using rule 16 (cuerpo -> condicion_ifelse .)


state 18

    (17) cuerpo -> condicion_elseif .

    $end            reduce using rule 17 (cuerpo -> condicion_elseif .)
    RBRACE          reduce using rule 17 (cuerpo -> condicion_elseif .)
    SEMI            reduce using rule 17 (cuerpo -> condicion_elseif .)


state 19

    (18) cuerpo -> condicion_else .

    $end            reduce using rule 18 (cuerpo -> condicion_else .)
    RBRACE          reduce using rule 18 (cuerpo -> condicion_else .)
    SEMI            reduce using rule 18 (cuerpo -> condicion_else .)


state 20

    (19) cuerpo -> bswitch .

    $end            reduce using rule 19 (cuerpo -> bswitch .)
    RBRACE          reduce using rule 19 (cuerpo -> bswitch .)
    SEMI            reduce using rule 19 (cuerpo -> bswitch .)


state 21

    (20) cuerpo -> bcase .

    $end            reduce using rule 20 (cuerpo -> bcase .)
    RBRACE          reduce using rule 20 (cuerpo -> bcase .)
    SEMI            reduce using rule 20 (cuerpo -> bcase .)


state 22

    (21) cuerpo -> bgoto .

    $end            reduce using rule 21 (cuerpo -> bgoto .)
    RBRACE          reduce using rule 21 (cuerpo -> bgoto .)
    SEMI            reduce using rule 21 (cuerpo -> bgoto .)


state 23

    (22) cuerpo -> bcolas .

    $end            reduce using rule 22 (cuerpo -> bcolas .)
    RBRACE          reduce using rule 22 (cuerpo -> bcolas .)
    SEMI            reduce using rule 22 (cuerpo -> bcolas .)


state 24

    (23) cuerpo -> bpila .

    $end            reduce using rule 23 (cuerpo -> bpila .)
    RBRACE          reduce using rule 23 (cuerpo -> bpila .)
    SEMI            reduce using rule 23 (cuerpo -> bpila .)


state 25

    (24) cuerpo -> incrementos_mat .

    $end            reduce using rule 24 (cuerpo -> incrementos_mat .)
    RBRACE          reduce using rule 24 (cuerpo -> incrementos_mat .)
    SEMI            reduce using rule 24 (cuerpo -> incrementos_mat .)


state 26

    (25) cuerpo -> bcortes .

    $end            reduce using rule 25 (cuerpo -> bcortes .)
    RBRACE          reduce using rule 25 (cuerpo -> bcortes .)
    SEMI            reduce using rule 25 (cuerpo -> bcortes .)


state 27

    (26) cuerpo -> brand .

    $end            reduce using rule 26 (cuerpo -> brand .)
    RBRACE          reduce using rule 26 (cuerpo -> brand .)
    SEMI            reduce using rule 26 (cuerpo -> brand .)


state 28

    (27) cuerpo -> bconcat .

    $end            reduce using rule 27 (cuerpo -> bconcat .)
    RBRACE          reduce using rule 27 (cuerpo -> bconcat .)
    SEMI            reduce using rule 27 (cuerpo -> bconcat .)


state 29

    (28) cuerpo -> escribir .

    $end            reduce using rule 28 (cuerpo -> escribir .)
    RBRACE          reduce using rule 28 (cuerpo -> escribir .)
    SEMI            reduce using rule 28 (cuerpo -> escribir .)


state 30

    (29) cuerpo -> btrim .

    $end            reduce using rule 29 (cuerpo -> btrim .)
    RBRACE          reduce using rule 29 (cuerpo -> btrim .)
    SEMI            reduce using rule 29 (cuerpo -> btrim .)


state 31

    (30) cuerpo -> leer .

    $end            reduce using rule 30 (cuerpo -> leer .)
    RBRACE          reduce using rule 30 (cuerpo -> leer .)
    SEMI            reduce using rule 30 (cuerpo -> leer .)


state 32

    (31) cuerpo -> boolean_answer .
    (43) valor -> boolean_answer .

    $end            reduce using rule 31 (cuerpo -> boolean_answer .)
    RBRACE          reduce using rule 31 (cuerpo -> boolean_answer .)
    SEMI            reduce using rule 31 (cuerpo -> boolean_answer .)
    SUMA            reduce using rule 43 (valor -> boolean_answer .)
    RESTA           reduce using rule 43 (valor -> boolean_answer .)
    MULTIPLICACION  reduce using rule 43 (valor -> boolean_answer .)
    DIVISION        reduce using rule 43 (valor -> boolean_answer .)
    MODULO          reduce using rule 43 (valor -> boolean_answer .)


state 33

    (32) cuerpo -> otros .

    $end            reduce using rule 32 (cuerpo -> otros .)
    RBRACE          reduce using rule 32 (cuerpo -> otros .)
    SEMI            reduce using rule 32 (cuerpo -> otros .)


state 34

    (33) cuerpo -> breturn .

    $end            reduce using rule 33 (cuerpo -> breturn .)
    RBRACE          reduce using rule 33 (cuerpo -> breturn .)
    SEMI            reduce using rule 33 (cuerpo -> breturn .)


state 35

    (34) imprimir -> ECHO . valor SEMI
    (37) imprimir -> ECHO . NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (38) imprimir -> ECHO . bconcat
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (152) bconcat -> . STRING CONCAT STRING SEMI
    (153) bconcat -> . VARIABLE EQUALS VARIABLE CONCAT VARIABLE SEMI
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE

    NOMBRE          shift and go to state 103
    VARIABLE        shift and go to state 105
    STRING          shift and go to state 106
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91

    valor                          shift and go to state 102
    bconcat                        shift and go to state 104
    numero                         shift and go to state 99
    boolean_answer                 shift and go to state 107

state 36

    (76) operaciones_mat -> valor . operadores valor
    (77) operaciones_mat -> valor . operadores operaciones_mat
    (81) operaciones_mat_par -> valor . operadores operaciones_mat_par
    (46) operadores -> . SUMA
    (47) operadores -> . RESTA
    (48) operadores -> . MULTIPLICACION
    (49) operadores -> . DIVISION
    (50) operadores -> . MODULO

    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    MODULO          shift and go to state 54

    operadores                     shift and go to state 108

state 37

    (35) imprimir -> PRINT . valor SEMI
    (36) imprimir -> PRINT . LPAREN valor RPAREN SEMI
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE

    LPAREN          shift and go to state 110
    VARIABLE        shift and go to state 111
    STRING          shift and go to state 112
    NOMBRE          shift and go to state 39
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91

    valor                          shift and go to state 109
    numero                         shift and go to state 99
    boolean_answer                 shift and go to state 107

state 38

    (79) operaciones_mat_par -> LPAREN . valor operadores valor RPAREN
    (80) operaciones_mat_par -> LPAREN . valor operadores operaciones_mat_par RPAREN
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE

    VARIABLE        shift and go to state 111
    STRING          shift and go to state 112
    NOMBRE          shift and go to state 39
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91

    valor                          shift and go to state 113
    numero                         shift and go to state 99
    boolean_answer                 shift and go to state 107

state 39

    (42) valor -> NOMBRE .

    SUMA            reduce using rule 42 (valor -> NOMBRE .)
    RESTA           reduce using rule 42 (valor -> NOMBRE .)
    MULTIPLICACION  reduce using rule 42 (valor -> NOMBRE .)
    DIVISION        reduce using rule 42 (valor -> NOMBRE .)
    MODULO          reduce using rule 42 (valor -> NOMBRE .)
    SEMI            reduce using rule 42 (valor -> NOMBRE .)
    $end            reduce using rule 42 (valor -> NOMBRE .)
    RBRACE          reduce using rule 42 (valor -> NOMBRE .)
    RPAREN          reduce using rule 42 (valor -> NOMBRE .)
    SMALLER         reduce using rule 42 (valor -> NOMBRE .)
    GREATER         reduce using rule 42 (valor -> NOMBRE .)
    IS_SMALLER_OR_EQUAL reduce using rule 42 (valor -> NOMBRE .)
    IS_GREATER_OR_EQUAL reduce using rule 42 (valor -> NOMBRE .)
    COMMA           reduce using rule 42 (valor -> NOMBRE .)


state 40

    (44) numero -> ENTERO .

    SUMA            reduce using rule 44 (numero -> ENTERO .)
    RESTA           reduce using rule 44 (numero -> ENTERO .)
    MULTIPLICACION  reduce using rule 44 (numero -> ENTERO .)
    DIVISION        reduce using rule 44 (numero -> ENTERO .)
    MODULO          reduce using rule 44 (numero -> ENTERO .)
    SEMI            reduce using rule 44 (numero -> ENTERO .)
    $end            reduce using rule 44 (numero -> ENTERO .)
    RBRACE          reduce using rule 44 (numero -> ENTERO .)
    RPAREN          reduce using rule 44 (numero -> ENTERO .)
    SMALLER         reduce using rule 44 (numero -> ENTERO .)
    GREATER         reduce using rule 44 (numero -> ENTERO .)
    IS_SMALLER_OR_EQUAL reduce using rule 44 (numero -> ENTERO .)
    IS_GREATER_OR_EQUAL reduce using rule 44 (numero -> ENTERO .)
    COMMA           reduce using rule 44 (numero -> ENTERO .)


state 41

    (82) asignacion -> VARIABLE . EQUALS valor SEMI
    (85) asignacion -> VARIABLE . EQUALS brand
    (86) asignacion -> VARIABLE . EQUALS escribir
    (87) asignacion -> VARIABLE . EQUALS btrim
    (88) asignacion -> VARIABLE . EQUALS leer
    (89) asignacion_array -> VARIABLE . EQUALS array_def SEMI
    (120) bcolas -> VARIABLE . EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (147) bpila -> VARIABLE . EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (153) bconcat -> VARIABLE . EQUALS VARIABLE CONCAT VARIABLE SEMI
    (40) valor -> VARIABLE .

    EQUALS          shift and go to state 114
    SUMA            reduce using rule 40 (valor -> VARIABLE .)
    RESTA           reduce using rule 40 (valor -> VARIABLE .)
    MULTIPLICACION  reduce using rule 40 (valor -> VARIABLE .)
    DIVISION        reduce using rule 40 (valor -> VARIABLE .)
    MODULO          reduce using rule 40 (valor -> VARIABLE .)


state 42

    (83) asignacion -> VAR . asignacion
    (82) asignacion -> . VARIABLE EQUALS valor SEMI
    (83) asignacion -> . VAR asignacion
    (84) asignacion -> . proteccion asignacion
    (85) asignacion -> . VARIABLE EQUALS brand
    (86) asignacion -> . VARIABLE EQUALS escribir
    (87) asignacion -> . VARIABLE EQUALS btrim
    (88) asignacion -> . VARIABLE EQUALS leer
    (95) proteccion -> . PUBLIC
    (96) proteccion -> . PRIVATE
    (97) proteccion -> . PROTECTED
    (98) proteccion -> . STATIC

    VARIABLE        shift and go to state 116
    VAR             shift and go to state 42
    PUBLIC          shift and go to state 94
    PRIVATE         shift and go to state 95
    PROTECTED       shift and go to state 96
    STATIC          shift and go to state 97

    asignacion                     shift and go to state 115
    proteccion                     shift and go to state 117

state 43

    (84) asignacion -> proteccion . asignacion
    (100) funciones -> proteccion . funcion_nparams
    (102) funciones -> proteccion . funcion_blank
    (82) asignacion -> . VARIABLE EQUALS valor SEMI
    (83) asignacion -> . VAR asignacion
    (84) asignacion -> . proteccion asignacion
    (85) asignacion -> . VARIABLE EQUALS brand
    (86) asignacion -> . VARIABLE EQUALS escribir
    (87) asignacion -> . VARIABLE EQUALS btrim
    (88) asignacion -> . VARIABLE EQUALS leer
    (106) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (110) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (111) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (95) proteccion -> . PUBLIC
    (96) proteccion -> . PRIVATE
    (97) proteccion -> . PROTECTED
    (98) proteccion -> . STATIC

    VARIABLE        shift and go to state 116
    VAR             shift and go to state 42
    FUNCTION        shift and go to state 121
    PUBLIC          shift and go to state 94
    PRIVATE         shift and go to state 95
    PROTECTED       shift and go to state 96
    STATIC          shift and go to state 97

    proteccion                     shift and go to state 117
    asignacion                     shift and go to state 118
    funcion_nparams                shift and go to state 119
    funcion_blank                  shift and go to state 120

state 44

    (99) funciones -> funcion_nparams .

    $end            reduce using rule 99 (funciones -> funcion_nparams .)
    RBRACE          reduce using rule 99 (funciones -> funcion_nparams .)
    SEMI            reduce using rule 99 (funciones -> funcion_nparams .)


state 45

    (101) funciones -> funcion_blank .

    $end            reduce using rule 101 (funciones -> funcion_blank .)
    RBRACE          reduce using rule 101 (funciones -> funcion_blank .)
    SEMI            reduce using rule 101 (funciones -> funcion_blank .)


state 46

    (103) funciones -> funcion_void .

    $end            reduce using rule 103 (funciones -> funcion_void .)
    RBRACE          reduce using rule 103 (funciones -> funcion_void .)
    SEMI            reduce using rule 103 (funciones -> funcion_void .)


state 47

    (90) constante -> DEFINE . LPAREN STRING COMMA valor RPAREN SEMI
    (91) constante -> DEFINE . LPAREN NOMBRE COMMA ARRAY RPAREN SEMI

    LPAREN          shift and go to state 122


state 48

    (152) bconcat -> STRING . CONCAT STRING SEMI
    (41) valor -> STRING .

    CONCAT          shift and go to state 123
    SUMA            reduce using rule 41 (valor -> STRING .)
    RESTA           reduce using rule 41 (valor -> STRING .)
    MULTIPLICACION  reduce using rule 41 (valor -> STRING .)
    DIVISION        reduce using rule 41 (valor -> STRING .)
    MODULO          reduce using rule 41 (valor -> STRING .)


state 49

    (92) lectura -> READLINE . LPAREN STRING RPAREN SEMI
    (93) lectura -> READLINE . LPAREN RPAREN SEMI
    (156) leer -> READLINE . LPAREN STRING RPAREN SEMI

    LPAREN          shift and go to state 124


state 50

    (46) operadores -> SUMA .

    $end            reduce using rule 46 (operadores -> SUMA .)
    VARIABLE        reduce using rule 46 (operadores -> SUMA .)
    STRING          reduce using rule 46 (operadores -> SUMA .)
    NOMBRE          reduce using rule 46 (operadores -> SUMA .)
    LPAREN          reduce using rule 46 (operadores -> SUMA .)
    ENTERO          reduce using rule 46 (operadores -> SUMA .)
    DECIMAL         reduce using rule 46 (operadores -> SUMA .)
    TRUE            reduce using rule 46 (operadores -> SUMA .)
    FALSE           reduce using rule 46 (operadores -> SUMA .)
    RBRACE          reduce using rule 46 (operadores -> SUMA .)
    SEMI            reduce using rule 46 (operadores -> SUMA .)


state 51

    (47) operadores -> RESTA .

    $end            reduce using rule 47 (operadores -> RESTA .)
    VARIABLE        reduce using rule 47 (operadores -> RESTA .)
    STRING          reduce using rule 47 (operadores -> RESTA .)
    NOMBRE          reduce using rule 47 (operadores -> RESTA .)
    LPAREN          reduce using rule 47 (operadores -> RESTA .)
    ENTERO          reduce using rule 47 (operadores -> RESTA .)
    DECIMAL         reduce using rule 47 (operadores -> RESTA .)
    TRUE            reduce using rule 47 (operadores -> RESTA .)
    FALSE           reduce using rule 47 (operadores -> RESTA .)
    RBRACE          reduce using rule 47 (operadores -> RESTA .)
    SEMI            reduce using rule 47 (operadores -> RESTA .)


state 52

    (48) operadores -> MULTIPLICACION .

    $end            reduce using rule 48 (operadores -> MULTIPLICACION .)
    VARIABLE        reduce using rule 48 (operadores -> MULTIPLICACION .)
    STRING          reduce using rule 48 (operadores -> MULTIPLICACION .)
    NOMBRE          reduce using rule 48 (operadores -> MULTIPLICACION .)
    LPAREN          reduce using rule 48 (operadores -> MULTIPLICACION .)
    ENTERO          reduce using rule 48 (operadores -> MULTIPLICACION .)
    DECIMAL         reduce using rule 48 (operadores -> MULTIPLICACION .)
    TRUE            reduce using rule 48 (operadores -> MULTIPLICACION .)
    FALSE           reduce using rule 48 (operadores -> MULTIPLICACION .)
    RBRACE          reduce using rule 48 (operadores -> MULTIPLICACION .)
    SEMI            reduce using rule 48 (operadores -> MULTIPLICACION .)


state 53

    (49) operadores -> DIVISION .

    $end            reduce using rule 49 (operadores -> DIVISION .)
    VARIABLE        reduce using rule 49 (operadores -> DIVISION .)
    STRING          reduce using rule 49 (operadores -> DIVISION .)
    NOMBRE          reduce using rule 49 (operadores -> DIVISION .)
    LPAREN          reduce using rule 49 (operadores -> DIVISION .)
    ENTERO          reduce using rule 49 (operadores -> DIVISION .)
    DECIMAL         reduce using rule 49 (operadores -> DIVISION .)
    TRUE            reduce using rule 49 (operadores -> DIVISION .)
    FALSE           reduce using rule 49 (operadores -> DIVISION .)
    RBRACE          reduce using rule 49 (operadores -> DIVISION .)
    SEMI            reduce using rule 49 (operadores -> DIVISION .)


state 54

    (50) operadores -> MODULO .

    $end            reduce using rule 50 (operadores -> MODULO .)
    VARIABLE        reduce using rule 50 (operadores -> MODULO .)
    STRING          reduce using rule 50 (operadores -> MODULO .)
    NOMBRE          reduce using rule 50 (operadores -> MODULO .)
    LPAREN          reduce using rule 50 (operadores -> MODULO .)
    ENTERO          reduce using rule 50 (operadores -> MODULO .)
    DECIMAL         reduce using rule 50 (operadores -> MODULO .)
    TRUE            reduce using rule 50 (operadores -> MODULO .)
    FALSE           reduce using rule 50 (operadores -> MODULO .)
    RBRACE          reduce using rule 50 (operadores -> MODULO .)
    SEMI            reduce using rule 50 (operadores -> MODULO .)


state 55

    (51) operador_logico -> SMALLER .
    (157) otros -> SMALLER . NOMBRE GREATER

    $end            reduce using rule 51 (operador_logico -> SMALLER .)
    RBRACE          reduce using rule 51 (operador_logico -> SMALLER .)
    SEMI            reduce using rule 51 (operador_logico -> SMALLER .)
    NOMBRE          shift and go to state 125


state 56

    (52) operador_logico -> GREATER .

    $end            reduce using rule 52 (operador_logico -> GREATER .)
    RBRACE          reduce using rule 52 (operador_logico -> GREATER .)
    VARIABLE        reduce using rule 52 (operador_logico -> GREATER .)
    STRING          reduce using rule 52 (operador_logico -> GREATER .)
    NOMBRE          reduce using rule 52 (operador_logico -> GREATER .)
    ENTERO          reduce using rule 52 (operador_logico -> GREATER .)
    DECIMAL         reduce using rule 52 (operador_logico -> GREATER .)
    TRUE            reduce using rule 52 (operador_logico -> GREATER .)
    FALSE           reduce using rule 52 (operador_logico -> GREATER .)
    SEMI            reduce using rule 52 (operador_logico -> GREATER .)


state 57

    (53) operador_logico -> IS_SMALLER_OR_EQUAL .

    $end            reduce using rule 53 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    RBRACE          reduce using rule 53 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    VARIABLE        reduce using rule 53 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    STRING          reduce using rule 53 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    NOMBRE          reduce using rule 53 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    ENTERO          reduce using rule 53 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    DECIMAL         reduce using rule 53 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    TRUE            reduce using rule 53 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    FALSE           reduce using rule 53 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    SEMI            reduce using rule 53 (operador_logico -> IS_SMALLER_OR_EQUAL .)


state 58

    (54) operador_logico -> IS_GREATER_OR_EQUAL .

    $end            reduce using rule 54 (operador_logico -> IS_GREATER_OR_EQUAL .)
    RBRACE          reduce using rule 54 (operador_logico -> IS_GREATER_OR_EQUAL .)
    VARIABLE        reduce using rule 54 (operador_logico -> IS_GREATER_OR_EQUAL .)
    STRING          reduce using rule 54 (operador_logico -> IS_GREATER_OR_EQUAL .)
    NOMBRE          reduce using rule 54 (operador_logico -> IS_GREATER_OR_EQUAL .)
    ENTERO          reduce using rule 54 (operador_logico -> IS_GREATER_OR_EQUAL .)
    DECIMAL         reduce using rule 54 (operador_logico -> IS_GREATER_OR_EQUAL .)
    TRUE            reduce using rule 54 (operador_logico -> IS_GREATER_OR_EQUAL .)
    FALSE           reduce using rule 54 (operador_logico -> IS_GREATER_OR_EQUAL .)
    SEMI            reduce using rule 54 (operador_logico -> IS_GREATER_OR_EQUAL .)


state 59

    (68) condicion_booleana -> AND .

    $end            reduce using rule 68 (condicion_booleana -> AND .)
    RBRACE          reduce using rule 68 (condicion_booleana -> AND .)
    SEMI            reduce using rule 68 (condicion_booleana -> AND .)


state 60

    (69) condicion_booleana -> OR .

    $end            reduce using rule 69 (condicion_booleana -> OR .)
    RBRACE          reduce using rule 69 (condicion_booleana -> OR .)
    SEMI            reduce using rule 69 (condicion_booleana -> OR .)


state 61

    (70) condicion_booleana -> XOR .

    $end            reduce using rule 70 (condicion_booleana -> XOR .)
    RBRACE          reduce using rule 70 (condicion_booleana -> XOR .)
    SEMI            reduce using rule 70 (condicion_booleana -> XOR .)


state 62

    (71) condicion_booleana -> IS_EQUAL .

    $end            reduce using rule 71 (condicion_booleana -> IS_EQUAL .)
    RBRACE          reduce using rule 71 (condicion_booleana -> IS_EQUAL .)
    SEMI            reduce using rule 71 (condicion_booleana -> IS_EQUAL .)


state 63

    (72) condicion_booleana -> IS_NOT_EQUAL .

    $end            reduce using rule 72 (condicion_booleana -> IS_NOT_EQUAL .)
    RBRACE          reduce using rule 72 (condicion_booleana -> IS_NOT_EQUAL .)
    SEMI            reduce using rule 72 (condicion_booleana -> IS_NOT_EQUAL .)


state 64

    (73) condicion_booleana -> IS_IDENTICAL .

    $end            reduce using rule 73 (condicion_booleana -> IS_IDENTICAL .)
    RBRACE          reduce using rule 73 (condicion_booleana -> IS_IDENTICAL .)
    SEMI            reduce using rule 73 (condicion_booleana -> IS_IDENTICAL .)


state 65

    (74) condicion_booleana -> IS_NOT_IDENTICAL .

    $end            reduce using rule 74 (condicion_booleana -> IS_NOT_IDENTICAL .)
    RBRACE          reduce using rule 74 (condicion_booleana -> IS_NOT_IDENTICAL .)
    SEMI            reduce using rule 74 (condicion_booleana -> IS_NOT_IDENTICAL .)


state 66

    (75) condicion_booleana -> BOOLEAN_NOT .

    $end            reduce using rule 75 (condicion_booleana -> BOOLEAN_NOT .)
    RBRACE          reduce using rule 75 (condicion_booleana -> BOOLEAN_NOT .)
    SEMI            reduce using rule 75 (condicion_booleana -> BOOLEAN_NOT .)


state 67

    (115) bwhile -> WHILE . LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (116) bwhile -> WHILE . LPAREN condicion RPAREN COLON stc_bloque

    LPAREN          shift and go to state 126


state 68

    (117) bdo -> DO . LBRACE cuerpo RBRACE bwhile

    LBRACE          shift and go to state 127


state 69

    (121) bfor -> FOR . LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def

    LPAREN          shift and go to state 128


state 70

    (137) bforeach -> FOREACH . LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def

    LPAREN          shift and go to state 129


state 71

    (142) btry -> TRY . LBRACE stc_bloque_def RBRACE catches

    LBRACE          shift and go to state 130


state 72

    (78) operaciones_mat -> operaciones_mat_par .

    $end            reduce using rule 78 (operaciones_mat -> operaciones_mat_par .)
    RBRACE          reduce using rule 78 (operaciones_mat -> operaciones_mat_par .)
    SEMI            reduce using rule 78 (operaciones_mat -> operaciones_mat_par .)


state 73

    (64) condicion_ifelse -> condicion_if .
    (65) condicion_ifelse -> condicion_if . condicion_else
    (66) condicion_ifelse -> condicion_if . condicion_elseif
    (67) condicion_ifelse -> condicion_if . condicion_elseif condicion_else
    (63) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (62) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    $end            reduce using rule 64 (condicion_ifelse -> condicion_if .)
    RBRACE          reduce using rule 64 (condicion_ifelse -> condicion_if .)
    SEMI            reduce using rule 64 (condicion_ifelse -> condicion_if .)
    ELSE            shift and go to state 75
    ELSEIF          shift and go to state 74

    condicion_else                 shift and go to state 131
    condicion_elseif               shift and go to state 132

state 74

    (62) condicion_elseif -> ELSEIF . LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    LPAREN          shift and go to state 133


state 75

    (63) condicion_else -> ELSE . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 134


state 76

    (118) bswitch -> SWITCH . LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE

    LPAREN          shift and go to state 135


state 77

    (119) bcase -> CASE . ENTERO COLON

    ENTERO          shift and go to state 136


state 78

    (146) bgoto -> GOTO . NOMBRE SEMI

    NOMBRE          shift and go to state 137


state 79

    (55) incrementos_mat -> MINUS_EQUAL .

    $end            reduce using rule 55 (incrementos_mat -> MINUS_EQUAL .)
    RBRACE          reduce using rule 55 (incrementos_mat -> MINUS_EQUAL .)
    SEMI            reduce using rule 55 (incrementos_mat -> MINUS_EQUAL .)


state 80

    (56) incrementos_mat -> MOD_EQUAL .

    $end            reduce using rule 56 (incrementos_mat -> MOD_EQUAL .)
    RBRACE          reduce using rule 56 (incrementos_mat -> MOD_EQUAL .)
    SEMI            reduce using rule 56 (incrementos_mat -> MOD_EQUAL .)


state 81

    (57) incrementos_mat -> MUL_EQUAL .

    $end            reduce using rule 57 (incrementos_mat -> MUL_EQUAL .)
    RBRACE          reduce using rule 57 (incrementos_mat -> MUL_EQUAL .)
    SEMI            reduce using rule 57 (incrementos_mat -> MUL_EQUAL .)


state 82

    (58) incrementos_mat -> PLUS_EQUAL .

    $end            reduce using rule 58 (incrementos_mat -> PLUS_EQUAL .)
    RBRACE          reduce using rule 58 (incrementos_mat -> PLUS_EQUAL .)
    SEMI            reduce using rule 58 (incrementos_mat -> PLUS_EQUAL .)


state 83

    (148) bcortes -> EXIT . SEMI

    SEMI            shift and go to state 138


state 84

    (149) bcortes -> BREAK . SEMI

    SEMI            shift and go to state 139


state 85

    (150) bcortes -> DEFAULT . SEMI

    SEMI            shift and go to state 140


state 86

    (151) bcortes -> CONTINUE . SEMI

    SEMI            shift and go to state 141


state 87

    (94) brand -> RAND . LPAREN ENTERO COMMA ENTERO RPAREN SEMI

    LPAREN          shift and go to state 142


state 88

    (154) escribir -> FWRITE . LPAREN NOMBRE COMMA STRING RPAREN SEMI

    LPAREN          shift and go to state 143


state 89

    (155) btrim -> TRIM . LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI

    LPAREN          shift and go to state 144


state 90

    (59) boolean_answer -> TRUE .

    $end            reduce using rule 59 (boolean_answer -> TRUE .)
    SUMA            reduce using rule 59 (boolean_answer -> TRUE .)
    RESTA           reduce using rule 59 (boolean_answer -> TRUE .)
    MULTIPLICACION  reduce using rule 59 (boolean_answer -> TRUE .)
    DIVISION        reduce using rule 59 (boolean_answer -> TRUE .)
    MODULO          reduce using rule 59 (boolean_answer -> TRUE .)
    SEMI            reduce using rule 59 (boolean_answer -> TRUE .)
    RBRACE          reduce using rule 59 (boolean_answer -> TRUE .)
    RPAREN          reduce using rule 59 (boolean_answer -> TRUE .)
    SMALLER         reduce using rule 59 (boolean_answer -> TRUE .)
    GREATER         reduce using rule 59 (boolean_answer -> TRUE .)
    IS_SMALLER_OR_EQUAL reduce using rule 59 (boolean_answer -> TRUE .)
    IS_GREATER_OR_EQUAL reduce using rule 59 (boolean_answer -> TRUE .)
    COMMA           reduce using rule 59 (boolean_answer -> TRUE .)


state 91

    (60) boolean_answer -> FALSE .

    $end            reduce using rule 60 (boolean_answer -> FALSE .)
    SUMA            reduce using rule 60 (boolean_answer -> FALSE .)
    RESTA           reduce using rule 60 (boolean_answer -> FALSE .)
    MULTIPLICACION  reduce using rule 60 (boolean_answer -> FALSE .)
    DIVISION        reduce using rule 60 (boolean_answer -> FALSE .)
    MODULO          reduce using rule 60 (boolean_answer -> FALSE .)
    SEMI            reduce using rule 60 (boolean_answer -> FALSE .)
    RBRACE          reduce using rule 60 (boolean_answer -> FALSE .)
    RPAREN          reduce using rule 60 (boolean_answer -> FALSE .)
    SMALLER         reduce using rule 60 (boolean_answer -> FALSE .)
    GREATER         reduce using rule 60 (boolean_answer -> FALSE .)
    IS_SMALLER_OR_EQUAL reduce using rule 60 (boolean_answer -> FALSE .)
    IS_GREATER_OR_EQUAL reduce using rule 60 (boolean_answer -> FALSE .)
    COMMA           reduce using rule 60 (boolean_answer -> FALSE .)


state 92

    (124) breturn -> empty .

    $end            reduce using rule 124 (breturn -> empty .)
    RBRACE          reduce using rule 124 (breturn -> empty .)
    SEMI            reduce using rule 124 (breturn -> empty .)


state 93

    (125) breturn -> RETURN . SEMI
    (126) breturn -> RETURN . NULL SEMI
    (127) breturn -> RETURN . VARIABLE SEMI
    (128) breturn -> RETURN . NOMBRE SEMI
    (129) breturn -> RETURN . boolean_answer SEMI
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE

    SEMI            shift and go to state 145
    NULL            shift and go to state 146
    VARIABLE        shift and go to state 147
    NOMBRE          shift and go to state 148
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91

    boolean_answer                 shift and go to state 149

state 94

    (95) proteccion -> PUBLIC .

    VARIABLE        reduce using rule 95 (proteccion -> PUBLIC .)
    VAR             reduce using rule 95 (proteccion -> PUBLIC .)
    FUNCTION        reduce using rule 95 (proteccion -> PUBLIC .)
    PUBLIC          reduce using rule 95 (proteccion -> PUBLIC .)
    PRIVATE         reduce using rule 95 (proteccion -> PUBLIC .)
    PROTECTED       reduce using rule 95 (proteccion -> PUBLIC .)
    STATIC          reduce using rule 95 (proteccion -> PUBLIC .)


state 95

    (96) proteccion -> PRIVATE .

    VARIABLE        reduce using rule 96 (proteccion -> PRIVATE .)
    VAR             reduce using rule 96 (proteccion -> PRIVATE .)
    FUNCTION        reduce using rule 96 (proteccion -> PRIVATE .)
    PUBLIC          reduce using rule 96 (proteccion -> PRIVATE .)
    PRIVATE         reduce using rule 96 (proteccion -> PRIVATE .)
    PROTECTED       reduce using rule 96 (proteccion -> PRIVATE .)
    STATIC          reduce using rule 96 (proteccion -> PRIVATE .)


state 96

    (97) proteccion -> PROTECTED .

    VARIABLE        reduce using rule 97 (proteccion -> PROTECTED .)
    VAR             reduce using rule 97 (proteccion -> PROTECTED .)
    FUNCTION        reduce using rule 97 (proteccion -> PROTECTED .)
    PUBLIC          reduce using rule 97 (proteccion -> PROTECTED .)
    PRIVATE         reduce using rule 97 (proteccion -> PROTECTED .)
    PROTECTED       reduce using rule 97 (proteccion -> PROTECTED .)
    STATIC          reduce using rule 97 (proteccion -> PROTECTED .)


state 97

    (98) proteccion -> STATIC .

    VARIABLE        reduce using rule 98 (proteccion -> STATIC .)
    VAR             reduce using rule 98 (proteccion -> STATIC .)
    FUNCTION        reduce using rule 98 (proteccion -> STATIC .)
    PUBLIC          reduce using rule 98 (proteccion -> STATIC .)
    PRIVATE         reduce using rule 98 (proteccion -> STATIC .)
    PROTECTED       reduce using rule 98 (proteccion -> STATIC .)
    STATIC          reduce using rule 98 (proteccion -> STATIC .)


state 98

    (106) funcion_nparams -> FUNCTION . NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (110) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN stc_bloque_def
    (111) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (109) funcion_void -> FUNCTION . NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE

    NOMBRE          shift and go to state 150


state 99

    (39) valor -> numero .

    SUMA            reduce using rule 39 (valor -> numero .)
    RESTA           reduce using rule 39 (valor -> numero .)
    MULTIPLICACION  reduce using rule 39 (valor -> numero .)
    DIVISION        reduce using rule 39 (valor -> numero .)
    MODULO          reduce using rule 39 (valor -> numero .)
    SEMI            reduce using rule 39 (valor -> numero .)
    $end            reduce using rule 39 (valor -> numero .)
    RBRACE          reduce using rule 39 (valor -> numero .)
    RPAREN          reduce using rule 39 (valor -> numero .)
    SMALLER         reduce using rule 39 (valor -> numero .)
    GREATER         reduce using rule 39 (valor -> numero .)
    IS_SMALLER_OR_EQUAL reduce using rule 39 (valor -> numero .)
    IS_GREATER_OR_EQUAL reduce using rule 39 (valor -> numero .)
    COMMA           reduce using rule 39 (valor -> numero .)


state 100

    (61) condicion_if -> IF . LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    LPAREN          shift and go to state 151


state 101

    (45) numero -> DECIMAL .

    SUMA            reduce using rule 45 (numero -> DECIMAL .)
    RESTA           reduce using rule 45 (numero -> DECIMAL .)
    MULTIPLICACION  reduce using rule 45 (numero -> DECIMAL .)
    DIVISION        reduce using rule 45 (numero -> DECIMAL .)
    MODULO          reduce using rule 45 (numero -> DECIMAL .)
    SEMI            reduce using rule 45 (numero -> DECIMAL .)
    $end            reduce using rule 45 (numero -> DECIMAL .)
    RBRACE          reduce using rule 45 (numero -> DECIMAL .)
    RPAREN          reduce using rule 45 (numero -> DECIMAL .)
    SMALLER         reduce using rule 45 (numero -> DECIMAL .)
    GREATER         reduce using rule 45 (numero -> DECIMAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 45 (numero -> DECIMAL .)
    IS_GREATER_OR_EQUAL reduce using rule 45 (numero -> DECIMAL .)
    COMMA           reduce using rule 45 (numero -> DECIMAL .)


state 102

    (34) imprimir -> ECHO valor . SEMI

    SEMI            shift and go to state 152


state 103

    (37) imprimir -> ECHO NOMBRE . LBRACKET ENTERO RBRACKET SEMI
    (42) valor -> NOMBRE .

    LBRACKET        shift and go to state 153
    SEMI            reduce using rule 42 (valor -> NOMBRE .)


state 104

    (38) imprimir -> ECHO bconcat .

    $end            reduce using rule 38 (imprimir -> ECHO bconcat .)
    RBRACE          reduce using rule 38 (imprimir -> ECHO bconcat .)
    SEMI            reduce using rule 38 (imprimir -> ECHO bconcat .)


state 105

    (40) valor -> VARIABLE .
    (153) bconcat -> VARIABLE . EQUALS VARIABLE CONCAT VARIABLE SEMI

    SEMI            reduce using rule 40 (valor -> VARIABLE .)
    EQUALS          shift and go to state 154


state 106

    (41) valor -> STRING .
    (152) bconcat -> STRING . CONCAT STRING SEMI

    SEMI            reduce using rule 41 (valor -> STRING .)
    CONCAT          shift and go to state 123


state 107

    (43) valor -> boolean_answer .

    SEMI            reduce using rule 43 (valor -> boolean_answer .)
    SUMA            reduce using rule 43 (valor -> boolean_answer .)
    RESTA           reduce using rule 43 (valor -> boolean_answer .)
    MULTIPLICACION  reduce using rule 43 (valor -> boolean_answer .)
    DIVISION        reduce using rule 43 (valor -> boolean_answer .)
    MODULO          reduce using rule 43 (valor -> boolean_answer .)
    $end            reduce using rule 43 (valor -> boolean_answer .)
    RBRACE          reduce using rule 43 (valor -> boolean_answer .)
    RPAREN          reduce using rule 43 (valor -> boolean_answer .)
    SMALLER         reduce using rule 43 (valor -> boolean_answer .)
    GREATER         reduce using rule 43 (valor -> boolean_answer .)
    IS_SMALLER_OR_EQUAL reduce using rule 43 (valor -> boolean_answer .)
    IS_GREATER_OR_EQUAL reduce using rule 43 (valor -> boolean_answer .)
    COMMA           reduce using rule 43 (valor -> boolean_answer .)


state 108

    (76) operaciones_mat -> valor operadores . valor
    (77) operaciones_mat -> valor operadores . operaciones_mat
    (81) operaciones_mat_par -> valor operadores . operaciones_mat_par
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (76) operaciones_mat -> . valor operadores valor
    (77) operaciones_mat -> . valor operadores operaciones_mat
    (78) operaciones_mat -> . operaciones_mat_par
    (79) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (80) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (81) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE

    VARIABLE        shift and go to state 111
    STRING          shift and go to state 112
    NOMBRE          shift and go to state 39
    LPAREN          shift and go to state 38
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91

    valor                          shift and go to state 155
    operaciones_mat                shift and go to state 156
    operaciones_mat_par            shift and go to state 157
    numero                         shift and go to state 99
    boolean_answer                 shift and go to state 107

state 109

    (35) imprimir -> PRINT valor . SEMI

    SEMI            shift and go to state 158


state 110

    (36) imprimir -> PRINT LPAREN . valor RPAREN SEMI
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE

    VARIABLE        shift and go to state 111
    STRING          shift and go to state 112
    NOMBRE          shift and go to state 39
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91

    valor                          shift and go to state 159
    numero                         shift and go to state 99
    boolean_answer                 shift and go to state 107

state 111

    (40) valor -> VARIABLE .

    SEMI            reduce using rule 40 (valor -> VARIABLE .)
    SUMA            reduce using rule 40 (valor -> VARIABLE .)
    RESTA           reduce using rule 40 (valor -> VARIABLE .)
    MULTIPLICACION  reduce using rule 40 (valor -> VARIABLE .)
    DIVISION        reduce using rule 40 (valor -> VARIABLE .)
    MODULO          reduce using rule 40 (valor -> VARIABLE .)
    $end            reduce using rule 40 (valor -> VARIABLE .)
    RBRACE          reduce using rule 40 (valor -> VARIABLE .)
    RPAREN          reduce using rule 40 (valor -> VARIABLE .)
    COMMA           reduce using rule 40 (valor -> VARIABLE .)


state 112

    (41) valor -> STRING .

    SEMI            reduce using rule 41 (valor -> STRING .)
    SUMA            reduce using rule 41 (valor -> STRING .)
    RESTA           reduce using rule 41 (valor -> STRING .)
    MULTIPLICACION  reduce using rule 41 (valor -> STRING .)
    DIVISION        reduce using rule 41 (valor -> STRING .)
    MODULO          reduce using rule 41 (valor -> STRING .)
    $end            reduce using rule 41 (valor -> STRING .)
    RBRACE          reduce using rule 41 (valor -> STRING .)
    RPAREN          reduce using rule 41 (valor -> STRING .)
    SMALLER         reduce using rule 41 (valor -> STRING .)
    GREATER         reduce using rule 41 (valor -> STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 41 (valor -> STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 41 (valor -> STRING .)
    COMMA           reduce using rule 41 (valor -> STRING .)


state 113

    (79) operaciones_mat_par -> LPAREN valor . operadores valor RPAREN
    (80) operaciones_mat_par -> LPAREN valor . operadores operaciones_mat_par RPAREN
    (46) operadores -> . SUMA
    (47) operadores -> . RESTA
    (48) operadores -> . MULTIPLICACION
    (49) operadores -> . DIVISION
    (50) operadores -> . MODULO

    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    MODULO          shift and go to state 54

    operadores                     shift and go to state 160

state 114

    (82) asignacion -> VARIABLE EQUALS . valor SEMI
    (85) asignacion -> VARIABLE EQUALS . brand
    (86) asignacion -> VARIABLE EQUALS . escribir
    (87) asignacion -> VARIABLE EQUALS . btrim
    (88) asignacion -> VARIABLE EQUALS . leer
    (89) asignacion_array -> VARIABLE EQUALS . array_def SEMI
    (120) bcolas -> VARIABLE EQUALS . NEW SPLQUEUE LPAREN RPAREN SEMI
    (147) bpila -> VARIABLE EQUALS . NEW SPLSTACK LPAREN RPAREN SEMI
    (153) bconcat -> VARIABLE EQUALS . VARIABLE CONCAT VARIABLE SEMI
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (94) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (154) escribir -> . FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI
    (155) btrim -> . TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
    (156) leer -> . READLINE LPAREN STRING RPAREN SEMI
    (138) array_def -> . ARRAY LPAREN RPAREN
    (139) array_def -> . ARRAY LPAREN array_elmnt RPAREN
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE

    NEW             shift and go to state 168
    VARIABLE        shift and go to state 161
    STRING          shift and go to state 112
    NOMBRE          shift and go to state 39
    RAND            shift and go to state 87
    FWRITE          shift and go to state 88
    TRIM            shift and go to state 89
    READLINE        shift and go to state 169
    ARRAY           shift and go to state 170
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91

    valor                          shift and go to state 162
    brand                          shift and go to state 163
    escribir                       shift and go to state 164
    btrim                          shift and go to state 165
    leer                           shift and go to state 166
    array_def                      shift and go to state 167
    numero                         shift and go to state 99
    boolean_answer                 shift and go to state 107

state 115

    (83) asignacion -> VAR asignacion .

    $end            reduce using rule 83 (asignacion -> VAR asignacion .)
    RBRACE          reduce using rule 83 (asignacion -> VAR asignacion .)
    SEMI            reduce using rule 83 (asignacion -> VAR asignacion .)
    VARIABLE        reduce using rule 83 (asignacion -> VAR asignacion .)
    STRING          reduce using rule 83 (asignacion -> VAR asignacion .)
    NOMBRE          reduce using rule 83 (asignacion -> VAR asignacion .)
    ENTERO          reduce using rule 83 (asignacion -> VAR asignacion .)
    DECIMAL         reduce using rule 83 (asignacion -> VAR asignacion .)
    TRUE            reduce using rule 83 (asignacion -> VAR asignacion .)
    FALSE           reduce using rule 83 (asignacion -> VAR asignacion .)
    RPAREN          reduce using rule 83 (asignacion -> VAR asignacion .)
    COMMA           reduce using rule 83 (asignacion -> VAR asignacion .)


state 116

    (82) asignacion -> VARIABLE . EQUALS valor SEMI
    (85) asignacion -> VARIABLE . EQUALS brand
    (86) asignacion -> VARIABLE . EQUALS escribir
    (87) asignacion -> VARIABLE . EQUALS btrim
    (88) asignacion -> VARIABLE . EQUALS leer

    EQUALS          shift and go to state 171


state 117

    (84) asignacion -> proteccion . asignacion
    (82) asignacion -> . VARIABLE EQUALS valor SEMI
    (83) asignacion -> . VAR asignacion
    (84) asignacion -> . proteccion asignacion
    (85) asignacion -> . VARIABLE EQUALS brand
    (86) asignacion -> . VARIABLE EQUALS escribir
    (87) asignacion -> . VARIABLE EQUALS btrim
    (88) asignacion -> . VARIABLE EQUALS leer
    (95) proteccion -> . PUBLIC
    (96) proteccion -> . PRIVATE
    (97) proteccion -> . PROTECTED
    (98) proteccion -> . STATIC

    VARIABLE        shift and go to state 116
    VAR             shift and go to state 42
    PUBLIC          shift and go to state 94
    PRIVATE         shift and go to state 95
    PROTECTED       shift and go to state 96
    STATIC          shift and go to state 97

    proteccion                     shift and go to state 117
    asignacion                     shift and go to state 118

state 118

    (84) asignacion -> proteccion asignacion .

    $end            reduce using rule 84 (asignacion -> proteccion asignacion .)
    RBRACE          reduce using rule 84 (asignacion -> proteccion asignacion .)
    SEMI            reduce using rule 84 (asignacion -> proteccion asignacion .)
    VARIABLE        reduce using rule 84 (asignacion -> proteccion asignacion .)
    STRING          reduce using rule 84 (asignacion -> proteccion asignacion .)
    NOMBRE          reduce using rule 84 (asignacion -> proteccion asignacion .)
    ENTERO          reduce using rule 84 (asignacion -> proteccion asignacion .)
    DECIMAL         reduce using rule 84 (asignacion -> proteccion asignacion .)
    TRUE            reduce using rule 84 (asignacion -> proteccion asignacion .)
    FALSE           reduce using rule 84 (asignacion -> proteccion asignacion .)
    RPAREN          reduce using rule 84 (asignacion -> proteccion asignacion .)
    COMMA           reduce using rule 84 (asignacion -> proteccion asignacion .)


state 119

    (100) funciones -> proteccion funcion_nparams .

    $end            reduce using rule 100 (funciones -> proteccion funcion_nparams .)
    RBRACE          reduce using rule 100 (funciones -> proteccion funcion_nparams .)
    SEMI            reduce using rule 100 (funciones -> proteccion funcion_nparams .)


state 120

    (102) funciones -> proteccion funcion_blank .

    $end            reduce using rule 102 (funciones -> proteccion funcion_blank .)
    RBRACE          reduce using rule 102 (funciones -> proteccion funcion_blank .)
    SEMI            reduce using rule 102 (funciones -> proteccion funcion_blank .)


state 121

    (106) funcion_nparams -> FUNCTION . NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (110) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN stc_bloque_def
    (111) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN LBRACE empty RBRACE

    NOMBRE          shift and go to state 172


state 122

    (90) constante -> DEFINE LPAREN . STRING COMMA valor RPAREN SEMI
    (91) constante -> DEFINE LPAREN . NOMBRE COMMA ARRAY RPAREN SEMI

    STRING          shift and go to state 173
    NOMBRE          shift and go to state 174


state 123

    (152) bconcat -> STRING CONCAT . STRING SEMI

    STRING          shift and go to state 175


state 124

    (92) lectura -> READLINE LPAREN . STRING RPAREN SEMI
    (93) lectura -> READLINE LPAREN . RPAREN SEMI
    (156) leer -> READLINE LPAREN . STRING RPAREN SEMI

    STRING          shift and go to state 176
    RPAREN          shift and go to state 177


state 125

    (157) otros -> SMALLER NOMBRE . GREATER

    GREATER         shift and go to state 178


state 126

    (115) bwhile -> WHILE LPAREN . condicion RPAREN LBRACE stc_bloque RBRACE
    (116) bwhile -> WHILE LPAREN . condicion RPAREN COLON stc_bloque
    (112) condicion -> . VARIABLE operador_logico VARIABLE
    (113) condicion -> . valor operador_logico valor
    (114) condicion -> . VARIABLE operador_logico valor
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE

    VARIABLE        shift and go to state 180
    STRING          shift and go to state 112
    NOMBRE          shift and go to state 39
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91

    condicion                      shift and go to state 179
    valor                          shift and go to state 181
    numero                         shift and go to state 99
    boolean_answer                 shift and go to state 107

state 127

    (117) bdo -> DO LBRACE . cuerpo RBRACE bwhile
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . condicion_elseif
    (18) cuerpo -> . condicion_else
    (19) cuerpo -> . bswitch
    (20) cuerpo -> . bcase
    (21) cuerpo -> . bgoto
    (22) cuerpo -> . bcolas
    (23) cuerpo -> . bpila
    (24) cuerpo -> . incrementos_mat
    (25) cuerpo -> . bcortes
    (26) cuerpo -> . brand
    (27) cuerpo -> . bconcat
    (28) cuerpo -> . escribir
    (29) cuerpo -> . btrim
    (30) cuerpo -> . leer
    (31) cuerpo -> . boolean_answer
    (32) cuerpo -> . otros
    (33) cuerpo -> . breturn
    (34) imprimir -> . ECHO valor SEMI
    (35) imprimir -> . PRINT valor SEMI
    (36) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (37) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (38) imprimir -> . ECHO bconcat
    (82) asignacion -> . VARIABLE EQUALS valor SEMI
    (83) asignacion -> . VAR asignacion
    (84) asignacion -> . proteccion asignacion
    (85) asignacion -> . VARIABLE EQUALS brand
    (86) asignacion -> . VARIABLE EQUALS escribir
    (87) asignacion -> . VARIABLE EQUALS btrim
    (88) asignacion -> . VARIABLE EQUALS leer
    (89) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (99) funciones -> . funcion_nparams
    (100) funciones -> . proteccion funcion_nparams
    (101) funciones -> . funcion_blank
    (102) funciones -> . proteccion funcion_blank
    (103) funciones -> . funcion_void
    (90) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (91) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (92) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (93) lectura -> . READLINE LPAREN RPAREN SEMI
    (46) operadores -> . SUMA
    (47) operadores -> . RESTA
    (48) operadores -> . MULTIPLICACION
    (49) operadores -> . DIVISION
    (50) operadores -> . MODULO
    (51) operador_logico -> . SMALLER
    (52) operador_logico -> . GREATER
    (53) operador_logico -> . IS_SMALLER_OR_EQUAL
    (54) operador_logico -> . IS_GREATER_OR_EQUAL
    (68) condicion_booleana -> . AND
    (69) condicion_booleana -> . OR
    (70) condicion_booleana -> . XOR
    (71) condicion_booleana -> . IS_EQUAL
    (72) condicion_booleana -> . IS_NOT_EQUAL
    (73) condicion_booleana -> . IS_IDENTICAL
    (74) condicion_booleana -> . IS_NOT_IDENTICAL
    (75) condicion_booleana -> . BOOLEAN_NOT
    (115) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (116) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (117) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (121) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (137) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (142) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (76) operaciones_mat -> . valor operadores valor
    (77) operaciones_mat -> . valor operadores operaciones_mat
    (78) operaciones_mat -> . operaciones_mat_par
    (64) condicion_ifelse -> . condicion_if
    (65) condicion_ifelse -> . condicion_if condicion_else
    (66) condicion_ifelse -> . condicion_if condicion_elseif
    (67) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (62) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (63) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (118) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE
    (119) bcase -> . CASE ENTERO COLON
    (146) bgoto -> . GOTO NOMBRE SEMI
    (120) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (147) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (55) incrementos_mat -> . MINUS_EQUAL
    (56) incrementos_mat -> . MOD_EQUAL
    (57) incrementos_mat -> . MUL_EQUAL
    (58) incrementos_mat -> . PLUS_EQUAL
    (148) bcortes -> . EXIT SEMI
    (149) bcortes -> . BREAK SEMI
    (150) bcortes -> . DEFAULT SEMI
    (151) bcortes -> . CONTINUE SEMI
    (94) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (152) bconcat -> . STRING CONCAT STRING SEMI
    (153) bconcat -> . VARIABLE EQUALS VARIABLE CONCAT VARIABLE SEMI
    (154) escribir -> . FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI
    (155) btrim -> . TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
    (156) leer -> . READLINE LPAREN STRING RPAREN SEMI
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE
    (157) otros -> . SMALLER NOMBRE GREATER
    (124) breturn -> . empty
    (125) breturn -> . RETURN SEMI
    (126) breturn -> . RETURN NULL SEMI
    (127) breturn -> . RETURN VARIABLE SEMI
    (128) breturn -> . RETURN NOMBRE SEMI
    (129) breturn -> . RETURN boolean_answer SEMI
    (95) proteccion -> . PUBLIC
    (96) proteccion -> . PRIVATE
    (97) proteccion -> . PROTECTED
    (98) proteccion -> . STATIC
    (106) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (110) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (111) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (109) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (79) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (80) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (81) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (61) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (145) empty -> .
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL

    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    VARIABLE        shift and go to state 41
    VAR             shift and go to state 42
    DEFINE          shift and go to state 47
    READLINE        shift and go to state 49
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    MODULO          shift and go to state 54
    SMALLER         shift and go to state 55
    GREATER         shift and go to state 56
    IS_SMALLER_OR_EQUAL shift and go to state 57
    IS_GREATER_OR_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    XOR             shift and go to state 61
    IS_EQUAL        shift and go to state 62
    IS_NOT_EQUAL    shift and go to state 63
    IS_IDENTICAL    shift and go to state 64
    IS_NOT_IDENTICAL shift and go to state 65
    BOOLEAN_NOT     shift and go to state 66
    WHILE           shift and go to state 67
    DO              shift and go to state 68
    FOR             shift and go to state 69
    FOREACH         shift and go to state 70
    TRY             shift and go to state 71
    ELSEIF          shift and go to state 74
    ELSE            shift and go to state 75
    SWITCH          shift and go to state 76
    CASE            shift and go to state 77
    GOTO            shift and go to state 78
    MINUS_EQUAL     shift and go to state 79
    MOD_EQUAL       shift and go to state 80
    MUL_EQUAL       shift and go to state 81
    PLUS_EQUAL      shift and go to state 82
    EXIT            shift and go to state 83
    BREAK           shift and go to state 84
    DEFAULT         shift and go to state 85
    CONTINUE        shift and go to state 86
    RAND            shift and go to state 87
    STRING          shift and go to state 48
    FWRITE          shift and go to state 88
    TRIM            shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    RETURN          shift and go to state 93
    PUBLIC          shift and go to state 94
    PRIVATE         shift and go to state 95
    PROTECTED       shift and go to state 96
    STATIC          shift and go to state 97
    FUNCTION        shift and go to state 98
    NOMBRE          shift and go to state 39
    LPAREN          shift and go to state 38
    IF              shift and go to state 100
    RBRACE          reduce using rule 145 (empty -> .)
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101

    cuerpo                         shift and go to state 182
    bwhile                         shift and go to state 11
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat                shift and go to state 16
    condicion_ifelse               shift and go to state 17
    condicion_elseif               shift and go to state 18
    condicion_else                 shift and go to state 19
    bswitch                        shift and go to state 20
    bcase                          shift and go to state 21
    bgoto                          shift and go to state 22
    bcolas                         shift and go to state 23
    bpila                          shift and go to state 24
    incrementos_mat                shift and go to state 25
    bcortes                        shift and go to state 26
    brand                          shift and go to state 27
    bconcat                        shift and go to state 28
    escribir                       shift and go to state 29
    btrim                          shift and go to state 30
    leer                           shift and go to state 31
    boolean_answer                 shift and go to state 32
    otros                          shift and go to state 33
    breturn                        shift and go to state 34
    valor                          shift and go to state 36
    proteccion                     shift and go to state 43
    funcion_nparams                shift and go to state 44
    funcion_blank                  shift and go to state 45
    funcion_void                   shift and go to state 46
    operaciones_mat_par            shift and go to state 72
    condicion_if                   shift and go to state 73
    empty                          shift and go to state 92
    numero                         shift and go to state 99

state 128

    (121) bfor -> FOR LPAREN . asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (82) asignacion -> . VARIABLE EQUALS valor SEMI
    (83) asignacion -> . VAR asignacion
    (84) asignacion -> . proteccion asignacion
    (85) asignacion -> . VARIABLE EQUALS brand
    (86) asignacion -> . VARIABLE EQUALS escribir
    (87) asignacion -> . VARIABLE EQUALS btrim
    (88) asignacion -> . VARIABLE EQUALS leer
    (95) proteccion -> . PUBLIC
    (96) proteccion -> . PRIVATE
    (97) proteccion -> . PROTECTED
    (98) proteccion -> . STATIC

    VARIABLE        shift and go to state 116
    VAR             shift and go to state 42
    PUBLIC          shift and go to state 94
    PRIVATE         shift and go to state 95
    PROTECTED       shift and go to state 96
    STATIC          shift and go to state 97

    asignacion                     shift and go to state 183
    proteccion                     shift and go to state 117

state 129

    (137) bforeach -> FOREACH LPAREN . VARIABLE AS VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 184


state 130

    (142) btry -> TRY LBRACE . stc_bloque_def RBRACE catches
    (130) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 185

    stc_bloque_def                 shift and go to state 186

state 131

    (65) condicion_ifelse -> condicion_if condicion_else .

    $end            reduce using rule 65 (condicion_ifelse -> condicion_if condicion_else .)
    RBRACE          reduce using rule 65 (condicion_ifelse -> condicion_if condicion_else .)
    SEMI            reduce using rule 65 (condicion_ifelse -> condicion_if condicion_else .)


state 132

    (66) condicion_ifelse -> condicion_if condicion_elseif .
    (67) condicion_ifelse -> condicion_if condicion_elseif . condicion_else
    (63) condicion_else -> . ELSE LBRACE cuerpo RBRACE

    $end            reduce using rule 66 (condicion_ifelse -> condicion_if condicion_elseif .)
    RBRACE          reduce using rule 66 (condicion_ifelse -> condicion_if condicion_elseif .)
    SEMI            reduce using rule 66 (condicion_ifelse -> condicion_if condicion_elseif .)
    ELSE            shift and go to state 75

    condicion_else                 shift and go to state 187

state 133

    (62) condicion_elseif -> ELSEIF LPAREN . condicion RPAREN LBRACE cuerpo RBRACE
    (112) condicion -> . VARIABLE operador_logico VARIABLE
    (113) condicion -> . valor operador_logico valor
    (114) condicion -> . VARIABLE operador_logico valor
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE

    VARIABLE        shift and go to state 180
    STRING          shift and go to state 112
    NOMBRE          shift and go to state 39
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91

    condicion                      shift and go to state 188
    valor                          shift and go to state 181
    numero                         shift and go to state 99
    boolean_answer                 shift and go to state 107

state 134

    (63) condicion_else -> ELSE LBRACE . cuerpo RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . condicion_elseif
    (18) cuerpo -> . condicion_else
    (19) cuerpo -> . bswitch
    (20) cuerpo -> . bcase
    (21) cuerpo -> . bgoto
    (22) cuerpo -> . bcolas
    (23) cuerpo -> . bpila
    (24) cuerpo -> . incrementos_mat
    (25) cuerpo -> . bcortes
    (26) cuerpo -> . brand
    (27) cuerpo -> . bconcat
    (28) cuerpo -> . escribir
    (29) cuerpo -> . btrim
    (30) cuerpo -> . leer
    (31) cuerpo -> . boolean_answer
    (32) cuerpo -> . otros
    (33) cuerpo -> . breturn
    (34) imprimir -> . ECHO valor SEMI
    (35) imprimir -> . PRINT valor SEMI
    (36) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (37) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (38) imprimir -> . ECHO bconcat
    (82) asignacion -> . VARIABLE EQUALS valor SEMI
    (83) asignacion -> . VAR asignacion
    (84) asignacion -> . proteccion asignacion
    (85) asignacion -> . VARIABLE EQUALS brand
    (86) asignacion -> . VARIABLE EQUALS escribir
    (87) asignacion -> . VARIABLE EQUALS btrim
    (88) asignacion -> . VARIABLE EQUALS leer
    (89) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (99) funciones -> . funcion_nparams
    (100) funciones -> . proteccion funcion_nparams
    (101) funciones -> . funcion_blank
    (102) funciones -> . proteccion funcion_blank
    (103) funciones -> . funcion_void
    (90) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (91) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (92) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (93) lectura -> . READLINE LPAREN RPAREN SEMI
    (46) operadores -> . SUMA
    (47) operadores -> . RESTA
    (48) operadores -> . MULTIPLICACION
    (49) operadores -> . DIVISION
    (50) operadores -> . MODULO
    (51) operador_logico -> . SMALLER
    (52) operador_logico -> . GREATER
    (53) operador_logico -> . IS_SMALLER_OR_EQUAL
    (54) operador_logico -> . IS_GREATER_OR_EQUAL
    (68) condicion_booleana -> . AND
    (69) condicion_booleana -> . OR
    (70) condicion_booleana -> . XOR
    (71) condicion_booleana -> . IS_EQUAL
    (72) condicion_booleana -> . IS_NOT_EQUAL
    (73) condicion_booleana -> . IS_IDENTICAL
    (74) condicion_booleana -> . IS_NOT_IDENTICAL
    (75) condicion_booleana -> . BOOLEAN_NOT
    (115) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (116) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (117) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (121) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (137) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (142) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (76) operaciones_mat -> . valor operadores valor
    (77) operaciones_mat -> . valor operadores operaciones_mat
    (78) operaciones_mat -> . operaciones_mat_par
    (64) condicion_ifelse -> . condicion_if
    (65) condicion_ifelse -> . condicion_if condicion_else
    (66) condicion_ifelse -> . condicion_if condicion_elseif
    (67) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (62) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (63) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (118) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE
    (119) bcase -> . CASE ENTERO COLON
    (146) bgoto -> . GOTO NOMBRE SEMI
    (120) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (147) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (55) incrementos_mat -> . MINUS_EQUAL
    (56) incrementos_mat -> . MOD_EQUAL
    (57) incrementos_mat -> . MUL_EQUAL
    (58) incrementos_mat -> . PLUS_EQUAL
    (148) bcortes -> . EXIT SEMI
    (149) bcortes -> . BREAK SEMI
    (150) bcortes -> . DEFAULT SEMI
    (151) bcortes -> . CONTINUE SEMI
    (94) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (152) bconcat -> . STRING CONCAT STRING SEMI
    (153) bconcat -> . VARIABLE EQUALS VARIABLE CONCAT VARIABLE SEMI
    (154) escribir -> . FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI
    (155) btrim -> . TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
    (156) leer -> . READLINE LPAREN STRING RPAREN SEMI
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE
    (157) otros -> . SMALLER NOMBRE GREATER
    (124) breturn -> . empty
    (125) breturn -> . RETURN SEMI
    (126) breturn -> . RETURN NULL SEMI
    (127) breturn -> . RETURN VARIABLE SEMI
    (128) breturn -> . RETURN NOMBRE SEMI
    (129) breturn -> . RETURN boolean_answer SEMI
    (95) proteccion -> . PUBLIC
    (96) proteccion -> . PRIVATE
    (97) proteccion -> . PROTECTED
    (98) proteccion -> . STATIC
    (106) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (110) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (111) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (109) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (79) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (80) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (81) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (61) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (145) empty -> .
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL

    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    VARIABLE        shift and go to state 41
    VAR             shift and go to state 42
    DEFINE          shift and go to state 47
    READLINE        shift and go to state 49
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    MODULO          shift and go to state 54
    SMALLER         shift and go to state 55
    GREATER         shift and go to state 56
    IS_SMALLER_OR_EQUAL shift and go to state 57
    IS_GREATER_OR_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    XOR             shift and go to state 61
    IS_EQUAL        shift and go to state 62
    IS_NOT_EQUAL    shift and go to state 63
    IS_IDENTICAL    shift and go to state 64
    IS_NOT_IDENTICAL shift and go to state 65
    BOOLEAN_NOT     shift and go to state 66
    WHILE           shift and go to state 67
    DO              shift and go to state 68
    FOR             shift and go to state 69
    FOREACH         shift and go to state 70
    TRY             shift and go to state 71
    ELSEIF          shift and go to state 74
    ELSE            shift and go to state 75
    SWITCH          shift and go to state 76
    CASE            shift and go to state 77
    GOTO            shift and go to state 78
    MINUS_EQUAL     shift and go to state 79
    MOD_EQUAL       shift and go to state 80
    MUL_EQUAL       shift and go to state 81
    PLUS_EQUAL      shift and go to state 82
    EXIT            shift and go to state 83
    BREAK           shift and go to state 84
    DEFAULT         shift and go to state 85
    CONTINUE        shift and go to state 86
    RAND            shift and go to state 87
    STRING          shift and go to state 48
    FWRITE          shift and go to state 88
    TRIM            shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    RETURN          shift and go to state 93
    PUBLIC          shift and go to state 94
    PRIVATE         shift and go to state 95
    PROTECTED       shift and go to state 96
    STATIC          shift and go to state 97
    FUNCTION        shift and go to state 98
    NOMBRE          shift and go to state 39
    LPAREN          shift and go to state 38
    IF              shift and go to state 100
    RBRACE          reduce using rule 145 (empty -> .)
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101

    cuerpo                         shift and go to state 189
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat                shift and go to state 16
    condicion_ifelse               shift and go to state 17
    condicion_elseif               shift and go to state 18
    condicion_else                 shift and go to state 19
    bswitch                        shift and go to state 20
    bcase                          shift and go to state 21
    bgoto                          shift and go to state 22
    bcolas                         shift and go to state 23
    bpila                          shift and go to state 24
    incrementos_mat                shift and go to state 25
    bcortes                        shift and go to state 26
    brand                          shift and go to state 27
    bconcat                        shift and go to state 28
    escribir                       shift and go to state 29
    btrim                          shift and go to state 30
    leer                           shift and go to state 31
    boolean_answer                 shift and go to state 32
    otros                          shift and go to state 33
    breturn                        shift and go to state 34
    valor                          shift and go to state 36
    proteccion                     shift and go to state 43
    funcion_nparams                shift and go to state 44
    funcion_blank                  shift and go to state 45
    funcion_void                   shift and go to state 46
    operaciones_mat_par            shift and go to state 72
    condicion_if                   shift and go to state 73
    empty                          shift and go to state 92
    numero                         shift and go to state 99

state 135

    (118) bswitch -> SWITCH LPAREN . VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE

    VARIABLE        shift and go to state 190


state 136

    (119) bcase -> CASE ENTERO . COLON

    COLON           shift and go to state 191


state 137

    (146) bgoto -> GOTO NOMBRE . SEMI

    SEMI            shift and go to state 192


state 138

    (148) bcortes -> EXIT SEMI .

    $end            reduce using rule 148 (bcortes -> EXIT SEMI .)
    RBRACE          reduce using rule 148 (bcortes -> EXIT SEMI .)
    SEMI            reduce using rule 148 (bcortes -> EXIT SEMI .)


state 139

    (149) bcortes -> BREAK SEMI .

    $end            reduce using rule 149 (bcortes -> BREAK SEMI .)
    RBRACE          reduce using rule 149 (bcortes -> BREAK SEMI .)
    SEMI            reduce using rule 149 (bcortes -> BREAK SEMI .)


state 140

    (150) bcortes -> DEFAULT SEMI .

    $end            reduce using rule 150 (bcortes -> DEFAULT SEMI .)
    RBRACE          reduce using rule 150 (bcortes -> DEFAULT SEMI .)
    SEMI            reduce using rule 150 (bcortes -> DEFAULT SEMI .)


state 141

    (151) bcortes -> CONTINUE SEMI .

    $end            reduce using rule 151 (bcortes -> CONTINUE SEMI .)
    RBRACE          reduce using rule 151 (bcortes -> CONTINUE SEMI .)
    SEMI            reduce using rule 151 (bcortes -> CONTINUE SEMI .)


state 142

    (94) brand -> RAND LPAREN . ENTERO COMMA ENTERO RPAREN SEMI

    ENTERO          shift and go to state 193


state 143

    (154) escribir -> FWRITE LPAREN . NOMBRE COMMA STRING RPAREN SEMI

    NOMBRE          shift and go to state 194


state 144

    (155) btrim -> TRIM LPAREN . NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI

    NOMBRE          shift and go to state 195


state 145

    (125) breturn -> RETURN SEMI .

    $end            reduce using rule 125 (breturn -> RETURN SEMI .)
    RBRACE          reduce using rule 125 (breturn -> RETURN SEMI .)
    SEMI            reduce using rule 125 (breturn -> RETURN SEMI .)


state 146

    (126) breturn -> RETURN NULL . SEMI

    SEMI            shift and go to state 196


state 147

    (127) breturn -> RETURN VARIABLE . SEMI

    SEMI            shift and go to state 197


state 148

    (128) breturn -> RETURN NOMBRE . SEMI

    SEMI            shift and go to state 198


state 149

    (129) breturn -> RETURN boolean_answer . SEMI

    SEMI            shift and go to state 199


state 150

    (106) funcion_nparams -> FUNCTION NOMBRE . LPAREN params_list RPAREN stc_bloque_def
    (110) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN stc_bloque_def
    (111) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN LBRACE empty RBRACE
    (109) funcion_void -> FUNCTION NOMBRE . LPAREN RPAREN COLON VOID LBRACE empty RBRACE

    LPAREN          shift and go to state 200


state 151

    (61) condicion_if -> IF LPAREN . condicion RPAREN LBRACE cuerpo RBRACE
    (112) condicion -> . VARIABLE operador_logico VARIABLE
    (113) condicion -> . valor operador_logico valor
    (114) condicion -> . VARIABLE operador_logico valor
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE

    VARIABLE        shift and go to state 180
    STRING          shift and go to state 112
    NOMBRE          shift and go to state 39
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91

    condicion                      shift and go to state 201
    valor                          shift and go to state 181
    numero                         shift and go to state 99
    boolean_answer                 shift and go to state 107

state 152

    (34) imprimir -> ECHO valor SEMI .

    $end            reduce using rule 34 (imprimir -> ECHO valor SEMI .)
    RBRACE          reduce using rule 34 (imprimir -> ECHO valor SEMI .)
    SEMI            reduce using rule 34 (imprimir -> ECHO valor SEMI .)


state 153

    (37) imprimir -> ECHO NOMBRE LBRACKET . ENTERO RBRACKET SEMI

    ENTERO          shift and go to state 202


state 154

    (153) bconcat -> VARIABLE EQUALS . VARIABLE CONCAT VARIABLE SEMI

    VARIABLE        shift and go to state 203


state 155

    (76) operaciones_mat -> valor operadores valor .
    (76) operaciones_mat -> valor . operadores valor
    (77) operaciones_mat -> valor . operadores operaciones_mat
    (81) operaciones_mat_par -> valor . operadores operaciones_mat_par
    (46) operadores -> . SUMA
    (47) operadores -> . RESTA
    (48) operadores -> . MULTIPLICACION
    (49) operadores -> . DIVISION
    (50) operadores -> . MODULO

    $end            reduce using rule 76 (operaciones_mat -> valor operadores valor .)
    RBRACE          reduce using rule 76 (operaciones_mat -> valor operadores valor .)
    SEMI            reduce using rule 76 (operaciones_mat -> valor operadores valor .)
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    MODULO          shift and go to state 54

    operadores                     shift and go to state 108

state 156

    (77) operaciones_mat -> valor operadores operaciones_mat .

    $end            reduce using rule 77 (operaciones_mat -> valor operadores operaciones_mat .)
    RBRACE          reduce using rule 77 (operaciones_mat -> valor operadores operaciones_mat .)
    SEMI            reduce using rule 77 (operaciones_mat -> valor operadores operaciones_mat .)


state 157

    (81) operaciones_mat_par -> valor operadores operaciones_mat_par .
    (78) operaciones_mat -> operaciones_mat_par .

  ! reduce/reduce conflict for $end resolved using rule 78 (operaciones_mat -> operaciones_mat_par .)
  ! reduce/reduce conflict for RBRACE resolved using rule 78 (operaciones_mat -> operaciones_mat_par .)
  ! reduce/reduce conflict for SEMI resolved using rule 78 (operaciones_mat -> operaciones_mat_par .)
    $end            reduce using rule 78 (operaciones_mat -> operaciones_mat_par .)
    RBRACE          reduce using rule 78 (operaciones_mat -> operaciones_mat_par .)
    SEMI            reduce using rule 78 (operaciones_mat -> operaciones_mat_par .)

  ! $end            [ reduce using rule 81 (operaciones_mat_par -> valor operadores operaciones_mat_par .) ]
  ! RBRACE          [ reduce using rule 81 (operaciones_mat_par -> valor operadores operaciones_mat_par .) ]
  ! SEMI            [ reduce using rule 81 (operaciones_mat_par -> valor operadores operaciones_mat_par .) ]


state 158

    (35) imprimir -> PRINT valor SEMI .

    $end            reduce using rule 35 (imprimir -> PRINT valor SEMI .)
    RBRACE          reduce using rule 35 (imprimir -> PRINT valor SEMI .)
    SEMI            reduce using rule 35 (imprimir -> PRINT valor SEMI .)


state 159

    (36) imprimir -> PRINT LPAREN valor . RPAREN SEMI

    RPAREN          shift and go to state 204


state 160

    (79) operaciones_mat_par -> LPAREN valor operadores . valor RPAREN
    (80) operaciones_mat_par -> LPAREN valor operadores . operaciones_mat_par RPAREN
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (79) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (80) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (81) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE

    VARIABLE        shift and go to state 111
    STRING          shift and go to state 112
    NOMBRE          shift and go to state 39
    LPAREN          shift and go to state 38
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91

    valor                          shift and go to state 205
    operaciones_mat_par            shift and go to state 206
    numero                         shift and go to state 99
    boolean_answer                 shift and go to state 107

state 161

    (153) bconcat -> VARIABLE EQUALS VARIABLE . CONCAT VARIABLE SEMI
    (40) valor -> VARIABLE .

    CONCAT          shift and go to state 207
    SEMI            reduce using rule 40 (valor -> VARIABLE .)


state 162

    (82) asignacion -> VARIABLE EQUALS valor . SEMI

    SEMI            shift and go to state 208


state 163

    (85) asignacion -> VARIABLE EQUALS brand .

    $end            reduce using rule 85 (asignacion -> VARIABLE EQUALS brand .)
    RBRACE          reduce using rule 85 (asignacion -> VARIABLE EQUALS brand .)
    SEMI            reduce using rule 85 (asignacion -> VARIABLE EQUALS brand .)
    VARIABLE        reduce using rule 85 (asignacion -> VARIABLE EQUALS brand .)
    STRING          reduce using rule 85 (asignacion -> VARIABLE EQUALS brand .)
    NOMBRE          reduce using rule 85 (asignacion -> VARIABLE EQUALS brand .)
    ENTERO          reduce using rule 85 (asignacion -> VARIABLE EQUALS brand .)
    DECIMAL         reduce using rule 85 (asignacion -> VARIABLE EQUALS brand .)
    TRUE            reduce using rule 85 (asignacion -> VARIABLE EQUALS brand .)
    FALSE           reduce using rule 85 (asignacion -> VARIABLE EQUALS brand .)
    RPAREN          reduce using rule 85 (asignacion -> VARIABLE EQUALS brand .)
    COMMA           reduce using rule 85 (asignacion -> VARIABLE EQUALS brand .)


state 164

    (86) asignacion -> VARIABLE EQUALS escribir .

    $end            reduce using rule 86 (asignacion -> VARIABLE EQUALS escribir .)
    RBRACE          reduce using rule 86 (asignacion -> VARIABLE EQUALS escribir .)
    SEMI            reduce using rule 86 (asignacion -> VARIABLE EQUALS escribir .)
    VARIABLE        reduce using rule 86 (asignacion -> VARIABLE EQUALS escribir .)
    STRING          reduce using rule 86 (asignacion -> VARIABLE EQUALS escribir .)
    NOMBRE          reduce using rule 86 (asignacion -> VARIABLE EQUALS escribir .)
    ENTERO          reduce using rule 86 (asignacion -> VARIABLE EQUALS escribir .)
    DECIMAL         reduce using rule 86 (asignacion -> VARIABLE EQUALS escribir .)
    TRUE            reduce using rule 86 (asignacion -> VARIABLE EQUALS escribir .)
    FALSE           reduce using rule 86 (asignacion -> VARIABLE EQUALS escribir .)
    RPAREN          reduce using rule 86 (asignacion -> VARIABLE EQUALS escribir .)
    COMMA           reduce using rule 86 (asignacion -> VARIABLE EQUALS escribir .)


state 165

    (87) asignacion -> VARIABLE EQUALS btrim .

    $end            reduce using rule 87 (asignacion -> VARIABLE EQUALS btrim .)
    RBRACE          reduce using rule 87 (asignacion -> VARIABLE EQUALS btrim .)
    SEMI            reduce using rule 87 (asignacion -> VARIABLE EQUALS btrim .)
    VARIABLE        reduce using rule 87 (asignacion -> VARIABLE EQUALS btrim .)
    STRING          reduce using rule 87 (asignacion -> VARIABLE EQUALS btrim .)
    NOMBRE          reduce using rule 87 (asignacion -> VARIABLE EQUALS btrim .)
    ENTERO          reduce using rule 87 (asignacion -> VARIABLE EQUALS btrim .)
    DECIMAL         reduce using rule 87 (asignacion -> VARIABLE EQUALS btrim .)
    TRUE            reduce using rule 87 (asignacion -> VARIABLE EQUALS btrim .)
    FALSE           reduce using rule 87 (asignacion -> VARIABLE EQUALS btrim .)
    RPAREN          reduce using rule 87 (asignacion -> VARIABLE EQUALS btrim .)
    COMMA           reduce using rule 87 (asignacion -> VARIABLE EQUALS btrim .)


state 166

    (88) asignacion -> VARIABLE EQUALS leer .

    $end            reduce using rule 88 (asignacion -> VARIABLE EQUALS leer .)
    RBRACE          reduce using rule 88 (asignacion -> VARIABLE EQUALS leer .)
    SEMI            reduce using rule 88 (asignacion -> VARIABLE EQUALS leer .)
    VARIABLE        reduce using rule 88 (asignacion -> VARIABLE EQUALS leer .)
    STRING          reduce using rule 88 (asignacion -> VARIABLE EQUALS leer .)
    NOMBRE          reduce using rule 88 (asignacion -> VARIABLE EQUALS leer .)
    ENTERO          reduce using rule 88 (asignacion -> VARIABLE EQUALS leer .)
    DECIMAL         reduce using rule 88 (asignacion -> VARIABLE EQUALS leer .)
    TRUE            reduce using rule 88 (asignacion -> VARIABLE EQUALS leer .)
    FALSE           reduce using rule 88 (asignacion -> VARIABLE EQUALS leer .)
    RPAREN          reduce using rule 88 (asignacion -> VARIABLE EQUALS leer .)
    COMMA           reduce using rule 88 (asignacion -> VARIABLE EQUALS leer .)


state 167

    (89) asignacion_array -> VARIABLE EQUALS array_def . SEMI

    SEMI            shift and go to state 209


state 168

    (120) bcolas -> VARIABLE EQUALS NEW . SPLQUEUE LPAREN RPAREN SEMI
    (147) bpila -> VARIABLE EQUALS NEW . SPLSTACK LPAREN RPAREN SEMI

    SPLQUEUE        shift and go to state 210
    SPLSTACK        shift and go to state 211


state 169

    (156) leer -> READLINE . LPAREN STRING RPAREN SEMI

    LPAREN          shift and go to state 212


state 170

    (138) array_def -> ARRAY . LPAREN RPAREN
    (139) array_def -> ARRAY . LPAREN array_elmnt RPAREN

    LPAREN          shift and go to state 213


state 171

    (82) asignacion -> VARIABLE EQUALS . valor SEMI
    (85) asignacion -> VARIABLE EQUALS . brand
    (86) asignacion -> VARIABLE EQUALS . escribir
    (87) asignacion -> VARIABLE EQUALS . btrim
    (88) asignacion -> VARIABLE EQUALS . leer
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (94) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (154) escribir -> . FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI
    (155) btrim -> . TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
    (156) leer -> . READLINE LPAREN STRING RPAREN SEMI
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE

    VARIABLE        shift and go to state 111
    STRING          shift and go to state 112
    NOMBRE          shift and go to state 39
    RAND            shift and go to state 87
    FWRITE          shift and go to state 88
    TRIM            shift and go to state 89
    READLINE        shift and go to state 169
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91

    valor                          shift and go to state 162
    brand                          shift and go to state 163
    escribir                       shift and go to state 164
    btrim                          shift and go to state 165
    leer                           shift and go to state 166
    numero                         shift and go to state 99
    boolean_answer                 shift and go to state 107

state 172

    (106) funcion_nparams -> FUNCTION NOMBRE . LPAREN params_list RPAREN stc_bloque_def
    (110) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN stc_bloque_def
    (111) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN LBRACE empty RBRACE

    LPAREN          shift and go to state 214


state 173

    (90) constante -> DEFINE LPAREN STRING . COMMA valor RPAREN SEMI

    COMMA           shift and go to state 215


state 174

    (91) constante -> DEFINE LPAREN NOMBRE . COMMA ARRAY RPAREN SEMI

    COMMA           shift and go to state 216


state 175

    (152) bconcat -> STRING CONCAT STRING . SEMI

    SEMI            shift and go to state 217


state 176

    (92) lectura -> READLINE LPAREN STRING . RPAREN SEMI
    (156) leer -> READLINE LPAREN STRING . RPAREN SEMI

    RPAREN          shift and go to state 218


state 177

    (93) lectura -> READLINE LPAREN RPAREN . SEMI

    SEMI            shift and go to state 219


state 178

    (157) otros -> SMALLER NOMBRE GREATER .

    $end            reduce using rule 157 (otros -> SMALLER NOMBRE GREATER .)
    RBRACE          reduce using rule 157 (otros -> SMALLER NOMBRE GREATER .)
    SEMI            reduce using rule 157 (otros -> SMALLER NOMBRE GREATER .)


state 179

    (115) bwhile -> WHILE LPAREN condicion . RPAREN LBRACE stc_bloque RBRACE
    (116) bwhile -> WHILE LPAREN condicion . RPAREN COLON stc_bloque

    RPAREN          shift and go to state 220


state 180

    (112) condicion -> VARIABLE . operador_logico VARIABLE
    (114) condicion -> VARIABLE . operador_logico valor
    (40) valor -> VARIABLE .
    (51) operador_logico -> . SMALLER
    (52) operador_logico -> . GREATER
    (53) operador_logico -> . IS_SMALLER_OR_EQUAL
    (54) operador_logico -> . IS_GREATER_OR_EQUAL

  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for IS_SMALLER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for IS_GREATER_OR_EQUAL resolved as shift
    SMALLER         shift and go to state 222
    GREATER         shift and go to state 56
    IS_SMALLER_OR_EQUAL shift and go to state 57
    IS_GREATER_OR_EQUAL shift and go to state 58

  ! SMALLER         [ reduce using rule 40 (valor -> VARIABLE .) ]
  ! GREATER         [ reduce using rule 40 (valor -> VARIABLE .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 40 (valor -> VARIABLE .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 40 (valor -> VARIABLE .) ]

    operador_logico                shift and go to state 221

state 181

    (113) condicion -> valor . operador_logico valor
    (51) operador_logico -> . SMALLER
    (52) operador_logico -> . GREATER
    (53) operador_logico -> . IS_SMALLER_OR_EQUAL
    (54) operador_logico -> . IS_GREATER_OR_EQUAL

    SMALLER         shift and go to state 222
    GREATER         shift and go to state 56
    IS_SMALLER_OR_EQUAL shift and go to state 57
    IS_GREATER_OR_EQUAL shift and go to state 58

    operador_logico                shift and go to state 223

state 182

    (117) bdo -> DO LBRACE cuerpo . RBRACE bwhile

    RBRACE          shift and go to state 224


state 183

    (121) bfor -> FOR LPAREN asignacion . condicion SEMI for_incr RPAREN stc_bloque_def
    (112) condicion -> . VARIABLE operador_logico VARIABLE
    (113) condicion -> . valor operador_logico valor
    (114) condicion -> . VARIABLE operador_logico valor
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE

    VARIABLE        shift and go to state 180
    STRING          shift and go to state 112
    NOMBRE          shift and go to state 39
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91

    condicion                      shift and go to state 225
    valor                          shift and go to state 181
    numero                         shift and go to state 99
    boolean_answer                 shift and go to state 107

state 184

    (137) bforeach -> FOREACH LPAREN VARIABLE . AS VARIABLE RPAREN stc_bloque_def

    AS              shift and go to state 226


state 185

    (130) stc_bloque_def -> LBRACE . stc_bloque RBRACE
    (122) stc_bloque -> . stc_bloque SEMI cuerpo
    (123) stc_bloque -> . breturn
    (124) breturn -> . empty
    (125) breturn -> . RETURN SEMI
    (126) breturn -> . RETURN NULL SEMI
    (127) breturn -> . RETURN VARIABLE SEMI
    (128) breturn -> . RETURN NOMBRE SEMI
    (129) breturn -> . RETURN boolean_answer SEMI
    (145) empty -> .

    RETURN          shift and go to state 93
    RBRACE          reduce using rule 145 (empty -> .)
    SEMI            reduce using rule 145 (empty -> .)

    stc_bloque                     shift and go to state 227
    breturn                        shift and go to state 228
    empty                          shift and go to state 92

state 186

    (142) btry -> TRY LBRACE stc_bloque_def . RBRACE catches

    RBRACE          shift and go to state 229


state 187

    (67) condicion_ifelse -> condicion_if condicion_elseif condicion_else .

    $end            reduce using rule 67 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    RBRACE          reduce using rule 67 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    SEMI            reduce using rule 67 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)


state 188

    (62) condicion_elseif -> ELSEIF LPAREN condicion . RPAREN LBRACE cuerpo RBRACE

    RPAREN          shift and go to state 230


state 189

    (63) condicion_else -> ELSE LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 231


state 190

    (118) bswitch -> SWITCH LPAREN VARIABLE . RPAREN LBRACE cuerpo SEMI RBRACE

    RPAREN          shift and go to state 232


state 191

    (119) bcase -> CASE ENTERO COLON .

    $end            reduce using rule 119 (bcase -> CASE ENTERO COLON .)
    RBRACE          reduce using rule 119 (bcase -> CASE ENTERO COLON .)
    SEMI            reduce using rule 119 (bcase -> CASE ENTERO COLON .)


state 192

    (146) bgoto -> GOTO NOMBRE SEMI .

    $end            reduce using rule 146 (bgoto -> GOTO NOMBRE SEMI .)
    RBRACE          reduce using rule 146 (bgoto -> GOTO NOMBRE SEMI .)
    SEMI            reduce using rule 146 (bgoto -> GOTO NOMBRE SEMI .)


state 193

    (94) brand -> RAND LPAREN ENTERO . COMMA ENTERO RPAREN SEMI

    COMMA           shift and go to state 233


state 194

    (154) escribir -> FWRITE LPAREN NOMBRE . COMMA STRING RPAREN SEMI

    COMMA           shift and go to state 234


state 195

    (155) btrim -> TRIM LPAREN NOMBRE . LPAREN NOMBRE RPAREN RPAREN SEMI

    LPAREN          shift and go to state 235


state 196

    (126) breturn -> RETURN NULL SEMI .

    $end            reduce using rule 126 (breturn -> RETURN NULL SEMI .)
    RBRACE          reduce using rule 126 (breturn -> RETURN NULL SEMI .)
    SEMI            reduce using rule 126 (breturn -> RETURN NULL SEMI .)


state 197

    (127) breturn -> RETURN VARIABLE SEMI .

    $end            reduce using rule 127 (breturn -> RETURN VARIABLE SEMI .)
    RBRACE          reduce using rule 127 (breturn -> RETURN VARIABLE SEMI .)
    SEMI            reduce using rule 127 (breturn -> RETURN VARIABLE SEMI .)


state 198

    (128) breturn -> RETURN NOMBRE SEMI .

    $end            reduce using rule 128 (breturn -> RETURN NOMBRE SEMI .)
    RBRACE          reduce using rule 128 (breturn -> RETURN NOMBRE SEMI .)
    SEMI            reduce using rule 128 (breturn -> RETURN NOMBRE SEMI .)


state 199

    (129) breturn -> RETURN boolean_answer SEMI .

    $end            reduce using rule 129 (breturn -> RETURN boolean_answer SEMI .)
    RBRACE          reduce using rule 129 (breturn -> RETURN boolean_answer SEMI .)
    SEMI            reduce using rule 129 (breturn -> RETURN boolean_answer SEMI .)


state 200

    (106) funcion_nparams -> FUNCTION NOMBRE LPAREN . params_list RPAREN stc_bloque_def
    (110) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN stc_bloque_def
    (111) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN LBRACE empty RBRACE
    (109) funcion_void -> FUNCTION NOMBRE LPAREN . RPAREN COLON VOID LBRACE empty RBRACE
    (107) params_list -> . params_list COMMA param
    (108) params_list -> . param
    (104) param -> . VARIABLE
    (105) param -> . asignacion
    (82) asignacion -> . VARIABLE EQUALS valor SEMI
    (83) asignacion -> . VAR asignacion
    (84) asignacion -> . proteccion asignacion
    (85) asignacion -> . VARIABLE EQUALS brand
    (86) asignacion -> . VARIABLE EQUALS escribir
    (87) asignacion -> . VARIABLE EQUALS btrim
    (88) asignacion -> . VARIABLE EQUALS leer
    (95) proteccion -> . PUBLIC
    (96) proteccion -> . PRIVATE
    (97) proteccion -> . PROTECTED
    (98) proteccion -> . STATIC

    RPAREN          shift and go to state 237
    VARIABLE        shift and go to state 239
    VAR             shift and go to state 42
    PUBLIC          shift and go to state 94
    PRIVATE         shift and go to state 95
    PROTECTED       shift and go to state 96
    STATIC          shift and go to state 97

    params_list                    shift and go to state 236
    param                          shift and go to state 238
    asignacion                     shift and go to state 240
    proteccion                     shift and go to state 117

state 201

    (61) condicion_if -> IF LPAREN condicion . RPAREN LBRACE cuerpo RBRACE

    RPAREN          shift and go to state 241


state 202

    (37) imprimir -> ECHO NOMBRE LBRACKET ENTERO . RBRACKET SEMI

    RBRACKET        shift and go to state 242


state 203

    (153) bconcat -> VARIABLE EQUALS VARIABLE . CONCAT VARIABLE SEMI

    CONCAT          shift and go to state 207


state 204

    (36) imprimir -> PRINT LPAREN valor RPAREN . SEMI

    SEMI            shift and go to state 243


state 205

    (79) operaciones_mat_par -> LPAREN valor operadores valor . RPAREN
    (81) operaciones_mat_par -> valor . operadores operaciones_mat_par
    (46) operadores -> . SUMA
    (47) operadores -> . RESTA
    (48) operadores -> . MULTIPLICACION
    (49) operadores -> . DIVISION
    (50) operadores -> . MODULO

    RPAREN          shift and go to state 245
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    MODULO          shift and go to state 54

    operadores                     shift and go to state 244

state 206

    (80) operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par . RPAREN

    RPAREN          shift and go to state 246


state 207

    (153) bconcat -> VARIABLE EQUALS VARIABLE CONCAT . VARIABLE SEMI

    VARIABLE        shift and go to state 247


state 208

    (82) asignacion -> VARIABLE EQUALS valor SEMI .

    $end            reduce using rule 82 (asignacion -> VARIABLE EQUALS valor SEMI .)
    RBRACE          reduce using rule 82 (asignacion -> VARIABLE EQUALS valor SEMI .)
    SEMI            reduce using rule 82 (asignacion -> VARIABLE EQUALS valor SEMI .)
    VARIABLE        reduce using rule 82 (asignacion -> VARIABLE EQUALS valor SEMI .)
    STRING          reduce using rule 82 (asignacion -> VARIABLE EQUALS valor SEMI .)
    NOMBRE          reduce using rule 82 (asignacion -> VARIABLE EQUALS valor SEMI .)
    ENTERO          reduce using rule 82 (asignacion -> VARIABLE EQUALS valor SEMI .)
    DECIMAL         reduce using rule 82 (asignacion -> VARIABLE EQUALS valor SEMI .)
    TRUE            reduce using rule 82 (asignacion -> VARIABLE EQUALS valor SEMI .)
    FALSE           reduce using rule 82 (asignacion -> VARIABLE EQUALS valor SEMI .)
    RPAREN          reduce using rule 82 (asignacion -> VARIABLE EQUALS valor SEMI .)
    COMMA           reduce using rule 82 (asignacion -> VARIABLE EQUALS valor SEMI .)


state 209

    (89) asignacion_array -> VARIABLE EQUALS array_def SEMI .

    $end            reduce using rule 89 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    RBRACE          reduce using rule 89 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    SEMI            reduce using rule 89 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)


state 210

    (120) bcolas -> VARIABLE EQUALS NEW SPLQUEUE . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 248


state 211

    (147) bpila -> VARIABLE EQUALS NEW SPLSTACK . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 249


state 212

    (156) leer -> READLINE LPAREN . STRING RPAREN SEMI

    STRING          shift and go to state 250


state 213

    (138) array_def -> ARRAY LPAREN . RPAREN
    (139) array_def -> ARRAY LPAREN . array_elmnt RPAREN
    (140) array_elmnt -> . array_elmnt COMMA valor
    (141) array_elmnt -> . valor
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE

    RPAREN          shift and go to state 251
    VARIABLE        shift and go to state 111
    STRING          shift and go to state 112
    NOMBRE          shift and go to state 39
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91

    array_elmnt                    shift and go to state 252
    valor                          shift and go to state 253
    numero                         shift and go to state 99
    boolean_answer                 shift and go to state 107

state 214

    (106) funcion_nparams -> FUNCTION NOMBRE LPAREN . params_list RPAREN stc_bloque_def
    (110) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN stc_bloque_def
    (111) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN LBRACE empty RBRACE
    (107) params_list -> . params_list COMMA param
    (108) params_list -> . param
    (104) param -> . VARIABLE
    (105) param -> . asignacion
    (82) asignacion -> . VARIABLE EQUALS valor SEMI
    (83) asignacion -> . VAR asignacion
    (84) asignacion -> . proteccion asignacion
    (85) asignacion -> . VARIABLE EQUALS brand
    (86) asignacion -> . VARIABLE EQUALS escribir
    (87) asignacion -> . VARIABLE EQUALS btrim
    (88) asignacion -> . VARIABLE EQUALS leer
    (95) proteccion -> . PUBLIC
    (96) proteccion -> . PRIVATE
    (97) proteccion -> . PROTECTED
    (98) proteccion -> . STATIC

    RPAREN          shift and go to state 254
    VARIABLE        shift and go to state 239
    VAR             shift and go to state 42
    PUBLIC          shift and go to state 94
    PRIVATE         shift and go to state 95
    PROTECTED       shift and go to state 96
    STATIC          shift and go to state 97

    params_list                    shift and go to state 236
    param                          shift and go to state 238
    asignacion                     shift and go to state 240
    proteccion                     shift and go to state 117

state 215

    (90) constante -> DEFINE LPAREN STRING COMMA . valor RPAREN SEMI
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE

    VARIABLE        shift and go to state 111
    STRING          shift and go to state 112
    NOMBRE          shift and go to state 39
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91

    valor                          shift and go to state 255
    numero                         shift and go to state 99
    boolean_answer                 shift and go to state 107

state 216

    (91) constante -> DEFINE LPAREN NOMBRE COMMA . ARRAY RPAREN SEMI

    ARRAY           shift and go to state 256


state 217

    (152) bconcat -> STRING CONCAT STRING SEMI .

    $end            reduce using rule 152 (bconcat -> STRING CONCAT STRING SEMI .)
    RBRACE          reduce using rule 152 (bconcat -> STRING CONCAT STRING SEMI .)
    SEMI            reduce using rule 152 (bconcat -> STRING CONCAT STRING SEMI .)


state 218

    (92) lectura -> READLINE LPAREN STRING RPAREN . SEMI
    (156) leer -> READLINE LPAREN STRING RPAREN . SEMI

    SEMI            shift and go to state 257


state 219

    (93) lectura -> READLINE LPAREN RPAREN SEMI .

    $end            reduce using rule 93 (lectura -> READLINE LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 93 (lectura -> READLINE LPAREN RPAREN SEMI .)
    SEMI            reduce using rule 93 (lectura -> READLINE LPAREN RPAREN SEMI .)


state 220

    (115) bwhile -> WHILE LPAREN condicion RPAREN . LBRACE stc_bloque RBRACE
    (116) bwhile -> WHILE LPAREN condicion RPAREN . COLON stc_bloque

    LBRACE          shift and go to state 258
    COLON           shift and go to state 259


state 221

    (112) condicion -> VARIABLE operador_logico . VARIABLE
    (114) condicion -> VARIABLE operador_logico . valor
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE

    VARIABLE        shift and go to state 260
    STRING          shift and go to state 112
    NOMBRE          shift and go to state 39
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91

    valor                          shift and go to state 261
    numero                         shift and go to state 99
    boolean_answer                 shift and go to state 107

state 222

    (51) operador_logico -> SMALLER .

    VARIABLE        reduce using rule 51 (operador_logico -> SMALLER .)
    STRING          reduce using rule 51 (operador_logico -> SMALLER .)
    NOMBRE          reduce using rule 51 (operador_logico -> SMALLER .)
    ENTERO          reduce using rule 51 (operador_logico -> SMALLER .)
    DECIMAL         reduce using rule 51 (operador_logico -> SMALLER .)
    TRUE            reduce using rule 51 (operador_logico -> SMALLER .)
    FALSE           reduce using rule 51 (operador_logico -> SMALLER .)


state 223

    (113) condicion -> valor operador_logico . valor
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE

    VARIABLE        shift and go to state 111
    STRING          shift and go to state 112
    NOMBRE          shift and go to state 39
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91

    valor                          shift and go to state 262
    numero                         shift and go to state 99
    boolean_answer                 shift and go to state 107

state 224

    (117) bdo -> DO LBRACE cuerpo RBRACE . bwhile
    (115) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (116) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque

    WHILE           shift and go to state 67

    bwhile                         shift and go to state 263

state 225

    (121) bfor -> FOR LPAREN asignacion condicion . SEMI for_incr RPAREN stc_bloque_def

    SEMI            shift and go to state 264


state 226

    (137) bforeach -> FOREACH LPAREN VARIABLE AS . VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 265


state 227

    (130) stc_bloque_def -> LBRACE stc_bloque . RBRACE
    (122) stc_bloque -> stc_bloque . SEMI cuerpo

    RBRACE          shift and go to state 266
    SEMI            shift and go to state 267


state 228

    (123) stc_bloque -> breturn .

    RBRACE          reduce using rule 123 (stc_bloque -> breturn .)
    SEMI            reduce using rule 123 (stc_bloque -> breturn .)
    $end            reduce using rule 123 (stc_bloque -> breturn .)


state 229

    (142) btry -> TRY LBRACE stc_bloque_def RBRACE . catches
    (143) catches -> . catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def
    (144) catches -> . empty
    (145) empty -> .

    CATCH           reduce using rule 145 (empty -> .)
    $end            reduce using rule 145 (empty -> .)
    RBRACE          reduce using rule 145 (empty -> .)
    SEMI            reduce using rule 145 (empty -> .)

    catches                        shift and go to state 268
    empty                          shift and go to state 269

state 230

    (62) condicion_elseif -> ELSEIF LPAREN condicion RPAREN . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 270


state 231

    (63) condicion_else -> ELSE LBRACE cuerpo RBRACE .

    $end            reduce using rule 63 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 63 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    SEMI            reduce using rule 63 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)


state 232

    (118) bswitch -> SWITCH LPAREN VARIABLE RPAREN . LBRACE cuerpo SEMI RBRACE

    LBRACE          shift and go to state 271


state 233

    (94) brand -> RAND LPAREN ENTERO COMMA . ENTERO RPAREN SEMI

    ENTERO          shift and go to state 272


state 234

    (154) escribir -> FWRITE LPAREN NOMBRE COMMA . STRING RPAREN SEMI

    STRING          shift and go to state 273


state 235

    (155) btrim -> TRIM LPAREN NOMBRE LPAREN . NOMBRE RPAREN RPAREN SEMI

    NOMBRE          shift and go to state 274


state 236

    (106) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list . RPAREN stc_bloque_def
    (107) params_list -> params_list . COMMA param

    RPAREN          shift and go to state 275
    COMMA           shift and go to state 276


state 237

    (110) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . stc_bloque_def
    (111) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . LBRACE empty RBRACE
    (109) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN . COLON VOID LBRACE empty RBRACE
    (130) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 278
    COLON           shift and go to state 279

    stc_bloque_def                 shift and go to state 277

state 238

    (108) params_list -> param .

    RPAREN          reduce using rule 108 (params_list -> param .)
    COMMA           reduce using rule 108 (params_list -> param .)


state 239

    (104) param -> VARIABLE .
    (82) asignacion -> VARIABLE . EQUALS valor SEMI
    (85) asignacion -> VARIABLE . EQUALS brand
    (86) asignacion -> VARIABLE . EQUALS escribir
    (87) asignacion -> VARIABLE . EQUALS btrim
    (88) asignacion -> VARIABLE . EQUALS leer

    RPAREN          reduce using rule 104 (param -> VARIABLE .)
    COMMA           reduce using rule 104 (param -> VARIABLE .)
    EQUALS          shift and go to state 171


state 240

    (105) param -> asignacion .

    RPAREN          reduce using rule 105 (param -> asignacion .)
    COMMA           reduce using rule 105 (param -> asignacion .)


state 241

    (61) condicion_if -> IF LPAREN condicion RPAREN . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 280


state 242

    (37) imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET . SEMI

    SEMI            shift and go to state 281


state 243

    (36) imprimir -> PRINT LPAREN valor RPAREN SEMI .

    $end            reduce using rule 36 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    RBRACE          reduce using rule 36 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    SEMI            reduce using rule 36 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)


state 244

    (81) operaciones_mat_par -> valor operadores . operaciones_mat_par
    (79) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (80) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (81) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE

    LPAREN          shift and go to state 38
    VARIABLE        shift and go to state 111
    STRING          shift and go to state 112
    NOMBRE          shift and go to state 39
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91

    valor                          shift and go to state 282
    operaciones_mat_par            shift and go to state 283
    numero                         shift and go to state 99
    boolean_answer                 shift and go to state 107

state 245

    (79) operaciones_mat_par -> LPAREN valor operadores valor RPAREN .

    $end            reduce using rule 79 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    RBRACE          reduce using rule 79 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    SEMI            reduce using rule 79 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    RPAREN          reduce using rule 79 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)


state 246

    (80) operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .

    $end            reduce using rule 80 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    RBRACE          reduce using rule 80 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    SEMI            reduce using rule 80 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    RPAREN          reduce using rule 80 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)


state 247

    (153) bconcat -> VARIABLE EQUALS VARIABLE CONCAT VARIABLE . SEMI

    SEMI            shift and go to state 284


state 248

    (120) bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 285


state 249

    (147) bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 286


state 250

    (156) leer -> READLINE LPAREN STRING . RPAREN SEMI

    RPAREN          shift and go to state 287


state 251

    (138) array_def -> ARRAY LPAREN RPAREN .

    SEMI            reduce using rule 138 (array_def -> ARRAY LPAREN RPAREN .)


state 252

    (139) array_def -> ARRAY LPAREN array_elmnt . RPAREN
    (140) array_elmnt -> array_elmnt . COMMA valor

    RPAREN          shift and go to state 288
    COMMA           shift and go to state 289


state 253

    (141) array_elmnt -> valor .

    RPAREN          reduce using rule 141 (array_elmnt -> valor .)
    COMMA           reduce using rule 141 (array_elmnt -> valor .)


state 254

    (110) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . stc_bloque_def
    (111) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . LBRACE empty RBRACE
    (130) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 278

    stc_bloque_def                 shift and go to state 277

state 255

    (90) constante -> DEFINE LPAREN STRING COMMA valor . RPAREN SEMI

    RPAREN          shift and go to state 290


state 256

    (91) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY . RPAREN SEMI

    RPAREN          shift and go to state 291


state 257

    (92) lectura -> READLINE LPAREN STRING RPAREN SEMI .
    (156) leer -> READLINE LPAREN STRING RPAREN SEMI .

  ! reduce/reduce conflict for $end resolved using rule 92 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
  ! reduce/reduce conflict for RBRACE resolved using rule 92 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
  ! reduce/reduce conflict for SEMI resolved using rule 92 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    $end            reduce using rule 92 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    RBRACE          reduce using rule 92 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    SEMI            reduce using rule 92 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)

  ! $end            [ reduce using rule 156 (leer -> READLINE LPAREN STRING RPAREN SEMI .) ]
  ! RBRACE          [ reduce using rule 156 (leer -> READLINE LPAREN STRING RPAREN SEMI .) ]
  ! SEMI            [ reduce using rule 156 (leer -> READLINE LPAREN STRING RPAREN SEMI .) ]


state 258

    (115) bwhile -> WHILE LPAREN condicion RPAREN LBRACE . stc_bloque RBRACE
    (122) stc_bloque -> . stc_bloque SEMI cuerpo
    (123) stc_bloque -> . breturn
    (124) breturn -> . empty
    (125) breturn -> . RETURN SEMI
    (126) breturn -> . RETURN NULL SEMI
    (127) breturn -> . RETURN VARIABLE SEMI
    (128) breturn -> . RETURN NOMBRE SEMI
    (129) breturn -> . RETURN boolean_answer SEMI
    (145) empty -> .

    RETURN          shift and go to state 93
    RBRACE          reduce using rule 145 (empty -> .)
    SEMI            reduce using rule 145 (empty -> .)

    stc_bloque                     shift and go to state 292
    breturn                        shift and go to state 228
    empty                          shift and go to state 92

state 259

    (116) bwhile -> WHILE LPAREN condicion RPAREN COLON . stc_bloque
    (122) stc_bloque -> . stc_bloque SEMI cuerpo
    (123) stc_bloque -> . breturn
    (124) breturn -> . empty
    (125) breturn -> . RETURN SEMI
    (126) breturn -> . RETURN NULL SEMI
    (127) breturn -> . RETURN VARIABLE SEMI
    (128) breturn -> . RETURN NOMBRE SEMI
    (129) breturn -> . RETURN boolean_answer SEMI
    (145) empty -> .

    RETURN          shift and go to state 93
    RBRACE          reduce using rule 145 (empty -> .)
    SEMI            reduce using rule 145 (empty -> .)
    $end            reduce using rule 145 (empty -> .)

    stc_bloque                     shift and go to state 293
    breturn                        shift and go to state 228
    empty                          shift and go to state 92

state 260

    (112) condicion -> VARIABLE operador_logico VARIABLE .
    (40) valor -> VARIABLE .

  ! reduce/reduce conflict for RPAREN resolved using rule 40 (valor -> VARIABLE .)
  ! reduce/reduce conflict for SEMI resolved using rule 40 (valor -> VARIABLE .)
    RPAREN          reduce using rule 40 (valor -> VARIABLE .)
    SEMI            reduce using rule 40 (valor -> VARIABLE .)

  ! RPAREN          [ reduce using rule 112 (condicion -> VARIABLE operador_logico VARIABLE .) ]
  ! SEMI            [ reduce using rule 112 (condicion -> VARIABLE operador_logico VARIABLE .) ]


state 261

    (114) condicion -> VARIABLE operador_logico valor .

    RPAREN          reduce using rule 114 (condicion -> VARIABLE operador_logico valor .)
    SEMI            reduce using rule 114 (condicion -> VARIABLE operador_logico valor .)


state 262

    (113) condicion -> valor operador_logico valor .

    RPAREN          reduce using rule 113 (condicion -> valor operador_logico valor .)
    SEMI            reduce using rule 113 (condicion -> valor operador_logico valor .)


state 263

    (117) bdo -> DO LBRACE cuerpo RBRACE bwhile .

    $end            reduce using rule 117 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    RBRACE          reduce using rule 117 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    SEMI            reduce using rule 117 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)


state 264

    (121) bfor -> FOR LPAREN asignacion condicion SEMI . for_incr RPAREN stc_bloque_def
    (131) for_incr -> . VARIABLE SUMA SUMA
    (132) for_incr -> . SUMA SUMA VARIABLE
    (133) for_incr -> . VARIABLE RESTA RESTA
    (134) for_incr -> . RESTA RESTA VARIABLE
    (135) for_incr -> . VARIABLE SUMA EQUALS numero
    (136) for_incr -> . VARIABLE RESTA EQUALS numero

    VARIABLE        shift and go to state 295
    SUMA            shift and go to state 296
    RESTA           shift and go to state 297

    for_incr                       shift and go to state 294

state 265

    (137) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE . RPAREN stc_bloque_def

    RPAREN          shift and go to state 298


state 266

    (130) stc_bloque_def -> LBRACE stc_bloque RBRACE .

    RBRACE          reduce using rule 130 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    $end            reduce using rule 130 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    SEMI            reduce using rule 130 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    CATCH           reduce using rule 130 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)


state 267

    (122) stc_bloque -> stc_bloque SEMI . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . condicion_elseif
    (18) cuerpo -> . condicion_else
    (19) cuerpo -> . bswitch
    (20) cuerpo -> . bcase
    (21) cuerpo -> . bgoto
    (22) cuerpo -> . bcolas
    (23) cuerpo -> . bpila
    (24) cuerpo -> . incrementos_mat
    (25) cuerpo -> . bcortes
    (26) cuerpo -> . brand
    (27) cuerpo -> . bconcat
    (28) cuerpo -> . escribir
    (29) cuerpo -> . btrim
    (30) cuerpo -> . leer
    (31) cuerpo -> . boolean_answer
    (32) cuerpo -> . otros
    (33) cuerpo -> . breturn
    (34) imprimir -> . ECHO valor SEMI
    (35) imprimir -> . PRINT valor SEMI
    (36) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (37) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (38) imprimir -> . ECHO bconcat
    (82) asignacion -> . VARIABLE EQUALS valor SEMI
    (83) asignacion -> . VAR asignacion
    (84) asignacion -> . proteccion asignacion
    (85) asignacion -> . VARIABLE EQUALS brand
    (86) asignacion -> . VARIABLE EQUALS escribir
    (87) asignacion -> . VARIABLE EQUALS btrim
    (88) asignacion -> . VARIABLE EQUALS leer
    (89) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (99) funciones -> . funcion_nparams
    (100) funciones -> . proteccion funcion_nparams
    (101) funciones -> . funcion_blank
    (102) funciones -> . proteccion funcion_blank
    (103) funciones -> . funcion_void
    (90) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (91) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (92) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (93) lectura -> . READLINE LPAREN RPAREN SEMI
    (46) operadores -> . SUMA
    (47) operadores -> . RESTA
    (48) operadores -> . MULTIPLICACION
    (49) operadores -> . DIVISION
    (50) operadores -> . MODULO
    (51) operador_logico -> . SMALLER
    (52) operador_logico -> . GREATER
    (53) operador_logico -> . IS_SMALLER_OR_EQUAL
    (54) operador_logico -> . IS_GREATER_OR_EQUAL
    (68) condicion_booleana -> . AND
    (69) condicion_booleana -> . OR
    (70) condicion_booleana -> . XOR
    (71) condicion_booleana -> . IS_EQUAL
    (72) condicion_booleana -> . IS_NOT_EQUAL
    (73) condicion_booleana -> . IS_IDENTICAL
    (74) condicion_booleana -> . IS_NOT_IDENTICAL
    (75) condicion_booleana -> . BOOLEAN_NOT
    (115) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (116) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (117) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (121) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (137) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (142) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (76) operaciones_mat -> . valor operadores valor
    (77) operaciones_mat -> . valor operadores operaciones_mat
    (78) operaciones_mat -> . operaciones_mat_par
    (64) condicion_ifelse -> . condicion_if
    (65) condicion_ifelse -> . condicion_if condicion_else
    (66) condicion_ifelse -> . condicion_if condicion_elseif
    (67) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (62) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (63) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (118) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE
    (119) bcase -> . CASE ENTERO COLON
    (146) bgoto -> . GOTO NOMBRE SEMI
    (120) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (147) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (55) incrementos_mat -> . MINUS_EQUAL
    (56) incrementos_mat -> . MOD_EQUAL
    (57) incrementos_mat -> . MUL_EQUAL
    (58) incrementos_mat -> . PLUS_EQUAL
    (148) bcortes -> . EXIT SEMI
    (149) bcortes -> . BREAK SEMI
    (150) bcortes -> . DEFAULT SEMI
    (151) bcortes -> . CONTINUE SEMI
    (94) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (152) bconcat -> . STRING CONCAT STRING SEMI
    (153) bconcat -> . VARIABLE EQUALS VARIABLE CONCAT VARIABLE SEMI
    (154) escribir -> . FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI
    (155) btrim -> . TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
    (156) leer -> . READLINE LPAREN STRING RPAREN SEMI
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE
    (157) otros -> . SMALLER NOMBRE GREATER
    (124) breturn -> . empty
    (125) breturn -> . RETURN SEMI
    (126) breturn -> . RETURN NULL SEMI
    (127) breturn -> . RETURN VARIABLE SEMI
    (128) breturn -> . RETURN NOMBRE SEMI
    (129) breturn -> . RETURN boolean_answer SEMI
    (95) proteccion -> . PUBLIC
    (96) proteccion -> . PRIVATE
    (97) proteccion -> . PROTECTED
    (98) proteccion -> . STATIC
    (106) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (110) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (111) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (109) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (79) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (80) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (81) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (61) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (145) empty -> .
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL

    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    VARIABLE        shift and go to state 41
    VAR             shift and go to state 42
    DEFINE          shift and go to state 47
    READLINE        shift and go to state 49
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    MODULO          shift and go to state 54
    SMALLER         shift and go to state 55
    GREATER         shift and go to state 56
    IS_SMALLER_OR_EQUAL shift and go to state 57
    IS_GREATER_OR_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    XOR             shift and go to state 61
    IS_EQUAL        shift and go to state 62
    IS_NOT_EQUAL    shift and go to state 63
    IS_IDENTICAL    shift and go to state 64
    IS_NOT_IDENTICAL shift and go to state 65
    BOOLEAN_NOT     shift and go to state 66
    WHILE           shift and go to state 67
    DO              shift and go to state 68
    FOR             shift and go to state 69
    FOREACH         shift and go to state 70
    TRY             shift and go to state 71
    ELSEIF          shift and go to state 74
    ELSE            shift and go to state 75
    SWITCH          shift and go to state 76
    CASE            shift and go to state 77
    GOTO            shift and go to state 78
    MINUS_EQUAL     shift and go to state 79
    MOD_EQUAL       shift and go to state 80
    MUL_EQUAL       shift and go to state 81
    PLUS_EQUAL      shift and go to state 82
    EXIT            shift and go to state 83
    BREAK           shift and go to state 84
    DEFAULT         shift and go to state 85
    CONTINUE        shift and go to state 86
    RAND            shift and go to state 87
    STRING          shift and go to state 48
    FWRITE          shift and go to state 88
    TRIM            shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    RETURN          shift and go to state 93
    PUBLIC          shift and go to state 94
    PRIVATE         shift and go to state 95
    PROTECTED       shift and go to state 96
    STATIC          shift and go to state 97
    FUNCTION        shift and go to state 98
    NOMBRE          shift and go to state 39
    LPAREN          shift and go to state 38
    IF              shift and go to state 100
    RBRACE          reduce using rule 145 (empty -> .)
    SEMI            reduce using rule 145 (empty -> .)
    $end            reduce using rule 145 (empty -> .)
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101

    cuerpo                         shift and go to state 299
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat                shift and go to state 16
    condicion_ifelse               shift and go to state 17
    condicion_elseif               shift and go to state 18
    condicion_else                 shift and go to state 19
    bswitch                        shift and go to state 20
    bcase                          shift and go to state 21
    bgoto                          shift and go to state 22
    bcolas                         shift and go to state 23
    bpila                          shift and go to state 24
    incrementos_mat                shift and go to state 25
    bcortes                        shift and go to state 26
    brand                          shift and go to state 27
    bconcat                        shift and go to state 28
    escribir                       shift and go to state 29
    btrim                          shift and go to state 30
    leer                           shift and go to state 31
    boolean_answer                 shift and go to state 32
    otros                          shift and go to state 33
    breturn                        shift and go to state 34
    valor                          shift and go to state 36
    proteccion                     shift and go to state 43
    funcion_nparams                shift and go to state 44
    funcion_blank                  shift and go to state 45
    funcion_void                   shift and go to state 46
    operaciones_mat_par            shift and go to state 72
    condicion_if                   shift and go to state 73
    empty                          shift and go to state 92
    numero                         shift and go to state 99

state 268

    (142) btry -> TRY LBRACE stc_bloque_def RBRACE catches .
    (143) catches -> catches . CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def

    $end            reduce using rule 142 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    RBRACE          reduce using rule 142 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    SEMI            reduce using rule 142 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    CATCH           shift and go to state 300


state 269

    (144) catches -> empty .

    CATCH           reduce using rule 144 (catches -> empty .)
    $end            reduce using rule 144 (catches -> empty .)
    RBRACE          reduce using rule 144 (catches -> empty .)
    SEMI            reduce using rule 144 (catches -> empty .)


state 270

    (62) condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE . cuerpo RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . condicion_elseif
    (18) cuerpo -> . condicion_else
    (19) cuerpo -> . bswitch
    (20) cuerpo -> . bcase
    (21) cuerpo -> . bgoto
    (22) cuerpo -> . bcolas
    (23) cuerpo -> . bpila
    (24) cuerpo -> . incrementos_mat
    (25) cuerpo -> . bcortes
    (26) cuerpo -> . brand
    (27) cuerpo -> . bconcat
    (28) cuerpo -> . escribir
    (29) cuerpo -> . btrim
    (30) cuerpo -> . leer
    (31) cuerpo -> . boolean_answer
    (32) cuerpo -> . otros
    (33) cuerpo -> . breturn
    (34) imprimir -> . ECHO valor SEMI
    (35) imprimir -> . PRINT valor SEMI
    (36) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (37) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (38) imprimir -> . ECHO bconcat
    (82) asignacion -> . VARIABLE EQUALS valor SEMI
    (83) asignacion -> . VAR asignacion
    (84) asignacion -> . proteccion asignacion
    (85) asignacion -> . VARIABLE EQUALS brand
    (86) asignacion -> . VARIABLE EQUALS escribir
    (87) asignacion -> . VARIABLE EQUALS btrim
    (88) asignacion -> . VARIABLE EQUALS leer
    (89) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (99) funciones -> . funcion_nparams
    (100) funciones -> . proteccion funcion_nparams
    (101) funciones -> . funcion_blank
    (102) funciones -> . proteccion funcion_blank
    (103) funciones -> . funcion_void
    (90) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (91) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (92) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (93) lectura -> . READLINE LPAREN RPAREN SEMI
    (46) operadores -> . SUMA
    (47) operadores -> . RESTA
    (48) operadores -> . MULTIPLICACION
    (49) operadores -> . DIVISION
    (50) operadores -> . MODULO
    (51) operador_logico -> . SMALLER
    (52) operador_logico -> . GREATER
    (53) operador_logico -> . IS_SMALLER_OR_EQUAL
    (54) operador_logico -> . IS_GREATER_OR_EQUAL
    (68) condicion_booleana -> . AND
    (69) condicion_booleana -> . OR
    (70) condicion_booleana -> . XOR
    (71) condicion_booleana -> . IS_EQUAL
    (72) condicion_booleana -> . IS_NOT_EQUAL
    (73) condicion_booleana -> . IS_IDENTICAL
    (74) condicion_booleana -> . IS_NOT_IDENTICAL
    (75) condicion_booleana -> . BOOLEAN_NOT
    (115) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (116) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (117) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (121) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (137) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (142) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (76) operaciones_mat -> . valor operadores valor
    (77) operaciones_mat -> . valor operadores operaciones_mat
    (78) operaciones_mat -> . operaciones_mat_par
    (64) condicion_ifelse -> . condicion_if
    (65) condicion_ifelse -> . condicion_if condicion_else
    (66) condicion_ifelse -> . condicion_if condicion_elseif
    (67) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (62) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (63) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (118) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE
    (119) bcase -> . CASE ENTERO COLON
    (146) bgoto -> . GOTO NOMBRE SEMI
    (120) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (147) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (55) incrementos_mat -> . MINUS_EQUAL
    (56) incrementos_mat -> . MOD_EQUAL
    (57) incrementos_mat -> . MUL_EQUAL
    (58) incrementos_mat -> . PLUS_EQUAL
    (148) bcortes -> . EXIT SEMI
    (149) bcortes -> . BREAK SEMI
    (150) bcortes -> . DEFAULT SEMI
    (151) bcortes -> . CONTINUE SEMI
    (94) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (152) bconcat -> . STRING CONCAT STRING SEMI
    (153) bconcat -> . VARIABLE EQUALS VARIABLE CONCAT VARIABLE SEMI
    (154) escribir -> . FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI
    (155) btrim -> . TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
    (156) leer -> . READLINE LPAREN STRING RPAREN SEMI
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE
    (157) otros -> . SMALLER NOMBRE GREATER
    (124) breturn -> . empty
    (125) breturn -> . RETURN SEMI
    (126) breturn -> . RETURN NULL SEMI
    (127) breturn -> . RETURN VARIABLE SEMI
    (128) breturn -> . RETURN NOMBRE SEMI
    (129) breturn -> . RETURN boolean_answer SEMI
    (95) proteccion -> . PUBLIC
    (96) proteccion -> . PRIVATE
    (97) proteccion -> . PROTECTED
    (98) proteccion -> . STATIC
    (106) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (110) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (111) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (109) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (79) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (80) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (81) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (61) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (145) empty -> .
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL

    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    VARIABLE        shift and go to state 41
    VAR             shift and go to state 42
    DEFINE          shift and go to state 47
    READLINE        shift and go to state 49
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    MODULO          shift and go to state 54
    SMALLER         shift and go to state 55
    GREATER         shift and go to state 56
    IS_SMALLER_OR_EQUAL shift and go to state 57
    IS_GREATER_OR_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    XOR             shift and go to state 61
    IS_EQUAL        shift and go to state 62
    IS_NOT_EQUAL    shift and go to state 63
    IS_IDENTICAL    shift and go to state 64
    IS_NOT_IDENTICAL shift and go to state 65
    BOOLEAN_NOT     shift and go to state 66
    WHILE           shift and go to state 67
    DO              shift and go to state 68
    FOR             shift and go to state 69
    FOREACH         shift and go to state 70
    TRY             shift and go to state 71
    ELSEIF          shift and go to state 74
    ELSE            shift and go to state 75
    SWITCH          shift and go to state 76
    CASE            shift and go to state 77
    GOTO            shift and go to state 78
    MINUS_EQUAL     shift and go to state 79
    MOD_EQUAL       shift and go to state 80
    MUL_EQUAL       shift and go to state 81
    PLUS_EQUAL      shift and go to state 82
    EXIT            shift and go to state 83
    BREAK           shift and go to state 84
    DEFAULT         shift and go to state 85
    CONTINUE        shift and go to state 86
    RAND            shift and go to state 87
    STRING          shift and go to state 48
    FWRITE          shift and go to state 88
    TRIM            shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    RETURN          shift and go to state 93
    PUBLIC          shift and go to state 94
    PRIVATE         shift and go to state 95
    PROTECTED       shift and go to state 96
    STATIC          shift and go to state 97
    FUNCTION        shift and go to state 98
    NOMBRE          shift and go to state 39
    LPAREN          shift and go to state 38
    IF              shift and go to state 100
    RBRACE          reduce using rule 145 (empty -> .)
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101

    cuerpo                         shift and go to state 301
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat                shift and go to state 16
    condicion_ifelse               shift and go to state 17
    condicion_elseif               shift and go to state 18
    condicion_else                 shift and go to state 19
    bswitch                        shift and go to state 20
    bcase                          shift and go to state 21
    bgoto                          shift and go to state 22
    bcolas                         shift and go to state 23
    bpila                          shift and go to state 24
    incrementos_mat                shift and go to state 25
    bcortes                        shift and go to state 26
    brand                          shift and go to state 27
    bconcat                        shift and go to state 28
    escribir                       shift and go to state 29
    btrim                          shift and go to state 30
    leer                           shift and go to state 31
    boolean_answer                 shift and go to state 32
    otros                          shift and go to state 33
    breturn                        shift and go to state 34
    valor                          shift and go to state 36
    proteccion                     shift and go to state 43
    funcion_nparams                shift and go to state 44
    funcion_blank                  shift and go to state 45
    funcion_void                   shift and go to state 46
    operaciones_mat_par            shift and go to state 72
    condicion_if                   shift and go to state 73
    empty                          shift and go to state 92
    numero                         shift and go to state 99

state 271

    (118) bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE . cuerpo SEMI RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . condicion_elseif
    (18) cuerpo -> . condicion_else
    (19) cuerpo -> . bswitch
    (20) cuerpo -> . bcase
    (21) cuerpo -> . bgoto
    (22) cuerpo -> . bcolas
    (23) cuerpo -> . bpila
    (24) cuerpo -> . incrementos_mat
    (25) cuerpo -> . bcortes
    (26) cuerpo -> . brand
    (27) cuerpo -> . bconcat
    (28) cuerpo -> . escribir
    (29) cuerpo -> . btrim
    (30) cuerpo -> . leer
    (31) cuerpo -> . boolean_answer
    (32) cuerpo -> . otros
    (33) cuerpo -> . breturn
    (34) imprimir -> . ECHO valor SEMI
    (35) imprimir -> . PRINT valor SEMI
    (36) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (37) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (38) imprimir -> . ECHO bconcat
    (82) asignacion -> . VARIABLE EQUALS valor SEMI
    (83) asignacion -> . VAR asignacion
    (84) asignacion -> . proteccion asignacion
    (85) asignacion -> . VARIABLE EQUALS brand
    (86) asignacion -> . VARIABLE EQUALS escribir
    (87) asignacion -> . VARIABLE EQUALS btrim
    (88) asignacion -> . VARIABLE EQUALS leer
    (89) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (99) funciones -> . funcion_nparams
    (100) funciones -> . proteccion funcion_nparams
    (101) funciones -> . funcion_blank
    (102) funciones -> . proteccion funcion_blank
    (103) funciones -> . funcion_void
    (90) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (91) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (92) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (93) lectura -> . READLINE LPAREN RPAREN SEMI
    (46) operadores -> . SUMA
    (47) operadores -> . RESTA
    (48) operadores -> . MULTIPLICACION
    (49) operadores -> . DIVISION
    (50) operadores -> . MODULO
    (51) operador_logico -> . SMALLER
    (52) operador_logico -> . GREATER
    (53) operador_logico -> . IS_SMALLER_OR_EQUAL
    (54) operador_logico -> . IS_GREATER_OR_EQUAL
    (68) condicion_booleana -> . AND
    (69) condicion_booleana -> . OR
    (70) condicion_booleana -> . XOR
    (71) condicion_booleana -> . IS_EQUAL
    (72) condicion_booleana -> . IS_NOT_EQUAL
    (73) condicion_booleana -> . IS_IDENTICAL
    (74) condicion_booleana -> . IS_NOT_IDENTICAL
    (75) condicion_booleana -> . BOOLEAN_NOT
    (115) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (116) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (117) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (121) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (137) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (142) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (76) operaciones_mat -> . valor operadores valor
    (77) operaciones_mat -> . valor operadores operaciones_mat
    (78) operaciones_mat -> . operaciones_mat_par
    (64) condicion_ifelse -> . condicion_if
    (65) condicion_ifelse -> . condicion_if condicion_else
    (66) condicion_ifelse -> . condicion_if condicion_elseif
    (67) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (62) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (63) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (118) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE
    (119) bcase -> . CASE ENTERO COLON
    (146) bgoto -> . GOTO NOMBRE SEMI
    (120) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (147) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (55) incrementos_mat -> . MINUS_EQUAL
    (56) incrementos_mat -> . MOD_EQUAL
    (57) incrementos_mat -> . MUL_EQUAL
    (58) incrementos_mat -> . PLUS_EQUAL
    (148) bcortes -> . EXIT SEMI
    (149) bcortes -> . BREAK SEMI
    (150) bcortes -> . DEFAULT SEMI
    (151) bcortes -> . CONTINUE SEMI
    (94) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (152) bconcat -> . STRING CONCAT STRING SEMI
    (153) bconcat -> . VARIABLE EQUALS VARIABLE CONCAT VARIABLE SEMI
    (154) escribir -> . FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI
    (155) btrim -> . TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
    (156) leer -> . READLINE LPAREN STRING RPAREN SEMI
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE
    (157) otros -> . SMALLER NOMBRE GREATER
    (124) breturn -> . empty
    (125) breturn -> . RETURN SEMI
    (126) breturn -> . RETURN NULL SEMI
    (127) breturn -> . RETURN VARIABLE SEMI
    (128) breturn -> . RETURN NOMBRE SEMI
    (129) breturn -> . RETURN boolean_answer SEMI
    (95) proteccion -> . PUBLIC
    (96) proteccion -> . PRIVATE
    (97) proteccion -> . PROTECTED
    (98) proteccion -> . STATIC
    (106) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (110) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (111) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (109) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (79) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (80) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (81) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (61) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (145) empty -> .
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL

    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    VARIABLE        shift and go to state 41
    VAR             shift and go to state 42
    DEFINE          shift and go to state 47
    READLINE        shift and go to state 49
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    MODULO          shift and go to state 54
    SMALLER         shift and go to state 55
    GREATER         shift and go to state 56
    IS_SMALLER_OR_EQUAL shift and go to state 57
    IS_GREATER_OR_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    XOR             shift and go to state 61
    IS_EQUAL        shift and go to state 62
    IS_NOT_EQUAL    shift and go to state 63
    IS_IDENTICAL    shift and go to state 64
    IS_NOT_IDENTICAL shift and go to state 65
    BOOLEAN_NOT     shift and go to state 66
    WHILE           shift and go to state 67
    DO              shift and go to state 68
    FOR             shift and go to state 69
    FOREACH         shift and go to state 70
    TRY             shift and go to state 71
    ELSEIF          shift and go to state 74
    ELSE            shift and go to state 75
    SWITCH          shift and go to state 76
    CASE            shift and go to state 77
    GOTO            shift and go to state 78
    MINUS_EQUAL     shift and go to state 79
    MOD_EQUAL       shift and go to state 80
    MUL_EQUAL       shift and go to state 81
    PLUS_EQUAL      shift and go to state 82
    EXIT            shift and go to state 83
    BREAK           shift and go to state 84
    DEFAULT         shift and go to state 85
    CONTINUE        shift and go to state 86
    RAND            shift and go to state 87
    STRING          shift and go to state 48
    FWRITE          shift and go to state 88
    TRIM            shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    RETURN          shift and go to state 93
    PUBLIC          shift and go to state 94
    PRIVATE         shift and go to state 95
    PROTECTED       shift and go to state 96
    STATIC          shift and go to state 97
    FUNCTION        shift and go to state 98
    NOMBRE          shift and go to state 39
    LPAREN          shift and go to state 38
    IF              shift and go to state 100
    SEMI            reduce using rule 145 (empty -> .)
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101

    cuerpo                         shift and go to state 302
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat                shift and go to state 16
    condicion_ifelse               shift and go to state 17
    condicion_elseif               shift and go to state 18
    condicion_else                 shift and go to state 19
    bswitch                        shift and go to state 20
    bcase                          shift and go to state 21
    bgoto                          shift and go to state 22
    bcolas                         shift and go to state 23
    bpila                          shift and go to state 24
    incrementos_mat                shift and go to state 25
    bcortes                        shift and go to state 26
    brand                          shift and go to state 27
    bconcat                        shift and go to state 28
    escribir                       shift and go to state 29
    btrim                          shift and go to state 30
    leer                           shift and go to state 31
    boolean_answer                 shift and go to state 32
    otros                          shift and go to state 33
    breturn                        shift and go to state 34
    valor                          shift and go to state 36
    proteccion                     shift and go to state 43
    funcion_nparams                shift and go to state 44
    funcion_blank                  shift and go to state 45
    funcion_void                   shift and go to state 46
    operaciones_mat_par            shift and go to state 72
    condicion_if                   shift and go to state 73
    empty                          shift and go to state 92
    numero                         shift and go to state 99

state 272

    (94) brand -> RAND LPAREN ENTERO COMMA ENTERO . RPAREN SEMI

    RPAREN          shift and go to state 303


state 273

    (154) escribir -> FWRITE LPAREN NOMBRE COMMA STRING . RPAREN SEMI

    RPAREN          shift and go to state 304


state 274

    (155) btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE . RPAREN RPAREN SEMI

    RPAREN          shift and go to state 305


state 275

    (106) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN . stc_bloque_def
    (130) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 185

    stc_bloque_def                 shift and go to state 306

state 276

    (107) params_list -> params_list COMMA . param
    (104) param -> . VARIABLE
    (105) param -> . asignacion
    (82) asignacion -> . VARIABLE EQUALS valor SEMI
    (83) asignacion -> . VAR asignacion
    (84) asignacion -> . proteccion asignacion
    (85) asignacion -> . VARIABLE EQUALS brand
    (86) asignacion -> . VARIABLE EQUALS escribir
    (87) asignacion -> . VARIABLE EQUALS btrim
    (88) asignacion -> . VARIABLE EQUALS leer
    (95) proteccion -> . PUBLIC
    (96) proteccion -> . PRIVATE
    (97) proteccion -> . PROTECTED
    (98) proteccion -> . STATIC

    VARIABLE        shift and go to state 239
    VAR             shift and go to state 42
    PUBLIC          shift and go to state 94
    PRIVATE         shift and go to state 95
    PROTECTED       shift and go to state 96
    STATIC          shift and go to state 97

    param                          shift and go to state 307
    asignacion                     shift and go to state 240
    proteccion                     shift and go to state 117

state 277

    (110) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .

    $end            reduce using rule 110 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 110 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    SEMI            reduce using rule 110 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)


state 278

    (111) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE . empty RBRACE
    (130) stc_bloque_def -> LBRACE . stc_bloque RBRACE
    (145) empty -> .
    (122) stc_bloque -> . stc_bloque SEMI cuerpo
    (123) stc_bloque -> . breturn
    (124) breturn -> . empty
    (125) breturn -> . RETURN SEMI
    (126) breturn -> . RETURN NULL SEMI
    (127) breturn -> . RETURN VARIABLE SEMI
    (128) breturn -> . RETURN NOMBRE SEMI
    (129) breturn -> . RETURN boolean_answer SEMI

    RBRACE          reduce using rule 145 (empty -> .)
    SEMI            reduce using rule 145 (empty -> .)
    RETURN          shift and go to state 93

    empty                          shift and go to state 308
    stc_bloque                     shift and go to state 227
    breturn                        shift and go to state 228

state 279

    (109) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON . VOID LBRACE empty RBRACE

    VOID            shift and go to state 309


state 280

    (61) condicion_if -> IF LPAREN condicion RPAREN LBRACE . cuerpo RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . condicion_elseif
    (18) cuerpo -> . condicion_else
    (19) cuerpo -> . bswitch
    (20) cuerpo -> . bcase
    (21) cuerpo -> . bgoto
    (22) cuerpo -> . bcolas
    (23) cuerpo -> . bpila
    (24) cuerpo -> . incrementos_mat
    (25) cuerpo -> . bcortes
    (26) cuerpo -> . brand
    (27) cuerpo -> . bconcat
    (28) cuerpo -> . escribir
    (29) cuerpo -> . btrim
    (30) cuerpo -> . leer
    (31) cuerpo -> . boolean_answer
    (32) cuerpo -> . otros
    (33) cuerpo -> . breturn
    (34) imprimir -> . ECHO valor SEMI
    (35) imprimir -> . PRINT valor SEMI
    (36) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (37) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (38) imprimir -> . ECHO bconcat
    (82) asignacion -> . VARIABLE EQUALS valor SEMI
    (83) asignacion -> . VAR asignacion
    (84) asignacion -> . proteccion asignacion
    (85) asignacion -> . VARIABLE EQUALS brand
    (86) asignacion -> . VARIABLE EQUALS escribir
    (87) asignacion -> . VARIABLE EQUALS btrim
    (88) asignacion -> . VARIABLE EQUALS leer
    (89) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (99) funciones -> . funcion_nparams
    (100) funciones -> . proteccion funcion_nparams
    (101) funciones -> . funcion_blank
    (102) funciones -> . proteccion funcion_blank
    (103) funciones -> . funcion_void
    (90) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (91) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (92) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (93) lectura -> . READLINE LPAREN RPAREN SEMI
    (46) operadores -> . SUMA
    (47) operadores -> . RESTA
    (48) operadores -> . MULTIPLICACION
    (49) operadores -> . DIVISION
    (50) operadores -> . MODULO
    (51) operador_logico -> . SMALLER
    (52) operador_logico -> . GREATER
    (53) operador_logico -> . IS_SMALLER_OR_EQUAL
    (54) operador_logico -> . IS_GREATER_OR_EQUAL
    (68) condicion_booleana -> . AND
    (69) condicion_booleana -> . OR
    (70) condicion_booleana -> . XOR
    (71) condicion_booleana -> . IS_EQUAL
    (72) condicion_booleana -> . IS_NOT_EQUAL
    (73) condicion_booleana -> . IS_IDENTICAL
    (74) condicion_booleana -> . IS_NOT_IDENTICAL
    (75) condicion_booleana -> . BOOLEAN_NOT
    (115) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (116) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (117) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (121) bfor -> . FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def
    (137) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (142) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (76) operaciones_mat -> . valor operadores valor
    (77) operaciones_mat -> . valor operadores operaciones_mat
    (78) operaciones_mat -> . operaciones_mat_par
    (64) condicion_ifelse -> . condicion_if
    (65) condicion_ifelse -> . condicion_if condicion_else
    (66) condicion_ifelse -> . condicion_if condicion_elseif
    (67) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (62) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (63) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (118) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE
    (119) bcase -> . CASE ENTERO COLON
    (146) bgoto -> . GOTO NOMBRE SEMI
    (120) bcolas -> . VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI
    (147) bpila -> . VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI
    (55) incrementos_mat -> . MINUS_EQUAL
    (56) incrementos_mat -> . MOD_EQUAL
    (57) incrementos_mat -> . MUL_EQUAL
    (58) incrementos_mat -> . PLUS_EQUAL
    (148) bcortes -> . EXIT SEMI
    (149) bcortes -> . BREAK SEMI
    (150) bcortes -> . DEFAULT SEMI
    (151) bcortes -> . CONTINUE SEMI
    (94) brand -> . RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI
    (152) bconcat -> . STRING CONCAT STRING SEMI
    (153) bconcat -> . VARIABLE EQUALS VARIABLE CONCAT VARIABLE SEMI
    (154) escribir -> . FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI
    (155) btrim -> . TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI
    (156) leer -> . READLINE LPAREN STRING RPAREN SEMI
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE
    (157) otros -> . SMALLER NOMBRE GREATER
    (124) breturn -> . empty
    (125) breturn -> . RETURN SEMI
    (126) breturn -> . RETURN NULL SEMI
    (127) breturn -> . RETURN VARIABLE SEMI
    (128) breturn -> . RETURN NOMBRE SEMI
    (129) breturn -> . RETURN boolean_answer SEMI
    (95) proteccion -> . PUBLIC
    (96) proteccion -> . PRIVATE
    (97) proteccion -> . PROTECTED
    (98) proteccion -> . STATIC
    (106) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (110) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (111) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (109) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (79) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (80) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (81) operaciones_mat_par -> . valor operadores operaciones_mat_par
    (61) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
    (145) empty -> .
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL

    ECHO            shift and go to state 35
    PRINT           shift and go to state 37
    VARIABLE        shift and go to state 41
    VAR             shift and go to state 42
    DEFINE          shift and go to state 47
    READLINE        shift and go to state 49
    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    MODULO          shift and go to state 54
    SMALLER         shift and go to state 55
    GREATER         shift and go to state 56
    IS_SMALLER_OR_EQUAL shift and go to state 57
    IS_GREATER_OR_EQUAL shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    XOR             shift and go to state 61
    IS_EQUAL        shift and go to state 62
    IS_NOT_EQUAL    shift and go to state 63
    IS_IDENTICAL    shift and go to state 64
    IS_NOT_IDENTICAL shift and go to state 65
    BOOLEAN_NOT     shift and go to state 66
    WHILE           shift and go to state 67
    DO              shift and go to state 68
    FOR             shift and go to state 69
    FOREACH         shift and go to state 70
    TRY             shift and go to state 71
    ELSEIF          shift and go to state 74
    ELSE            shift and go to state 75
    SWITCH          shift and go to state 76
    CASE            shift and go to state 77
    GOTO            shift and go to state 78
    MINUS_EQUAL     shift and go to state 79
    MOD_EQUAL       shift and go to state 80
    MUL_EQUAL       shift and go to state 81
    PLUS_EQUAL      shift and go to state 82
    EXIT            shift and go to state 83
    BREAK           shift and go to state 84
    DEFAULT         shift and go to state 85
    CONTINUE        shift and go to state 86
    RAND            shift and go to state 87
    STRING          shift and go to state 48
    FWRITE          shift and go to state 88
    TRIM            shift and go to state 89
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91
    RETURN          shift and go to state 93
    PUBLIC          shift and go to state 94
    PRIVATE         shift and go to state 95
    PROTECTED       shift and go to state 96
    STATIC          shift and go to state 97
    FUNCTION        shift and go to state 98
    NOMBRE          shift and go to state 39
    LPAREN          shift and go to state 38
    IF              shift and go to state 100
    RBRACE          reduce using rule 145 (empty -> .)
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101

    cuerpo                         shift and go to state 310
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat                shift and go to state 16
    condicion_ifelse               shift and go to state 17
    condicion_elseif               shift and go to state 18
    condicion_else                 shift and go to state 19
    bswitch                        shift and go to state 20
    bcase                          shift and go to state 21
    bgoto                          shift and go to state 22
    bcolas                         shift and go to state 23
    bpila                          shift and go to state 24
    incrementos_mat                shift and go to state 25
    bcortes                        shift and go to state 26
    brand                          shift and go to state 27
    bconcat                        shift and go to state 28
    escribir                       shift and go to state 29
    btrim                          shift and go to state 30
    leer                           shift and go to state 31
    boolean_answer                 shift and go to state 32
    otros                          shift and go to state 33
    breturn                        shift and go to state 34
    valor                          shift and go to state 36
    proteccion                     shift and go to state 43
    funcion_nparams                shift and go to state 44
    funcion_blank                  shift and go to state 45
    funcion_void                   shift and go to state 46
    operaciones_mat_par            shift and go to state 72
    condicion_if                   shift and go to state 73
    empty                          shift and go to state 92
    numero                         shift and go to state 99

state 281

    (37) imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .

    $end            reduce using rule 37 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    RBRACE          reduce using rule 37 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    SEMI            reduce using rule 37 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)


state 282

    (81) operaciones_mat_par -> valor . operadores operaciones_mat_par
    (46) operadores -> . SUMA
    (47) operadores -> . RESTA
    (48) operadores -> . MULTIPLICACION
    (49) operadores -> . DIVISION
    (50) operadores -> . MODULO

    SUMA            shift and go to state 50
    RESTA           shift and go to state 51
    MULTIPLICACION  shift and go to state 52
    DIVISION        shift and go to state 53
    MODULO          shift and go to state 54

    operadores                     shift and go to state 244

state 283

    (81) operaciones_mat_par -> valor operadores operaciones_mat_par .

    RPAREN          reduce using rule 81 (operaciones_mat_par -> valor operadores operaciones_mat_par .)


state 284

    (153) bconcat -> VARIABLE EQUALS VARIABLE CONCAT VARIABLE SEMI .

    $end            reduce using rule 153 (bconcat -> VARIABLE EQUALS VARIABLE CONCAT VARIABLE SEMI .)
    RBRACE          reduce using rule 153 (bconcat -> VARIABLE EQUALS VARIABLE CONCAT VARIABLE SEMI .)
    SEMI            reduce using rule 153 (bconcat -> VARIABLE EQUALS VARIABLE CONCAT VARIABLE SEMI .)


state 285

    (120) bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN . SEMI

    SEMI            shift and go to state 311


state 286

    (147) bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN . SEMI

    SEMI            shift and go to state 312


state 287

    (156) leer -> READLINE LPAREN STRING RPAREN . SEMI

    SEMI            shift and go to state 313


state 288

    (139) array_def -> ARRAY LPAREN array_elmnt RPAREN .

    SEMI            reduce using rule 139 (array_def -> ARRAY LPAREN array_elmnt RPAREN .)


state 289

    (140) array_elmnt -> array_elmnt COMMA . valor
    (39) valor -> . numero
    (40) valor -> . VARIABLE
    (41) valor -> . STRING
    (42) valor -> . NOMBRE
    (43) valor -> . boolean_answer
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL
    (59) boolean_answer -> . TRUE
    (60) boolean_answer -> . FALSE

    VARIABLE        shift and go to state 111
    STRING          shift and go to state 112
    NOMBRE          shift and go to state 39
    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101
    TRUE            shift and go to state 90
    FALSE           shift and go to state 91

    valor                          shift and go to state 314
    numero                         shift and go to state 99
    boolean_answer                 shift and go to state 107

state 290

    (90) constante -> DEFINE LPAREN STRING COMMA valor RPAREN . SEMI

    SEMI            shift and go to state 315


state 291

    (91) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN . SEMI

    SEMI            shift and go to state 316


state 292

    (115) bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque . RBRACE
    (122) stc_bloque -> stc_bloque . SEMI cuerpo

    RBRACE          shift and go to state 317
    SEMI            shift and go to state 267


state 293

    (116) bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .
    (122) stc_bloque -> stc_bloque . SEMI cuerpo

  ! shift/reduce conflict for SEMI resolved as shift
    $end            reduce using rule 116 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .)
    RBRACE          reduce using rule 116 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .)
    SEMI            shift and go to state 267

  ! SEMI            [ reduce using rule 116 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]


state 294

    (121) bfor -> FOR LPAREN asignacion condicion SEMI for_incr . RPAREN stc_bloque_def

    RPAREN          shift and go to state 318


state 295

    (131) for_incr -> VARIABLE . SUMA SUMA
    (133) for_incr -> VARIABLE . RESTA RESTA
    (135) for_incr -> VARIABLE . SUMA EQUALS numero
    (136) for_incr -> VARIABLE . RESTA EQUALS numero

    SUMA            shift and go to state 319
    RESTA           shift and go to state 320


state 296

    (132) for_incr -> SUMA . SUMA VARIABLE

    SUMA            shift and go to state 321


state 297

    (134) for_incr -> RESTA . RESTA VARIABLE

    RESTA           shift and go to state 322


state 298

    (137) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN . stc_bloque_def
    (130) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 185

    stc_bloque_def                 shift and go to state 323

state 299

    (122) stc_bloque -> stc_bloque SEMI cuerpo .

    RBRACE          reduce using rule 122 (stc_bloque -> stc_bloque SEMI cuerpo .)
    SEMI            reduce using rule 122 (stc_bloque -> stc_bloque SEMI cuerpo .)
    $end            reduce using rule 122 (stc_bloque -> stc_bloque SEMI cuerpo .)


state 300

    (143) catches -> catches CATCH . LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def

    LPAREN          shift and go to state 324


state 301

    (62) condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 325


state 302

    (118) bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo . SEMI RBRACE

    SEMI            shift and go to state 326


state 303

    (94) brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN . SEMI

    SEMI            shift and go to state 327


state 304

    (154) escribir -> FWRITE LPAREN NOMBRE COMMA STRING RPAREN . SEMI

    SEMI            shift and go to state 328


state 305

    (155) btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN . RPAREN SEMI

    RPAREN          shift and go to state 329


state 306

    (106) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .

    $end            reduce using rule 106 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 106 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    SEMI            reduce using rule 106 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)


state 307

    (107) params_list -> params_list COMMA param .

    RPAREN          reduce using rule 107 (params_list -> params_list COMMA param .)
    COMMA           reduce using rule 107 (params_list -> params_list COMMA param .)


state 308

    (111) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty . RBRACE
    (124) breturn -> empty .

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 330
    SEMI            reduce using rule 124 (breturn -> empty .)

  ! RBRACE          [ reduce using rule 124 (breturn -> empty .) ]


state 309

    (109) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID . LBRACE empty RBRACE

    LBRACE          shift and go to state 331


state 310

    (61) condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 332


state 311

    (120) bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .

    $end            reduce using rule 120 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 120 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)
    SEMI            reduce using rule 120 (bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI .)


state 312

    (147) bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .

    $end            reduce using rule 147 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 147 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)
    SEMI            reduce using rule 147 (bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI .)


state 313

    (156) leer -> READLINE LPAREN STRING RPAREN SEMI .

    $end            reduce using rule 156 (leer -> READLINE LPAREN STRING RPAREN SEMI .)
    RBRACE          reduce using rule 156 (leer -> READLINE LPAREN STRING RPAREN SEMI .)
    SEMI            reduce using rule 156 (leer -> READLINE LPAREN STRING RPAREN SEMI .)
    VARIABLE        reduce using rule 156 (leer -> READLINE LPAREN STRING RPAREN SEMI .)
    STRING          reduce using rule 156 (leer -> READLINE LPAREN STRING RPAREN SEMI .)
    NOMBRE          reduce using rule 156 (leer -> READLINE LPAREN STRING RPAREN SEMI .)
    ENTERO          reduce using rule 156 (leer -> READLINE LPAREN STRING RPAREN SEMI .)
    DECIMAL         reduce using rule 156 (leer -> READLINE LPAREN STRING RPAREN SEMI .)
    TRUE            reduce using rule 156 (leer -> READLINE LPAREN STRING RPAREN SEMI .)
    FALSE           reduce using rule 156 (leer -> READLINE LPAREN STRING RPAREN SEMI .)
    RPAREN          reduce using rule 156 (leer -> READLINE LPAREN STRING RPAREN SEMI .)
    COMMA           reduce using rule 156 (leer -> READLINE LPAREN STRING RPAREN SEMI .)


state 314

    (140) array_elmnt -> array_elmnt COMMA valor .

    RPAREN          reduce using rule 140 (array_elmnt -> array_elmnt COMMA valor .)
    COMMA           reduce using rule 140 (array_elmnt -> array_elmnt COMMA valor .)


state 315

    (90) constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .

    $end            reduce using rule 90 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    RBRACE          reduce using rule 90 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    SEMI            reduce using rule 90 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)


state 316

    (91) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .

    $end            reduce using rule 91 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    RBRACE          reduce using rule 91 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    SEMI            reduce using rule 91 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)


state 317

    (115) bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .

    $end            reduce using rule 115 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    RBRACE          reduce using rule 115 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    SEMI            reduce using rule 115 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)


state 318

    (121) bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN . stc_bloque_def
    (130) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 185

    stc_bloque_def                 shift and go to state 333

state 319

    (131) for_incr -> VARIABLE SUMA . SUMA
    (135) for_incr -> VARIABLE SUMA . EQUALS numero

    SUMA            shift and go to state 334
    EQUALS          shift and go to state 335


state 320

    (133) for_incr -> VARIABLE RESTA . RESTA
    (136) for_incr -> VARIABLE RESTA . EQUALS numero

    RESTA           shift and go to state 336
    EQUALS          shift and go to state 337


state 321

    (132) for_incr -> SUMA SUMA . VARIABLE

    VARIABLE        shift and go to state 338


state 322

    (134) for_incr -> RESTA RESTA . VARIABLE

    VARIABLE        shift and go to state 339


state 323

    (137) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .

    $end            reduce using rule 137 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 137 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    SEMI            reduce using rule 137 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)


state 324

    (143) catches -> catches CATCH LPAREN . NOMBRE VARIABLE RPAREN stc_bloque_def

    NOMBRE          shift and go to state 340


state 325

    (62) condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .

    $end            reduce using rule 62 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    ELSE            reduce using rule 62 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 62 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SEMI            reduce using rule 62 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)


state 326

    (118) bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI . RBRACE

    RBRACE          shift and go to state 341


state 327

    (94) brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .

    $end            reduce using rule 94 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    RBRACE          reduce using rule 94 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    SEMI            reduce using rule 94 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    VARIABLE        reduce using rule 94 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    STRING          reduce using rule 94 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    NOMBRE          reduce using rule 94 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    ENTERO          reduce using rule 94 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    DECIMAL         reduce using rule 94 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    TRUE            reduce using rule 94 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    FALSE           reduce using rule 94 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    RPAREN          reduce using rule 94 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)
    COMMA           reduce using rule 94 (brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI .)


state 328

    (154) escribir -> FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI .

    $end            reduce using rule 154 (escribir -> FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI .)
    RBRACE          reduce using rule 154 (escribir -> FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI .)
    SEMI            reduce using rule 154 (escribir -> FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI .)
    VARIABLE        reduce using rule 154 (escribir -> FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI .)
    STRING          reduce using rule 154 (escribir -> FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI .)
    NOMBRE          reduce using rule 154 (escribir -> FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI .)
    ENTERO          reduce using rule 154 (escribir -> FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI .)
    DECIMAL         reduce using rule 154 (escribir -> FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI .)
    TRUE            reduce using rule 154 (escribir -> FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI .)
    FALSE           reduce using rule 154 (escribir -> FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI .)
    RPAREN          reduce using rule 154 (escribir -> FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI .)
    COMMA           reduce using rule 154 (escribir -> FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI .)


state 329

    (155) btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN . SEMI

    SEMI            shift and go to state 342


state 330

    (111) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .

    $end            reduce using rule 111 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    RBRACE          reduce using rule 111 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    SEMI            reduce using rule 111 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)


state 331

    (109) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE . empty RBRACE
    (145) empty -> .

    RBRACE          reduce using rule 145 (empty -> .)

    empty                          shift and go to state 343

state 332

    (61) condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .

    ELSE            reduce using rule 61 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    ELSEIF          reduce using rule 61 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    $end            reduce using rule 61 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 61 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SEMI            reduce using rule 61 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)


state 333

    (121) bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def .

    $end            reduce using rule 121 (bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 121 (bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def .)
    SEMI            reduce using rule 121 (bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def .)


state 334

    (131) for_incr -> VARIABLE SUMA SUMA .

    RPAREN          reduce using rule 131 (for_incr -> VARIABLE SUMA SUMA .)


state 335

    (135) for_incr -> VARIABLE SUMA EQUALS . numero
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL

    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101

    numero                         shift and go to state 344

state 336

    (133) for_incr -> VARIABLE RESTA RESTA .

    RPAREN          reduce using rule 133 (for_incr -> VARIABLE RESTA RESTA .)


state 337

    (136) for_incr -> VARIABLE RESTA EQUALS . numero
    (44) numero -> . ENTERO
    (45) numero -> . DECIMAL

    ENTERO          shift and go to state 40
    DECIMAL         shift and go to state 101

    numero                         shift and go to state 345

state 338

    (132) for_incr -> SUMA SUMA VARIABLE .

    RPAREN          reduce using rule 132 (for_incr -> SUMA SUMA VARIABLE .)


state 339

    (134) for_incr -> RESTA RESTA VARIABLE .

    RPAREN          reduce using rule 134 (for_incr -> RESTA RESTA VARIABLE .)


state 340

    (143) catches -> catches CATCH LPAREN NOMBRE . VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 346


state 341

    (118) bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE .

    $end            reduce using rule 118 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE .)
    RBRACE          reduce using rule 118 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE .)
    SEMI            reduce using rule 118 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE .)


state 342

    (155) btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .

    $end            reduce using rule 155 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 155 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    SEMI            reduce using rule 155 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 155 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    STRING          reduce using rule 155 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    NOMBRE          reduce using rule 155 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    ENTERO          reduce using rule 155 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    DECIMAL         reduce using rule 155 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    TRUE            reduce using rule 155 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    FALSE           reduce using rule 155 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    RPAREN          reduce using rule 155 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)
    COMMA           reduce using rule 155 (btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI .)


state 343

    (109) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty . RBRACE

    RBRACE          shift and go to state 347


state 344

    (135) for_incr -> VARIABLE SUMA EQUALS numero .

    RPAREN          reduce using rule 135 (for_incr -> VARIABLE SUMA EQUALS numero .)


state 345

    (136) for_incr -> VARIABLE RESTA EQUALS numero .

    RPAREN          reduce using rule 136 (for_incr -> VARIABLE RESTA EQUALS numero .)


state 346

    (143) catches -> catches CATCH LPAREN NOMBRE VARIABLE . RPAREN stc_bloque_def

    RPAREN          shift and go to state 348


state 347

    (109) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .

    $end            reduce using rule 109 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    RBRACE          reduce using rule 109 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    SEMI            reduce using rule 109 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)


state 348

    (143) catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN . stc_bloque_def
    (130) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 185

    stc_bloque_def                 shift and go to state 349

state 349

    (143) catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .

    CATCH           reduce using rule 143 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    $end            reduce using rule 143 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 143 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    SEMI            reduce using rule 143 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SMALLER in state 180 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 180 resolved as shift
WARNING: shift/reduce conflict for IS_SMALLER_OR_EQUAL in state 180 resolved as shift
WARNING: shift/reduce conflict for IS_GREATER_OR_EQUAL in state 180 resolved as shift
WARNING: shift/reduce conflict for SEMI in state 293 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 308 resolved as shift
WARNING: reduce/reduce conflict in state 157 resolved using rule (operaciones_mat -> operaciones_mat_par)
WARNING: rejected rule (operaciones_mat_par -> valor operadores operaciones_mat_par) in state 157
WARNING: reduce/reduce conflict in state 257 resolved using rule (lectura -> READLINE LPAREN STRING RPAREN SEMI)
WARNING: rejected rule (leer -> READLINE LPAREN STRING RPAREN SEMI) in state 257
WARNING: reduce/reduce conflict in state 260 resolved using rule (valor -> VARIABLE)
WARNING: rejected rule (condicion -> VARIABLE operador_logico VARIABLE) in state 260
WARNING: Rule (condicion -> VARIABLE operador_logico VARIABLE) is never reduced
