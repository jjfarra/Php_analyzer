Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL
    COMENTARIOS
    CONCAT
    CONTINUE
    CURLY_OPEN
    DEFAULT
    DIV_EQUAL
    DOC_COMENTARIOS
    DOUBLE
    EXIT
    FALSE
    FLOAT
    INT
    MINUS_EQUAL
    MOD_EQUAL
    MUL_EQUAL
    NOT
    PLUS_EQUAL
    REQUIRE
    TRUE
    VAR

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> imprimir
Rule 2     cuerpo -> asignacion
Rule 3     cuerpo -> asignacion_array
Rule 4     cuerpo -> funciones
Rule 5     cuerpo -> constante
Rule 6     cuerpo -> lectura
Rule 7     cuerpo -> operadores
Rule 8     cuerpo -> operador_logico
Rule 9     cuerpo -> condicion_booleana
Rule 10    cuerpo -> bwhile
Rule 11    cuerpo -> bdo
Rule 12    cuerpo -> bfor
Rule 13    cuerpo -> bforeach
Rule 14    cuerpo -> btry
Rule 15    cuerpo -> operaciones_mat_par
Rule 16    cuerpo -> condicion_ifelse
Rule 17    cuerpo -> bswitch
Rule 18    cuerpo -> bgoto
Rule 19    cuerpo_general -> cuerpo
Rule 20    form -> OPEN_TAG cuerpo_general CLOSE_TAG
Rule 21    imprimir -> ECHO valor SEMI
Rule 22    imprimir -> PRINT valor SEMI
Rule 23    imprimir -> PRINT LPAREN valor RPAREN SEMI
Rule 24    imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
Rule 25    valor -> numero
Rule 26    valor -> VARIABLE
Rule 27    valor -> STRING
Rule 28    valor -> NOMBRE
Rule 29    numero -> ENTERO
Rule 30    numero -> DECIMAL
Rule 31    operadores -> SUMA
Rule 32    operadores -> RESTA
Rule 33    operadores -> MULTIPLICACION
Rule 34    operadores -> DIVISION
Rule 35    operadores -> MODULO
Rule 36    operador_logico -> SMALLER
Rule 37    operador_logico -> GREATER
Rule 38    operador_logico -> IS_SMALLER_OR_EQUAL
Rule 39    operador_logico -> IS_GREATER_OR_EQUAL
Rule 40    condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
Rule 41    condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
Rule 42    condicion_else -> ELSE LBRACE cuerpo RBRACE
Rule 43    condicion_ifelse -> condicion_if
Rule 44    condicion_ifelse -> condicion_if condicion_else
Rule 45    condicion_ifelse -> condicion_if condicion_elseif
Rule 46    condicion_ifelse -> condicion_if condicion_elseif condicion_else
Rule 47    condicion_booleana -> AND
Rule 48    condicion_booleana -> OR
Rule 49    condicion_booleana -> XOR
Rule 50    condicion_booleana -> IS_EQUAL
Rule 51    condicion_booleana -> IS_NOT_EQUAL
Rule 52    condicion_booleana -> IS_IDENTICAL
Rule 53    condicion_booleana -> IS_NOT_IDENTICAL
Rule 54    condicion_booleana -> BOOLEAN_NOT
Rule 55    operaciones_mat -> valor operadores valor
Rule 56    operaciones_mat -> valor operadores operaciones_mat
Rule 57    operaciones_mat_par -> LPAREN valor operadores valor RPAREN
Rule 58    operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN
Rule 59    asignacion -> VARIABLE EQUALS valor SEMI
Rule 60    asignacion_array -> VARIABLE EQUALS array_def SEMI
Rule 61    constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI
Rule 62    constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
Rule 63    lectura -> READLINE LPAREN STRING RPAREN SEMI
Rule 64    lectura -> READLINE LPAREN RPAREN SEMI
Rule 65    proteccion -> PUBLIC
Rule 66    proteccion -> PRIVATE
Rule 67    proteccion -> PROTECTED
Rule 68    proteccion -> STATIC
Rule 69    funciones -> funcion_nparams
Rule 70    funciones -> proteccion funcion_nparams
Rule 71    funciones -> funcion_opreturn
Rule 72    funciones -> proteccion funcion_opreturn
Rule 73    funciones -> funcion_blank
Rule 74    funciones -> proteccion funcion_blank
Rule 75    funciones -> funcion_void
Rule 76    param -> VARIABLE
Rule 77    param -> asignacion
Rule 78    funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
Rule 79    params_list -> params_list COMMA param
Rule 80    params_list -> param
Rule 81    funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
Rule 82    funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
Rule 83    funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
Rule 84    funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
Rule 85    condicion -> VARIABLE operador_logico VARIABLE
Rule 86    condicion -> valor operador_logico valor
Rule 87    bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
Rule 88    bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque
Rule 89    bdo -> DO LBRACE cuerpo RBRACE bwhile
Rule 90    bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
Rule 91    innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI
Rule 92    innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch
Rule 93    bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
Rule 94    stc_bloque -> stc_bloque cuerpo
Rule 95    stc_bloque -> empty
Rule 96    stc_bloque -> RETURN
Rule 97    stc_bloque -> RETURN NULL
Rule 98    stc_bloque_def -> LBRACE stc_bloque RBRACE
Rule 99    for_incr -> VARIABLE SUMA SUMA
Rule 100   for_incr -> SUMA SUMA VARIABLE
Rule 101   for_incr -> VARIABLE RESTA RESTA
Rule 102   for_incr -> RESTA RESTA VARIABLE
Rule 103   for_incr -> VARIABLE SUMA EQUALS numero
Rule 104   for_incr -> VARIABLE RESTA EQUALS numero
Rule 105   bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
Rule 106   array_def -> ARRAY LPAREN RPAREN
Rule 107   array_def -> ARRAY LPAREN array_elmnt RPAREN
Rule 108   array_elmnt -> valor
Rule 109   array_elmnt -> empty
Rule 110   btry -> TRY LBRACE stc_bloque_def RBRACE catches
Rule 111   catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def
Rule 112   catches -> empty
Rule 113   empty -> <empty>
Rule 114   bgoto -> GOTO NOMBRE SEMI

Terminals, with rules where they appear

AND                  : 47
ARRAY                : 62 106 107
AS                   : 105
BOOL                 : 
BOOLEAN_NOT          : 54
BREAK                : 91 92
CASE                 : 91 92
CATCH                : 111
CLOSE_TAG            : 20
COLON                : 82 88 91 92
COMENTARIOS          : 
COMMA                : 61 62 79
CONCAT               : 
CONTINUE             : 
CURLY_OPEN           : 
DECIMAL              : 30
DEFAULT              : 
DEFINE               : 61 62
DIVISION             : 34
DIV_EQUAL            : 
DO                   : 89
DOC_COMENTARIOS      : 
DOUBLE               : 
ECHO                 : 21 24
ELSE                 : 42
ELSEIF               : 41
ENTERO               : 24 29 91 92
EQUALS               : 59 60 103 104
EXIT                 : 
FALSE                : 
FLOAT                : 
FOR                  : 93
FOREACH              : 105
FUNCTION             : 78 81 82 83 84
GOTO                 : 114
GREATER              : 37
IF                   : 40
INT                  : 
IS_EQUAL             : 50
IS_GREATER_OR_EQUAL  : 39
IS_IDENTICAL         : 52
IS_NOT_EQUAL         : 51
IS_NOT_IDENTICAL     : 53
IS_SMALLER_OR_EQUAL  : 38
LBRACE               : 40 41 42 82 84 87 89 90 98 110
LBRACKET             : 24
LPAREN               : 23 40 41 57 58 61 62 63 64 78 81 82 83 84 87 88 90 93 105 106 107 111
MINUS_EQUAL          : 
MODULO               : 35
MOD_EQUAL            : 
MULTIPLICACION       : 33
MUL_EQUAL            : 
NOMBRE               : 24 28 62 78 81 82 83 84 111 114
NOT                  : 
NULL                 : 97
OPEN_TAG             : 20
OR                   : 48
PLUS_EQUAL           : 
PRINT                : 22 23
PRIVATE              : 66
PROTECTED            : 67
PUBLIC               : 65
RBRACE               : 40 41 42 82 84 87 89 90 98 110
RBRACKET             : 24
READLINE             : 63 64
REQUIRE              : 
RESTA                : 32 101 101 102 102 104
RETURN               : 96 97
RPAREN               : 23 40 41 57 58 61 62 63 64 78 81 82 83 84 87 88 90 93 105 106 107 111
SEMI                 : 21 22 23 24 59 60 61 62 63 64 91 92 93 93 114
SMALLER              : 36
STATIC               : 68
STRING               : 27 61 63
SUMA                 : 31 99 99 100 100 103
SWITCH               : 90
TRUE                 : 
TRY                  : 110
VAR                  : 
VARIABLE             : 26 59 60 76 85 85 90 99 100 101 102 103 104 105 105 111
VOID                 : 82
WHILE                : 87 88
XOR                  : 49
error                : 

Nonterminals, with rules where they appear

array_def            : 60
array_elmnt          : 107
asignacion           : 2 77 93
asignacion_array     : 3
bdo                  : 11
bfor                 : 12
bforeach             : 13
bgoto                : 18
bswitch              : 17
btry                 : 14
bwhile               : 10 89
catches              : 110 111
condicion            : 40 41 87 88 93
condicion_booleana   : 9
condicion_else       : 44 46
condicion_elseif     : 45 46
condicion_if         : 43 44 45 46
condicion_ifelse     : 16
constante            : 5
cuerpo               : 19 40 41 42 89 91 92 94 0
cuerpo_general       : 20
empty                : 82 84 95 109 112
for_incr             : 93
form                 : 
funcion_blank        : 73 74
funcion_nparams      : 69 70
funcion_opreturn     : 71 72
funcion_void         : 75
funciones            : 4
imprimir             : 1
innerSwitch          : 90 92
lectura              : 6
numero               : 25 103 104
operaciones_mat      : 56
operaciones_mat_par  : 15 58
operador_logico      : 8 85 86
operadores           : 7 55 56 57 58
param                : 79 80
params_list          : 78 79 81
proteccion           : 70 72 74
stc_bloque           : 87 88 94 98
stc_bloque_def       : 78 81 83 93 105 110 111
valor                : 21 22 23 55 55 56 57 57 58 59 61 86 86 108

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat_par
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (21) imprimir -> . ECHO valor SEMI
    (22) imprimir -> . PRINT valor SEMI
    (23) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (24) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (69) funciones -> . funcion_nparams
    (70) funciones -> . proteccion funcion_nparams
    (71) funciones -> . funcion_opreturn
    (72) funciones -> . proteccion funcion_opreturn
    (73) funciones -> . funcion_blank
    (74) funciones -> . proteccion funcion_blank
    (75) funciones -> . funcion_void
    (61) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (62) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (63) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (64) lectura -> . READLINE LPAREN RPAREN SEMI
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL
    (47) condicion_booleana -> . AND
    (48) condicion_booleana -> . OR
    (49) condicion_booleana -> . XOR
    (50) condicion_booleana -> . IS_EQUAL
    (51) condicion_booleana -> . IS_NOT_EQUAL
    (52) condicion_booleana -> . IS_IDENTICAL
    (53) condicion_booleana -> . IS_NOT_IDENTICAL
    (54) condicion_booleana -> . BOOLEAN_NOT
    (87) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (88) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (89) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (93) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (105) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (110) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (43) condicion_ifelse -> . condicion_if
    (44) condicion_ifelse -> . condicion_if condicion_else
    (45) condicion_ifelse -> . condicion_if condicion_elseif
    (46) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (90) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (114) bgoto -> . GOTO NOMBRE SEMI
    (78) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (65) proteccion -> . PUBLIC
    (66) proteccion -> . PRIVATE
    (67) proteccion -> . PROTECTED
    (68) proteccion -> . STATIC
    (81) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (84) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (82) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (40) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    VARIABLE        shift and go to state 23
    DEFINE          shift and go to state 29
    READLINE        shift and go to state 30
    SUMA            shift and go to state 31
    RESTA           shift and go to state 32
    MULTIPLICACION  shift and go to state 33
    DIVISION        shift and go to state 34
    MODULO          shift and go to state 35
    SMALLER         shift and go to state 36
    GREATER         shift and go to state 37
    IS_SMALLER_OR_EQUAL shift and go to state 38
    IS_GREATER_OR_EQUAL shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    XOR             shift and go to state 42
    IS_EQUAL        shift and go to state 43
    IS_NOT_EQUAL    shift and go to state 44
    IS_IDENTICAL    shift and go to state 45
    IS_NOT_IDENTICAL shift and go to state 46
    BOOLEAN_NOT     shift and go to state 47
    WHILE           shift and go to state 48
    DO              shift and go to state 49
    FOR             shift and go to state 50
    FOREACH         shift and go to state 51
    TRY             shift and go to state 52
    LPAREN          shift and go to state 22
    SWITCH          shift and go to state 54
    GOTO            shift and go to state 55
    FUNCTION        shift and go to state 56
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60
    IF              shift and go to state 61

    cuerpo                         shift and go to state 1
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat_par            shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    funcion_nparams                shift and go to state 24
    proteccion                     shift and go to state 25
    funcion_opreturn               shift and go to state 26
    funcion_blank                  shift and go to state 27
    funcion_void                   shift and go to state 28
    condicion_if                   shift and go to state 53

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> imprimir .

    $end            reduce using rule 1 (cuerpo -> imprimir .)
    RBRACE          reduce using rule 1 (cuerpo -> imprimir .)
    ECHO            reduce using rule 1 (cuerpo -> imprimir .)
    PRINT           reduce using rule 1 (cuerpo -> imprimir .)
    VARIABLE        reduce using rule 1 (cuerpo -> imprimir .)
    DEFINE          reduce using rule 1 (cuerpo -> imprimir .)
    READLINE        reduce using rule 1 (cuerpo -> imprimir .)
    SUMA            reduce using rule 1 (cuerpo -> imprimir .)
    RESTA           reduce using rule 1 (cuerpo -> imprimir .)
    MULTIPLICACION  reduce using rule 1 (cuerpo -> imprimir .)
    DIVISION        reduce using rule 1 (cuerpo -> imprimir .)
    MODULO          reduce using rule 1 (cuerpo -> imprimir .)
    SMALLER         reduce using rule 1 (cuerpo -> imprimir .)
    GREATER         reduce using rule 1 (cuerpo -> imprimir .)
    IS_SMALLER_OR_EQUAL reduce using rule 1 (cuerpo -> imprimir .)
    IS_GREATER_OR_EQUAL reduce using rule 1 (cuerpo -> imprimir .)
    AND             reduce using rule 1 (cuerpo -> imprimir .)
    OR              reduce using rule 1 (cuerpo -> imprimir .)
    XOR             reduce using rule 1 (cuerpo -> imprimir .)
    IS_EQUAL        reduce using rule 1 (cuerpo -> imprimir .)
    IS_NOT_EQUAL    reduce using rule 1 (cuerpo -> imprimir .)
    IS_IDENTICAL    reduce using rule 1 (cuerpo -> imprimir .)
    IS_NOT_IDENTICAL reduce using rule 1 (cuerpo -> imprimir .)
    BOOLEAN_NOT     reduce using rule 1 (cuerpo -> imprimir .)
    WHILE           reduce using rule 1 (cuerpo -> imprimir .)
    DO              reduce using rule 1 (cuerpo -> imprimir .)
    FOR             reduce using rule 1 (cuerpo -> imprimir .)
    FOREACH         reduce using rule 1 (cuerpo -> imprimir .)
    TRY             reduce using rule 1 (cuerpo -> imprimir .)
    LPAREN          reduce using rule 1 (cuerpo -> imprimir .)
    SWITCH          reduce using rule 1 (cuerpo -> imprimir .)
    GOTO            reduce using rule 1 (cuerpo -> imprimir .)
    FUNCTION        reduce using rule 1 (cuerpo -> imprimir .)
    PUBLIC          reduce using rule 1 (cuerpo -> imprimir .)
    PRIVATE         reduce using rule 1 (cuerpo -> imprimir .)
    PROTECTED       reduce using rule 1 (cuerpo -> imprimir .)
    STATIC          reduce using rule 1 (cuerpo -> imprimir .)
    IF              reduce using rule 1 (cuerpo -> imprimir .)
    BREAK           reduce using rule 1 (cuerpo -> imprimir .)


state 3

    (2) cuerpo -> asignacion .

    $end            reduce using rule 2 (cuerpo -> asignacion .)
    RBRACE          reduce using rule 2 (cuerpo -> asignacion .)
    ECHO            reduce using rule 2 (cuerpo -> asignacion .)
    PRINT           reduce using rule 2 (cuerpo -> asignacion .)
    VARIABLE        reduce using rule 2 (cuerpo -> asignacion .)
    DEFINE          reduce using rule 2 (cuerpo -> asignacion .)
    READLINE        reduce using rule 2 (cuerpo -> asignacion .)
    SUMA            reduce using rule 2 (cuerpo -> asignacion .)
    RESTA           reduce using rule 2 (cuerpo -> asignacion .)
    MULTIPLICACION  reduce using rule 2 (cuerpo -> asignacion .)
    DIVISION        reduce using rule 2 (cuerpo -> asignacion .)
    MODULO          reduce using rule 2 (cuerpo -> asignacion .)
    SMALLER         reduce using rule 2 (cuerpo -> asignacion .)
    GREATER         reduce using rule 2 (cuerpo -> asignacion .)
    IS_SMALLER_OR_EQUAL reduce using rule 2 (cuerpo -> asignacion .)
    IS_GREATER_OR_EQUAL reduce using rule 2 (cuerpo -> asignacion .)
    AND             reduce using rule 2 (cuerpo -> asignacion .)
    OR              reduce using rule 2 (cuerpo -> asignacion .)
    XOR             reduce using rule 2 (cuerpo -> asignacion .)
    IS_EQUAL        reduce using rule 2 (cuerpo -> asignacion .)
    IS_NOT_EQUAL    reduce using rule 2 (cuerpo -> asignacion .)
    IS_IDENTICAL    reduce using rule 2 (cuerpo -> asignacion .)
    IS_NOT_IDENTICAL reduce using rule 2 (cuerpo -> asignacion .)
    BOOLEAN_NOT     reduce using rule 2 (cuerpo -> asignacion .)
    WHILE           reduce using rule 2 (cuerpo -> asignacion .)
    DO              reduce using rule 2 (cuerpo -> asignacion .)
    FOR             reduce using rule 2 (cuerpo -> asignacion .)
    FOREACH         reduce using rule 2 (cuerpo -> asignacion .)
    TRY             reduce using rule 2 (cuerpo -> asignacion .)
    LPAREN          reduce using rule 2 (cuerpo -> asignacion .)
    SWITCH          reduce using rule 2 (cuerpo -> asignacion .)
    GOTO            reduce using rule 2 (cuerpo -> asignacion .)
    FUNCTION        reduce using rule 2 (cuerpo -> asignacion .)
    PUBLIC          reduce using rule 2 (cuerpo -> asignacion .)
    PRIVATE         reduce using rule 2 (cuerpo -> asignacion .)
    PROTECTED       reduce using rule 2 (cuerpo -> asignacion .)
    STATIC          reduce using rule 2 (cuerpo -> asignacion .)
    IF              reduce using rule 2 (cuerpo -> asignacion .)
    BREAK           reduce using rule 2 (cuerpo -> asignacion .)


state 4

    (3) cuerpo -> asignacion_array .

    $end            reduce using rule 3 (cuerpo -> asignacion_array .)
    RBRACE          reduce using rule 3 (cuerpo -> asignacion_array .)
    ECHO            reduce using rule 3 (cuerpo -> asignacion_array .)
    PRINT           reduce using rule 3 (cuerpo -> asignacion_array .)
    VARIABLE        reduce using rule 3 (cuerpo -> asignacion_array .)
    DEFINE          reduce using rule 3 (cuerpo -> asignacion_array .)
    READLINE        reduce using rule 3 (cuerpo -> asignacion_array .)
    SUMA            reduce using rule 3 (cuerpo -> asignacion_array .)
    RESTA           reduce using rule 3 (cuerpo -> asignacion_array .)
    MULTIPLICACION  reduce using rule 3 (cuerpo -> asignacion_array .)
    DIVISION        reduce using rule 3 (cuerpo -> asignacion_array .)
    MODULO          reduce using rule 3 (cuerpo -> asignacion_array .)
    SMALLER         reduce using rule 3 (cuerpo -> asignacion_array .)
    GREATER         reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_SMALLER_OR_EQUAL reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_GREATER_OR_EQUAL reduce using rule 3 (cuerpo -> asignacion_array .)
    AND             reduce using rule 3 (cuerpo -> asignacion_array .)
    OR              reduce using rule 3 (cuerpo -> asignacion_array .)
    XOR             reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_EQUAL        reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_NOT_EQUAL    reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_IDENTICAL    reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_NOT_IDENTICAL reduce using rule 3 (cuerpo -> asignacion_array .)
    BOOLEAN_NOT     reduce using rule 3 (cuerpo -> asignacion_array .)
    WHILE           reduce using rule 3 (cuerpo -> asignacion_array .)
    DO              reduce using rule 3 (cuerpo -> asignacion_array .)
    FOR             reduce using rule 3 (cuerpo -> asignacion_array .)
    FOREACH         reduce using rule 3 (cuerpo -> asignacion_array .)
    TRY             reduce using rule 3 (cuerpo -> asignacion_array .)
    LPAREN          reduce using rule 3 (cuerpo -> asignacion_array .)
    SWITCH          reduce using rule 3 (cuerpo -> asignacion_array .)
    GOTO            reduce using rule 3 (cuerpo -> asignacion_array .)
    FUNCTION        reduce using rule 3 (cuerpo -> asignacion_array .)
    PUBLIC          reduce using rule 3 (cuerpo -> asignacion_array .)
    PRIVATE         reduce using rule 3 (cuerpo -> asignacion_array .)
    PROTECTED       reduce using rule 3 (cuerpo -> asignacion_array .)
    STATIC          reduce using rule 3 (cuerpo -> asignacion_array .)
    IF              reduce using rule 3 (cuerpo -> asignacion_array .)
    BREAK           reduce using rule 3 (cuerpo -> asignacion_array .)


state 5

    (4) cuerpo -> funciones .

    $end            reduce using rule 4 (cuerpo -> funciones .)
    RBRACE          reduce using rule 4 (cuerpo -> funciones .)
    ECHO            reduce using rule 4 (cuerpo -> funciones .)
    PRINT           reduce using rule 4 (cuerpo -> funciones .)
    VARIABLE        reduce using rule 4 (cuerpo -> funciones .)
    DEFINE          reduce using rule 4 (cuerpo -> funciones .)
    READLINE        reduce using rule 4 (cuerpo -> funciones .)
    SUMA            reduce using rule 4 (cuerpo -> funciones .)
    RESTA           reduce using rule 4 (cuerpo -> funciones .)
    MULTIPLICACION  reduce using rule 4 (cuerpo -> funciones .)
    DIVISION        reduce using rule 4 (cuerpo -> funciones .)
    MODULO          reduce using rule 4 (cuerpo -> funciones .)
    SMALLER         reduce using rule 4 (cuerpo -> funciones .)
    GREATER         reduce using rule 4 (cuerpo -> funciones .)
    IS_SMALLER_OR_EQUAL reduce using rule 4 (cuerpo -> funciones .)
    IS_GREATER_OR_EQUAL reduce using rule 4 (cuerpo -> funciones .)
    AND             reduce using rule 4 (cuerpo -> funciones .)
    OR              reduce using rule 4 (cuerpo -> funciones .)
    XOR             reduce using rule 4 (cuerpo -> funciones .)
    IS_EQUAL        reduce using rule 4 (cuerpo -> funciones .)
    IS_NOT_EQUAL    reduce using rule 4 (cuerpo -> funciones .)
    IS_IDENTICAL    reduce using rule 4 (cuerpo -> funciones .)
    IS_NOT_IDENTICAL reduce using rule 4 (cuerpo -> funciones .)
    BOOLEAN_NOT     reduce using rule 4 (cuerpo -> funciones .)
    WHILE           reduce using rule 4 (cuerpo -> funciones .)
    DO              reduce using rule 4 (cuerpo -> funciones .)
    FOR             reduce using rule 4 (cuerpo -> funciones .)
    FOREACH         reduce using rule 4 (cuerpo -> funciones .)
    TRY             reduce using rule 4 (cuerpo -> funciones .)
    LPAREN          reduce using rule 4 (cuerpo -> funciones .)
    SWITCH          reduce using rule 4 (cuerpo -> funciones .)
    GOTO            reduce using rule 4 (cuerpo -> funciones .)
    FUNCTION        reduce using rule 4 (cuerpo -> funciones .)
    PUBLIC          reduce using rule 4 (cuerpo -> funciones .)
    PRIVATE         reduce using rule 4 (cuerpo -> funciones .)
    PROTECTED       reduce using rule 4 (cuerpo -> funciones .)
    STATIC          reduce using rule 4 (cuerpo -> funciones .)
    IF              reduce using rule 4 (cuerpo -> funciones .)
    BREAK           reduce using rule 4 (cuerpo -> funciones .)


state 6

    (5) cuerpo -> constante .

    $end            reduce using rule 5 (cuerpo -> constante .)
    RBRACE          reduce using rule 5 (cuerpo -> constante .)
    ECHO            reduce using rule 5 (cuerpo -> constante .)
    PRINT           reduce using rule 5 (cuerpo -> constante .)
    VARIABLE        reduce using rule 5 (cuerpo -> constante .)
    DEFINE          reduce using rule 5 (cuerpo -> constante .)
    READLINE        reduce using rule 5 (cuerpo -> constante .)
    SUMA            reduce using rule 5 (cuerpo -> constante .)
    RESTA           reduce using rule 5 (cuerpo -> constante .)
    MULTIPLICACION  reduce using rule 5 (cuerpo -> constante .)
    DIVISION        reduce using rule 5 (cuerpo -> constante .)
    MODULO          reduce using rule 5 (cuerpo -> constante .)
    SMALLER         reduce using rule 5 (cuerpo -> constante .)
    GREATER         reduce using rule 5 (cuerpo -> constante .)
    IS_SMALLER_OR_EQUAL reduce using rule 5 (cuerpo -> constante .)
    IS_GREATER_OR_EQUAL reduce using rule 5 (cuerpo -> constante .)
    AND             reduce using rule 5 (cuerpo -> constante .)
    OR              reduce using rule 5 (cuerpo -> constante .)
    XOR             reduce using rule 5 (cuerpo -> constante .)
    IS_EQUAL        reduce using rule 5 (cuerpo -> constante .)
    IS_NOT_EQUAL    reduce using rule 5 (cuerpo -> constante .)
    IS_IDENTICAL    reduce using rule 5 (cuerpo -> constante .)
    IS_NOT_IDENTICAL reduce using rule 5 (cuerpo -> constante .)
    BOOLEAN_NOT     reduce using rule 5 (cuerpo -> constante .)
    WHILE           reduce using rule 5 (cuerpo -> constante .)
    DO              reduce using rule 5 (cuerpo -> constante .)
    FOR             reduce using rule 5 (cuerpo -> constante .)
    FOREACH         reduce using rule 5 (cuerpo -> constante .)
    TRY             reduce using rule 5 (cuerpo -> constante .)
    LPAREN          reduce using rule 5 (cuerpo -> constante .)
    SWITCH          reduce using rule 5 (cuerpo -> constante .)
    GOTO            reduce using rule 5 (cuerpo -> constante .)
    FUNCTION        reduce using rule 5 (cuerpo -> constante .)
    PUBLIC          reduce using rule 5 (cuerpo -> constante .)
    PRIVATE         reduce using rule 5 (cuerpo -> constante .)
    PROTECTED       reduce using rule 5 (cuerpo -> constante .)
    STATIC          reduce using rule 5 (cuerpo -> constante .)
    IF              reduce using rule 5 (cuerpo -> constante .)
    BREAK           reduce using rule 5 (cuerpo -> constante .)


state 7

    (6) cuerpo -> lectura .

    $end            reduce using rule 6 (cuerpo -> lectura .)
    RBRACE          reduce using rule 6 (cuerpo -> lectura .)
    ECHO            reduce using rule 6 (cuerpo -> lectura .)
    PRINT           reduce using rule 6 (cuerpo -> lectura .)
    VARIABLE        reduce using rule 6 (cuerpo -> lectura .)
    DEFINE          reduce using rule 6 (cuerpo -> lectura .)
    READLINE        reduce using rule 6 (cuerpo -> lectura .)
    SUMA            reduce using rule 6 (cuerpo -> lectura .)
    RESTA           reduce using rule 6 (cuerpo -> lectura .)
    MULTIPLICACION  reduce using rule 6 (cuerpo -> lectura .)
    DIVISION        reduce using rule 6 (cuerpo -> lectura .)
    MODULO          reduce using rule 6 (cuerpo -> lectura .)
    SMALLER         reduce using rule 6 (cuerpo -> lectura .)
    GREATER         reduce using rule 6 (cuerpo -> lectura .)
    IS_SMALLER_OR_EQUAL reduce using rule 6 (cuerpo -> lectura .)
    IS_GREATER_OR_EQUAL reduce using rule 6 (cuerpo -> lectura .)
    AND             reduce using rule 6 (cuerpo -> lectura .)
    OR              reduce using rule 6 (cuerpo -> lectura .)
    XOR             reduce using rule 6 (cuerpo -> lectura .)
    IS_EQUAL        reduce using rule 6 (cuerpo -> lectura .)
    IS_NOT_EQUAL    reduce using rule 6 (cuerpo -> lectura .)
    IS_IDENTICAL    reduce using rule 6 (cuerpo -> lectura .)
    IS_NOT_IDENTICAL reduce using rule 6 (cuerpo -> lectura .)
    BOOLEAN_NOT     reduce using rule 6 (cuerpo -> lectura .)
    WHILE           reduce using rule 6 (cuerpo -> lectura .)
    DO              reduce using rule 6 (cuerpo -> lectura .)
    FOR             reduce using rule 6 (cuerpo -> lectura .)
    FOREACH         reduce using rule 6 (cuerpo -> lectura .)
    TRY             reduce using rule 6 (cuerpo -> lectura .)
    LPAREN          reduce using rule 6 (cuerpo -> lectura .)
    SWITCH          reduce using rule 6 (cuerpo -> lectura .)
    GOTO            reduce using rule 6 (cuerpo -> lectura .)
    FUNCTION        reduce using rule 6 (cuerpo -> lectura .)
    PUBLIC          reduce using rule 6 (cuerpo -> lectura .)
    PRIVATE         reduce using rule 6 (cuerpo -> lectura .)
    PROTECTED       reduce using rule 6 (cuerpo -> lectura .)
    STATIC          reduce using rule 6 (cuerpo -> lectura .)
    IF              reduce using rule 6 (cuerpo -> lectura .)
    BREAK           reduce using rule 6 (cuerpo -> lectura .)


state 8

    (7) cuerpo -> operadores .

    $end            reduce using rule 7 (cuerpo -> operadores .)
    RBRACE          reduce using rule 7 (cuerpo -> operadores .)
    ECHO            reduce using rule 7 (cuerpo -> operadores .)
    PRINT           reduce using rule 7 (cuerpo -> operadores .)
    VARIABLE        reduce using rule 7 (cuerpo -> operadores .)
    DEFINE          reduce using rule 7 (cuerpo -> operadores .)
    READLINE        reduce using rule 7 (cuerpo -> operadores .)
    SUMA            reduce using rule 7 (cuerpo -> operadores .)
    RESTA           reduce using rule 7 (cuerpo -> operadores .)
    MULTIPLICACION  reduce using rule 7 (cuerpo -> operadores .)
    DIVISION        reduce using rule 7 (cuerpo -> operadores .)
    MODULO          reduce using rule 7 (cuerpo -> operadores .)
    SMALLER         reduce using rule 7 (cuerpo -> operadores .)
    GREATER         reduce using rule 7 (cuerpo -> operadores .)
    IS_SMALLER_OR_EQUAL reduce using rule 7 (cuerpo -> operadores .)
    IS_GREATER_OR_EQUAL reduce using rule 7 (cuerpo -> operadores .)
    AND             reduce using rule 7 (cuerpo -> operadores .)
    OR              reduce using rule 7 (cuerpo -> operadores .)
    XOR             reduce using rule 7 (cuerpo -> operadores .)
    IS_EQUAL        reduce using rule 7 (cuerpo -> operadores .)
    IS_NOT_EQUAL    reduce using rule 7 (cuerpo -> operadores .)
    IS_IDENTICAL    reduce using rule 7 (cuerpo -> operadores .)
    IS_NOT_IDENTICAL reduce using rule 7 (cuerpo -> operadores .)
    BOOLEAN_NOT     reduce using rule 7 (cuerpo -> operadores .)
    WHILE           reduce using rule 7 (cuerpo -> operadores .)
    DO              reduce using rule 7 (cuerpo -> operadores .)
    FOR             reduce using rule 7 (cuerpo -> operadores .)
    FOREACH         reduce using rule 7 (cuerpo -> operadores .)
    TRY             reduce using rule 7 (cuerpo -> operadores .)
    LPAREN          reduce using rule 7 (cuerpo -> operadores .)
    SWITCH          reduce using rule 7 (cuerpo -> operadores .)
    GOTO            reduce using rule 7 (cuerpo -> operadores .)
    FUNCTION        reduce using rule 7 (cuerpo -> operadores .)
    PUBLIC          reduce using rule 7 (cuerpo -> operadores .)
    PRIVATE         reduce using rule 7 (cuerpo -> operadores .)
    PROTECTED       reduce using rule 7 (cuerpo -> operadores .)
    STATIC          reduce using rule 7 (cuerpo -> operadores .)
    IF              reduce using rule 7 (cuerpo -> operadores .)
    BREAK           reduce using rule 7 (cuerpo -> operadores .)


state 9

    (8) cuerpo -> operador_logico .

    $end            reduce using rule 8 (cuerpo -> operador_logico .)
    RBRACE          reduce using rule 8 (cuerpo -> operador_logico .)
    ECHO            reduce using rule 8 (cuerpo -> operador_logico .)
    PRINT           reduce using rule 8 (cuerpo -> operador_logico .)
    VARIABLE        reduce using rule 8 (cuerpo -> operador_logico .)
    DEFINE          reduce using rule 8 (cuerpo -> operador_logico .)
    READLINE        reduce using rule 8 (cuerpo -> operador_logico .)
    SUMA            reduce using rule 8 (cuerpo -> operador_logico .)
    RESTA           reduce using rule 8 (cuerpo -> operador_logico .)
    MULTIPLICACION  reduce using rule 8 (cuerpo -> operador_logico .)
    DIVISION        reduce using rule 8 (cuerpo -> operador_logico .)
    MODULO          reduce using rule 8 (cuerpo -> operador_logico .)
    SMALLER         reduce using rule 8 (cuerpo -> operador_logico .)
    GREATER         reduce using rule 8 (cuerpo -> operador_logico .)
    IS_SMALLER_OR_EQUAL reduce using rule 8 (cuerpo -> operador_logico .)
    IS_GREATER_OR_EQUAL reduce using rule 8 (cuerpo -> operador_logico .)
    AND             reduce using rule 8 (cuerpo -> operador_logico .)
    OR              reduce using rule 8 (cuerpo -> operador_logico .)
    XOR             reduce using rule 8 (cuerpo -> operador_logico .)
    IS_EQUAL        reduce using rule 8 (cuerpo -> operador_logico .)
    IS_NOT_EQUAL    reduce using rule 8 (cuerpo -> operador_logico .)
    IS_IDENTICAL    reduce using rule 8 (cuerpo -> operador_logico .)
    IS_NOT_IDENTICAL reduce using rule 8 (cuerpo -> operador_logico .)
    BOOLEAN_NOT     reduce using rule 8 (cuerpo -> operador_logico .)
    WHILE           reduce using rule 8 (cuerpo -> operador_logico .)
    DO              reduce using rule 8 (cuerpo -> operador_logico .)
    FOR             reduce using rule 8 (cuerpo -> operador_logico .)
    FOREACH         reduce using rule 8 (cuerpo -> operador_logico .)
    TRY             reduce using rule 8 (cuerpo -> operador_logico .)
    LPAREN          reduce using rule 8 (cuerpo -> operador_logico .)
    SWITCH          reduce using rule 8 (cuerpo -> operador_logico .)
    GOTO            reduce using rule 8 (cuerpo -> operador_logico .)
    FUNCTION        reduce using rule 8 (cuerpo -> operador_logico .)
    PUBLIC          reduce using rule 8 (cuerpo -> operador_logico .)
    PRIVATE         reduce using rule 8 (cuerpo -> operador_logico .)
    PROTECTED       reduce using rule 8 (cuerpo -> operador_logico .)
    STATIC          reduce using rule 8 (cuerpo -> operador_logico .)
    IF              reduce using rule 8 (cuerpo -> operador_logico .)
    BREAK           reduce using rule 8 (cuerpo -> operador_logico .)


state 10

    (9) cuerpo -> condicion_booleana .

    $end            reduce using rule 9 (cuerpo -> condicion_booleana .)
    RBRACE          reduce using rule 9 (cuerpo -> condicion_booleana .)
    ECHO            reduce using rule 9 (cuerpo -> condicion_booleana .)
    PRINT           reduce using rule 9 (cuerpo -> condicion_booleana .)
    VARIABLE        reduce using rule 9 (cuerpo -> condicion_booleana .)
    DEFINE          reduce using rule 9 (cuerpo -> condicion_booleana .)
    READLINE        reduce using rule 9 (cuerpo -> condicion_booleana .)
    SUMA            reduce using rule 9 (cuerpo -> condicion_booleana .)
    RESTA           reduce using rule 9 (cuerpo -> condicion_booleana .)
    MULTIPLICACION  reduce using rule 9 (cuerpo -> condicion_booleana .)
    DIVISION        reduce using rule 9 (cuerpo -> condicion_booleana .)
    MODULO          reduce using rule 9 (cuerpo -> condicion_booleana .)
    SMALLER         reduce using rule 9 (cuerpo -> condicion_booleana .)
    GREATER         reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_SMALLER_OR_EQUAL reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_GREATER_OR_EQUAL reduce using rule 9 (cuerpo -> condicion_booleana .)
    AND             reduce using rule 9 (cuerpo -> condicion_booleana .)
    OR              reduce using rule 9 (cuerpo -> condicion_booleana .)
    XOR             reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_EQUAL        reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_NOT_EQUAL    reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_IDENTICAL    reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_NOT_IDENTICAL reduce using rule 9 (cuerpo -> condicion_booleana .)
    BOOLEAN_NOT     reduce using rule 9 (cuerpo -> condicion_booleana .)
    WHILE           reduce using rule 9 (cuerpo -> condicion_booleana .)
    DO              reduce using rule 9 (cuerpo -> condicion_booleana .)
    FOR             reduce using rule 9 (cuerpo -> condicion_booleana .)
    FOREACH         reduce using rule 9 (cuerpo -> condicion_booleana .)
    TRY             reduce using rule 9 (cuerpo -> condicion_booleana .)
    LPAREN          reduce using rule 9 (cuerpo -> condicion_booleana .)
    SWITCH          reduce using rule 9 (cuerpo -> condicion_booleana .)
    GOTO            reduce using rule 9 (cuerpo -> condicion_booleana .)
    FUNCTION        reduce using rule 9 (cuerpo -> condicion_booleana .)
    PUBLIC          reduce using rule 9 (cuerpo -> condicion_booleana .)
    PRIVATE         reduce using rule 9 (cuerpo -> condicion_booleana .)
    PROTECTED       reduce using rule 9 (cuerpo -> condicion_booleana .)
    STATIC          reduce using rule 9 (cuerpo -> condicion_booleana .)
    IF              reduce using rule 9 (cuerpo -> condicion_booleana .)
    BREAK           reduce using rule 9 (cuerpo -> condicion_booleana .)


state 11

    (10) cuerpo -> bwhile .

    $end            reduce using rule 10 (cuerpo -> bwhile .)
    RBRACE          reduce using rule 10 (cuerpo -> bwhile .)
    ECHO            reduce using rule 10 (cuerpo -> bwhile .)
    PRINT           reduce using rule 10 (cuerpo -> bwhile .)
    VARIABLE        reduce using rule 10 (cuerpo -> bwhile .)
    DEFINE          reduce using rule 10 (cuerpo -> bwhile .)
    READLINE        reduce using rule 10 (cuerpo -> bwhile .)
    SUMA            reduce using rule 10 (cuerpo -> bwhile .)
    RESTA           reduce using rule 10 (cuerpo -> bwhile .)
    MULTIPLICACION  reduce using rule 10 (cuerpo -> bwhile .)
    DIVISION        reduce using rule 10 (cuerpo -> bwhile .)
    MODULO          reduce using rule 10 (cuerpo -> bwhile .)
    SMALLER         reduce using rule 10 (cuerpo -> bwhile .)
    GREATER         reduce using rule 10 (cuerpo -> bwhile .)
    IS_SMALLER_OR_EQUAL reduce using rule 10 (cuerpo -> bwhile .)
    IS_GREATER_OR_EQUAL reduce using rule 10 (cuerpo -> bwhile .)
    AND             reduce using rule 10 (cuerpo -> bwhile .)
    OR              reduce using rule 10 (cuerpo -> bwhile .)
    XOR             reduce using rule 10 (cuerpo -> bwhile .)
    IS_EQUAL        reduce using rule 10 (cuerpo -> bwhile .)
    IS_NOT_EQUAL    reduce using rule 10 (cuerpo -> bwhile .)
    IS_IDENTICAL    reduce using rule 10 (cuerpo -> bwhile .)
    IS_NOT_IDENTICAL reduce using rule 10 (cuerpo -> bwhile .)
    BOOLEAN_NOT     reduce using rule 10 (cuerpo -> bwhile .)
    WHILE           reduce using rule 10 (cuerpo -> bwhile .)
    DO              reduce using rule 10 (cuerpo -> bwhile .)
    FOR             reduce using rule 10 (cuerpo -> bwhile .)
    FOREACH         reduce using rule 10 (cuerpo -> bwhile .)
    TRY             reduce using rule 10 (cuerpo -> bwhile .)
    LPAREN          reduce using rule 10 (cuerpo -> bwhile .)
    SWITCH          reduce using rule 10 (cuerpo -> bwhile .)
    GOTO            reduce using rule 10 (cuerpo -> bwhile .)
    FUNCTION        reduce using rule 10 (cuerpo -> bwhile .)
    PUBLIC          reduce using rule 10 (cuerpo -> bwhile .)
    PRIVATE         reduce using rule 10 (cuerpo -> bwhile .)
    PROTECTED       reduce using rule 10 (cuerpo -> bwhile .)
    STATIC          reduce using rule 10 (cuerpo -> bwhile .)
    IF              reduce using rule 10 (cuerpo -> bwhile .)
    BREAK           reduce using rule 10 (cuerpo -> bwhile .)


state 12

    (11) cuerpo -> bdo .

    $end            reduce using rule 11 (cuerpo -> bdo .)
    RBRACE          reduce using rule 11 (cuerpo -> bdo .)
    ECHO            reduce using rule 11 (cuerpo -> bdo .)
    PRINT           reduce using rule 11 (cuerpo -> bdo .)
    VARIABLE        reduce using rule 11 (cuerpo -> bdo .)
    DEFINE          reduce using rule 11 (cuerpo -> bdo .)
    READLINE        reduce using rule 11 (cuerpo -> bdo .)
    SUMA            reduce using rule 11 (cuerpo -> bdo .)
    RESTA           reduce using rule 11 (cuerpo -> bdo .)
    MULTIPLICACION  reduce using rule 11 (cuerpo -> bdo .)
    DIVISION        reduce using rule 11 (cuerpo -> bdo .)
    MODULO          reduce using rule 11 (cuerpo -> bdo .)
    SMALLER         reduce using rule 11 (cuerpo -> bdo .)
    GREATER         reduce using rule 11 (cuerpo -> bdo .)
    IS_SMALLER_OR_EQUAL reduce using rule 11 (cuerpo -> bdo .)
    IS_GREATER_OR_EQUAL reduce using rule 11 (cuerpo -> bdo .)
    AND             reduce using rule 11 (cuerpo -> bdo .)
    OR              reduce using rule 11 (cuerpo -> bdo .)
    XOR             reduce using rule 11 (cuerpo -> bdo .)
    IS_EQUAL        reduce using rule 11 (cuerpo -> bdo .)
    IS_NOT_EQUAL    reduce using rule 11 (cuerpo -> bdo .)
    IS_IDENTICAL    reduce using rule 11 (cuerpo -> bdo .)
    IS_NOT_IDENTICAL reduce using rule 11 (cuerpo -> bdo .)
    BOOLEAN_NOT     reduce using rule 11 (cuerpo -> bdo .)
    WHILE           reduce using rule 11 (cuerpo -> bdo .)
    DO              reduce using rule 11 (cuerpo -> bdo .)
    FOR             reduce using rule 11 (cuerpo -> bdo .)
    FOREACH         reduce using rule 11 (cuerpo -> bdo .)
    TRY             reduce using rule 11 (cuerpo -> bdo .)
    LPAREN          reduce using rule 11 (cuerpo -> bdo .)
    SWITCH          reduce using rule 11 (cuerpo -> bdo .)
    GOTO            reduce using rule 11 (cuerpo -> bdo .)
    FUNCTION        reduce using rule 11 (cuerpo -> bdo .)
    PUBLIC          reduce using rule 11 (cuerpo -> bdo .)
    PRIVATE         reduce using rule 11 (cuerpo -> bdo .)
    PROTECTED       reduce using rule 11 (cuerpo -> bdo .)
    STATIC          reduce using rule 11 (cuerpo -> bdo .)
    IF              reduce using rule 11 (cuerpo -> bdo .)
    BREAK           reduce using rule 11 (cuerpo -> bdo .)


state 13

    (12) cuerpo -> bfor .

    $end            reduce using rule 12 (cuerpo -> bfor .)
    RBRACE          reduce using rule 12 (cuerpo -> bfor .)
    ECHO            reduce using rule 12 (cuerpo -> bfor .)
    PRINT           reduce using rule 12 (cuerpo -> bfor .)
    VARIABLE        reduce using rule 12 (cuerpo -> bfor .)
    DEFINE          reduce using rule 12 (cuerpo -> bfor .)
    READLINE        reduce using rule 12 (cuerpo -> bfor .)
    SUMA            reduce using rule 12 (cuerpo -> bfor .)
    RESTA           reduce using rule 12 (cuerpo -> bfor .)
    MULTIPLICACION  reduce using rule 12 (cuerpo -> bfor .)
    DIVISION        reduce using rule 12 (cuerpo -> bfor .)
    MODULO          reduce using rule 12 (cuerpo -> bfor .)
    SMALLER         reduce using rule 12 (cuerpo -> bfor .)
    GREATER         reduce using rule 12 (cuerpo -> bfor .)
    IS_SMALLER_OR_EQUAL reduce using rule 12 (cuerpo -> bfor .)
    IS_GREATER_OR_EQUAL reduce using rule 12 (cuerpo -> bfor .)
    AND             reduce using rule 12 (cuerpo -> bfor .)
    OR              reduce using rule 12 (cuerpo -> bfor .)
    XOR             reduce using rule 12 (cuerpo -> bfor .)
    IS_EQUAL        reduce using rule 12 (cuerpo -> bfor .)
    IS_NOT_EQUAL    reduce using rule 12 (cuerpo -> bfor .)
    IS_IDENTICAL    reduce using rule 12 (cuerpo -> bfor .)
    IS_NOT_IDENTICAL reduce using rule 12 (cuerpo -> bfor .)
    BOOLEAN_NOT     reduce using rule 12 (cuerpo -> bfor .)
    WHILE           reduce using rule 12 (cuerpo -> bfor .)
    DO              reduce using rule 12 (cuerpo -> bfor .)
    FOR             reduce using rule 12 (cuerpo -> bfor .)
    FOREACH         reduce using rule 12 (cuerpo -> bfor .)
    TRY             reduce using rule 12 (cuerpo -> bfor .)
    LPAREN          reduce using rule 12 (cuerpo -> bfor .)
    SWITCH          reduce using rule 12 (cuerpo -> bfor .)
    GOTO            reduce using rule 12 (cuerpo -> bfor .)
    FUNCTION        reduce using rule 12 (cuerpo -> bfor .)
    PUBLIC          reduce using rule 12 (cuerpo -> bfor .)
    PRIVATE         reduce using rule 12 (cuerpo -> bfor .)
    PROTECTED       reduce using rule 12 (cuerpo -> bfor .)
    STATIC          reduce using rule 12 (cuerpo -> bfor .)
    IF              reduce using rule 12 (cuerpo -> bfor .)
    BREAK           reduce using rule 12 (cuerpo -> bfor .)


state 14

    (13) cuerpo -> bforeach .

    $end            reduce using rule 13 (cuerpo -> bforeach .)
    RBRACE          reduce using rule 13 (cuerpo -> bforeach .)
    ECHO            reduce using rule 13 (cuerpo -> bforeach .)
    PRINT           reduce using rule 13 (cuerpo -> bforeach .)
    VARIABLE        reduce using rule 13 (cuerpo -> bforeach .)
    DEFINE          reduce using rule 13 (cuerpo -> bforeach .)
    READLINE        reduce using rule 13 (cuerpo -> bforeach .)
    SUMA            reduce using rule 13 (cuerpo -> bforeach .)
    RESTA           reduce using rule 13 (cuerpo -> bforeach .)
    MULTIPLICACION  reduce using rule 13 (cuerpo -> bforeach .)
    DIVISION        reduce using rule 13 (cuerpo -> bforeach .)
    MODULO          reduce using rule 13 (cuerpo -> bforeach .)
    SMALLER         reduce using rule 13 (cuerpo -> bforeach .)
    GREATER         reduce using rule 13 (cuerpo -> bforeach .)
    IS_SMALLER_OR_EQUAL reduce using rule 13 (cuerpo -> bforeach .)
    IS_GREATER_OR_EQUAL reduce using rule 13 (cuerpo -> bforeach .)
    AND             reduce using rule 13 (cuerpo -> bforeach .)
    OR              reduce using rule 13 (cuerpo -> bforeach .)
    XOR             reduce using rule 13 (cuerpo -> bforeach .)
    IS_EQUAL        reduce using rule 13 (cuerpo -> bforeach .)
    IS_NOT_EQUAL    reduce using rule 13 (cuerpo -> bforeach .)
    IS_IDENTICAL    reduce using rule 13 (cuerpo -> bforeach .)
    IS_NOT_IDENTICAL reduce using rule 13 (cuerpo -> bforeach .)
    BOOLEAN_NOT     reduce using rule 13 (cuerpo -> bforeach .)
    WHILE           reduce using rule 13 (cuerpo -> bforeach .)
    DO              reduce using rule 13 (cuerpo -> bforeach .)
    FOR             reduce using rule 13 (cuerpo -> bforeach .)
    FOREACH         reduce using rule 13 (cuerpo -> bforeach .)
    TRY             reduce using rule 13 (cuerpo -> bforeach .)
    LPAREN          reduce using rule 13 (cuerpo -> bforeach .)
    SWITCH          reduce using rule 13 (cuerpo -> bforeach .)
    GOTO            reduce using rule 13 (cuerpo -> bforeach .)
    FUNCTION        reduce using rule 13 (cuerpo -> bforeach .)
    PUBLIC          reduce using rule 13 (cuerpo -> bforeach .)
    PRIVATE         reduce using rule 13 (cuerpo -> bforeach .)
    PROTECTED       reduce using rule 13 (cuerpo -> bforeach .)
    STATIC          reduce using rule 13 (cuerpo -> bforeach .)
    IF              reduce using rule 13 (cuerpo -> bforeach .)
    BREAK           reduce using rule 13 (cuerpo -> bforeach .)


state 15

    (14) cuerpo -> btry .

    $end            reduce using rule 14 (cuerpo -> btry .)
    RBRACE          reduce using rule 14 (cuerpo -> btry .)
    ECHO            reduce using rule 14 (cuerpo -> btry .)
    PRINT           reduce using rule 14 (cuerpo -> btry .)
    VARIABLE        reduce using rule 14 (cuerpo -> btry .)
    DEFINE          reduce using rule 14 (cuerpo -> btry .)
    READLINE        reduce using rule 14 (cuerpo -> btry .)
    SUMA            reduce using rule 14 (cuerpo -> btry .)
    RESTA           reduce using rule 14 (cuerpo -> btry .)
    MULTIPLICACION  reduce using rule 14 (cuerpo -> btry .)
    DIVISION        reduce using rule 14 (cuerpo -> btry .)
    MODULO          reduce using rule 14 (cuerpo -> btry .)
    SMALLER         reduce using rule 14 (cuerpo -> btry .)
    GREATER         reduce using rule 14 (cuerpo -> btry .)
    IS_SMALLER_OR_EQUAL reduce using rule 14 (cuerpo -> btry .)
    IS_GREATER_OR_EQUAL reduce using rule 14 (cuerpo -> btry .)
    AND             reduce using rule 14 (cuerpo -> btry .)
    OR              reduce using rule 14 (cuerpo -> btry .)
    XOR             reduce using rule 14 (cuerpo -> btry .)
    IS_EQUAL        reduce using rule 14 (cuerpo -> btry .)
    IS_NOT_EQUAL    reduce using rule 14 (cuerpo -> btry .)
    IS_IDENTICAL    reduce using rule 14 (cuerpo -> btry .)
    IS_NOT_IDENTICAL reduce using rule 14 (cuerpo -> btry .)
    BOOLEAN_NOT     reduce using rule 14 (cuerpo -> btry .)
    WHILE           reduce using rule 14 (cuerpo -> btry .)
    DO              reduce using rule 14 (cuerpo -> btry .)
    FOR             reduce using rule 14 (cuerpo -> btry .)
    FOREACH         reduce using rule 14 (cuerpo -> btry .)
    TRY             reduce using rule 14 (cuerpo -> btry .)
    LPAREN          reduce using rule 14 (cuerpo -> btry .)
    SWITCH          reduce using rule 14 (cuerpo -> btry .)
    GOTO            reduce using rule 14 (cuerpo -> btry .)
    FUNCTION        reduce using rule 14 (cuerpo -> btry .)
    PUBLIC          reduce using rule 14 (cuerpo -> btry .)
    PRIVATE         reduce using rule 14 (cuerpo -> btry .)
    PROTECTED       reduce using rule 14 (cuerpo -> btry .)
    STATIC          reduce using rule 14 (cuerpo -> btry .)
    IF              reduce using rule 14 (cuerpo -> btry .)
    BREAK           reduce using rule 14 (cuerpo -> btry .)


state 16

    (15) cuerpo -> operaciones_mat_par .

    $end            reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    RBRACE          reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    ECHO            reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    PRINT           reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    VARIABLE        reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    DEFINE          reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    READLINE        reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    SUMA            reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    RESTA           reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    MULTIPLICACION  reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    DIVISION        reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    MODULO          reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    SMALLER         reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    GREATER         reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    IS_SMALLER_OR_EQUAL reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    IS_GREATER_OR_EQUAL reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    AND             reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    OR              reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    XOR             reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    IS_EQUAL        reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    IS_NOT_EQUAL    reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    IS_IDENTICAL    reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    IS_NOT_IDENTICAL reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    BOOLEAN_NOT     reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    WHILE           reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    DO              reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    FOR             reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    FOREACH         reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    TRY             reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    LPAREN          reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    SWITCH          reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    GOTO            reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    FUNCTION        reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    PUBLIC          reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    PRIVATE         reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    PROTECTED       reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    STATIC          reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    IF              reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    BREAK           reduce using rule 15 (cuerpo -> operaciones_mat_par .)


state 17

    (16) cuerpo -> condicion_ifelse .

    $end            reduce using rule 16 (cuerpo -> condicion_ifelse .)
    RBRACE          reduce using rule 16 (cuerpo -> condicion_ifelse .)
    ECHO            reduce using rule 16 (cuerpo -> condicion_ifelse .)
    PRINT           reduce using rule 16 (cuerpo -> condicion_ifelse .)
    VARIABLE        reduce using rule 16 (cuerpo -> condicion_ifelse .)
    DEFINE          reduce using rule 16 (cuerpo -> condicion_ifelse .)
    READLINE        reduce using rule 16 (cuerpo -> condicion_ifelse .)
    SUMA            reduce using rule 16 (cuerpo -> condicion_ifelse .)
    RESTA           reduce using rule 16 (cuerpo -> condicion_ifelse .)
    MULTIPLICACION  reduce using rule 16 (cuerpo -> condicion_ifelse .)
    DIVISION        reduce using rule 16 (cuerpo -> condicion_ifelse .)
    MODULO          reduce using rule 16 (cuerpo -> condicion_ifelse .)
    SMALLER         reduce using rule 16 (cuerpo -> condicion_ifelse .)
    GREATER         reduce using rule 16 (cuerpo -> condicion_ifelse .)
    IS_SMALLER_OR_EQUAL reduce using rule 16 (cuerpo -> condicion_ifelse .)
    IS_GREATER_OR_EQUAL reduce using rule 16 (cuerpo -> condicion_ifelse .)
    AND             reduce using rule 16 (cuerpo -> condicion_ifelse .)
    OR              reduce using rule 16 (cuerpo -> condicion_ifelse .)
    XOR             reduce using rule 16 (cuerpo -> condicion_ifelse .)
    IS_EQUAL        reduce using rule 16 (cuerpo -> condicion_ifelse .)
    IS_NOT_EQUAL    reduce using rule 16 (cuerpo -> condicion_ifelse .)
    IS_IDENTICAL    reduce using rule 16 (cuerpo -> condicion_ifelse .)
    IS_NOT_IDENTICAL reduce using rule 16 (cuerpo -> condicion_ifelse .)
    BOOLEAN_NOT     reduce using rule 16 (cuerpo -> condicion_ifelse .)
    WHILE           reduce using rule 16 (cuerpo -> condicion_ifelse .)
    DO              reduce using rule 16 (cuerpo -> condicion_ifelse .)
    FOR             reduce using rule 16 (cuerpo -> condicion_ifelse .)
    FOREACH         reduce using rule 16 (cuerpo -> condicion_ifelse .)
    TRY             reduce using rule 16 (cuerpo -> condicion_ifelse .)
    LPAREN          reduce using rule 16 (cuerpo -> condicion_ifelse .)
    SWITCH          reduce using rule 16 (cuerpo -> condicion_ifelse .)
    GOTO            reduce using rule 16 (cuerpo -> condicion_ifelse .)
    FUNCTION        reduce using rule 16 (cuerpo -> condicion_ifelse .)
    PUBLIC          reduce using rule 16 (cuerpo -> condicion_ifelse .)
    PRIVATE         reduce using rule 16 (cuerpo -> condicion_ifelse .)
    PROTECTED       reduce using rule 16 (cuerpo -> condicion_ifelse .)
    STATIC          reduce using rule 16 (cuerpo -> condicion_ifelse .)
    IF              reduce using rule 16 (cuerpo -> condicion_ifelse .)
    BREAK           reduce using rule 16 (cuerpo -> condicion_ifelse .)


state 18

    (17) cuerpo -> bswitch .

    $end            reduce using rule 17 (cuerpo -> bswitch .)
    RBRACE          reduce using rule 17 (cuerpo -> bswitch .)
    ECHO            reduce using rule 17 (cuerpo -> bswitch .)
    PRINT           reduce using rule 17 (cuerpo -> bswitch .)
    VARIABLE        reduce using rule 17 (cuerpo -> bswitch .)
    DEFINE          reduce using rule 17 (cuerpo -> bswitch .)
    READLINE        reduce using rule 17 (cuerpo -> bswitch .)
    SUMA            reduce using rule 17 (cuerpo -> bswitch .)
    RESTA           reduce using rule 17 (cuerpo -> bswitch .)
    MULTIPLICACION  reduce using rule 17 (cuerpo -> bswitch .)
    DIVISION        reduce using rule 17 (cuerpo -> bswitch .)
    MODULO          reduce using rule 17 (cuerpo -> bswitch .)
    SMALLER         reduce using rule 17 (cuerpo -> bswitch .)
    GREATER         reduce using rule 17 (cuerpo -> bswitch .)
    IS_SMALLER_OR_EQUAL reduce using rule 17 (cuerpo -> bswitch .)
    IS_GREATER_OR_EQUAL reduce using rule 17 (cuerpo -> bswitch .)
    AND             reduce using rule 17 (cuerpo -> bswitch .)
    OR              reduce using rule 17 (cuerpo -> bswitch .)
    XOR             reduce using rule 17 (cuerpo -> bswitch .)
    IS_EQUAL        reduce using rule 17 (cuerpo -> bswitch .)
    IS_NOT_EQUAL    reduce using rule 17 (cuerpo -> bswitch .)
    IS_IDENTICAL    reduce using rule 17 (cuerpo -> bswitch .)
    IS_NOT_IDENTICAL reduce using rule 17 (cuerpo -> bswitch .)
    BOOLEAN_NOT     reduce using rule 17 (cuerpo -> bswitch .)
    WHILE           reduce using rule 17 (cuerpo -> bswitch .)
    DO              reduce using rule 17 (cuerpo -> bswitch .)
    FOR             reduce using rule 17 (cuerpo -> bswitch .)
    FOREACH         reduce using rule 17 (cuerpo -> bswitch .)
    TRY             reduce using rule 17 (cuerpo -> bswitch .)
    LPAREN          reduce using rule 17 (cuerpo -> bswitch .)
    SWITCH          reduce using rule 17 (cuerpo -> bswitch .)
    GOTO            reduce using rule 17 (cuerpo -> bswitch .)
    FUNCTION        reduce using rule 17 (cuerpo -> bswitch .)
    PUBLIC          reduce using rule 17 (cuerpo -> bswitch .)
    PRIVATE         reduce using rule 17 (cuerpo -> bswitch .)
    PROTECTED       reduce using rule 17 (cuerpo -> bswitch .)
    STATIC          reduce using rule 17 (cuerpo -> bswitch .)
    IF              reduce using rule 17 (cuerpo -> bswitch .)
    BREAK           reduce using rule 17 (cuerpo -> bswitch .)


state 19

    (18) cuerpo -> bgoto .

    $end            reduce using rule 18 (cuerpo -> bgoto .)
    RBRACE          reduce using rule 18 (cuerpo -> bgoto .)
    ECHO            reduce using rule 18 (cuerpo -> bgoto .)
    PRINT           reduce using rule 18 (cuerpo -> bgoto .)
    VARIABLE        reduce using rule 18 (cuerpo -> bgoto .)
    DEFINE          reduce using rule 18 (cuerpo -> bgoto .)
    READLINE        reduce using rule 18 (cuerpo -> bgoto .)
    SUMA            reduce using rule 18 (cuerpo -> bgoto .)
    RESTA           reduce using rule 18 (cuerpo -> bgoto .)
    MULTIPLICACION  reduce using rule 18 (cuerpo -> bgoto .)
    DIVISION        reduce using rule 18 (cuerpo -> bgoto .)
    MODULO          reduce using rule 18 (cuerpo -> bgoto .)
    SMALLER         reduce using rule 18 (cuerpo -> bgoto .)
    GREATER         reduce using rule 18 (cuerpo -> bgoto .)
    IS_SMALLER_OR_EQUAL reduce using rule 18 (cuerpo -> bgoto .)
    IS_GREATER_OR_EQUAL reduce using rule 18 (cuerpo -> bgoto .)
    AND             reduce using rule 18 (cuerpo -> bgoto .)
    OR              reduce using rule 18 (cuerpo -> bgoto .)
    XOR             reduce using rule 18 (cuerpo -> bgoto .)
    IS_EQUAL        reduce using rule 18 (cuerpo -> bgoto .)
    IS_NOT_EQUAL    reduce using rule 18 (cuerpo -> bgoto .)
    IS_IDENTICAL    reduce using rule 18 (cuerpo -> bgoto .)
    IS_NOT_IDENTICAL reduce using rule 18 (cuerpo -> bgoto .)
    BOOLEAN_NOT     reduce using rule 18 (cuerpo -> bgoto .)
    WHILE           reduce using rule 18 (cuerpo -> bgoto .)
    DO              reduce using rule 18 (cuerpo -> bgoto .)
    FOR             reduce using rule 18 (cuerpo -> bgoto .)
    FOREACH         reduce using rule 18 (cuerpo -> bgoto .)
    TRY             reduce using rule 18 (cuerpo -> bgoto .)
    LPAREN          reduce using rule 18 (cuerpo -> bgoto .)
    SWITCH          reduce using rule 18 (cuerpo -> bgoto .)
    GOTO            reduce using rule 18 (cuerpo -> bgoto .)
    FUNCTION        reduce using rule 18 (cuerpo -> bgoto .)
    PUBLIC          reduce using rule 18 (cuerpo -> bgoto .)
    PRIVATE         reduce using rule 18 (cuerpo -> bgoto .)
    PROTECTED       reduce using rule 18 (cuerpo -> bgoto .)
    STATIC          reduce using rule 18 (cuerpo -> bgoto .)
    IF              reduce using rule 18 (cuerpo -> bgoto .)
    BREAK           reduce using rule 18 (cuerpo -> bgoto .)


state 20

    (21) imprimir -> ECHO . valor SEMI
    (24) imprimir -> ECHO . NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    NOMBRE          shift and go to state 63
    VARIABLE        shift and go to state 66
    STRING          shift and go to state 67
    ENTERO          shift and go to state 64
    DECIMAL         shift and go to state 68

    valor                          shift and go to state 62
    numero                         shift and go to state 65

state 21

    (22) imprimir -> PRINT . valor SEMI
    (23) imprimir -> PRINT . LPAREN valor RPAREN SEMI
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    LPAREN          shift and go to state 70
    VARIABLE        shift and go to state 66
    STRING          shift and go to state 67
    NOMBRE          shift and go to state 71
    ENTERO          shift and go to state 64
    DECIMAL         shift and go to state 68

    valor                          shift and go to state 69
    numero                         shift and go to state 65

state 22

    (57) operaciones_mat_par -> LPAREN . valor operadores valor RPAREN
    (58) operaciones_mat_par -> LPAREN . valor operadores operaciones_mat_par RPAREN
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 66
    STRING          shift and go to state 67
    NOMBRE          shift and go to state 71
    ENTERO          shift and go to state 64
    DECIMAL         shift and go to state 68

    valor                          shift and go to state 72
    numero                         shift and go to state 65

state 23

    (59) asignacion -> VARIABLE . EQUALS valor SEMI
    (60) asignacion_array -> VARIABLE . EQUALS array_def SEMI

    EQUALS          shift and go to state 73


state 24

    (69) funciones -> funcion_nparams .

    $end            reduce using rule 69 (funciones -> funcion_nparams .)
    RBRACE          reduce using rule 69 (funciones -> funcion_nparams .)
    ECHO            reduce using rule 69 (funciones -> funcion_nparams .)
    PRINT           reduce using rule 69 (funciones -> funcion_nparams .)
    VARIABLE        reduce using rule 69 (funciones -> funcion_nparams .)
    DEFINE          reduce using rule 69 (funciones -> funcion_nparams .)
    READLINE        reduce using rule 69 (funciones -> funcion_nparams .)
    SUMA            reduce using rule 69 (funciones -> funcion_nparams .)
    RESTA           reduce using rule 69 (funciones -> funcion_nparams .)
    MULTIPLICACION  reduce using rule 69 (funciones -> funcion_nparams .)
    DIVISION        reduce using rule 69 (funciones -> funcion_nparams .)
    MODULO          reduce using rule 69 (funciones -> funcion_nparams .)
    SMALLER         reduce using rule 69 (funciones -> funcion_nparams .)
    GREATER         reduce using rule 69 (funciones -> funcion_nparams .)
    IS_SMALLER_OR_EQUAL reduce using rule 69 (funciones -> funcion_nparams .)
    IS_GREATER_OR_EQUAL reduce using rule 69 (funciones -> funcion_nparams .)
    AND             reduce using rule 69 (funciones -> funcion_nparams .)
    OR              reduce using rule 69 (funciones -> funcion_nparams .)
    XOR             reduce using rule 69 (funciones -> funcion_nparams .)
    IS_EQUAL        reduce using rule 69 (funciones -> funcion_nparams .)
    IS_NOT_EQUAL    reduce using rule 69 (funciones -> funcion_nparams .)
    IS_IDENTICAL    reduce using rule 69 (funciones -> funcion_nparams .)
    IS_NOT_IDENTICAL reduce using rule 69 (funciones -> funcion_nparams .)
    BOOLEAN_NOT     reduce using rule 69 (funciones -> funcion_nparams .)
    WHILE           reduce using rule 69 (funciones -> funcion_nparams .)
    DO              reduce using rule 69 (funciones -> funcion_nparams .)
    FOR             reduce using rule 69 (funciones -> funcion_nparams .)
    FOREACH         reduce using rule 69 (funciones -> funcion_nparams .)
    TRY             reduce using rule 69 (funciones -> funcion_nparams .)
    LPAREN          reduce using rule 69 (funciones -> funcion_nparams .)
    SWITCH          reduce using rule 69 (funciones -> funcion_nparams .)
    GOTO            reduce using rule 69 (funciones -> funcion_nparams .)
    FUNCTION        reduce using rule 69 (funciones -> funcion_nparams .)
    PUBLIC          reduce using rule 69 (funciones -> funcion_nparams .)
    PRIVATE         reduce using rule 69 (funciones -> funcion_nparams .)
    PROTECTED       reduce using rule 69 (funciones -> funcion_nparams .)
    STATIC          reduce using rule 69 (funciones -> funcion_nparams .)
    IF              reduce using rule 69 (funciones -> funcion_nparams .)
    BREAK           reduce using rule 69 (funciones -> funcion_nparams .)


state 25

    (70) funciones -> proteccion . funcion_nparams
    (72) funciones -> proteccion . funcion_opreturn
    (74) funciones -> proteccion . funcion_blank
    (78) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (81) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (84) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE

    FUNCTION        shift and go to state 77

    funcion_nparams                shift and go to state 74
    funcion_opreturn               shift and go to state 75
    funcion_blank                  shift and go to state 76

state 26

    (71) funciones -> funcion_opreturn .

    $end            reduce using rule 71 (funciones -> funcion_opreturn .)
    RBRACE          reduce using rule 71 (funciones -> funcion_opreturn .)
    ECHO            reduce using rule 71 (funciones -> funcion_opreturn .)
    PRINT           reduce using rule 71 (funciones -> funcion_opreturn .)
    VARIABLE        reduce using rule 71 (funciones -> funcion_opreturn .)
    DEFINE          reduce using rule 71 (funciones -> funcion_opreturn .)
    READLINE        reduce using rule 71 (funciones -> funcion_opreturn .)
    SUMA            reduce using rule 71 (funciones -> funcion_opreturn .)
    RESTA           reduce using rule 71 (funciones -> funcion_opreturn .)
    MULTIPLICACION  reduce using rule 71 (funciones -> funcion_opreturn .)
    DIVISION        reduce using rule 71 (funciones -> funcion_opreturn .)
    MODULO          reduce using rule 71 (funciones -> funcion_opreturn .)
    SMALLER         reduce using rule 71 (funciones -> funcion_opreturn .)
    GREATER         reduce using rule 71 (funciones -> funcion_opreturn .)
    IS_SMALLER_OR_EQUAL reduce using rule 71 (funciones -> funcion_opreturn .)
    IS_GREATER_OR_EQUAL reduce using rule 71 (funciones -> funcion_opreturn .)
    AND             reduce using rule 71 (funciones -> funcion_opreturn .)
    OR              reduce using rule 71 (funciones -> funcion_opreturn .)
    XOR             reduce using rule 71 (funciones -> funcion_opreturn .)
    IS_EQUAL        reduce using rule 71 (funciones -> funcion_opreturn .)
    IS_NOT_EQUAL    reduce using rule 71 (funciones -> funcion_opreturn .)
    IS_IDENTICAL    reduce using rule 71 (funciones -> funcion_opreturn .)
    IS_NOT_IDENTICAL reduce using rule 71 (funciones -> funcion_opreturn .)
    BOOLEAN_NOT     reduce using rule 71 (funciones -> funcion_opreturn .)
    WHILE           reduce using rule 71 (funciones -> funcion_opreturn .)
    DO              reduce using rule 71 (funciones -> funcion_opreturn .)
    FOR             reduce using rule 71 (funciones -> funcion_opreturn .)
    FOREACH         reduce using rule 71 (funciones -> funcion_opreturn .)
    TRY             reduce using rule 71 (funciones -> funcion_opreturn .)
    LPAREN          reduce using rule 71 (funciones -> funcion_opreturn .)
    SWITCH          reduce using rule 71 (funciones -> funcion_opreturn .)
    GOTO            reduce using rule 71 (funciones -> funcion_opreturn .)
    FUNCTION        reduce using rule 71 (funciones -> funcion_opreturn .)
    PUBLIC          reduce using rule 71 (funciones -> funcion_opreturn .)
    PRIVATE         reduce using rule 71 (funciones -> funcion_opreturn .)
    PROTECTED       reduce using rule 71 (funciones -> funcion_opreturn .)
    STATIC          reduce using rule 71 (funciones -> funcion_opreturn .)
    IF              reduce using rule 71 (funciones -> funcion_opreturn .)
    BREAK           reduce using rule 71 (funciones -> funcion_opreturn .)


state 27

    (73) funciones -> funcion_blank .

    $end            reduce using rule 73 (funciones -> funcion_blank .)
    RBRACE          reduce using rule 73 (funciones -> funcion_blank .)
    ECHO            reduce using rule 73 (funciones -> funcion_blank .)
    PRINT           reduce using rule 73 (funciones -> funcion_blank .)
    VARIABLE        reduce using rule 73 (funciones -> funcion_blank .)
    DEFINE          reduce using rule 73 (funciones -> funcion_blank .)
    READLINE        reduce using rule 73 (funciones -> funcion_blank .)
    SUMA            reduce using rule 73 (funciones -> funcion_blank .)
    RESTA           reduce using rule 73 (funciones -> funcion_blank .)
    MULTIPLICACION  reduce using rule 73 (funciones -> funcion_blank .)
    DIVISION        reduce using rule 73 (funciones -> funcion_blank .)
    MODULO          reduce using rule 73 (funciones -> funcion_blank .)
    SMALLER         reduce using rule 73 (funciones -> funcion_blank .)
    GREATER         reduce using rule 73 (funciones -> funcion_blank .)
    IS_SMALLER_OR_EQUAL reduce using rule 73 (funciones -> funcion_blank .)
    IS_GREATER_OR_EQUAL reduce using rule 73 (funciones -> funcion_blank .)
    AND             reduce using rule 73 (funciones -> funcion_blank .)
    OR              reduce using rule 73 (funciones -> funcion_blank .)
    XOR             reduce using rule 73 (funciones -> funcion_blank .)
    IS_EQUAL        reduce using rule 73 (funciones -> funcion_blank .)
    IS_NOT_EQUAL    reduce using rule 73 (funciones -> funcion_blank .)
    IS_IDENTICAL    reduce using rule 73 (funciones -> funcion_blank .)
    IS_NOT_IDENTICAL reduce using rule 73 (funciones -> funcion_blank .)
    BOOLEAN_NOT     reduce using rule 73 (funciones -> funcion_blank .)
    WHILE           reduce using rule 73 (funciones -> funcion_blank .)
    DO              reduce using rule 73 (funciones -> funcion_blank .)
    FOR             reduce using rule 73 (funciones -> funcion_blank .)
    FOREACH         reduce using rule 73 (funciones -> funcion_blank .)
    TRY             reduce using rule 73 (funciones -> funcion_blank .)
    LPAREN          reduce using rule 73 (funciones -> funcion_blank .)
    SWITCH          reduce using rule 73 (funciones -> funcion_blank .)
    GOTO            reduce using rule 73 (funciones -> funcion_blank .)
    FUNCTION        reduce using rule 73 (funciones -> funcion_blank .)
    PUBLIC          reduce using rule 73 (funciones -> funcion_blank .)
    PRIVATE         reduce using rule 73 (funciones -> funcion_blank .)
    PROTECTED       reduce using rule 73 (funciones -> funcion_blank .)
    STATIC          reduce using rule 73 (funciones -> funcion_blank .)
    IF              reduce using rule 73 (funciones -> funcion_blank .)
    BREAK           reduce using rule 73 (funciones -> funcion_blank .)


state 28

    (75) funciones -> funcion_void .

    $end            reduce using rule 75 (funciones -> funcion_void .)
    RBRACE          reduce using rule 75 (funciones -> funcion_void .)
    ECHO            reduce using rule 75 (funciones -> funcion_void .)
    PRINT           reduce using rule 75 (funciones -> funcion_void .)
    VARIABLE        reduce using rule 75 (funciones -> funcion_void .)
    DEFINE          reduce using rule 75 (funciones -> funcion_void .)
    READLINE        reduce using rule 75 (funciones -> funcion_void .)
    SUMA            reduce using rule 75 (funciones -> funcion_void .)
    RESTA           reduce using rule 75 (funciones -> funcion_void .)
    MULTIPLICACION  reduce using rule 75 (funciones -> funcion_void .)
    DIVISION        reduce using rule 75 (funciones -> funcion_void .)
    MODULO          reduce using rule 75 (funciones -> funcion_void .)
    SMALLER         reduce using rule 75 (funciones -> funcion_void .)
    GREATER         reduce using rule 75 (funciones -> funcion_void .)
    IS_SMALLER_OR_EQUAL reduce using rule 75 (funciones -> funcion_void .)
    IS_GREATER_OR_EQUAL reduce using rule 75 (funciones -> funcion_void .)
    AND             reduce using rule 75 (funciones -> funcion_void .)
    OR              reduce using rule 75 (funciones -> funcion_void .)
    XOR             reduce using rule 75 (funciones -> funcion_void .)
    IS_EQUAL        reduce using rule 75 (funciones -> funcion_void .)
    IS_NOT_EQUAL    reduce using rule 75 (funciones -> funcion_void .)
    IS_IDENTICAL    reduce using rule 75 (funciones -> funcion_void .)
    IS_NOT_IDENTICAL reduce using rule 75 (funciones -> funcion_void .)
    BOOLEAN_NOT     reduce using rule 75 (funciones -> funcion_void .)
    WHILE           reduce using rule 75 (funciones -> funcion_void .)
    DO              reduce using rule 75 (funciones -> funcion_void .)
    FOR             reduce using rule 75 (funciones -> funcion_void .)
    FOREACH         reduce using rule 75 (funciones -> funcion_void .)
    TRY             reduce using rule 75 (funciones -> funcion_void .)
    LPAREN          reduce using rule 75 (funciones -> funcion_void .)
    SWITCH          reduce using rule 75 (funciones -> funcion_void .)
    GOTO            reduce using rule 75 (funciones -> funcion_void .)
    FUNCTION        reduce using rule 75 (funciones -> funcion_void .)
    PUBLIC          reduce using rule 75 (funciones -> funcion_void .)
    PRIVATE         reduce using rule 75 (funciones -> funcion_void .)
    PROTECTED       reduce using rule 75 (funciones -> funcion_void .)
    STATIC          reduce using rule 75 (funciones -> funcion_void .)
    IF              reduce using rule 75 (funciones -> funcion_void .)
    BREAK           reduce using rule 75 (funciones -> funcion_void .)


state 29

    (61) constante -> DEFINE . LPAREN STRING COMMA valor RPAREN SEMI
    (62) constante -> DEFINE . LPAREN NOMBRE COMMA ARRAY RPAREN SEMI

    LPAREN          shift and go to state 78


state 30

    (63) lectura -> READLINE . LPAREN STRING RPAREN SEMI
    (64) lectura -> READLINE . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 79


state 31

    (31) operadores -> SUMA .

    $end            reduce using rule 31 (operadores -> SUMA .)
    VARIABLE        reduce using rule 31 (operadores -> SUMA .)
    STRING          reduce using rule 31 (operadores -> SUMA .)
    NOMBRE          reduce using rule 31 (operadores -> SUMA .)
    LPAREN          reduce using rule 31 (operadores -> SUMA .)
    ENTERO          reduce using rule 31 (operadores -> SUMA .)
    DECIMAL         reduce using rule 31 (operadores -> SUMA .)
    RBRACE          reduce using rule 31 (operadores -> SUMA .)
    ECHO            reduce using rule 31 (operadores -> SUMA .)
    PRINT           reduce using rule 31 (operadores -> SUMA .)
    DEFINE          reduce using rule 31 (operadores -> SUMA .)
    READLINE        reduce using rule 31 (operadores -> SUMA .)
    SUMA            reduce using rule 31 (operadores -> SUMA .)
    RESTA           reduce using rule 31 (operadores -> SUMA .)
    MULTIPLICACION  reduce using rule 31 (operadores -> SUMA .)
    DIVISION        reduce using rule 31 (operadores -> SUMA .)
    MODULO          reduce using rule 31 (operadores -> SUMA .)
    SMALLER         reduce using rule 31 (operadores -> SUMA .)
    GREATER         reduce using rule 31 (operadores -> SUMA .)
    IS_SMALLER_OR_EQUAL reduce using rule 31 (operadores -> SUMA .)
    IS_GREATER_OR_EQUAL reduce using rule 31 (operadores -> SUMA .)
    AND             reduce using rule 31 (operadores -> SUMA .)
    OR              reduce using rule 31 (operadores -> SUMA .)
    XOR             reduce using rule 31 (operadores -> SUMA .)
    IS_EQUAL        reduce using rule 31 (operadores -> SUMA .)
    IS_NOT_EQUAL    reduce using rule 31 (operadores -> SUMA .)
    IS_IDENTICAL    reduce using rule 31 (operadores -> SUMA .)
    IS_NOT_IDENTICAL reduce using rule 31 (operadores -> SUMA .)
    BOOLEAN_NOT     reduce using rule 31 (operadores -> SUMA .)
    WHILE           reduce using rule 31 (operadores -> SUMA .)
    DO              reduce using rule 31 (operadores -> SUMA .)
    FOR             reduce using rule 31 (operadores -> SUMA .)
    FOREACH         reduce using rule 31 (operadores -> SUMA .)
    TRY             reduce using rule 31 (operadores -> SUMA .)
    SWITCH          reduce using rule 31 (operadores -> SUMA .)
    GOTO            reduce using rule 31 (operadores -> SUMA .)
    FUNCTION        reduce using rule 31 (operadores -> SUMA .)
    PUBLIC          reduce using rule 31 (operadores -> SUMA .)
    PRIVATE         reduce using rule 31 (operadores -> SUMA .)
    PROTECTED       reduce using rule 31 (operadores -> SUMA .)
    STATIC          reduce using rule 31 (operadores -> SUMA .)
    IF              reduce using rule 31 (operadores -> SUMA .)
    BREAK           reduce using rule 31 (operadores -> SUMA .)


state 32

    (32) operadores -> RESTA .

    $end            reduce using rule 32 (operadores -> RESTA .)
    VARIABLE        reduce using rule 32 (operadores -> RESTA .)
    STRING          reduce using rule 32 (operadores -> RESTA .)
    NOMBRE          reduce using rule 32 (operadores -> RESTA .)
    LPAREN          reduce using rule 32 (operadores -> RESTA .)
    ENTERO          reduce using rule 32 (operadores -> RESTA .)
    DECIMAL         reduce using rule 32 (operadores -> RESTA .)
    RBRACE          reduce using rule 32 (operadores -> RESTA .)
    ECHO            reduce using rule 32 (operadores -> RESTA .)
    PRINT           reduce using rule 32 (operadores -> RESTA .)
    DEFINE          reduce using rule 32 (operadores -> RESTA .)
    READLINE        reduce using rule 32 (operadores -> RESTA .)
    SUMA            reduce using rule 32 (operadores -> RESTA .)
    RESTA           reduce using rule 32 (operadores -> RESTA .)
    MULTIPLICACION  reduce using rule 32 (operadores -> RESTA .)
    DIVISION        reduce using rule 32 (operadores -> RESTA .)
    MODULO          reduce using rule 32 (operadores -> RESTA .)
    SMALLER         reduce using rule 32 (operadores -> RESTA .)
    GREATER         reduce using rule 32 (operadores -> RESTA .)
    IS_SMALLER_OR_EQUAL reduce using rule 32 (operadores -> RESTA .)
    IS_GREATER_OR_EQUAL reduce using rule 32 (operadores -> RESTA .)
    AND             reduce using rule 32 (operadores -> RESTA .)
    OR              reduce using rule 32 (operadores -> RESTA .)
    XOR             reduce using rule 32 (operadores -> RESTA .)
    IS_EQUAL        reduce using rule 32 (operadores -> RESTA .)
    IS_NOT_EQUAL    reduce using rule 32 (operadores -> RESTA .)
    IS_IDENTICAL    reduce using rule 32 (operadores -> RESTA .)
    IS_NOT_IDENTICAL reduce using rule 32 (operadores -> RESTA .)
    BOOLEAN_NOT     reduce using rule 32 (operadores -> RESTA .)
    WHILE           reduce using rule 32 (operadores -> RESTA .)
    DO              reduce using rule 32 (operadores -> RESTA .)
    FOR             reduce using rule 32 (operadores -> RESTA .)
    FOREACH         reduce using rule 32 (operadores -> RESTA .)
    TRY             reduce using rule 32 (operadores -> RESTA .)
    SWITCH          reduce using rule 32 (operadores -> RESTA .)
    GOTO            reduce using rule 32 (operadores -> RESTA .)
    FUNCTION        reduce using rule 32 (operadores -> RESTA .)
    PUBLIC          reduce using rule 32 (operadores -> RESTA .)
    PRIVATE         reduce using rule 32 (operadores -> RESTA .)
    PROTECTED       reduce using rule 32 (operadores -> RESTA .)
    STATIC          reduce using rule 32 (operadores -> RESTA .)
    IF              reduce using rule 32 (operadores -> RESTA .)
    BREAK           reduce using rule 32 (operadores -> RESTA .)


state 33

    (33) operadores -> MULTIPLICACION .

    $end            reduce using rule 33 (operadores -> MULTIPLICACION .)
    VARIABLE        reduce using rule 33 (operadores -> MULTIPLICACION .)
    STRING          reduce using rule 33 (operadores -> MULTIPLICACION .)
    NOMBRE          reduce using rule 33 (operadores -> MULTIPLICACION .)
    LPAREN          reduce using rule 33 (operadores -> MULTIPLICACION .)
    ENTERO          reduce using rule 33 (operadores -> MULTIPLICACION .)
    DECIMAL         reduce using rule 33 (operadores -> MULTIPLICACION .)
    RBRACE          reduce using rule 33 (operadores -> MULTIPLICACION .)
    ECHO            reduce using rule 33 (operadores -> MULTIPLICACION .)
    PRINT           reduce using rule 33 (operadores -> MULTIPLICACION .)
    DEFINE          reduce using rule 33 (operadores -> MULTIPLICACION .)
    READLINE        reduce using rule 33 (operadores -> MULTIPLICACION .)
    SUMA            reduce using rule 33 (operadores -> MULTIPLICACION .)
    RESTA           reduce using rule 33 (operadores -> MULTIPLICACION .)
    MULTIPLICACION  reduce using rule 33 (operadores -> MULTIPLICACION .)
    DIVISION        reduce using rule 33 (operadores -> MULTIPLICACION .)
    MODULO          reduce using rule 33 (operadores -> MULTIPLICACION .)
    SMALLER         reduce using rule 33 (operadores -> MULTIPLICACION .)
    GREATER         reduce using rule 33 (operadores -> MULTIPLICACION .)
    IS_SMALLER_OR_EQUAL reduce using rule 33 (operadores -> MULTIPLICACION .)
    IS_GREATER_OR_EQUAL reduce using rule 33 (operadores -> MULTIPLICACION .)
    AND             reduce using rule 33 (operadores -> MULTIPLICACION .)
    OR              reduce using rule 33 (operadores -> MULTIPLICACION .)
    XOR             reduce using rule 33 (operadores -> MULTIPLICACION .)
    IS_EQUAL        reduce using rule 33 (operadores -> MULTIPLICACION .)
    IS_NOT_EQUAL    reduce using rule 33 (operadores -> MULTIPLICACION .)
    IS_IDENTICAL    reduce using rule 33 (operadores -> MULTIPLICACION .)
    IS_NOT_IDENTICAL reduce using rule 33 (operadores -> MULTIPLICACION .)
    BOOLEAN_NOT     reduce using rule 33 (operadores -> MULTIPLICACION .)
    WHILE           reduce using rule 33 (operadores -> MULTIPLICACION .)
    DO              reduce using rule 33 (operadores -> MULTIPLICACION .)
    FOR             reduce using rule 33 (operadores -> MULTIPLICACION .)
    FOREACH         reduce using rule 33 (operadores -> MULTIPLICACION .)
    TRY             reduce using rule 33 (operadores -> MULTIPLICACION .)
    SWITCH          reduce using rule 33 (operadores -> MULTIPLICACION .)
    GOTO            reduce using rule 33 (operadores -> MULTIPLICACION .)
    FUNCTION        reduce using rule 33 (operadores -> MULTIPLICACION .)
    PUBLIC          reduce using rule 33 (operadores -> MULTIPLICACION .)
    PRIVATE         reduce using rule 33 (operadores -> MULTIPLICACION .)
    PROTECTED       reduce using rule 33 (operadores -> MULTIPLICACION .)
    STATIC          reduce using rule 33 (operadores -> MULTIPLICACION .)
    IF              reduce using rule 33 (operadores -> MULTIPLICACION .)
    BREAK           reduce using rule 33 (operadores -> MULTIPLICACION .)


state 34

    (34) operadores -> DIVISION .

    $end            reduce using rule 34 (operadores -> DIVISION .)
    VARIABLE        reduce using rule 34 (operadores -> DIVISION .)
    STRING          reduce using rule 34 (operadores -> DIVISION .)
    NOMBRE          reduce using rule 34 (operadores -> DIVISION .)
    LPAREN          reduce using rule 34 (operadores -> DIVISION .)
    ENTERO          reduce using rule 34 (operadores -> DIVISION .)
    DECIMAL         reduce using rule 34 (operadores -> DIVISION .)
    RBRACE          reduce using rule 34 (operadores -> DIVISION .)
    ECHO            reduce using rule 34 (operadores -> DIVISION .)
    PRINT           reduce using rule 34 (operadores -> DIVISION .)
    DEFINE          reduce using rule 34 (operadores -> DIVISION .)
    READLINE        reduce using rule 34 (operadores -> DIVISION .)
    SUMA            reduce using rule 34 (operadores -> DIVISION .)
    RESTA           reduce using rule 34 (operadores -> DIVISION .)
    MULTIPLICACION  reduce using rule 34 (operadores -> DIVISION .)
    DIVISION        reduce using rule 34 (operadores -> DIVISION .)
    MODULO          reduce using rule 34 (operadores -> DIVISION .)
    SMALLER         reduce using rule 34 (operadores -> DIVISION .)
    GREATER         reduce using rule 34 (operadores -> DIVISION .)
    IS_SMALLER_OR_EQUAL reduce using rule 34 (operadores -> DIVISION .)
    IS_GREATER_OR_EQUAL reduce using rule 34 (operadores -> DIVISION .)
    AND             reduce using rule 34 (operadores -> DIVISION .)
    OR              reduce using rule 34 (operadores -> DIVISION .)
    XOR             reduce using rule 34 (operadores -> DIVISION .)
    IS_EQUAL        reduce using rule 34 (operadores -> DIVISION .)
    IS_NOT_EQUAL    reduce using rule 34 (operadores -> DIVISION .)
    IS_IDENTICAL    reduce using rule 34 (operadores -> DIVISION .)
    IS_NOT_IDENTICAL reduce using rule 34 (operadores -> DIVISION .)
    BOOLEAN_NOT     reduce using rule 34 (operadores -> DIVISION .)
    WHILE           reduce using rule 34 (operadores -> DIVISION .)
    DO              reduce using rule 34 (operadores -> DIVISION .)
    FOR             reduce using rule 34 (operadores -> DIVISION .)
    FOREACH         reduce using rule 34 (operadores -> DIVISION .)
    TRY             reduce using rule 34 (operadores -> DIVISION .)
    SWITCH          reduce using rule 34 (operadores -> DIVISION .)
    GOTO            reduce using rule 34 (operadores -> DIVISION .)
    FUNCTION        reduce using rule 34 (operadores -> DIVISION .)
    PUBLIC          reduce using rule 34 (operadores -> DIVISION .)
    PRIVATE         reduce using rule 34 (operadores -> DIVISION .)
    PROTECTED       reduce using rule 34 (operadores -> DIVISION .)
    STATIC          reduce using rule 34 (operadores -> DIVISION .)
    IF              reduce using rule 34 (operadores -> DIVISION .)
    BREAK           reduce using rule 34 (operadores -> DIVISION .)


state 35

    (35) operadores -> MODULO .

    $end            reduce using rule 35 (operadores -> MODULO .)
    VARIABLE        reduce using rule 35 (operadores -> MODULO .)
    STRING          reduce using rule 35 (operadores -> MODULO .)
    NOMBRE          reduce using rule 35 (operadores -> MODULO .)
    LPAREN          reduce using rule 35 (operadores -> MODULO .)
    ENTERO          reduce using rule 35 (operadores -> MODULO .)
    DECIMAL         reduce using rule 35 (operadores -> MODULO .)
    RBRACE          reduce using rule 35 (operadores -> MODULO .)
    ECHO            reduce using rule 35 (operadores -> MODULO .)
    PRINT           reduce using rule 35 (operadores -> MODULO .)
    DEFINE          reduce using rule 35 (operadores -> MODULO .)
    READLINE        reduce using rule 35 (operadores -> MODULO .)
    SUMA            reduce using rule 35 (operadores -> MODULO .)
    RESTA           reduce using rule 35 (operadores -> MODULO .)
    MULTIPLICACION  reduce using rule 35 (operadores -> MODULO .)
    DIVISION        reduce using rule 35 (operadores -> MODULO .)
    MODULO          reduce using rule 35 (operadores -> MODULO .)
    SMALLER         reduce using rule 35 (operadores -> MODULO .)
    GREATER         reduce using rule 35 (operadores -> MODULO .)
    IS_SMALLER_OR_EQUAL reduce using rule 35 (operadores -> MODULO .)
    IS_GREATER_OR_EQUAL reduce using rule 35 (operadores -> MODULO .)
    AND             reduce using rule 35 (operadores -> MODULO .)
    OR              reduce using rule 35 (operadores -> MODULO .)
    XOR             reduce using rule 35 (operadores -> MODULO .)
    IS_EQUAL        reduce using rule 35 (operadores -> MODULO .)
    IS_NOT_EQUAL    reduce using rule 35 (operadores -> MODULO .)
    IS_IDENTICAL    reduce using rule 35 (operadores -> MODULO .)
    IS_NOT_IDENTICAL reduce using rule 35 (operadores -> MODULO .)
    BOOLEAN_NOT     reduce using rule 35 (operadores -> MODULO .)
    WHILE           reduce using rule 35 (operadores -> MODULO .)
    DO              reduce using rule 35 (operadores -> MODULO .)
    FOR             reduce using rule 35 (operadores -> MODULO .)
    FOREACH         reduce using rule 35 (operadores -> MODULO .)
    TRY             reduce using rule 35 (operadores -> MODULO .)
    SWITCH          reduce using rule 35 (operadores -> MODULO .)
    GOTO            reduce using rule 35 (operadores -> MODULO .)
    FUNCTION        reduce using rule 35 (operadores -> MODULO .)
    PUBLIC          reduce using rule 35 (operadores -> MODULO .)
    PRIVATE         reduce using rule 35 (operadores -> MODULO .)
    PROTECTED       reduce using rule 35 (operadores -> MODULO .)
    STATIC          reduce using rule 35 (operadores -> MODULO .)
    IF              reduce using rule 35 (operadores -> MODULO .)
    BREAK           reduce using rule 35 (operadores -> MODULO .)


state 36

    (36) operador_logico -> SMALLER .

    $end            reduce using rule 36 (operador_logico -> SMALLER .)
    RBRACE          reduce using rule 36 (operador_logico -> SMALLER .)
    VARIABLE        reduce using rule 36 (operador_logico -> SMALLER .)
    STRING          reduce using rule 36 (operador_logico -> SMALLER .)
    NOMBRE          reduce using rule 36 (operador_logico -> SMALLER .)
    ENTERO          reduce using rule 36 (operador_logico -> SMALLER .)
    DECIMAL         reduce using rule 36 (operador_logico -> SMALLER .)
    ECHO            reduce using rule 36 (operador_logico -> SMALLER .)
    PRINT           reduce using rule 36 (operador_logico -> SMALLER .)
    DEFINE          reduce using rule 36 (operador_logico -> SMALLER .)
    READLINE        reduce using rule 36 (operador_logico -> SMALLER .)
    SUMA            reduce using rule 36 (operador_logico -> SMALLER .)
    RESTA           reduce using rule 36 (operador_logico -> SMALLER .)
    MULTIPLICACION  reduce using rule 36 (operador_logico -> SMALLER .)
    DIVISION        reduce using rule 36 (operador_logico -> SMALLER .)
    MODULO          reduce using rule 36 (operador_logico -> SMALLER .)
    SMALLER         reduce using rule 36 (operador_logico -> SMALLER .)
    GREATER         reduce using rule 36 (operador_logico -> SMALLER .)
    IS_SMALLER_OR_EQUAL reduce using rule 36 (operador_logico -> SMALLER .)
    IS_GREATER_OR_EQUAL reduce using rule 36 (operador_logico -> SMALLER .)
    AND             reduce using rule 36 (operador_logico -> SMALLER .)
    OR              reduce using rule 36 (operador_logico -> SMALLER .)
    XOR             reduce using rule 36 (operador_logico -> SMALLER .)
    IS_EQUAL        reduce using rule 36 (operador_logico -> SMALLER .)
    IS_NOT_EQUAL    reduce using rule 36 (operador_logico -> SMALLER .)
    IS_IDENTICAL    reduce using rule 36 (operador_logico -> SMALLER .)
    IS_NOT_IDENTICAL reduce using rule 36 (operador_logico -> SMALLER .)
    BOOLEAN_NOT     reduce using rule 36 (operador_logico -> SMALLER .)
    WHILE           reduce using rule 36 (operador_logico -> SMALLER .)
    DO              reduce using rule 36 (operador_logico -> SMALLER .)
    FOR             reduce using rule 36 (operador_logico -> SMALLER .)
    FOREACH         reduce using rule 36 (operador_logico -> SMALLER .)
    TRY             reduce using rule 36 (operador_logico -> SMALLER .)
    LPAREN          reduce using rule 36 (operador_logico -> SMALLER .)
    SWITCH          reduce using rule 36 (operador_logico -> SMALLER .)
    GOTO            reduce using rule 36 (operador_logico -> SMALLER .)
    FUNCTION        reduce using rule 36 (operador_logico -> SMALLER .)
    PUBLIC          reduce using rule 36 (operador_logico -> SMALLER .)
    PRIVATE         reduce using rule 36 (operador_logico -> SMALLER .)
    PROTECTED       reduce using rule 36 (operador_logico -> SMALLER .)
    STATIC          reduce using rule 36 (operador_logico -> SMALLER .)
    IF              reduce using rule 36 (operador_logico -> SMALLER .)
    BREAK           reduce using rule 36 (operador_logico -> SMALLER .)


state 37

    (37) operador_logico -> GREATER .

    $end            reduce using rule 37 (operador_logico -> GREATER .)
    RBRACE          reduce using rule 37 (operador_logico -> GREATER .)
    VARIABLE        reduce using rule 37 (operador_logico -> GREATER .)
    STRING          reduce using rule 37 (operador_logico -> GREATER .)
    NOMBRE          reduce using rule 37 (operador_logico -> GREATER .)
    ENTERO          reduce using rule 37 (operador_logico -> GREATER .)
    DECIMAL         reduce using rule 37 (operador_logico -> GREATER .)
    ECHO            reduce using rule 37 (operador_logico -> GREATER .)
    PRINT           reduce using rule 37 (operador_logico -> GREATER .)
    DEFINE          reduce using rule 37 (operador_logico -> GREATER .)
    READLINE        reduce using rule 37 (operador_logico -> GREATER .)
    SUMA            reduce using rule 37 (operador_logico -> GREATER .)
    RESTA           reduce using rule 37 (operador_logico -> GREATER .)
    MULTIPLICACION  reduce using rule 37 (operador_logico -> GREATER .)
    DIVISION        reduce using rule 37 (operador_logico -> GREATER .)
    MODULO          reduce using rule 37 (operador_logico -> GREATER .)
    SMALLER         reduce using rule 37 (operador_logico -> GREATER .)
    GREATER         reduce using rule 37 (operador_logico -> GREATER .)
    IS_SMALLER_OR_EQUAL reduce using rule 37 (operador_logico -> GREATER .)
    IS_GREATER_OR_EQUAL reduce using rule 37 (operador_logico -> GREATER .)
    AND             reduce using rule 37 (operador_logico -> GREATER .)
    OR              reduce using rule 37 (operador_logico -> GREATER .)
    XOR             reduce using rule 37 (operador_logico -> GREATER .)
    IS_EQUAL        reduce using rule 37 (operador_logico -> GREATER .)
    IS_NOT_EQUAL    reduce using rule 37 (operador_logico -> GREATER .)
    IS_IDENTICAL    reduce using rule 37 (operador_logico -> GREATER .)
    IS_NOT_IDENTICAL reduce using rule 37 (operador_logico -> GREATER .)
    BOOLEAN_NOT     reduce using rule 37 (operador_logico -> GREATER .)
    WHILE           reduce using rule 37 (operador_logico -> GREATER .)
    DO              reduce using rule 37 (operador_logico -> GREATER .)
    FOR             reduce using rule 37 (operador_logico -> GREATER .)
    FOREACH         reduce using rule 37 (operador_logico -> GREATER .)
    TRY             reduce using rule 37 (operador_logico -> GREATER .)
    LPAREN          reduce using rule 37 (operador_logico -> GREATER .)
    SWITCH          reduce using rule 37 (operador_logico -> GREATER .)
    GOTO            reduce using rule 37 (operador_logico -> GREATER .)
    FUNCTION        reduce using rule 37 (operador_logico -> GREATER .)
    PUBLIC          reduce using rule 37 (operador_logico -> GREATER .)
    PRIVATE         reduce using rule 37 (operador_logico -> GREATER .)
    PROTECTED       reduce using rule 37 (operador_logico -> GREATER .)
    STATIC          reduce using rule 37 (operador_logico -> GREATER .)
    IF              reduce using rule 37 (operador_logico -> GREATER .)
    BREAK           reduce using rule 37 (operador_logico -> GREATER .)


state 38

    (38) operador_logico -> IS_SMALLER_OR_EQUAL .

    $end            reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    RBRACE          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    VARIABLE        reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    STRING          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    NOMBRE          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    ENTERO          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    DECIMAL         reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    ECHO            reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    PRINT           reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    DEFINE          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    READLINE        reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    SUMA            reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    RESTA           reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    MULTIPLICACION  reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    DIVISION        reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    MODULO          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    SMALLER         reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    GREATER         reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_GREATER_OR_EQUAL reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    AND             reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    OR              reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    XOR             reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_EQUAL        reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_NOT_EQUAL    reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_IDENTICAL    reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_NOT_IDENTICAL reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    BOOLEAN_NOT     reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    WHILE           reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    DO              reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    FOR             reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    FOREACH         reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    TRY             reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    LPAREN          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    SWITCH          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    GOTO            reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    FUNCTION        reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    PUBLIC          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    PRIVATE         reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    PROTECTED       reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    STATIC          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IF              reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    BREAK           reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)


state 39

    (39) operador_logico -> IS_GREATER_OR_EQUAL .

    $end            reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    RBRACE          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    VARIABLE        reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    STRING          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    NOMBRE          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    ENTERO          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    DECIMAL         reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    ECHO            reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    PRINT           reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    DEFINE          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    READLINE        reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    SUMA            reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    RESTA           reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    MULTIPLICACION  reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    DIVISION        reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    MODULO          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    SMALLER         reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    GREATER         reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_GREATER_OR_EQUAL reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    AND             reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    OR              reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    XOR             reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_EQUAL        reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_NOT_EQUAL    reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_IDENTICAL    reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_NOT_IDENTICAL reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    BOOLEAN_NOT     reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    WHILE           reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    DO              reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    FOR             reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    FOREACH         reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    TRY             reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    LPAREN          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    SWITCH          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    GOTO            reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    FUNCTION        reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    PUBLIC          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    PRIVATE         reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    PROTECTED       reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    STATIC          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IF              reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    BREAK           reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)


state 40

    (47) condicion_booleana -> AND .

    $end            reduce using rule 47 (condicion_booleana -> AND .)
    RBRACE          reduce using rule 47 (condicion_booleana -> AND .)
    ECHO            reduce using rule 47 (condicion_booleana -> AND .)
    PRINT           reduce using rule 47 (condicion_booleana -> AND .)
    VARIABLE        reduce using rule 47 (condicion_booleana -> AND .)
    DEFINE          reduce using rule 47 (condicion_booleana -> AND .)
    READLINE        reduce using rule 47 (condicion_booleana -> AND .)
    SUMA            reduce using rule 47 (condicion_booleana -> AND .)
    RESTA           reduce using rule 47 (condicion_booleana -> AND .)
    MULTIPLICACION  reduce using rule 47 (condicion_booleana -> AND .)
    DIVISION        reduce using rule 47 (condicion_booleana -> AND .)
    MODULO          reduce using rule 47 (condicion_booleana -> AND .)
    SMALLER         reduce using rule 47 (condicion_booleana -> AND .)
    GREATER         reduce using rule 47 (condicion_booleana -> AND .)
    IS_SMALLER_OR_EQUAL reduce using rule 47 (condicion_booleana -> AND .)
    IS_GREATER_OR_EQUAL reduce using rule 47 (condicion_booleana -> AND .)
    AND             reduce using rule 47 (condicion_booleana -> AND .)
    OR              reduce using rule 47 (condicion_booleana -> AND .)
    XOR             reduce using rule 47 (condicion_booleana -> AND .)
    IS_EQUAL        reduce using rule 47 (condicion_booleana -> AND .)
    IS_NOT_EQUAL    reduce using rule 47 (condicion_booleana -> AND .)
    IS_IDENTICAL    reduce using rule 47 (condicion_booleana -> AND .)
    IS_NOT_IDENTICAL reduce using rule 47 (condicion_booleana -> AND .)
    BOOLEAN_NOT     reduce using rule 47 (condicion_booleana -> AND .)
    WHILE           reduce using rule 47 (condicion_booleana -> AND .)
    DO              reduce using rule 47 (condicion_booleana -> AND .)
    FOR             reduce using rule 47 (condicion_booleana -> AND .)
    FOREACH         reduce using rule 47 (condicion_booleana -> AND .)
    TRY             reduce using rule 47 (condicion_booleana -> AND .)
    LPAREN          reduce using rule 47 (condicion_booleana -> AND .)
    SWITCH          reduce using rule 47 (condicion_booleana -> AND .)
    GOTO            reduce using rule 47 (condicion_booleana -> AND .)
    FUNCTION        reduce using rule 47 (condicion_booleana -> AND .)
    PUBLIC          reduce using rule 47 (condicion_booleana -> AND .)
    PRIVATE         reduce using rule 47 (condicion_booleana -> AND .)
    PROTECTED       reduce using rule 47 (condicion_booleana -> AND .)
    STATIC          reduce using rule 47 (condicion_booleana -> AND .)
    IF              reduce using rule 47 (condicion_booleana -> AND .)
    BREAK           reduce using rule 47 (condicion_booleana -> AND .)


state 41

    (48) condicion_booleana -> OR .

    $end            reduce using rule 48 (condicion_booleana -> OR .)
    RBRACE          reduce using rule 48 (condicion_booleana -> OR .)
    ECHO            reduce using rule 48 (condicion_booleana -> OR .)
    PRINT           reduce using rule 48 (condicion_booleana -> OR .)
    VARIABLE        reduce using rule 48 (condicion_booleana -> OR .)
    DEFINE          reduce using rule 48 (condicion_booleana -> OR .)
    READLINE        reduce using rule 48 (condicion_booleana -> OR .)
    SUMA            reduce using rule 48 (condicion_booleana -> OR .)
    RESTA           reduce using rule 48 (condicion_booleana -> OR .)
    MULTIPLICACION  reduce using rule 48 (condicion_booleana -> OR .)
    DIVISION        reduce using rule 48 (condicion_booleana -> OR .)
    MODULO          reduce using rule 48 (condicion_booleana -> OR .)
    SMALLER         reduce using rule 48 (condicion_booleana -> OR .)
    GREATER         reduce using rule 48 (condicion_booleana -> OR .)
    IS_SMALLER_OR_EQUAL reduce using rule 48 (condicion_booleana -> OR .)
    IS_GREATER_OR_EQUAL reduce using rule 48 (condicion_booleana -> OR .)
    AND             reduce using rule 48 (condicion_booleana -> OR .)
    OR              reduce using rule 48 (condicion_booleana -> OR .)
    XOR             reduce using rule 48 (condicion_booleana -> OR .)
    IS_EQUAL        reduce using rule 48 (condicion_booleana -> OR .)
    IS_NOT_EQUAL    reduce using rule 48 (condicion_booleana -> OR .)
    IS_IDENTICAL    reduce using rule 48 (condicion_booleana -> OR .)
    IS_NOT_IDENTICAL reduce using rule 48 (condicion_booleana -> OR .)
    BOOLEAN_NOT     reduce using rule 48 (condicion_booleana -> OR .)
    WHILE           reduce using rule 48 (condicion_booleana -> OR .)
    DO              reduce using rule 48 (condicion_booleana -> OR .)
    FOR             reduce using rule 48 (condicion_booleana -> OR .)
    FOREACH         reduce using rule 48 (condicion_booleana -> OR .)
    TRY             reduce using rule 48 (condicion_booleana -> OR .)
    LPAREN          reduce using rule 48 (condicion_booleana -> OR .)
    SWITCH          reduce using rule 48 (condicion_booleana -> OR .)
    GOTO            reduce using rule 48 (condicion_booleana -> OR .)
    FUNCTION        reduce using rule 48 (condicion_booleana -> OR .)
    PUBLIC          reduce using rule 48 (condicion_booleana -> OR .)
    PRIVATE         reduce using rule 48 (condicion_booleana -> OR .)
    PROTECTED       reduce using rule 48 (condicion_booleana -> OR .)
    STATIC          reduce using rule 48 (condicion_booleana -> OR .)
    IF              reduce using rule 48 (condicion_booleana -> OR .)
    BREAK           reduce using rule 48 (condicion_booleana -> OR .)


state 42

    (49) condicion_booleana -> XOR .

    $end            reduce using rule 49 (condicion_booleana -> XOR .)
    RBRACE          reduce using rule 49 (condicion_booleana -> XOR .)
    ECHO            reduce using rule 49 (condicion_booleana -> XOR .)
    PRINT           reduce using rule 49 (condicion_booleana -> XOR .)
    VARIABLE        reduce using rule 49 (condicion_booleana -> XOR .)
    DEFINE          reduce using rule 49 (condicion_booleana -> XOR .)
    READLINE        reduce using rule 49 (condicion_booleana -> XOR .)
    SUMA            reduce using rule 49 (condicion_booleana -> XOR .)
    RESTA           reduce using rule 49 (condicion_booleana -> XOR .)
    MULTIPLICACION  reduce using rule 49 (condicion_booleana -> XOR .)
    DIVISION        reduce using rule 49 (condicion_booleana -> XOR .)
    MODULO          reduce using rule 49 (condicion_booleana -> XOR .)
    SMALLER         reduce using rule 49 (condicion_booleana -> XOR .)
    GREATER         reduce using rule 49 (condicion_booleana -> XOR .)
    IS_SMALLER_OR_EQUAL reduce using rule 49 (condicion_booleana -> XOR .)
    IS_GREATER_OR_EQUAL reduce using rule 49 (condicion_booleana -> XOR .)
    AND             reduce using rule 49 (condicion_booleana -> XOR .)
    OR              reduce using rule 49 (condicion_booleana -> XOR .)
    XOR             reduce using rule 49 (condicion_booleana -> XOR .)
    IS_EQUAL        reduce using rule 49 (condicion_booleana -> XOR .)
    IS_NOT_EQUAL    reduce using rule 49 (condicion_booleana -> XOR .)
    IS_IDENTICAL    reduce using rule 49 (condicion_booleana -> XOR .)
    IS_NOT_IDENTICAL reduce using rule 49 (condicion_booleana -> XOR .)
    BOOLEAN_NOT     reduce using rule 49 (condicion_booleana -> XOR .)
    WHILE           reduce using rule 49 (condicion_booleana -> XOR .)
    DO              reduce using rule 49 (condicion_booleana -> XOR .)
    FOR             reduce using rule 49 (condicion_booleana -> XOR .)
    FOREACH         reduce using rule 49 (condicion_booleana -> XOR .)
    TRY             reduce using rule 49 (condicion_booleana -> XOR .)
    LPAREN          reduce using rule 49 (condicion_booleana -> XOR .)
    SWITCH          reduce using rule 49 (condicion_booleana -> XOR .)
    GOTO            reduce using rule 49 (condicion_booleana -> XOR .)
    FUNCTION        reduce using rule 49 (condicion_booleana -> XOR .)
    PUBLIC          reduce using rule 49 (condicion_booleana -> XOR .)
    PRIVATE         reduce using rule 49 (condicion_booleana -> XOR .)
    PROTECTED       reduce using rule 49 (condicion_booleana -> XOR .)
    STATIC          reduce using rule 49 (condicion_booleana -> XOR .)
    IF              reduce using rule 49 (condicion_booleana -> XOR .)
    BREAK           reduce using rule 49 (condicion_booleana -> XOR .)


state 43

    (50) condicion_booleana -> IS_EQUAL .

    $end            reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    RBRACE          reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    ECHO            reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    PRINT           reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    VARIABLE        reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    DEFINE          reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    READLINE        reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    SUMA            reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    RESTA           reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    MULTIPLICACION  reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    DIVISION        reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    MODULO          reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    SMALLER         reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    GREATER         reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    IS_GREATER_OR_EQUAL reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    AND             reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    OR              reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    XOR             reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    IS_EQUAL        reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    IS_NOT_EQUAL    reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    IS_IDENTICAL    reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    IS_NOT_IDENTICAL reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    BOOLEAN_NOT     reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    WHILE           reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    DO              reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    FOR             reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    FOREACH         reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    TRY             reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    LPAREN          reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    SWITCH          reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    GOTO            reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    FUNCTION        reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    PUBLIC          reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    PRIVATE         reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    PROTECTED       reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    STATIC          reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    IF              reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    BREAK           reduce using rule 50 (condicion_booleana -> IS_EQUAL .)


state 44

    (51) condicion_booleana -> IS_NOT_EQUAL .

    $end            reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    RBRACE          reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    ECHO            reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    PRINT           reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    VARIABLE        reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    DEFINE          reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    READLINE        reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    SUMA            reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    RESTA           reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    MULTIPLICACION  reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    DIVISION        reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    MODULO          reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    SMALLER         reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    GREATER         reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_GREATER_OR_EQUAL reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    AND             reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    OR              reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    XOR             reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_EQUAL        reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_NOT_EQUAL    reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_IDENTICAL    reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_NOT_IDENTICAL reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    BOOLEAN_NOT     reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    WHILE           reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    DO              reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    FOR             reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    FOREACH         reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    TRY             reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    LPAREN          reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    SWITCH          reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    GOTO            reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    FUNCTION        reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    PUBLIC          reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    PRIVATE         reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    PROTECTED       reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    STATIC          reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    IF              reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    BREAK           reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)


state 45

    (52) condicion_booleana -> IS_IDENTICAL .

    $end            reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    RBRACE          reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    ECHO            reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    PRINT           reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    VARIABLE        reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    DEFINE          reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    READLINE        reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    SUMA            reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    RESTA           reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    MULTIPLICACION  reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    DIVISION        reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    MODULO          reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    SMALLER         reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    GREATER         reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    IS_GREATER_OR_EQUAL reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    AND             reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    OR              reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    XOR             reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    IS_EQUAL        reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    IS_NOT_EQUAL    reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    IS_IDENTICAL    reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    IS_NOT_IDENTICAL reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    BOOLEAN_NOT     reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    WHILE           reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    DO              reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    FOR             reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    FOREACH         reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    TRY             reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    LPAREN          reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    SWITCH          reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    GOTO            reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    FUNCTION        reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    PUBLIC          reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    PRIVATE         reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    PROTECTED       reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    STATIC          reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    IF              reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    BREAK           reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)


state 46

    (53) condicion_booleana -> IS_NOT_IDENTICAL .

    $end            reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    RBRACE          reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    ECHO            reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    PRINT           reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    VARIABLE        reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    DEFINE          reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    READLINE        reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    SUMA            reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    RESTA           reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    MULTIPLICACION  reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    DIVISION        reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    MODULO          reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    SMALLER         reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    GREATER         reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_GREATER_OR_EQUAL reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    AND             reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    OR              reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    XOR             reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_EQUAL        reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_NOT_EQUAL    reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_IDENTICAL    reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_NOT_IDENTICAL reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    BOOLEAN_NOT     reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    WHILE           reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    DO              reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    FOR             reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    FOREACH         reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    TRY             reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    LPAREN          reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    SWITCH          reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    GOTO            reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    FUNCTION        reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    PUBLIC          reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    PRIVATE         reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    PROTECTED       reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    STATIC          reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IF              reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    BREAK           reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)


state 47

    (54) condicion_booleana -> BOOLEAN_NOT .

    $end            reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    RBRACE          reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    ECHO            reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    PRINT           reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    VARIABLE        reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    DEFINE          reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    READLINE        reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    SUMA            reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    RESTA           reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    MULTIPLICACION  reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    DIVISION        reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    MODULO          reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    SMALLER         reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    GREATER         reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    IS_SMALLER_OR_EQUAL reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    IS_GREATER_OR_EQUAL reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    AND             reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    OR              reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    XOR             reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    IS_EQUAL        reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    IS_NOT_EQUAL    reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    IS_IDENTICAL    reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    IS_NOT_IDENTICAL reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    BOOLEAN_NOT     reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    WHILE           reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    DO              reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    FOR             reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    FOREACH         reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    TRY             reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    LPAREN          reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    SWITCH          reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    GOTO            reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    FUNCTION        reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    PUBLIC          reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    PRIVATE         reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    PROTECTED       reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    STATIC          reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    IF              reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    BREAK           reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)


state 48

    (87) bwhile -> WHILE . LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (88) bwhile -> WHILE . LPAREN condicion RPAREN COLON stc_bloque

    LPAREN          shift and go to state 80


state 49

    (89) bdo -> DO . LBRACE cuerpo RBRACE bwhile

    LBRACE          shift and go to state 81


state 50

    (93) bfor -> FOR . LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def

    LPAREN          shift and go to state 82


state 51

    (105) bforeach -> FOREACH . LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def

    LPAREN          shift and go to state 83


state 52

    (110) btry -> TRY . LBRACE stc_bloque_def RBRACE catches

    LBRACE          shift and go to state 84


state 53

    (43) condicion_ifelse -> condicion_if .
    (44) condicion_ifelse -> condicion_if . condicion_else
    (45) condicion_ifelse -> condicion_if . condicion_elseif
    (46) condicion_ifelse -> condicion_if . condicion_elseif condicion_else
    (42) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (41) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    $end            reduce using rule 43 (condicion_ifelse -> condicion_if .)
    RBRACE          reduce using rule 43 (condicion_ifelse -> condicion_if .)
    ECHO            reduce using rule 43 (condicion_ifelse -> condicion_if .)
    PRINT           reduce using rule 43 (condicion_ifelse -> condicion_if .)
    VARIABLE        reduce using rule 43 (condicion_ifelse -> condicion_if .)
    DEFINE          reduce using rule 43 (condicion_ifelse -> condicion_if .)
    READLINE        reduce using rule 43 (condicion_ifelse -> condicion_if .)
    SUMA            reduce using rule 43 (condicion_ifelse -> condicion_if .)
    RESTA           reduce using rule 43 (condicion_ifelse -> condicion_if .)
    MULTIPLICACION  reduce using rule 43 (condicion_ifelse -> condicion_if .)
    DIVISION        reduce using rule 43 (condicion_ifelse -> condicion_if .)
    MODULO          reduce using rule 43 (condicion_ifelse -> condicion_if .)
    SMALLER         reduce using rule 43 (condicion_ifelse -> condicion_if .)
    GREATER         reduce using rule 43 (condicion_ifelse -> condicion_if .)
    IS_SMALLER_OR_EQUAL reduce using rule 43 (condicion_ifelse -> condicion_if .)
    IS_GREATER_OR_EQUAL reduce using rule 43 (condicion_ifelse -> condicion_if .)
    AND             reduce using rule 43 (condicion_ifelse -> condicion_if .)
    OR              reduce using rule 43 (condicion_ifelse -> condicion_if .)
    XOR             reduce using rule 43 (condicion_ifelse -> condicion_if .)
    IS_EQUAL        reduce using rule 43 (condicion_ifelse -> condicion_if .)
    IS_NOT_EQUAL    reduce using rule 43 (condicion_ifelse -> condicion_if .)
    IS_IDENTICAL    reduce using rule 43 (condicion_ifelse -> condicion_if .)
    IS_NOT_IDENTICAL reduce using rule 43 (condicion_ifelse -> condicion_if .)
    BOOLEAN_NOT     reduce using rule 43 (condicion_ifelse -> condicion_if .)
    WHILE           reduce using rule 43 (condicion_ifelse -> condicion_if .)
    DO              reduce using rule 43 (condicion_ifelse -> condicion_if .)
    FOR             reduce using rule 43 (condicion_ifelse -> condicion_if .)
    FOREACH         reduce using rule 43 (condicion_ifelse -> condicion_if .)
    TRY             reduce using rule 43 (condicion_ifelse -> condicion_if .)
    LPAREN          reduce using rule 43 (condicion_ifelse -> condicion_if .)
    SWITCH          reduce using rule 43 (condicion_ifelse -> condicion_if .)
    GOTO            reduce using rule 43 (condicion_ifelse -> condicion_if .)
    FUNCTION        reduce using rule 43 (condicion_ifelse -> condicion_if .)
    PUBLIC          reduce using rule 43 (condicion_ifelse -> condicion_if .)
    PRIVATE         reduce using rule 43 (condicion_ifelse -> condicion_if .)
    PROTECTED       reduce using rule 43 (condicion_ifelse -> condicion_if .)
    STATIC          reduce using rule 43 (condicion_ifelse -> condicion_if .)
    IF              reduce using rule 43 (condicion_ifelse -> condicion_if .)
    BREAK           reduce using rule 43 (condicion_ifelse -> condicion_if .)
    ELSE            shift and go to state 87
    ELSEIF          shift and go to state 88

    condicion_else                 shift and go to state 85
    condicion_elseif               shift and go to state 86

state 54

    (90) bswitch -> SWITCH . LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE

    LPAREN          shift and go to state 89


state 55

    (114) bgoto -> GOTO . NOMBRE SEMI

    NOMBRE          shift and go to state 90


state 56

    (78) funcion_nparams -> FUNCTION . NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (81) funcion_opreturn -> FUNCTION . NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN stc_bloque_def
    (84) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (82) funcion_void -> FUNCTION . NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE

    NOMBRE          shift and go to state 91


state 57

    (65) proteccion -> PUBLIC .

    FUNCTION        reduce using rule 65 (proteccion -> PUBLIC .)


state 58

    (66) proteccion -> PRIVATE .

    FUNCTION        reduce using rule 66 (proteccion -> PRIVATE .)


state 59

    (67) proteccion -> PROTECTED .

    FUNCTION        reduce using rule 67 (proteccion -> PROTECTED .)


state 60

    (68) proteccion -> STATIC .

    FUNCTION        reduce using rule 68 (proteccion -> STATIC .)


state 61

    (40) condicion_if -> IF . LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    LPAREN          shift and go to state 92


state 62

    (21) imprimir -> ECHO valor . SEMI

    SEMI            shift and go to state 93


state 63

    (24) imprimir -> ECHO NOMBRE . LBRACKET ENTERO RBRACKET SEMI
    (28) valor -> NOMBRE .

    LBRACKET        shift and go to state 94
    SEMI            reduce using rule 28 (valor -> NOMBRE .)


state 64

    (29) numero -> ENTERO .

    SEMI            reduce using rule 29 (numero -> ENTERO .)
    SUMA            reduce using rule 29 (numero -> ENTERO .)
    RESTA           reduce using rule 29 (numero -> ENTERO .)
    MULTIPLICACION  reduce using rule 29 (numero -> ENTERO .)
    DIVISION        reduce using rule 29 (numero -> ENTERO .)
    MODULO          reduce using rule 29 (numero -> ENTERO .)
    RPAREN          reduce using rule 29 (numero -> ENTERO .)
    SMALLER         reduce using rule 29 (numero -> ENTERO .)
    GREATER         reduce using rule 29 (numero -> ENTERO .)
    IS_SMALLER_OR_EQUAL reduce using rule 29 (numero -> ENTERO .)
    IS_GREATER_OR_EQUAL reduce using rule 29 (numero -> ENTERO .)


state 65

    (25) valor -> numero .

    SEMI            reduce using rule 25 (valor -> numero .)
    SUMA            reduce using rule 25 (valor -> numero .)
    RESTA           reduce using rule 25 (valor -> numero .)
    MULTIPLICACION  reduce using rule 25 (valor -> numero .)
    DIVISION        reduce using rule 25 (valor -> numero .)
    MODULO          reduce using rule 25 (valor -> numero .)
    RPAREN          reduce using rule 25 (valor -> numero .)
    SMALLER         reduce using rule 25 (valor -> numero .)
    GREATER         reduce using rule 25 (valor -> numero .)
    IS_SMALLER_OR_EQUAL reduce using rule 25 (valor -> numero .)
    IS_GREATER_OR_EQUAL reduce using rule 25 (valor -> numero .)


state 66

    (26) valor -> VARIABLE .

    SEMI            reduce using rule 26 (valor -> VARIABLE .)
    SUMA            reduce using rule 26 (valor -> VARIABLE .)
    RESTA           reduce using rule 26 (valor -> VARIABLE .)
    MULTIPLICACION  reduce using rule 26 (valor -> VARIABLE .)
    DIVISION        reduce using rule 26 (valor -> VARIABLE .)
    MODULO          reduce using rule 26 (valor -> VARIABLE .)
    RPAREN          reduce using rule 26 (valor -> VARIABLE .)


state 67

    (27) valor -> STRING .

    SEMI            reduce using rule 27 (valor -> STRING .)
    SUMA            reduce using rule 27 (valor -> STRING .)
    RESTA           reduce using rule 27 (valor -> STRING .)
    MULTIPLICACION  reduce using rule 27 (valor -> STRING .)
    DIVISION        reduce using rule 27 (valor -> STRING .)
    MODULO          reduce using rule 27 (valor -> STRING .)
    RPAREN          reduce using rule 27 (valor -> STRING .)
    SMALLER         reduce using rule 27 (valor -> STRING .)
    GREATER         reduce using rule 27 (valor -> STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 27 (valor -> STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 27 (valor -> STRING .)


state 68

    (30) numero -> DECIMAL .

    SEMI            reduce using rule 30 (numero -> DECIMAL .)
    SUMA            reduce using rule 30 (numero -> DECIMAL .)
    RESTA           reduce using rule 30 (numero -> DECIMAL .)
    MULTIPLICACION  reduce using rule 30 (numero -> DECIMAL .)
    DIVISION        reduce using rule 30 (numero -> DECIMAL .)
    MODULO          reduce using rule 30 (numero -> DECIMAL .)
    RPAREN          reduce using rule 30 (numero -> DECIMAL .)
    SMALLER         reduce using rule 30 (numero -> DECIMAL .)
    GREATER         reduce using rule 30 (numero -> DECIMAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 30 (numero -> DECIMAL .)
    IS_GREATER_OR_EQUAL reduce using rule 30 (numero -> DECIMAL .)


state 69

    (22) imprimir -> PRINT valor . SEMI

    SEMI            shift and go to state 95


state 70

    (23) imprimir -> PRINT LPAREN . valor RPAREN SEMI
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 66
    STRING          shift and go to state 67
    NOMBRE          shift and go to state 71
    ENTERO          shift and go to state 64
    DECIMAL         shift and go to state 68

    valor                          shift and go to state 96
    numero                         shift and go to state 65

state 71

    (28) valor -> NOMBRE .

    SEMI            reduce using rule 28 (valor -> NOMBRE .)
    SUMA            reduce using rule 28 (valor -> NOMBRE .)
    RESTA           reduce using rule 28 (valor -> NOMBRE .)
    MULTIPLICACION  reduce using rule 28 (valor -> NOMBRE .)
    DIVISION        reduce using rule 28 (valor -> NOMBRE .)
    MODULO          reduce using rule 28 (valor -> NOMBRE .)
    RPAREN          reduce using rule 28 (valor -> NOMBRE .)
    SMALLER         reduce using rule 28 (valor -> NOMBRE .)
    GREATER         reduce using rule 28 (valor -> NOMBRE .)
    IS_SMALLER_OR_EQUAL reduce using rule 28 (valor -> NOMBRE .)
    IS_GREATER_OR_EQUAL reduce using rule 28 (valor -> NOMBRE .)


state 72

    (57) operaciones_mat_par -> LPAREN valor . operadores valor RPAREN
    (58) operaciones_mat_par -> LPAREN valor . operadores operaciones_mat_par RPAREN
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO

    SUMA            shift and go to state 31
    RESTA           shift and go to state 32
    MULTIPLICACION  shift and go to state 33
    DIVISION        shift and go to state 34
    MODULO          shift and go to state 35

    operadores                     shift and go to state 97

state 73

    (59) asignacion -> VARIABLE EQUALS . valor SEMI
    (60) asignacion_array -> VARIABLE EQUALS . array_def SEMI
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (106) array_def -> . ARRAY LPAREN RPAREN
    (107) array_def -> . ARRAY LPAREN array_elmnt RPAREN
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 66
    STRING          shift and go to state 67
    NOMBRE          shift and go to state 71
    ARRAY           shift and go to state 100
    ENTERO          shift and go to state 64
    DECIMAL         shift and go to state 68

    valor                          shift and go to state 98
    array_def                      shift and go to state 99
    numero                         shift and go to state 65

state 74

    (70) funciones -> proteccion funcion_nparams .

    $end            reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    RBRACE          reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    ECHO            reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    PRINT           reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    VARIABLE        reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    DEFINE          reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    READLINE        reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    SUMA            reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    RESTA           reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    MULTIPLICACION  reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    DIVISION        reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    MODULO          reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    SMALLER         reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    GREATER         reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    IS_SMALLER_OR_EQUAL reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    IS_GREATER_OR_EQUAL reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    AND             reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    OR              reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    XOR             reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    IS_EQUAL        reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    IS_NOT_EQUAL    reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    IS_IDENTICAL    reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    IS_NOT_IDENTICAL reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    BOOLEAN_NOT     reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    WHILE           reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    DO              reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    FOR             reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    FOREACH         reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    TRY             reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    LPAREN          reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    SWITCH          reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    GOTO            reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    FUNCTION        reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    PUBLIC          reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    PRIVATE         reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    PROTECTED       reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    STATIC          reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    IF              reduce using rule 70 (funciones -> proteccion funcion_nparams .)
    BREAK           reduce using rule 70 (funciones -> proteccion funcion_nparams .)


state 75

    (72) funciones -> proteccion funcion_opreturn .

    $end            reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    RBRACE          reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    ECHO            reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    PRINT           reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    VARIABLE        reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    DEFINE          reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    READLINE        reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    SUMA            reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    RESTA           reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    MULTIPLICACION  reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    DIVISION        reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    MODULO          reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    SMALLER         reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    GREATER         reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    IS_SMALLER_OR_EQUAL reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    IS_GREATER_OR_EQUAL reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    AND             reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    OR              reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    XOR             reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    IS_EQUAL        reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    IS_NOT_EQUAL    reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    IS_IDENTICAL    reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    IS_NOT_IDENTICAL reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    BOOLEAN_NOT     reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    WHILE           reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    DO              reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    FOR             reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    FOREACH         reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    TRY             reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    LPAREN          reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    SWITCH          reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    GOTO            reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    FUNCTION        reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    PUBLIC          reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    PRIVATE         reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    PROTECTED       reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    STATIC          reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    IF              reduce using rule 72 (funciones -> proteccion funcion_opreturn .)
    BREAK           reduce using rule 72 (funciones -> proteccion funcion_opreturn .)


state 76

    (74) funciones -> proteccion funcion_blank .

    $end            reduce using rule 74 (funciones -> proteccion funcion_blank .)
    RBRACE          reduce using rule 74 (funciones -> proteccion funcion_blank .)
    ECHO            reduce using rule 74 (funciones -> proteccion funcion_blank .)
    PRINT           reduce using rule 74 (funciones -> proteccion funcion_blank .)
    VARIABLE        reduce using rule 74 (funciones -> proteccion funcion_blank .)
    DEFINE          reduce using rule 74 (funciones -> proteccion funcion_blank .)
    READLINE        reduce using rule 74 (funciones -> proteccion funcion_blank .)
    SUMA            reduce using rule 74 (funciones -> proteccion funcion_blank .)
    RESTA           reduce using rule 74 (funciones -> proteccion funcion_blank .)
    MULTIPLICACION  reduce using rule 74 (funciones -> proteccion funcion_blank .)
    DIVISION        reduce using rule 74 (funciones -> proteccion funcion_blank .)
    MODULO          reduce using rule 74 (funciones -> proteccion funcion_blank .)
    SMALLER         reduce using rule 74 (funciones -> proteccion funcion_blank .)
    GREATER         reduce using rule 74 (funciones -> proteccion funcion_blank .)
    IS_SMALLER_OR_EQUAL reduce using rule 74 (funciones -> proteccion funcion_blank .)
    IS_GREATER_OR_EQUAL reduce using rule 74 (funciones -> proteccion funcion_blank .)
    AND             reduce using rule 74 (funciones -> proteccion funcion_blank .)
    OR              reduce using rule 74 (funciones -> proteccion funcion_blank .)
    XOR             reduce using rule 74 (funciones -> proteccion funcion_blank .)
    IS_EQUAL        reduce using rule 74 (funciones -> proteccion funcion_blank .)
    IS_NOT_EQUAL    reduce using rule 74 (funciones -> proteccion funcion_blank .)
    IS_IDENTICAL    reduce using rule 74 (funciones -> proteccion funcion_blank .)
    IS_NOT_IDENTICAL reduce using rule 74 (funciones -> proteccion funcion_blank .)
    BOOLEAN_NOT     reduce using rule 74 (funciones -> proteccion funcion_blank .)
    WHILE           reduce using rule 74 (funciones -> proteccion funcion_blank .)
    DO              reduce using rule 74 (funciones -> proteccion funcion_blank .)
    FOR             reduce using rule 74 (funciones -> proteccion funcion_blank .)
    FOREACH         reduce using rule 74 (funciones -> proteccion funcion_blank .)
    TRY             reduce using rule 74 (funciones -> proteccion funcion_blank .)
    LPAREN          reduce using rule 74 (funciones -> proteccion funcion_blank .)
    SWITCH          reduce using rule 74 (funciones -> proteccion funcion_blank .)
    GOTO            reduce using rule 74 (funciones -> proteccion funcion_blank .)
    FUNCTION        reduce using rule 74 (funciones -> proteccion funcion_blank .)
    PUBLIC          reduce using rule 74 (funciones -> proteccion funcion_blank .)
    PRIVATE         reduce using rule 74 (funciones -> proteccion funcion_blank .)
    PROTECTED       reduce using rule 74 (funciones -> proteccion funcion_blank .)
    STATIC          reduce using rule 74 (funciones -> proteccion funcion_blank .)
    IF              reduce using rule 74 (funciones -> proteccion funcion_blank .)
    BREAK           reduce using rule 74 (funciones -> proteccion funcion_blank .)


state 77

    (78) funcion_nparams -> FUNCTION . NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (81) funcion_opreturn -> FUNCTION . NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN stc_bloque_def
    (84) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN LBRACE empty RBRACE

    NOMBRE          shift and go to state 101


state 78

    (61) constante -> DEFINE LPAREN . STRING COMMA valor RPAREN SEMI
    (62) constante -> DEFINE LPAREN . NOMBRE COMMA ARRAY RPAREN SEMI

    STRING          shift and go to state 102
    NOMBRE          shift and go to state 103


state 79

    (63) lectura -> READLINE LPAREN . STRING RPAREN SEMI
    (64) lectura -> READLINE LPAREN . RPAREN SEMI

    STRING          shift and go to state 104
    RPAREN          shift and go to state 105


state 80

    (87) bwhile -> WHILE LPAREN . condicion RPAREN LBRACE stc_bloque RBRACE
    (88) bwhile -> WHILE LPAREN . condicion RPAREN COLON stc_bloque
    (85) condicion -> . VARIABLE operador_logico VARIABLE
    (86) condicion -> . valor operador_logico valor
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 107
    STRING          shift and go to state 67
    NOMBRE          shift and go to state 71
    ENTERO          shift and go to state 64
    DECIMAL         shift and go to state 68

    condicion                      shift and go to state 106
    valor                          shift and go to state 108
    numero                         shift and go to state 65

state 81

    (89) bdo -> DO LBRACE . cuerpo RBRACE bwhile
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat_par
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (21) imprimir -> . ECHO valor SEMI
    (22) imprimir -> . PRINT valor SEMI
    (23) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (24) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (69) funciones -> . funcion_nparams
    (70) funciones -> . proteccion funcion_nparams
    (71) funciones -> . funcion_opreturn
    (72) funciones -> . proteccion funcion_opreturn
    (73) funciones -> . funcion_blank
    (74) funciones -> . proteccion funcion_blank
    (75) funciones -> . funcion_void
    (61) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (62) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (63) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (64) lectura -> . READLINE LPAREN RPAREN SEMI
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL
    (47) condicion_booleana -> . AND
    (48) condicion_booleana -> . OR
    (49) condicion_booleana -> . XOR
    (50) condicion_booleana -> . IS_EQUAL
    (51) condicion_booleana -> . IS_NOT_EQUAL
    (52) condicion_booleana -> . IS_IDENTICAL
    (53) condicion_booleana -> . IS_NOT_IDENTICAL
    (54) condicion_booleana -> . BOOLEAN_NOT
    (87) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (88) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (89) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (93) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (105) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (110) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (43) condicion_ifelse -> . condicion_if
    (44) condicion_ifelse -> . condicion_if condicion_else
    (45) condicion_ifelse -> . condicion_if condicion_elseif
    (46) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (90) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (114) bgoto -> . GOTO NOMBRE SEMI
    (78) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (65) proteccion -> . PUBLIC
    (66) proteccion -> . PRIVATE
    (67) proteccion -> . PROTECTED
    (68) proteccion -> . STATIC
    (81) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (84) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (82) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (40) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    VARIABLE        shift and go to state 23
    DEFINE          shift and go to state 29
    READLINE        shift and go to state 30
    SUMA            shift and go to state 31
    RESTA           shift and go to state 32
    MULTIPLICACION  shift and go to state 33
    DIVISION        shift and go to state 34
    MODULO          shift and go to state 35
    SMALLER         shift and go to state 36
    GREATER         shift and go to state 37
    IS_SMALLER_OR_EQUAL shift and go to state 38
    IS_GREATER_OR_EQUAL shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    XOR             shift and go to state 42
    IS_EQUAL        shift and go to state 43
    IS_NOT_EQUAL    shift and go to state 44
    IS_IDENTICAL    shift and go to state 45
    IS_NOT_IDENTICAL shift and go to state 46
    BOOLEAN_NOT     shift and go to state 47
    WHILE           shift and go to state 48
    DO              shift and go to state 49
    FOR             shift and go to state 50
    FOREACH         shift and go to state 51
    TRY             shift and go to state 52
    LPAREN          shift and go to state 22
    SWITCH          shift and go to state 54
    GOTO            shift and go to state 55
    FUNCTION        shift and go to state 56
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60
    IF              shift and go to state 61

    cuerpo                         shift and go to state 109
    bwhile                         shift and go to state 11
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat_par            shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    funcion_nparams                shift and go to state 24
    proteccion                     shift and go to state 25
    funcion_opreturn               shift and go to state 26
    funcion_blank                  shift and go to state 27
    funcion_void                   shift and go to state 28
    condicion_if                   shift and go to state 53

state 82

    (93) bfor -> FOR LPAREN . asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (59) asignacion -> . VARIABLE EQUALS valor SEMI

    VARIABLE        shift and go to state 111

    asignacion                     shift and go to state 110

state 83

    (105) bforeach -> FOREACH LPAREN . VARIABLE AS VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 112


state 84

    (110) btry -> TRY LBRACE . stc_bloque_def RBRACE catches
    (98) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 113

    stc_bloque_def                 shift and go to state 114

state 85

    (44) condicion_ifelse -> condicion_if condicion_else .

    $end            reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    RBRACE          reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    ECHO            reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    PRINT           reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    VARIABLE        reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    DEFINE          reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    READLINE        reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    SUMA            reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    RESTA           reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    MULTIPLICACION  reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    DIVISION        reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    MODULO          reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    SMALLER         reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    GREATER         reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    IS_SMALLER_OR_EQUAL reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    IS_GREATER_OR_EQUAL reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    AND             reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    OR              reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    XOR             reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    IS_EQUAL        reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    IS_NOT_EQUAL    reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    IS_IDENTICAL    reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    IS_NOT_IDENTICAL reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    BOOLEAN_NOT     reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    WHILE           reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    DO              reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    FOR             reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    FOREACH         reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    TRY             reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    LPAREN          reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    SWITCH          reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    GOTO            reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    FUNCTION        reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    PUBLIC          reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    PRIVATE         reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    PROTECTED       reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    STATIC          reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    IF              reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    BREAK           reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)


state 86

    (45) condicion_ifelse -> condicion_if condicion_elseif .
    (46) condicion_ifelse -> condicion_if condicion_elseif . condicion_else
    (42) condicion_else -> . ELSE LBRACE cuerpo RBRACE

    $end            reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    RBRACE          reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    ECHO            reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    PRINT           reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    VARIABLE        reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    DEFINE          reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    READLINE        reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    SUMA            reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    RESTA           reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    MULTIPLICACION  reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    DIVISION        reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    MODULO          reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    SMALLER         reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    GREATER         reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    IS_SMALLER_OR_EQUAL reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    IS_GREATER_OR_EQUAL reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    AND             reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    OR              reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    XOR             reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    IS_EQUAL        reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    IS_NOT_EQUAL    reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    IS_IDENTICAL    reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    IS_NOT_IDENTICAL reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    BOOLEAN_NOT     reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    WHILE           reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    DO              reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    FOR             reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    FOREACH         reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    TRY             reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    LPAREN          reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    SWITCH          reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    GOTO            reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    FUNCTION        reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    PUBLIC          reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    PRIVATE         reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    PROTECTED       reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    STATIC          reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    IF              reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    BREAK           reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    ELSE            shift and go to state 87

    condicion_else                 shift and go to state 115

state 87

    (42) condicion_else -> ELSE . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 116


state 88

    (41) condicion_elseif -> ELSEIF . LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    LPAREN          shift and go to state 117


state 89

    (90) bswitch -> SWITCH LPAREN . VARIABLE RPAREN LBRACE innerSwitch RBRACE

    VARIABLE        shift and go to state 118


state 90

    (114) bgoto -> GOTO NOMBRE . SEMI

    SEMI            shift and go to state 119


state 91

    (78) funcion_nparams -> FUNCTION NOMBRE . LPAREN params_list RPAREN stc_bloque_def
    (81) funcion_opreturn -> FUNCTION NOMBRE . LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN stc_bloque_def
    (84) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN LBRACE empty RBRACE
    (82) funcion_void -> FUNCTION NOMBRE . LPAREN RPAREN COLON VOID LBRACE empty RBRACE

    LPAREN          shift and go to state 120


state 92

    (40) condicion_if -> IF LPAREN . condicion RPAREN LBRACE cuerpo RBRACE
    (85) condicion -> . VARIABLE operador_logico VARIABLE
    (86) condicion -> . valor operador_logico valor
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 107
    STRING          shift and go to state 67
    NOMBRE          shift and go to state 71
    ENTERO          shift and go to state 64
    DECIMAL         shift and go to state 68

    condicion                      shift and go to state 121
    valor                          shift and go to state 108
    numero                         shift and go to state 65

state 93

    (21) imprimir -> ECHO valor SEMI .

    $end            reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    RBRACE          reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    ECHO            reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    PRINT           reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    VARIABLE        reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    DEFINE          reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    READLINE        reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    SUMA            reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    RESTA           reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    MULTIPLICACION  reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    DIVISION        reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    MODULO          reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    SMALLER         reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    GREATER         reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    AND             reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    OR              reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    XOR             reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    IS_EQUAL        reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    IS_NOT_EQUAL    reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    IS_IDENTICAL    reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    IS_NOT_IDENTICAL reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    BOOLEAN_NOT     reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    WHILE           reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    DO              reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    FOR             reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    FOREACH         reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    TRY             reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    LPAREN          reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    SWITCH          reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    GOTO            reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    FUNCTION        reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    PUBLIC          reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    PRIVATE         reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    PROTECTED       reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    STATIC          reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    IF              reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    BREAK           reduce using rule 21 (imprimir -> ECHO valor SEMI .)


state 94

    (24) imprimir -> ECHO NOMBRE LBRACKET . ENTERO RBRACKET SEMI

    ENTERO          shift and go to state 122


state 95

    (22) imprimir -> PRINT valor SEMI .

    $end            reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    RBRACE          reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    ECHO            reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    PRINT           reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    VARIABLE        reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    DEFINE          reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    READLINE        reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    SUMA            reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    RESTA           reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    MULTIPLICACION  reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    DIVISION        reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    MODULO          reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    SMALLER         reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    GREATER         reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    AND             reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    OR              reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    XOR             reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    IS_EQUAL        reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    IS_NOT_EQUAL    reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    IS_IDENTICAL    reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    IS_NOT_IDENTICAL reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    BOOLEAN_NOT     reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    WHILE           reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    DO              reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    FOR             reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    FOREACH         reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    TRY             reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    LPAREN          reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    SWITCH          reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    GOTO            reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    FUNCTION        reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    PUBLIC          reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    PRIVATE         reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    PROTECTED       reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    STATIC          reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    IF              reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    BREAK           reduce using rule 22 (imprimir -> PRINT valor SEMI .)


state 96

    (23) imprimir -> PRINT LPAREN valor . RPAREN SEMI

    RPAREN          shift and go to state 123


state 97

    (57) operaciones_mat_par -> LPAREN valor operadores . valor RPAREN
    (58) operaciones_mat_par -> LPAREN valor operadores . operaciones_mat_par RPAREN
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 66
    STRING          shift and go to state 67
    NOMBRE          shift and go to state 71
    LPAREN          shift and go to state 22
    ENTERO          shift and go to state 64
    DECIMAL         shift and go to state 68

    valor                          shift and go to state 124
    operaciones_mat_par            shift and go to state 125
    numero                         shift and go to state 65

state 98

    (59) asignacion -> VARIABLE EQUALS valor . SEMI

    SEMI            shift and go to state 126


state 99

    (60) asignacion_array -> VARIABLE EQUALS array_def . SEMI

    SEMI            shift and go to state 127


state 100

    (106) array_def -> ARRAY . LPAREN RPAREN
    (107) array_def -> ARRAY . LPAREN array_elmnt RPAREN

    LPAREN          shift and go to state 128


state 101

    (78) funcion_nparams -> FUNCTION NOMBRE . LPAREN params_list RPAREN stc_bloque_def
    (81) funcion_opreturn -> FUNCTION NOMBRE . LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN stc_bloque_def
    (84) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN LBRACE empty RBRACE

    LPAREN          shift and go to state 129


state 102

    (61) constante -> DEFINE LPAREN STRING . COMMA valor RPAREN SEMI

    COMMA           shift and go to state 130


state 103

    (62) constante -> DEFINE LPAREN NOMBRE . COMMA ARRAY RPAREN SEMI

    COMMA           shift and go to state 131


state 104

    (63) lectura -> READLINE LPAREN STRING . RPAREN SEMI

    RPAREN          shift and go to state 132


state 105

    (64) lectura -> READLINE LPAREN RPAREN . SEMI

    SEMI            shift and go to state 133


state 106

    (87) bwhile -> WHILE LPAREN condicion . RPAREN LBRACE stc_bloque RBRACE
    (88) bwhile -> WHILE LPAREN condicion . RPAREN COLON stc_bloque

    RPAREN          shift and go to state 134


state 107

    (85) condicion -> VARIABLE . operador_logico VARIABLE
    (26) valor -> VARIABLE .
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL

  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for IS_SMALLER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for IS_GREATER_OR_EQUAL resolved as shift
    SMALLER         shift and go to state 36
    GREATER         shift and go to state 37
    IS_SMALLER_OR_EQUAL shift and go to state 38
    IS_GREATER_OR_EQUAL shift and go to state 39

  ! SMALLER         [ reduce using rule 26 (valor -> VARIABLE .) ]
  ! GREATER         [ reduce using rule 26 (valor -> VARIABLE .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 26 (valor -> VARIABLE .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 26 (valor -> VARIABLE .) ]

    operador_logico                shift and go to state 135

state 108

    (86) condicion -> valor . operador_logico valor
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL

    SMALLER         shift and go to state 36
    GREATER         shift and go to state 37
    IS_SMALLER_OR_EQUAL shift and go to state 38
    IS_GREATER_OR_EQUAL shift and go to state 39

    operador_logico                shift and go to state 136

state 109

    (89) bdo -> DO LBRACE cuerpo . RBRACE bwhile

    RBRACE          shift and go to state 137


state 110

    (93) bfor -> FOR LPAREN asignacion . SEMI condicion SEMI for_incr RPAREN stc_bloque_def

    SEMI            shift and go to state 138


state 111

    (59) asignacion -> VARIABLE . EQUALS valor SEMI

    EQUALS          shift and go to state 139


state 112

    (105) bforeach -> FOREACH LPAREN VARIABLE . AS VARIABLE RPAREN stc_bloque_def

    AS              shift and go to state 140


state 113

    (98) stc_bloque_def -> LBRACE . stc_bloque RBRACE
    (94) stc_bloque -> . stc_bloque cuerpo
    (95) stc_bloque -> . empty
    (96) stc_bloque -> . RETURN
    (97) stc_bloque -> . RETURN NULL
    (113) empty -> .

    RETURN          shift and go to state 143
    RBRACE          reduce using rule 113 (empty -> .)
    ECHO            reduce using rule 113 (empty -> .)
    PRINT           reduce using rule 113 (empty -> .)
    VARIABLE        reduce using rule 113 (empty -> .)
    DEFINE          reduce using rule 113 (empty -> .)
    READLINE        reduce using rule 113 (empty -> .)
    SUMA            reduce using rule 113 (empty -> .)
    RESTA           reduce using rule 113 (empty -> .)
    MULTIPLICACION  reduce using rule 113 (empty -> .)
    DIVISION        reduce using rule 113 (empty -> .)
    MODULO          reduce using rule 113 (empty -> .)
    SMALLER         reduce using rule 113 (empty -> .)
    GREATER         reduce using rule 113 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 113 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    XOR             reduce using rule 113 (empty -> .)
    IS_EQUAL        reduce using rule 113 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 113 (empty -> .)
    IS_IDENTICAL    reduce using rule 113 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 113 (empty -> .)
    BOOLEAN_NOT     reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    DO              reduce using rule 113 (empty -> .)
    FOR             reduce using rule 113 (empty -> .)
    FOREACH         reduce using rule 113 (empty -> .)
    TRY             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    SWITCH          reduce using rule 113 (empty -> .)
    GOTO            reduce using rule 113 (empty -> .)
    FUNCTION        reduce using rule 113 (empty -> .)
    PUBLIC          reduce using rule 113 (empty -> .)
    PRIVATE         reduce using rule 113 (empty -> .)
    PROTECTED       reduce using rule 113 (empty -> .)
    STATIC          reduce using rule 113 (empty -> .)
    IF              reduce using rule 113 (empty -> .)

    stc_bloque                     shift and go to state 141
    empty                          shift and go to state 142

state 114

    (110) btry -> TRY LBRACE stc_bloque_def . RBRACE catches

    RBRACE          shift and go to state 144


state 115

    (46) condicion_ifelse -> condicion_if condicion_elseif condicion_else .

    $end            reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    RBRACE          reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    ECHO            reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    PRINT           reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    VARIABLE        reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    DEFINE          reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    READLINE        reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    SUMA            reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    RESTA           reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    MULTIPLICACION  reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    DIVISION        reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    MODULO          reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    SMALLER         reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    GREATER         reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IS_SMALLER_OR_EQUAL reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IS_GREATER_OR_EQUAL reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    AND             reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    OR              reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    XOR             reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IS_EQUAL        reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IS_NOT_EQUAL    reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IS_IDENTICAL    reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IS_NOT_IDENTICAL reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    BOOLEAN_NOT     reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    WHILE           reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    DO              reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    FOR             reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    FOREACH         reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    TRY             reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    LPAREN          reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    SWITCH          reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    GOTO            reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    FUNCTION        reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    PUBLIC          reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    PRIVATE         reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    PROTECTED       reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    STATIC          reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IF              reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    BREAK           reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)


state 116

    (42) condicion_else -> ELSE LBRACE . cuerpo RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat_par
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (21) imprimir -> . ECHO valor SEMI
    (22) imprimir -> . PRINT valor SEMI
    (23) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (24) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (69) funciones -> . funcion_nparams
    (70) funciones -> . proteccion funcion_nparams
    (71) funciones -> . funcion_opreturn
    (72) funciones -> . proteccion funcion_opreturn
    (73) funciones -> . funcion_blank
    (74) funciones -> . proteccion funcion_blank
    (75) funciones -> . funcion_void
    (61) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (62) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (63) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (64) lectura -> . READLINE LPAREN RPAREN SEMI
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL
    (47) condicion_booleana -> . AND
    (48) condicion_booleana -> . OR
    (49) condicion_booleana -> . XOR
    (50) condicion_booleana -> . IS_EQUAL
    (51) condicion_booleana -> . IS_NOT_EQUAL
    (52) condicion_booleana -> . IS_IDENTICAL
    (53) condicion_booleana -> . IS_NOT_IDENTICAL
    (54) condicion_booleana -> . BOOLEAN_NOT
    (87) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (88) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (89) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (93) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (105) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (110) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (43) condicion_ifelse -> . condicion_if
    (44) condicion_ifelse -> . condicion_if condicion_else
    (45) condicion_ifelse -> . condicion_if condicion_elseif
    (46) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (90) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (114) bgoto -> . GOTO NOMBRE SEMI
    (78) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (65) proteccion -> . PUBLIC
    (66) proteccion -> . PRIVATE
    (67) proteccion -> . PROTECTED
    (68) proteccion -> . STATIC
    (81) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (84) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (82) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (40) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    VARIABLE        shift and go to state 23
    DEFINE          shift and go to state 29
    READLINE        shift and go to state 30
    SUMA            shift and go to state 31
    RESTA           shift and go to state 32
    MULTIPLICACION  shift and go to state 33
    DIVISION        shift and go to state 34
    MODULO          shift and go to state 35
    SMALLER         shift and go to state 36
    GREATER         shift and go to state 37
    IS_SMALLER_OR_EQUAL shift and go to state 38
    IS_GREATER_OR_EQUAL shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    XOR             shift and go to state 42
    IS_EQUAL        shift and go to state 43
    IS_NOT_EQUAL    shift and go to state 44
    IS_IDENTICAL    shift and go to state 45
    IS_NOT_IDENTICAL shift and go to state 46
    BOOLEAN_NOT     shift and go to state 47
    WHILE           shift and go to state 48
    DO              shift and go to state 49
    FOR             shift and go to state 50
    FOREACH         shift and go to state 51
    TRY             shift and go to state 52
    LPAREN          shift and go to state 22
    SWITCH          shift and go to state 54
    GOTO            shift and go to state 55
    FUNCTION        shift and go to state 56
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60
    IF              shift and go to state 61

    cuerpo                         shift and go to state 145
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat_par            shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    funcion_nparams                shift and go to state 24
    proteccion                     shift and go to state 25
    funcion_opreturn               shift and go to state 26
    funcion_blank                  shift and go to state 27
    funcion_void                   shift and go to state 28
    condicion_if                   shift and go to state 53

state 117

    (41) condicion_elseif -> ELSEIF LPAREN . condicion RPAREN LBRACE cuerpo RBRACE
    (85) condicion -> . VARIABLE operador_logico VARIABLE
    (86) condicion -> . valor operador_logico valor
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 107
    STRING          shift and go to state 67
    NOMBRE          shift and go to state 71
    ENTERO          shift and go to state 64
    DECIMAL         shift and go to state 68

    condicion                      shift and go to state 146
    valor                          shift and go to state 108
    numero                         shift and go to state 65

state 118

    (90) bswitch -> SWITCH LPAREN VARIABLE . RPAREN LBRACE innerSwitch RBRACE

    RPAREN          shift and go to state 147


state 119

    (114) bgoto -> GOTO NOMBRE SEMI .

    $end            reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    RBRACE          reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    ECHO            reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    PRINT           reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    VARIABLE        reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    DEFINE          reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    READLINE        reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    SUMA            reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    RESTA           reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    MULTIPLICACION  reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    DIVISION        reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    MODULO          reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    SMALLER         reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    GREATER         reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    AND             reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    OR              reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    XOR             reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    IS_EQUAL        reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    IS_NOT_EQUAL    reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    IS_IDENTICAL    reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    IS_NOT_IDENTICAL reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    BOOLEAN_NOT     reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    WHILE           reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    DO              reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    FOR             reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    FOREACH         reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    TRY             reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    LPAREN          reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    SWITCH          reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    GOTO            reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    FUNCTION        reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    PUBLIC          reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    PRIVATE         reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    PROTECTED       reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    STATIC          reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    IF              reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)
    BREAK           reduce using rule 114 (bgoto -> GOTO NOMBRE SEMI .)


state 120

    (78) funcion_nparams -> FUNCTION NOMBRE LPAREN . params_list RPAREN stc_bloque_def
    (81) funcion_opreturn -> FUNCTION NOMBRE LPAREN . params_list RPAREN stc_bloque_def
    (83) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN stc_bloque_def
    (84) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN LBRACE empty RBRACE
    (82) funcion_void -> FUNCTION NOMBRE LPAREN . RPAREN COLON VOID LBRACE empty RBRACE
    (79) params_list -> . params_list COMMA param
    (80) params_list -> . param
    (76) param -> . VARIABLE
    (77) param -> . asignacion
    (59) asignacion -> . VARIABLE EQUALS valor SEMI

    RPAREN          shift and go to state 149
    VARIABLE        shift and go to state 151

    params_list                    shift and go to state 148
    param                          shift and go to state 150
    asignacion                     shift and go to state 152

state 121

    (40) condicion_if -> IF LPAREN condicion . RPAREN LBRACE cuerpo RBRACE

    RPAREN          shift and go to state 153


state 122

    (24) imprimir -> ECHO NOMBRE LBRACKET ENTERO . RBRACKET SEMI

    RBRACKET        shift and go to state 154


state 123

    (23) imprimir -> PRINT LPAREN valor RPAREN . SEMI

    SEMI            shift and go to state 155


state 124

    (57) operaciones_mat_par -> LPAREN valor operadores valor . RPAREN

    RPAREN          shift and go to state 156


state 125

    (58) operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par . RPAREN

    RPAREN          shift and go to state 157


state 126

    (59) asignacion -> VARIABLE EQUALS valor SEMI .

    $end            reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    RBRACE          reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    SEMI            reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    RPAREN          reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    COMMA           reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    ECHO            reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    PRINT           reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    VARIABLE        reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    DEFINE          reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    READLINE        reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    SUMA            reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    RESTA           reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    MULTIPLICACION  reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    DIVISION        reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    MODULO          reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    SMALLER         reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    GREATER         reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    AND             reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    OR              reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    XOR             reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_EQUAL        reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_NOT_EQUAL    reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_IDENTICAL    reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_NOT_IDENTICAL reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    BOOLEAN_NOT     reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    WHILE           reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    DO              reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    FOR             reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    FOREACH         reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    TRY             reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    LPAREN          reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    SWITCH          reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    GOTO            reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    FUNCTION        reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    PUBLIC          reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    PRIVATE         reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    PROTECTED       reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    STATIC          reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IF              reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    BREAK           reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)


state 127

    (60) asignacion_array -> VARIABLE EQUALS array_def SEMI .

    $end            reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    RBRACE          reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    ECHO            reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    PRINT           reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    VARIABLE        reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    DEFINE          reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    READLINE        reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    SUMA            reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    RESTA           reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    MULTIPLICACION  reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    DIVISION        reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    MODULO          reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    SMALLER         reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    GREATER         reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    AND             reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    OR              reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    XOR             reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_EQUAL        reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_NOT_EQUAL    reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_IDENTICAL    reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_NOT_IDENTICAL reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    BOOLEAN_NOT     reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    WHILE           reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    DO              reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    FOR             reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    FOREACH         reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    TRY             reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    LPAREN          reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    SWITCH          reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    GOTO            reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    FUNCTION        reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    PUBLIC          reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    PRIVATE         reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    PROTECTED       reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    STATIC          reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IF              reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    BREAK           reduce using rule 60 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)


state 128

    (106) array_def -> ARRAY LPAREN . RPAREN
    (107) array_def -> ARRAY LPAREN . array_elmnt RPAREN
    (108) array_elmnt -> . valor
    (109) array_elmnt -> . empty
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (113) empty -> .
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 158
    VARIABLE        shift and go to state 66
    STRING          shift and go to state 67
    NOMBRE          shift and go to state 71
    ENTERO          shift and go to state 64
    DECIMAL         shift and go to state 68

  ! RPAREN          [ reduce using rule 113 (empty -> .) ]

    array_elmnt                    shift and go to state 159
    valor                          shift and go to state 160
    empty                          shift and go to state 161
    numero                         shift and go to state 65

state 129

    (78) funcion_nparams -> FUNCTION NOMBRE LPAREN . params_list RPAREN stc_bloque_def
    (81) funcion_opreturn -> FUNCTION NOMBRE LPAREN . params_list RPAREN stc_bloque_def
    (83) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN stc_bloque_def
    (84) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN LBRACE empty RBRACE
    (79) params_list -> . params_list COMMA param
    (80) params_list -> . param
    (76) param -> . VARIABLE
    (77) param -> . asignacion
    (59) asignacion -> . VARIABLE EQUALS valor SEMI

    RPAREN          shift and go to state 162
    VARIABLE        shift and go to state 151

    params_list                    shift and go to state 148
    param                          shift and go to state 150
    asignacion                     shift and go to state 152

state 130

    (61) constante -> DEFINE LPAREN STRING COMMA . valor RPAREN SEMI
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 66
    STRING          shift and go to state 67
    NOMBRE          shift and go to state 71
    ENTERO          shift and go to state 64
    DECIMAL         shift and go to state 68

    valor                          shift and go to state 163
    numero                         shift and go to state 65

state 131

    (62) constante -> DEFINE LPAREN NOMBRE COMMA . ARRAY RPAREN SEMI

    ARRAY           shift and go to state 164


state 132

    (63) lectura -> READLINE LPAREN STRING RPAREN . SEMI

    SEMI            shift and go to state 165


state 133

    (64) lectura -> READLINE LPAREN RPAREN SEMI .

    $end            reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    ECHO            reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    DEFINE          reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    READLINE        reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    SUMA            reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    RESTA           reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    DIVISION        reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    MODULO          reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    SMALLER         reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    GREATER         reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    AND             reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    OR              reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    XOR             reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_EQUAL        reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    DO              reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    FOR             reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    FOREACH         reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    TRY             reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    LPAREN          reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    SWITCH          reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    GOTO            reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    FUNCTION        reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    PUBLIC          reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    PRIVATE         reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    PROTECTED       reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    STATIC          reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IF              reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)
    BREAK           reduce using rule 64 (lectura -> READLINE LPAREN RPAREN SEMI .)


state 134

    (87) bwhile -> WHILE LPAREN condicion RPAREN . LBRACE stc_bloque RBRACE
    (88) bwhile -> WHILE LPAREN condicion RPAREN . COLON stc_bloque

    LBRACE          shift and go to state 166
    COLON           shift and go to state 167


state 135

    (85) condicion -> VARIABLE operador_logico . VARIABLE

    VARIABLE        shift and go to state 168


state 136

    (86) condicion -> valor operador_logico . valor
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 66
    STRING          shift and go to state 67
    NOMBRE          shift and go to state 71
    ENTERO          shift and go to state 64
    DECIMAL         shift and go to state 68

    valor                          shift and go to state 169
    numero                         shift and go to state 65

state 137

    (89) bdo -> DO LBRACE cuerpo RBRACE . bwhile
    (87) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (88) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque

    WHILE           shift and go to state 48

    bwhile                         shift and go to state 170

state 138

    (93) bfor -> FOR LPAREN asignacion SEMI . condicion SEMI for_incr RPAREN stc_bloque_def
    (85) condicion -> . VARIABLE operador_logico VARIABLE
    (86) condicion -> . valor operador_logico valor
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 107
    STRING          shift and go to state 67
    NOMBRE          shift and go to state 71
    ENTERO          shift and go to state 64
    DECIMAL         shift and go to state 68

    condicion                      shift and go to state 171
    valor                          shift and go to state 108
    numero                         shift and go to state 65

state 139

    (59) asignacion -> VARIABLE EQUALS . valor SEMI
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 66
    STRING          shift and go to state 67
    NOMBRE          shift and go to state 71
    ENTERO          shift and go to state 64
    DECIMAL         shift and go to state 68

    valor                          shift and go to state 98
    numero                         shift and go to state 65

state 140

    (105) bforeach -> FOREACH LPAREN VARIABLE AS . VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 172


state 141

    (98) stc_bloque_def -> LBRACE stc_bloque . RBRACE
    (94) stc_bloque -> stc_bloque . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat_par
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (21) imprimir -> . ECHO valor SEMI
    (22) imprimir -> . PRINT valor SEMI
    (23) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (24) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (69) funciones -> . funcion_nparams
    (70) funciones -> . proteccion funcion_nparams
    (71) funciones -> . funcion_opreturn
    (72) funciones -> . proteccion funcion_opreturn
    (73) funciones -> . funcion_blank
    (74) funciones -> . proteccion funcion_blank
    (75) funciones -> . funcion_void
    (61) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (62) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (63) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (64) lectura -> . READLINE LPAREN RPAREN SEMI
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL
    (47) condicion_booleana -> . AND
    (48) condicion_booleana -> . OR
    (49) condicion_booleana -> . XOR
    (50) condicion_booleana -> . IS_EQUAL
    (51) condicion_booleana -> . IS_NOT_EQUAL
    (52) condicion_booleana -> . IS_IDENTICAL
    (53) condicion_booleana -> . IS_NOT_IDENTICAL
    (54) condicion_booleana -> . BOOLEAN_NOT
    (87) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (88) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (89) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (93) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (105) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (110) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (43) condicion_ifelse -> . condicion_if
    (44) condicion_ifelse -> . condicion_if condicion_else
    (45) condicion_ifelse -> . condicion_if condicion_elseif
    (46) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (90) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (114) bgoto -> . GOTO NOMBRE SEMI
    (78) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (65) proteccion -> . PUBLIC
    (66) proteccion -> . PRIVATE
    (67) proteccion -> . PROTECTED
    (68) proteccion -> . STATIC
    (81) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (84) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (82) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (40) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    RBRACE          shift and go to state 173
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    VARIABLE        shift and go to state 23
    DEFINE          shift and go to state 29
    READLINE        shift and go to state 30
    SUMA            shift and go to state 31
    RESTA           shift and go to state 32
    MULTIPLICACION  shift and go to state 33
    DIVISION        shift and go to state 34
    MODULO          shift and go to state 35
    SMALLER         shift and go to state 36
    GREATER         shift and go to state 37
    IS_SMALLER_OR_EQUAL shift and go to state 38
    IS_GREATER_OR_EQUAL shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    XOR             shift and go to state 42
    IS_EQUAL        shift and go to state 43
    IS_NOT_EQUAL    shift and go to state 44
    IS_IDENTICAL    shift and go to state 45
    IS_NOT_IDENTICAL shift and go to state 46
    BOOLEAN_NOT     shift and go to state 47
    WHILE           shift and go to state 48
    DO              shift and go to state 49
    FOR             shift and go to state 50
    FOREACH         shift and go to state 51
    TRY             shift and go to state 52
    LPAREN          shift and go to state 22
    SWITCH          shift and go to state 54
    GOTO            shift and go to state 55
    FUNCTION        shift and go to state 56
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60
    IF              shift and go to state 61

    cuerpo                         shift and go to state 174
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat_par            shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    funcion_nparams                shift and go to state 24
    proteccion                     shift and go to state 25
    funcion_opreturn               shift and go to state 26
    funcion_blank                  shift and go to state 27
    funcion_void                   shift and go to state 28
    condicion_if                   shift and go to state 53

state 142

    (95) stc_bloque -> empty .

    RBRACE          reduce using rule 95 (stc_bloque -> empty .)
    ECHO            reduce using rule 95 (stc_bloque -> empty .)
    PRINT           reduce using rule 95 (stc_bloque -> empty .)
    VARIABLE        reduce using rule 95 (stc_bloque -> empty .)
    DEFINE          reduce using rule 95 (stc_bloque -> empty .)
    READLINE        reduce using rule 95 (stc_bloque -> empty .)
    SUMA            reduce using rule 95 (stc_bloque -> empty .)
    RESTA           reduce using rule 95 (stc_bloque -> empty .)
    MULTIPLICACION  reduce using rule 95 (stc_bloque -> empty .)
    DIVISION        reduce using rule 95 (stc_bloque -> empty .)
    MODULO          reduce using rule 95 (stc_bloque -> empty .)
    SMALLER         reduce using rule 95 (stc_bloque -> empty .)
    GREATER         reduce using rule 95 (stc_bloque -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 95 (stc_bloque -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 95 (stc_bloque -> empty .)
    AND             reduce using rule 95 (stc_bloque -> empty .)
    OR              reduce using rule 95 (stc_bloque -> empty .)
    XOR             reduce using rule 95 (stc_bloque -> empty .)
    IS_EQUAL        reduce using rule 95 (stc_bloque -> empty .)
    IS_NOT_EQUAL    reduce using rule 95 (stc_bloque -> empty .)
    IS_IDENTICAL    reduce using rule 95 (stc_bloque -> empty .)
    IS_NOT_IDENTICAL reduce using rule 95 (stc_bloque -> empty .)
    BOOLEAN_NOT     reduce using rule 95 (stc_bloque -> empty .)
    WHILE           reduce using rule 95 (stc_bloque -> empty .)
    DO              reduce using rule 95 (stc_bloque -> empty .)
    FOR             reduce using rule 95 (stc_bloque -> empty .)
    FOREACH         reduce using rule 95 (stc_bloque -> empty .)
    TRY             reduce using rule 95 (stc_bloque -> empty .)
    LPAREN          reduce using rule 95 (stc_bloque -> empty .)
    SWITCH          reduce using rule 95 (stc_bloque -> empty .)
    GOTO            reduce using rule 95 (stc_bloque -> empty .)
    FUNCTION        reduce using rule 95 (stc_bloque -> empty .)
    PUBLIC          reduce using rule 95 (stc_bloque -> empty .)
    PRIVATE         reduce using rule 95 (stc_bloque -> empty .)
    PROTECTED       reduce using rule 95 (stc_bloque -> empty .)
    STATIC          reduce using rule 95 (stc_bloque -> empty .)
    IF              reduce using rule 95 (stc_bloque -> empty .)
    $end            reduce using rule 95 (stc_bloque -> empty .)
    BREAK           reduce using rule 95 (stc_bloque -> empty .)


state 143

    (96) stc_bloque -> RETURN .
    (97) stc_bloque -> RETURN . NULL

    RBRACE          reduce using rule 96 (stc_bloque -> RETURN .)
    ECHO            reduce using rule 96 (stc_bloque -> RETURN .)
    PRINT           reduce using rule 96 (stc_bloque -> RETURN .)
    VARIABLE        reduce using rule 96 (stc_bloque -> RETURN .)
    DEFINE          reduce using rule 96 (stc_bloque -> RETURN .)
    READLINE        reduce using rule 96 (stc_bloque -> RETURN .)
    SUMA            reduce using rule 96 (stc_bloque -> RETURN .)
    RESTA           reduce using rule 96 (stc_bloque -> RETURN .)
    MULTIPLICACION  reduce using rule 96 (stc_bloque -> RETURN .)
    DIVISION        reduce using rule 96 (stc_bloque -> RETURN .)
    MODULO          reduce using rule 96 (stc_bloque -> RETURN .)
    SMALLER         reduce using rule 96 (stc_bloque -> RETURN .)
    GREATER         reduce using rule 96 (stc_bloque -> RETURN .)
    IS_SMALLER_OR_EQUAL reduce using rule 96 (stc_bloque -> RETURN .)
    IS_GREATER_OR_EQUAL reduce using rule 96 (stc_bloque -> RETURN .)
    AND             reduce using rule 96 (stc_bloque -> RETURN .)
    OR              reduce using rule 96 (stc_bloque -> RETURN .)
    XOR             reduce using rule 96 (stc_bloque -> RETURN .)
    IS_EQUAL        reduce using rule 96 (stc_bloque -> RETURN .)
    IS_NOT_EQUAL    reduce using rule 96 (stc_bloque -> RETURN .)
    IS_IDENTICAL    reduce using rule 96 (stc_bloque -> RETURN .)
    IS_NOT_IDENTICAL reduce using rule 96 (stc_bloque -> RETURN .)
    BOOLEAN_NOT     reduce using rule 96 (stc_bloque -> RETURN .)
    WHILE           reduce using rule 96 (stc_bloque -> RETURN .)
    DO              reduce using rule 96 (stc_bloque -> RETURN .)
    FOR             reduce using rule 96 (stc_bloque -> RETURN .)
    FOREACH         reduce using rule 96 (stc_bloque -> RETURN .)
    TRY             reduce using rule 96 (stc_bloque -> RETURN .)
    LPAREN          reduce using rule 96 (stc_bloque -> RETURN .)
    SWITCH          reduce using rule 96 (stc_bloque -> RETURN .)
    GOTO            reduce using rule 96 (stc_bloque -> RETURN .)
    FUNCTION        reduce using rule 96 (stc_bloque -> RETURN .)
    PUBLIC          reduce using rule 96 (stc_bloque -> RETURN .)
    PRIVATE         reduce using rule 96 (stc_bloque -> RETURN .)
    PROTECTED       reduce using rule 96 (stc_bloque -> RETURN .)
    STATIC          reduce using rule 96 (stc_bloque -> RETURN .)
    IF              reduce using rule 96 (stc_bloque -> RETURN .)
    $end            reduce using rule 96 (stc_bloque -> RETURN .)
    BREAK           reduce using rule 96 (stc_bloque -> RETURN .)
    NULL            shift and go to state 175


state 144

    (110) btry -> TRY LBRACE stc_bloque_def RBRACE . catches
    (111) catches -> . catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def
    (112) catches -> . empty
    (113) empty -> .

    CATCH           reduce using rule 113 (empty -> .)
    $end            reduce using rule 113 (empty -> .)
    RBRACE          reduce using rule 113 (empty -> .)
    ECHO            reduce using rule 113 (empty -> .)
    PRINT           reduce using rule 113 (empty -> .)
    VARIABLE        reduce using rule 113 (empty -> .)
    DEFINE          reduce using rule 113 (empty -> .)
    READLINE        reduce using rule 113 (empty -> .)
    SUMA            reduce using rule 113 (empty -> .)
    RESTA           reduce using rule 113 (empty -> .)
    MULTIPLICACION  reduce using rule 113 (empty -> .)
    DIVISION        reduce using rule 113 (empty -> .)
    MODULO          reduce using rule 113 (empty -> .)
    SMALLER         reduce using rule 113 (empty -> .)
    GREATER         reduce using rule 113 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 113 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    XOR             reduce using rule 113 (empty -> .)
    IS_EQUAL        reduce using rule 113 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 113 (empty -> .)
    IS_IDENTICAL    reduce using rule 113 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 113 (empty -> .)
    BOOLEAN_NOT     reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    DO              reduce using rule 113 (empty -> .)
    FOR             reduce using rule 113 (empty -> .)
    FOREACH         reduce using rule 113 (empty -> .)
    TRY             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    SWITCH          reduce using rule 113 (empty -> .)
    GOTO            reduce using rule 113 (empty -> .)
    FUNCTION        reduce using rule 113 (empty -> .)
    PUBLIC          reduce using rule 113 (empty -> .)
    PRIVATE         reduce using rule 113 (empty -> .)
    PROTECTED       reduce using rule 113 (empty -> .)
    STATIC          reduce using rule 113 (empty -> .)
    IF              reduce using rule 113 (empty -> .)
    BREAK           reduce using rule 113 (empty -> .)

    catches                        shift and go to state 176
    empty                          shift and go to state 177

state 145

    (42) condicion_else -> ELSE LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 178


state 146

    (41) condicion_elseif -> ELSEIF LPAREN condicion . RPAREN LBRACE cuerpo RBRACE

    RPAREN          shift and go to state 179


state 147

    (90) bswitch -> SWITCH LPAREN VARIABLE RPAREN . LBRACE innerSwitch RBRACE

    LBRACE          shift and go to state 180


state 148

    (78) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list . RPAREN stc_bloque_def
    (81) funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list . RPAREN stc_bloque_def
    (79) params_list -> params_list . COMMA param

    RPAREN          shift and go to state 181
    COMMA           shift and go to state 182


state 149

    (83) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . stc_bloque_def
    (84) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . LBRACE empty RBRACE
    (82) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN . COLON VOID LBRACE empty RBRACE
    (98) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 184
    COLON           shift and go to state 185

    stc_bloque_def                 shift and go to state 183

state 150

    (80) params_list -> param .

    RPAREN          reduce using rule 80 (params_list -> param .)
    COMMA           reduce using rule 80 (params_list -> param .)


state 151

    (76) param -> VARIABLE .
    (59) asignacion -> VARIABLE . EQUALS valor SEMI

    RPAREN          reduce using rule 76 (param -> VARIABLE .)
    COMMA           reduce using rule 76 (param -> VARIABLE .)
    EQUALS          shift and go to state 139


state 152

    (77) param -> asignacion .

    RPAREN          reduce using rule 77 (param -> asignacion .)
    COMMA           reduce using rule 77 (param -> asignacion .)


state 153

    (40) condicion_if -> IF LPAREN condicion RPAREN . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 186


state 154

    (24) imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET . SEMI

    SEMI            shift and go to state 187


state 155

    (23) imprimir -> PRINT LPAREN valor RPAREN SEMI .

    $end            reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    RBRACE          reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    ECHO            reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    PRINT           reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    VARIABLE        reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    DEFINE          reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    READLINE        reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    SUMA            reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    RESTA           reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    DIVISION        reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    MODULO          reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    SMALLER         reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    GREATER         reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    AND             reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    OR              reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    XOR             reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_EQUAL        reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    WHILE           reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    DO              reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    FOR             reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    FOREACH         reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    TRY             reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    LPAREN          reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    SWITCH          reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    GOTO            reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    FUNCTION        reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    PUBLIC          reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    PRIVATE         reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    PROTECTED       reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    STATIC          reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IF              reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    BREAK           reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)


state 156

    (57) operaciones_mat_par -> LPAREN valor operadores valor RPAREN .

    $end            reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    RBRACE          reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    RPAREN          reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    ECHO            reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    PRINT           reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    VARIABLE        reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    DEFINE          reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    READLINE        reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    SUMA            reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    RESTA           reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    MULTIPLICACION  reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    DIVISION        reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    MODULO          reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    SMALLER         reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    GREATER         reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    AND             reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    OR              reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    XOR             reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IS_EQUAL        reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IS_NOT_EQUAL    reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IS_IDENTICAL    reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    BOOLEAN_NOT     reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    WHILE           reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    DO              reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    FOR             reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    FOREACH         reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    TRY             reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    LPAREN          reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    SWITCH          reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    GOTO            reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    FUNCTION        reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    PUBLIC          reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    PRIVATE         reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    PROTECTED       reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    STATIC          reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IF              reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    BREAK           reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)


state 157

    (58) operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .

    $end            reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    RBRACE          reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    RPAREN          reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    ECHO            reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    PRINT           reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    VARIABLE        reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    DEFINE          reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    READLINE        reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    SUMA            reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    RESTA           reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    MULTIPLICACION  reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    DIVISION        reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    MODULO          reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    SMALLER         reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    GREATER         reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    AND             reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    OR              reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    XOR             reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IS_EQUAL        reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IS_NOT_EQUAL    reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IS_IDENTICAL    reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    BOOLEAN_NOT     reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    WHILE           reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    DO              reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    FOR             reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    FOREACH         reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    TRY             reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    LPAREN          reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    SWITCH          reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    GOTO            reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    FUNCTION        reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    PUBLIC          reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    PRIVATE         reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    PROTECTED       reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    STATIC          reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IF              reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    BREAK           reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)


state 158

    (106) array_def -> ARRAY LPAREN RPAREN .

    SEMI            reduce using rule 106 (array_def -> ARRAY LPAREN RPAREN .)


state 159

    (107) array_def -> ARRAY LPAREN array_elmnt . RPAREN

    RPAREN          shift and go to state 188


state 160

    (108) array_elmnt -> valor .

    RPAREN          reduce using rule 108 (array_elmnt -> valor .)


state 161

    (109) array_elmnt -> empty .

    RPAREN          reduce using rule 109 (array_elmnt -> empty .)


state 162

    (83) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . stc_bloque_def
    (84) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . LBRACE empty RBRACE
    (98) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 184

    stc_bloque_def                 shift and go to state 183

state 163

    (61) constante -> DEFINE LPAREN STRING COMMA valor . RPAREN SEMI

    RPAREN          shift and go to state 189


state 164

    (62) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY . RPAREN SEMI

    RPAREN          shift and go to state 190


state 165

    (63) lectura -> READLINE LPAREN STRING RPAREN SEMI .

    $end            reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    RBRACE          reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    ECHO            reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    PRINT           reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    VARIABLE        reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    DEFINE          reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    READLINE        reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    SUMA            reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    RESTA           reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    DIVISION        reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    MODULO          reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    SMALLER         reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    GREATER         reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    AND             reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    OR              reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    XOR             reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_EQUAL        reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    WHILE           reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    DO              reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    FOR             reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    FOREACH         reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    TRY             reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    LPAREN          reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    SWITCH          reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    GOTO            reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    FUNCTION        reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    PUBLIC          reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    PRIVATE         reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    PROTECTED       reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    STATIC          reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IF              reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    BREAK           reduce using rule 63 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)


state 166

    (87) bwhile -> WHILE LPAREN condicion RPAREN LBRACE . stc_bloque RBRACE
    (94) stc_bloque -> . stc_bloque cuerpo
    (95) stc_bloque -> . empty
    (96) stc_bloque -> . RETURN
    (97) stc_bloque -> . RETURN NULL
    (113) empty -> .

    RETURN          shift and go to state 143
    RBRACE          reduce using rule 113 (empty -> .)
    ECHO            reduce using rule 113 (empty -> .)
    PRINT           reduce using rule 113 (empty -> .)
    VARIABLE        reduce using rule 113 (empty -> .)
    DEFINE          reduce using rule 113 (empty -> .)
    READLINE        reduce using rule 113 (empty -> .)
    SUMA            reduce using rule 113 (empty -> .)
    RESTA           reduce using rule 113 (empty -> .)
    MULTIPLICACION  reduce using rule 113 (empty -> .)
    DIVISION        reduce using rule 113 (empty -> .)
    MODULO          reduce using rule 113 (empty -> .)
    SMALLER         reduce using rule 113 (empty -> .)
    GREATER         reduce using rule 113 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 113 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    XOR             reduce using rule 113 (empty -> .)
    IS_EQUAL        reduce using rule 113 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 113 (empty -> .)
    IS_IDENTICAL    reduce using rule 113 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 113 (empty -> .)
    BOOLEAN_NOT     reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    DO              reduce using rule 113 (empty -> .)
    FOR             reduce using rule 113 (empty -> .)
    FOREACH         reduce using rule 113 (empty -> .)
    TRY             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    SWITCH          reduce using rule 113 (empty -> .)
    GOTO            reduce using rule 113 (empty -> .)
    FUNCTION        reduce using rule 113 (empty -> .)
    PUBLIC          reduce using rule 113 (empty -> .)
    PRIVATE         reduce using rule 113 (empty -> .)
    PROTECTED       reduce using rule 113 (empty -> .)
    STATIC          reduce using rule 113 (empty -> .)
    IF              reduce using rule 113 (empty -> .)

    stc_bloque                     shift and go to state 191
    empty                          shift and go to state 142

state 167

    (88) bwhile -> WHILE LPAREN condicion RPAREN COLON . stc_bloque
    (94) stc_bloque -> . stc_bloque cuerpo
    (95) stc_bloque -> . empty
    (96) stc_bloque -> . RETURN
    (97) stc_bloque -> . RETURN NULL
    (113) empty -> .

    RETURN          shift and go to state 143
    ECHO            reduce using rule 113 (empty -> .)
    PRINT           reduce using rule 113 (empty -> .)
    VARIABLE        reduce using rule 113 (empty -> .)
    DEFINE          reduce using rule 113 (empty -> .)
    READLINE        reduce using rule 113 (empty -> .)
    SUMA            reduce using rule 113 (empty -> .)
    RESTA           reduce using rule 113 (empty -> .)
    MULTIPLICACION  reduce using rule 113 (empty -> .)
    DIVISION        reduce using rule 113 (empty -> .)
    MODULO          reduce using rule 113 (empty -> .)
    SMALLER         reduce using rule 113 (empty -> .)
    GREATER         reduce using rule 113 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 113 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    XOR             reduce using rule 113 (empty -> .)
    IS_EQUAL        reduce using rule 113 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 113 (empty -> .)
    IS_IDENTICAL    reduce using rule 113 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 113 (empty -> .)
    BOOLEAN_NOT     reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    DO              reduce using rule 113 (empty -> .)
    FOR             reduce using rule 113 (empty -> .)
    FOREACH         reduce using rule 113 (empty -> .)
    TRY             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    SWITCH          reduce using rule 113 (empty -> .)
    GOTO            reduce using rule 113 (empty -> .)
    FUNCTION        reduce using rule 113 (empty -> .)
    PUBLIC          reduce using rule 113 (empty -> .)
    PRIVATE         reduce using rule 113 (empty -> .)
    PROTECTED       reduce using rule 113 (empty -> .)
    STATIC          reduce using rule 113 (empty -> .)
    IF              reduce using rule 113 (empty -> .)
    $end            reduce using rule 113 (empty -> .)
    RBRACE          reduce using rule 113 (empty -> .)
    BREAK           reduce using rule 113 (empty -> .)

    stc_bloque                     shift and go to state 192
    empty                          shift and go to state 142

state 168

    (85) condicion -> VARIABLE operador_logico VARIABLE .

    RPAREN          reduce using rule 85 (condicion -> VARIABLE operador_logico VARIABLE .)
    SEMI            reduce using rule 85 (condicion -> VARIABLE operador_logico VARIABLE .)


state 169

    (86) condicion -> valor operador_logico valor .

    RPAREN          reduce using rule 86 (condicion -> valor operador_logico valor .)
    SEMI            reduce using rule 86 (condicion -> valor operador_logico valor .)


state 170

    (89) bdo -> DO LBRACE cuerpo RBRACE bwhile .

    $end            reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    RBRACE          reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    ECHO            reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    PRINT           reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    VARIABLE        reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    DEFINE          reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    READLINE        reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    SUMA            reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    RESTA           reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    MULTIPLICACION  reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    DIVISION        reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    MODULO          reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    SMALLER         reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    GREATER         reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    IS_SMALLER_OR_EQUAL reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    IS_GREATER_OR_EQUAL reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    AND             reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    OR              reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    XOR             reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    IS_EQUAL        reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    IS_NOT_EQUAL    reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    IS_IDENTICAL    reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    IS_NOT_IDENTICAL reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    BOOLEAN_NOT     reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    WHILE           reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    DO              reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    FOR             reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    FOREACH         reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    TRY             reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    LPAREN          reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    SWITCH          reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    GOTO            reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    FUNCTION        reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    PUBLIC          reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    PRIVATE         reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    PROTECTED       reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    STATIC          reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    IF              reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    BREAK           reduce using rule 89 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)


state 171

    (93) bfor -> FOR LPAREN asignacion SEMI condicion . SEMI for_incr RPAREN stc_bloque_def

    SEMI            shift and go to state 193


state 172

    (105) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE . RPAREN stc_bloque_def

    RPAREN          shift and go to state 194


state 173

    (98) stc_bloque_def -> LBRACE stc_bloque RBRACE .

    RBRACE          reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    $end            reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    ECHO            reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    PRINT           reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    VARIABLE        reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    DEFINE          reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    READLINE        reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    SUMA            reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    RESTA           reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    MULTIPLICACION  reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    DIVISION        reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    MODULO          reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    SMALLER         reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    GREATER         reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    AND             reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    OR              reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    XOR             reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_EQUAL        reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_NOT_EQUAL    reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_IDENTICAL    reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    BOOLEAN_NOT     reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    WHILE           reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    DO              reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    FOR             reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    FOREACH         reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    TRY             reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    LPAREN          reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    SWITCH          reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    GOTO            reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    FUNCTION        reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    PUBLIC          reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    PRIVATE         reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    PROTECTED       reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    STATIC          reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IF              reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    BREAK           reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    CATCH           reduce using rule 98 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)


state 174

    (94) stc_bloque -> stc_bloque cuerpo .

    RBRACE          reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    ECHO            reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    PRINT           reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    VARIABLE        reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    DEFINE          reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    READLINE        reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    SUMA            reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    RESTA           reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    MULTIPLICACION  reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    DIVISION        reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    MODULO          reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    SMALLER         reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    GREATER         reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    IS_SMALLER_OR_EQUAL reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    IS_GREATER_OR_EQUAL reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    AND             reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    OR              reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    XOR             reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    IS_EQUAL        reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    IS_NOT_EQUAL    reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    IS_IDENTICAL    reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    IS_NOT_IDENTICAL reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    BOOLEAN_NOT     reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    WHILE           reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    DO              reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    FOR             reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    FOREACH         reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    TRY             reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    LPAREN          reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    SWITCH          reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    GOTO            reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    FUNCTION        reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    PUBLIC          reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    PRIVATE         reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    PROTECTED       reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    STATIC          reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    IF              reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    $end            reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)
    BREAK           reduce using rule 94 (stc_bloque -> stc_bloque cuerpo .)


state 175

    (97) stc_bloque -> RETURN NULL .

    RBRACE          reduce using rule 97 (stc_bloque -> RETURN NULL .)
    ECHO            reduce using rule 97 (stc_bloque -> RETURN NULL .)
    PRINT           reduce using rule 97 (stc_bloque -> RETURN NULL .)
    VARIABLE        reduce using rule 97 (stc_bloque -> RETURN NULL .)
    DEFINE          reduce using rule 97 (stc_bloque -> RETURN NULL .)
    READLINE        reduce using rule 97 (stc_bloque -> RETURN NULL .)
    SUMA            reduce using rule 97 (stc_bloque -> RETURN NULL .)
    RESTA           reduce using rule 97 (stc_bloque -> RETURN NULL .)
    MULTIPLICACION  reduce using rule 97 (stc_bloque -> RETURN NULL .)
    DIVISION        reduce using rule 97 (stc_bloque -> RETURN NULL .)
    MODULO          reduce using rule 97 (stc_bloque -> RETURN NULL .)
    SMALLER         reduce using rule 97 (stc_bloque -> RETURN NULL .)
    GREATER         reduce using rule 97 (stc_bloque -> RETURN NULL .)
    IS_SMALLER_OR_EQUAL reduce using rule 97 (stc_bloque -> RETURN NULL .)
    IS_GREATER_OR_EQUAL reduce using rule 97 (stc_bloque -> RETURN NULL .)
    AND             reduce using rule 97 (stc_bloque -> RETURN NULL .)
    OR              reduce using rule 97 (stc_bloque -> RETURN NULL .)
    XOR             reduce using rule 97 (stc_bloque -> RETURN NULL .)
    IS_EQUAL        reduce using rule 97 (stc_bloque -> RETURN NULL .)
    IS_NOT_EQUAL    reduce using rule 97 (stc_bloque -> RETURN NULL .)
    IS_IDENTICAL    reduce using rule 97 (stc_bloque -> RETURN NULL .)
    IS_NOT_IDENTICAL reduce using rule 97 (stc_bloque -> RETURN NULL .)
    BOOLEAN_NOT     reduce using rule 97 (stc_bloque -> RETURN NULL .)
    WHILE           reduce using rule 97 (stc_bloque -> RETURN NULL .)
    DO              reduce using rule 97 (stc_bloque -> RETURN NULL .)
    FOR             reduce using rule 97 (stc_bloque -> RETURN NULL .)
    FOREACH         reduce using rule 97 (stc_bloque -> RETURN NULL .)
    TRY             reduce using rule 97 (stc_bloque -> RETURN NULL .)
    LPAREN          reduce using rule 97 (stc_bloque -> RETURN NULL .)
    SWITCH          reduce using rule 97 (stc_bloque -> RETURN NULL .)
    GOTO            reduce using rule 97 (stc_bloque -> RETURN NULL .)
    FUNCTION        reduce using rule 97 (stc_bloque -> RETURN NULL .)
    PUBLIC          reduce using rule 97 (stc_bloque -> RETURN NULL .)
    PRIVATE         reduce using rule 97 (stc_bloque -> RETURN NULL .)
    PROTECTED       reduce using rule 97 (stc_bloque -> RETURN NULL .)
    STATIC          reduce using rule 97 (stc_bloque -> RETURN NULL .)
    IF              reduce using rule 97 (stc_bloque -> RETURN NULL .)
    $end            reduce using rule 97 (stc_bloque -> RETURN NULL .)
    BREAK           reduce using rule 97 (stc_bloque -> RETURN NULL .)


state 176

    (110) btry -> TRY LBRACE stc_bloque_def RBRACE catches .
    (111) catches -> catches . CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def

    $end            reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    RBRACE          reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    ECHO            reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    PRINT           reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    VARIABLE        reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    DEFINE          reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    READLINE        reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    SUMA            reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    RESTA           reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    MULTIPLICACION  reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    DIVISION        reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    MODULO          reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    SMALLER         reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    GREATER         reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_SMALLER_OR_EQUAL reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_GREATER_OR_EQUAL reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    AND             reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    OR              reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    XOR             reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_EQUAL        reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_NOT_EQUAL    reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_IDENTICAL    reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_NOT_IDENTICAL reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    BOOLEAN_NOT     reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    WHILE           reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    DO              reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    FOR             reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    FOREACH         reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    TRY             reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    LPAREN          reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    SWITCH          reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    GOTO            reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    FUNCTION        reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    PUBLIC          reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    PRIVATE         reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    PROTECTED       reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    STATIC          reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IF              reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    BREAK           reduce using rule 110 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    CATCH           shift and go to state 195


state 177

    (112) catches -> empty .

    CATCH           reduce using rule 112 (catches -> empty .)
    $end            reduce using rule 112 (catches -> empty .)
    RBRACE          reduce using rule 112 (catches -> empty .)
    ECHO            reduce using rule 112 (catches -> empty .)
    PRINT           reduce using rule 112 (catches -> empty .)
    VARIABLE        reduce using rule 112 (catches -> empty .)
    DEFINE          reduce using rule 112 (catches -> empty .)
    READLINE        reduce using rule 112 (catches -> empty .)
    SUMA            reduce using rule 112 (catches -> empty .)
    RESTA           reduce using rule 112 (catches -> empty .)
    MULTIPLICACION  reduce using rule 112 (catches -> empty .)
    DIVISION        reduce using rule 112 (catches -> empty .)
    MODULO          reduce using rule 112 (catches -> empty .)
    SMALLER         reduce using rule 112 (catches -> empty .)
    GREATER         reduce using rule 112 (catches -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 112 (catches -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 112 (catches -> empty .)
    AND             reduce using rule 112 (catches -> empty .)
    OR              reduce using rule 112 (catches -> empty .)
    XOR             reduce using rule 112 (catches -> empty .)
    IS_EQUAL        reduce using rule 112 (catches -> empty .)
    IS_NOT_EQUAL    reduce using rule 112 (catches -> empty .)
    IS_IDENTICAL    reduce using rule 112 (catches -> empty .)
    IS_NOT_IDENTICAL reduce using rule 112 (catches -> empty .)
    BOOLEAN_NOT     reduce using rule 112 (catches -> empty .)
    WHILE           reduce using rule 112 (catches -> empty .)
    DO              reduce using rule 112 (catches -> empty .)
    FOR             reduce using rule 112 (catches -> empty .)
    FOREACH         reduce using rule 112 (catches -> empty .)
    TRY             reduce using rule 112 (catches -> empty .)
    LPAREN          reduce using rule 112 (catches -> empty .)
    SWITCH          reduce using rule 112 (catches -> empty .)
    GOTO            reduce using rule 112 (catches -> empty .)
    FUNCTION        reduce using rule 112 (catches -> empty .)
    PUBLIC          reduce using rule 112 (catches -> empty .)
    PRIVATE         reduce using rule 112 (catches -> empty .)
    PROTECTED       reduce using rule 112 (catches -> empty .)
    STATIC          reduce using rule 112 (catches -> empty .)
    IF              reduce using rule 112 (catches -> empty .)
    BREAK           reduce using rule 112 (catches -> empty .)


state 178

    (42) condicion_else -> ELSE LBRACE cuerpo RBRACE .

    $end            reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    ECHO            reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    PRINT           reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    VARIABLE        reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    DEFINE          reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    READLINE        reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    SUMA            reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    RESTA           reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    MULTIPLICACION  reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    DIVISION        reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    MODULO          reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    SMALLER         reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    GREATER         reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    AND             reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    OR              reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    XOR             reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IS_EQUAL        reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IS_NOT_EQUAL    reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IS_IDENTICAL    reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    BOOLEAN_NOT     reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    WHILE           reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    DO              reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    FOR             reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    FOREACH         reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    TRY             reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    LPAREN          reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    SWITCH          reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    GOTO            reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    FUNCTION        reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    PUBLIC          reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    PRIVATE         reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    PROTECTED       reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    STATIC          reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IF              reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    BREAK           reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)


state 179

    (41) condicion_elseif -> ELSEIF LPAREN condicion RPAREN . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 196


state 180

    (90) bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE . innerSwitch RBRACE
    (91) innerSwitch -> . CASE ENTERO COLON cuerpo BREAK SEMI
    (92) innerSwitch -> . CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch

    CASE            shift and go to state 198

    innerSwitch                    shift and go to state 197

state 181

    (78) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN . stc_bloque_def
    (81) funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN . stc_bloque_def
    (98) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 113

    stc_bloque_def                 shift and go to state 199

state 182

    (79) params_list -> params_list COMMA . param
    (76) param -> . VARIABLE
    (77) param -> . asignacion
    (59) asignacion -> . VARIABLE EQUALS valor SEMI

    VARIABLE        shift and go to state 151

    param                          shift and go to state 200
    asignacion                     shift and go to state 152

state 183

    (83) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .

    $end            reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    ECHO            reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    PRINT           reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    VARIABLE        reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    DEFINE          reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    READLINE        reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    SUMA            reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    RESTA           reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    MULTIPLICACION  reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    DIVISION        reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    MODULO          reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    SMALLER         reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    GREATER         reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IS_SMALLER_OR_EQUAL reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IS_GREATER_OR_EQUAL reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    AND             reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    OR              reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    XOR             reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IS_EQUAL        reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IS_NOT_EQUAL    reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IS_IDENTICAL    reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IS_NOT_IDENTICAL reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    BOOLEAN_NOT     reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    WHILE           reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    DO              reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    FOR             reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    FOREACH         reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    TRY             reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    LPAREN          reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    SWITCH          reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    GOTO            reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    FUNCTION        reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    PUBLIC          reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    PRIVATE         reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    PROTECTED       reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    STATIC          reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IF              reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    BREAK           reduce using rule 83 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)


state 184

    (84) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE . empty RBRACE
    (98) stc_bloque_def -> LBRACE . stc_bloque RBRACE
    (113) empty -> .
    (94) stc_bloque -> . stc_bloque cuerpo
    (95) stc_bloque -> . empty
    (96) stc_bloque -> . RETURN
    (97) stc_bloque -> . RETURN NULL

    RBRACE          reduce using rule 113 (empty -> .)
    ECHO            reduce using rule 113 (empty -> .)
    PRINT           reduce using rule 113 (empty -> .)
    VARIABLE        reduce using rule 113 (empty -> .)
    DEFINE          reduce using rule 113 (empty -> .)
    READLINE        reduce using rule 113 (empty -> .)
    SUMA            reduce using rule 113 (empty -> .)
    RESTA           reduce using rule 113 (empty -> .)
    MULTIPLICACION  reduce using rule 113 (empty -> .)
    DIVISION        reduce using rule 113 (empty -> .)
    MODULO          reduce using rule 113 (empty -> .)
    SMALLER         reduce using rule 113 (empty -> .)
    GREATER         reduce using rule 113 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 113 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    XOR             reduce using rule 113 (empty -> .)
    IS_EQUAL        reduce using rule 113 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 113 (empty -> .)
    IS_IDENTICAL    reduce using rule 113 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 113 (empty -> .)
    BOOLEAN_NOT     reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    DO              reduce using rule 113 (empty -> .)
    FOR             reduce using rule 113 (empty -> .)
    FOREACH         reduce using rule 113 (empty -> .)
    TRY             reduce using rule 113 (empty -> .)
    LPAREN          reduce using rule 113 (empty -> .)
    SWITCH          reduce using rule 113 (empty -> .)
    GOTO            reduce using rule 113 (empty -> .)
    FUNCTION        reduce using rule 113 (empty -> .)
    PUBLIC          reduce using rule 113 (empty -> .)
    PRIVATE         reduce using rule 113 (empty -> .)
    PROTECTED       reduce using rule 113 (empty -> .)
    STATIC          reduce using rule 113 (empty -> .)
    IF              reduce using rule 113 (empty -> .)
    RETURN          shift and go to state 143

    empty                          shift and go to state 201
    stc_bloque                     shift and go to state 141

state 185

    (82) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON . VOID LBRACE empty RBRACE

    VOID            shift and go to state 202


state 186

    (40) condicion_if -> IF LPAREN condicion RPAREN LBRACE . cuerpo RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat_par
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (21) imprimir -> . ECHO valor SEMI
    (22) imprimir -> . PRINT valor SEMI
    (23) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (24) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (69) funciones -> . funcion_nparams
    (70) funciones -> . proteccion funcion_nparams
    (71) funciones -> . funcion_opreturn
    (72) funciones -> . proteccion funcion_opreturn
    (73) funciones -> . funcion_blank
    (74) funciones -> . proteccion funcion_blank
    (75) funciones -> . funcion_void
    (61) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (62) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (63) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (64) lectura -> . READLINE LPAREN RPAREN SEMI
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL
    (47) condicion_booleana -> . AND
    (48) condicion_booleana -> . OR
    (49) condicion_booleana -> . XOR
    (50) condicion_booleana -> . IS_EQUAL
    (51) condicion_booleana -> . IS_NOT_EQUAL
    (52) condicion_booleana -> . IS_IDENTICAL
    (53) condicion_booleana -> . IS_NOT_IDENTICAL
    (54) condicion_booleana -> . BOOLEAN_NOT
    (87) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (88) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (89) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (93) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (105) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (110) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (43) condicion_ifelse -> . condicion_if
    (44) condicion_ifelse -> . condicion_if condicion_else
    (45) condicion_ifelse -> . condicion_if condicion_elseif
    (46) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (90) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (114) bgoto -> . GOTO NOMBRE SEMI
    (78) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (65) proteccion -> . PUBLIC
    (66) proteccion -> . PRIVATE
    (67) proteccion -> . PROTECTED
    (68) proteccion -> . STATIC
    (81) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (84) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (82) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (40) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    VARIABLE        shift and go to state 23
    DEFINE          shift and go to state 29
    READLINE        shift and go to state 30
    SUMA            shift and go to state 31
    RESTA           shift and go to state 32
    MULTIPLICACION  shift and go to state 33
    DIVISION        shift and go to state 34
    MODULO          shift and go to state 35
    SMALLER         shift and go to state 36
    GREATER         shift and go to state 37
    IS_SMALLER_OR_EQUAL shift and go to state 38
    IS_GREATER_OR_EQUAL shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    XOR             shift and go to state 42
    IS_EQUAL        shift and go to state 43
    IS_NOT_EQUAL    shift and go to state 44
    IS_IDENTICAL    shift and go to state 45
    IS_NOT_IDENTICAL shift and go to state 46
    BOOLEAN_NOT     shift and go to state 47
    WHILE           shift and go to state 48
    DO              shift and go to state 49
    FOR             shift and go to state 50
    FOREACH         shift and go to state 51
    TRY             shift and go to state 52
    LPAREN          shift and go to state 22
    SWITCH          shift and go to state 54
    GOTO            shift and go to state 55
    FUNCTION        shift and go to state 56
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60
    IF              shift and go to state 61

    cuerpo                         shift and go to state 203
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat_par            shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    funcion_nparams                shift and go to state 24
    proteccion                     shift and go to state 25
    funcion_opreturn               shift and go to state 26
    funcion_blank                  shift and go to state 27
    funcion_void                   shift and go to state 28
    condicion_if                   shift and go to state 53

state 187

    (24) imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .

    $end            reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    RBRACE          reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    ECHO            reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    PRINT           reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    VARIABLE        reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    DEFINE          reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    READLINE        reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    SUMA            reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    RESTA           reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    MULTIPLICACION  reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    DIVISION        reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    MODULO          reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    SMALLER         reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    GREATER         reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    AND             reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    OR              reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    XOR             reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_EQUAL        reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_NOT_EQUAL    reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_IDENTICAL    reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_NOT_IDENTICAL reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    BOOLEAN_NOT     reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    WHILE           reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    DO              reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    FOR             reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    FOREACH         reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    TRY             reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    LPAREN          reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    SWITCH          reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    GOTO            reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    FUNCTION        reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    PUBLIC          reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    PRIVATE         reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    PROTECTED       reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    STATIC          reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IF              reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    BREAK           reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)


state 188

    (107) array_def -> ARRAY LPAREN array_elmnt RPAREN .

    SEMI            reduce using rule 107 (array_def -> ARRAY LPAREN array_elmnt RPAREN .)


state 189

    (61) constante -> DEFINE LPAREN STRING COMMA valor RPAREN . SEMI

    SEMI            shift and go to state 204


state 190

    (62) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN . SEMI

    SEMI            shift and go to state 205


state 191

    (87) bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque . RBRACE
    (94) stc_bloque -> stc_bloque . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat_par
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (21) imprimir -> . ECHO valor SEMI
    (22) imprimir -> . PRINT valor SEMI
    (23) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (24) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (69) funciones -> . funcion_nparams
    (70) funciones -> . proteccion funcion_nparams
    (71) funciones -> . funcion_opreturn
    (72) funciones -> . proteccion funcion_opreturn
    (73) funciones -> . funcion_blank
    (74) funciones -> . proteccion funcion_blank
    (75) funciones -> . funcion_void
    (61) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (62) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (63) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (64) lectura -> . READLINE LPAREN RPAREN SEMI
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL
    (47) condicion_booleana -> . AND
    (48) condicion_booleana -> . OR
    (49) condicion_booleana -> . XOR
    (50) condicion_booleana -> . IS_EQUAL
    (51) condicion_booleana -> . IS_NOT_EQUAL
    (52) condicion_booleana -> . IS_IDENTICAL
    (53) condicion_booleana -> . IS_NOT_IDENTICAL
    (54) condicion_booleana -> . BOOLEAN_NOT
    (87) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (88) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (89) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (93) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (105) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (110) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (43) condicion_ifelse -> . condicion_if
    (44) condicion_ifelse -> . condicion_if condicion_else
    (45) condicion_ifelse -> . condicion_if condicion_elseif
    (46) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (90) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (114) bgoto -> . GOTO NOMBRE SEMI
    (78) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (65) proteccion -> . PUBLIC
    (66) proteccion -> . PRIVATE
    (67) proteccion -> . PROTECTED
    (68) proteccion -> . STATIC
    (81) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (84) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (82) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (40) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    RBRACE          shift and go to state 206
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    VARIABLE        shift and go to state 23
    DEFINE          shift and go to state 29
    READLINE        shift and go to state 30
    SUMA            shift and go to state 31
    RESTA           shift and go to state 32
    MULTIPLICACION  shift and go to state 33
    DIVISION        shift and go to state 34
    MODULO          shift and go to state 35
    SMALLER         shift and go to state 36
    GREATER         shift and go to state 37
    IS_SMALLER_OR_EQUAL shift and go to state 38
    IS_GREATER_OR_EQUAL shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    XOR             shift and go to state 42
    IS_EQUAL        shift and go to state 43
    IS_NOT_EQUAL    shift and go to state 44
    IS_IDENTICAL    shift and go to state 45
    IS_NOT_IDENTICAL shift and go to state 46
    BOOLEAN_NOT     shift and go to state 47
    WHILE           shift and go to state 48
    DO              shift and go to state 49
    FOR             shift and go to state 50
    FOREACH         shift and go to state 51
    TRY             shift and go to state 52
    LPAREN          shift and go to state 22
    SWITCH          shift and go to state 54
    GOTO            shift and go to state 55
    FUNCTION        shift and go to state 56
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60
    IF              shift and go to state 61

    cuerpo                         shift and go to state 174
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat_par            shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    funcion_nparams                shift and go to state 24
    proteccion                     shift and go to state 25
    funcion_opreturn               shift and go to state 26
    funcion_blank                  shift and go to state 27
    funcion_void                   shift and go to state 28
    condicion_if                   shift and go to state 53

state 192

    (88) bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .
    (94) stc_bloque -> stc_bloque . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat_par
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (21) imprimir -> . ECHO valor SEMI
    (22) imprimir -> . PRINT valor SEMI
    (23) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (24) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (69) funciones -> . funcion_nparams
    (70) funciones -> . proteccion funcion_nparams
    (71) funciones -> . funcion_opreturn
    (72) funciones -> . proteccion funcion_opreturn
    (73) funciones -> . funcion_blank
    (74) funciones -> . proteccion funcion_blank
    (75) funciones -> . funcion_void
    (61) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (62) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (63) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (64) lectura -> . READLINE LPAREN RPAREN SEMI
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL
    (47) condicion_booleana -> . AND
    (48) condicion_booleana -> . OR
    (49) condicion_booleana -> . XOR
    (50) condicion_booleana -> . IS_EQUAL
    (51) condicion_booleana -> . IS_NOT_EQUAL
    (52) condicion_booleana -> . IS_IDENTICAL
    (53) condicion_booleana -> . IS_NOT_IDENTICAL
    (54) condicion_booleana -> . BOOLEAN_NOT
    (87) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (88) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (89) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (93) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (105) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (110) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (43) condicion_ifelse -> . condicion_if
    (44) condicion_ifelse -> . condicion_if condicion_else
    (45) condicion_ifelse -> . condicion_if condicion_elseif
    (46) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (90) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (114) bgoto -> . GOTO NOMBRE SEMI
    (78) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (65) proteccion -> . PUBLIC
    (66) proteccion -> . PRIVATE
    (67) proteccion -> . PROTECTED
    (68) proteccion -> . STATIC
    (81) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (84) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (82) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (40) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for READLINE resolved as shift
  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for IS_SMALLER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for IS_GREATER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for IS_EQUAL resolved as shift
  ! shift/reduce conflict for IS_NOT_EQUAL resolved as shift
  ! shift/reduce conflict for IS_IDENTICAL resolved as shift
  ! shift/reduce conflict for IS_NOT_IDENTICAL resolved as shift
  ! shift/reduce conflict for BOOLEAN_NOT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .)
    RBRACE          reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .)
    BREAK           reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .)
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    VARIABLE        shift and go to state 23
    DEFINE          shift and go to state 29
    READLINE        shift and go to state 30
    SUMA            shift and go to state 31
    RESTA           shift and go to state 32
    MULTIPLICACION  shift and go to state 33
    DIVISION        shift and go to state 34
    MODULO          shift and go to state 35
    SMALLER         shift and go to state 36
    GREATER         shift and go to state 37
    IS_SMALLER_OR_EQUAL shift and go to state 38
    IS_GREATER_OR_EQUAL shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    XOR             shift and go to state 42
    IS_EQUAL        shift and go to state 43
    IS_NOT_EQUAL    shift and go to state 44
    IS_IDENTICAL    shift and go to state 45
    IS_NOT_IDENTICAL shift and go to state 46
    BOOLEAN_NOT     shift and go to state 47
    WHILE           shift and go to state 48
    DO              shift and go to state 49
    FOR             shift and go to state 50
    FOREACH         shift and go to state 51
    TRY             shift and go to state 52
    LPAREN          shift and go to state 22
    SWITCH          shift and go to state 54
    GOTO            shift and go to state 55
    FUNCTION        shift and go to state 56
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60
    IF              shift and go to state 61

  ! ECHO            [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! PRINT           [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! VARIABLE        [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! DEFINE          [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! READLINE        [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! SUMA            [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! RESTA           [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! MULTIPLICACION  [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! DIVISION        [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! MODULO          [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! SMALLER         [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! GREATER         [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! AND             [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! OR              [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! XOR             [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IS_EQUAL        [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IS_IDENTICAL    [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! BOOLEAN_NOT     [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! WHILE           [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! DO              [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! FOR             [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! FOREACH         [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! TRY             [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! LPAREN          [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! SWITCH          [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! GOTO            [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! FUNCTION        [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! PUBLIC          [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! PRIVATE         [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! PROTECTED       [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! STATIC          [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IF              [ reduce using rule 88 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]

    cuerpo                         shift and go to state 174
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat_par            shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    funcion_nparams                shift and go to state 24
    proteccion                     shift and go to state 25
    funcion_opreturn               shift and go to state 26
    funcion_blank                  shift and go to state 27
    funcion_void                   shift and go to state 28
    condicion_if                   shift and go to state 53

state 193

    (93) bfor -> FOR LPAREN asignacion SEMI condicion SEMI . for_incr RPAREN stc_bloque_def
    (99) for_incr -> . VARIABLE SUMA SUMA
    (100) for_incr -> . SUMA SUMA VARIABLE
    (101) for_incr -> . VARIABLE RESTA RESTA
    (102) for_incr -> . RESTA RESTA VARIABLE
    (103) for_incr -> . VARIABLE SUMA EQUALS numero
    (104) for_incr -> . VARIABLE RESTA EQUALS numero

    VARIABLE        shift and go to state 208
    SUMA            shift and go to state 209
    RESTA           shift and go to state 210

    for_incr                       shift and go to state 207

state 194

    (105) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN . stc_bloque_def
    (98) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 113

    stc_bloque_def                 shift and go to state 211

state 195

    (111) catches -> catches CATCH . LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def

    LPAREN          shift and go to state 212


state 196

    (41) condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE . cuerpo RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat_par
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (21) imprimir -> . ECHO valor SEMI
    (22) imprimir -> . PRINT valor SEMI
    (23) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (24) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (69) funciones -> . funcion_nparams
    (70) funciones -> . proteccion funcion_nparams
    (71) funciones -> . funcion_opreturn
    (72) funciones -> . proteccion funcion_opreturn
    (73) funciones -> . funcion_blank
    (74) funciones -> . proteccion funcion_blank
    (75) funciones -> . funcion_void
    (61) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (62) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (63) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (64) lectura -> . READLINE LPAREN RPAREN SEMI
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL
    (47) condicion_booleana -> . AND
    (48) condicion_booleana -> . OR
    (49) condicion_booleana -> . XOR
    (50) condicion_booleana -> . IS_EQUAL
    (51) condicion_booleana -> . IS_NOT_EQUAL
    (52) condicion_booleana -> . IS_IDENTICAL
    (53) condicion_booleana -> . IS_NOT_IDENTICAL
    (54) condicion_booleana -> . BOOLEAN_NOT
    (87) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (88) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (89) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (93) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (105) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (110) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (43) condicion_ifelse -> . condicion_if
    (44) condicion_ifelse -> . condicion_if condicion_else
    (45) condicion_ifelse -> . condicion_if condicion_elseif
    (46) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (90) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (114) bgoto -> . GOTO NOMBRE SEMI
    (78) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (65) proteccion -> . PUBLIC
    (66) proteccion -> . PRIVATE
    (67) proteccion -> . PROTECTED
    (68) proteccion -> . STATIC
    (81) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (84) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (82) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (40) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    VARIABLE        shift and go to state 23
    DEFINE          shift and go to state 29
    READLINE        shift and go to state 30
    SUMA            shift and go to state 31
    RESTA           shift and go to state 32
    MULTIPLICACION  shift and go to state 33
    DIVISION        shift and go to state 34
    MODULO          shift and go to state 35
    SMALLER         shift and go to state 36
    GREATER         shift and go to state 37
    IS_SMALLER_OR_EQUAL shift and go to state 38
    IS_GREATER_OR_EQUAL shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    XOR             shift and go to state 42
    IS_EQUAL        shift and go to state 43
    IS_NOT_EQUAL    shift and go to state 44
    IS_IDENTICAL    shift and go to state 45
    IS_NOT_IDENTICAL shift and go to state 46
    BOOLEAN_NOT     shift and go to state 47
    WHILE           shift and go to state 48
    DO              shift and go to state 49
    FOR             shift and go to state 50
    FOREACH         shift and go to state 51
    TRY             shift and go to state 52
    LPAREN          shift and go to state 22
    SWITCH          shift and go to state 54
    GOTO            shift and go to state 55
    FUNCTION        shift and go to state 56
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60
    IF              shift and go to state 61

    cuerpo                         shift and go to state 213
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat_par            shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    funcion_nparams                shift and go to state 24
    proteccion                     shift and go to state 25
    funcion_opreturn               shift and go to state 26
    funcion_blank                  shift and go to state 27
    funcion_void                   shift and go to state 28
    condicion_if                   shift and go to state 53

state 197

    (90) bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch . RBRACE

    RBRACE          shift and go to state 214


state 198

    (91) innerSwitch -> CASE . ENTERO COLON cuerpo BREAK SEMI
    (92) innerSwitch -> CASE . ENTERO COLON cuerpo BREAK SEMI innerSwitch

    ENTERO          shift and go to state 215


state 199

    (78) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .
    (81) funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .

  ! reduce/reduce conflict for $end resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for RBRACE resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for ECHO resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for PRINT resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for DEFINE resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for READLINE resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for SUMA resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for RESTA resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for MULTIPLICACION resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for DIVISION resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for MODULO resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for SMALLER resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for GREATER resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IS_SMALLER_OR_EQUAL resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IS_GREATER_OR_EQUAL resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for AND resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for OR resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for XOR resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IS_EQUAL resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IS_NOT_EQUAL resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IS_IDENTICAL resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IS_NOT_IDENTICAL resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for BOOLEAN_NOT resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for WHILE resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for DO resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for FOR resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for FOREACH resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for TRY resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for LPAREN resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for SWITCH resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for GOTO resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for STATIC resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IF resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for BREAK resolved using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    $end            reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    ECHO            reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    PRINT           reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    VARIABLE        reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    DEFINE          reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    READLINE        reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    SUMA            reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    RESTA           reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    MULTIPLICACION  reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    DIVISION        reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    MODULO          reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    SMALLER         reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    GREATER         reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_SMALLER_OR_EQUAL reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_GREATER_OR_EQUAL reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    AND             reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    OR              reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    XOR             reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_EQUAL        reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_NOT_EQUAL    reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_IDENTICAL    reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_NOT_IDENTICAL reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    BOOLEAN_NOT     reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    WHILE           reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    DO              reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    FOR             reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    FOREACH         reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    TRY             reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    LPAREN          reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    SWITCH          reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    GOTO            reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    FUNCTION        reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    PUBLIC          reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    PRIVATE         reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    PROTECTED       reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    STATIC          reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IF              reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    BREAK           reduce using rule 78 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)

  ! $end            [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! RBRACE          [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! ECHO            [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! PRINT           [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! VARIABLE        [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! DEFINE          [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! READLINE        [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! SUMA            [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! RESTA           [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! MULTIPLICACION  [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! DIVISION        [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! MODULO          [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! SMALLER         [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! GREATER         [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! AND             [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! OR              [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! XOR             [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IS_EQUAL        [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IS_IDENTICAL    [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! BOOLEAN_NOT     [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! WHILE           [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! DO              [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! FOR             [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! FOREACH         [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! TRY             [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! LPAREN          [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! SWITCH          [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! GOTO            [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! FUNCTION        [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! PUBLIC          [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! PRIVATE         [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! PROTECTED       [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! STATIC          [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IF              [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! BREAK           [ reduce using rule 81 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]


state 200

    (79) params_list -> params_list COMMA param .

    RPAREN          reduce using rule 79 (params_list -> params_list COMMA param .)
    COMMA           reduce using rule 79 (params_list -> params_list COMMA param .)


state 201

    (84) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty . RBRACE
    (95) stc_bloque -> empty .

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 216
    ECHO            reduce using rule 95 (stc_bloque -> empty .)
    PRINT           reduce using rule 95 (stc_bloque -> empty .)
    VARIABLE        reduce using rule 95 (stc_bloque -> empty .)
    DEFINE          reduce using rule 95 (stc_bloque -> empty .)
    READLINE        reduce using rule 95 (stc_bloque -> empty .)
    SUMA            reduce using rule 95 (stc_bloque -> empty .)
    RESTA           reduce using rule 95 (stc_bloque -> empty .)
    MULTIPLICACION  reduce using rule 95 (stc_bloque -> empty .)
    DIVISION        reduce using rule 95 (stc_bloque -> empty .)
    MODULO          reduce using rule 95 (stc_bloque -> empty .)
    SMALLER         reduce using rule 95 (stc_bloque -> empty .)
    GREATER         reduce using rule 95 (stc_bloque -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 95 (stc_bloque -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 95 (stc_bloque -> empty .)
    AND             reduce using rule 95 (stc_bloque -> empty .)
    OR              reduce using rule 95 (stc_bloque -> empty .)
    XOR             reduce using rule 95 (stc_bloque -> empty .)
    IS_EQUAL        reduce using rule 95 (stc_bloque -> empty .)
    IS_NOT_EQUAL    reduce using rule 95 (stc_bloque -> empty .)
    IS_IDENTICAL    reduce using rule 95 (stc_bloque -> empty .)
    IS_NOT_IDENTICAL reduce using rule 95 (stc_bloque -> empty .)
    BOOLEAN_NOT     reduce using rule 95 (stc_bloque -> empty .)
    WHILE           reduce using rule 95 (stc_bloque -> empty .)
    DO              reduce using rule 95 (stc_bloque -> empty .)
    FOR             reduce using rule 95 (stc_bloque -> empty .)
    FOREACH         reduce using rule 95 (stc_bloque -> empty .)
    TRY             reduce using rule 95 (stc_bloque -> empty .)
    LPAREN          reduce using rule 95 (stc_bloque -> empty .)
    SWITCH          reduce using rule 95 (stc_bloque -> empty .)
    GOTO            reduce using rule 95 (stc_bloque -> empty .)
    FUNCTION        reduce using rule 95 (stc_bloque -> empty .)
    PUBLIC          reduce using rule 95 (stc_bloque -> empty .)
    PRIVATE         reduce using rule 95 (stc_bloque -> empty .)
    PROTECTED       reduce using rule 95 (stc_bloque -> empty .)
    STATIC          reduce using rule 95 (stc_bloque -> empty .)
    IF              reduce using rule 95 (stc_bloque -> empty .)

  ! RBRACE          [ reduce using rule 95 (stc_bloque -> empty .) ]


state 202

    (82) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID . LBRACE empty RBRACE

    LBRACE          shift and go to state 217


state 203

    (40) condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 218


state 204

    (61) constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .

    $end            reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    RBRACE          reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    ECHO            reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    PRINT           reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    VARIABLE        reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    DEFINE          reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    READLINE        reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    SUMA            reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    RESTA           reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    DIVISION        reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    MODULO          reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    SMALLER         reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    GREATER         reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    AND             reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    OR              reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    XOR             reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_EQUAL        reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    WHILE           reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    DO              reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    FOR             reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    FOREACH         reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    TRY             reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    LPAREN          reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    SWITCH          reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    GOTO            reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    FUNCTION        reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    PUBLIC          reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    PRIVATE         reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    PROTECTED       reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    STATIC          reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IF              reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    BREAK           reduce using rule 61 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)


state 205

    (62) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .

    $end            reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    RBRACE          reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    ECHO            reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    PRINT           reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    VARIABLE        reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    DEFINE          reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    READLINE        reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    SUMA            reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    RESTA           reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    DIVISION        reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    MODULO          reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    SMALLER         reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    GREATER         reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    AND             reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    OR              reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    XOR             reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_EQUAL        reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    WHILE           reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    DO              reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    FOR             reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    FOREACH         reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    TRY             reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    LPAREN          reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    SWITCH          reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    GOTO            reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    FUNCTION        reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    PUBLIC          reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    PRIVATE         reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    PROTECTED       reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    STATIC          reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IF              reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    BREAK           reduce using rule 62 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)


state 206

    (87) bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .

    $end            reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    RBRACE          reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    ECHO            reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    PRINT           reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    VARIABLE        reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    DEFINE          reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    READLINE        reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    SUMA            reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    RESTA           reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    MULTIPLICACION  reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    DIVISION        reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    MODULO          reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    SMALLER         reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    GREATER         reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    AND             reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    OR              reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    XOR             reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_EQUAL        reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_NOT_EQUAL    reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_IDENTICAL    reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    BOOLEAN_NOT     reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    WHILE           reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    DO              reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    FOR             reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    FOREACH         reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    TRY             reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    LPAREN          reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    SWITCH          reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    GOTO            reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    FUNCTION        reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    PUBLIC          reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    PRIVATE         reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    PROTECTED       reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    STATIC          reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IF              reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    BREAK           reduce using rule 87 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)


state 207

    (93) bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr . RPAREN stc_bloque_def

    RPAREN          shift and go to state 219


state 208

    (99) for_incr -> VARIABLE . SUMA SUMA
    (101) for_incr -> VARIABLE . RESTA RESTA
    (103) for_incr -> VARIABLE . SUMA EQUALS numero
    (104) for_incr -> VARIABLE . RESTA EQUALS numero

    SUMA            shift and go to state 220
    RESTA           shift and go to state 221


state 209

    (100) for_incr -> SUMA . SUMA VARIABLE

    SUMA            shift and go to state 222


state 210

    (102) for_incr -> RESTA . RESTA VARIABLE

    RESTA           shift and go to state 223


state 211

    (105) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .

    $end            reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    ECHO            reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    PRINT           reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    VARIABLE        reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    DEFINE          reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    READLINE        reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    SUMA            reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    RESTA           reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    MULTIPLICACION  reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    DIVISION        reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    MODULO          reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    SMALLER         reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    GREATER         reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_SMALLER_OR_EQUAL reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_GREATER_OR_EQUAL reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    AND             reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    OR              reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    XOR             reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_EQUAL        reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_NOT_EQUAL    reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_IDENTICAL    reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_NOT_IDENTICAL reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    BOOLEAN_NOT     reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    WHILE           reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    DO              reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    FOR             reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    FOREACH         reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    TRY             reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    LPAREN          reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    SWITCH          reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    GOTO            reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    FUNCTION        reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    PUBLIC          reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    PRIVATE         reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    PROTECTED       reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    STATIC          reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IF              reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    BREAK           reduce using rule 105 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)


state 212

    (111) catches -> catches CATCH LPAREN . NOMBRE VARIABLE RPAREN stc_bloque_def

    NOMBRE          shift and go to state 224


state 213

    (41) condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 225


state 214

    (90) bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .

    $end            reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    RBRACE          reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    ECHO            reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    PRINT           reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    VARIABLE        reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    DEFINE          reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    READLINE        reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    SUMA            reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    RESTA           reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    MULTIPLICACION  reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    DIVISION        reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    MODULO          reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    SMALLER         reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    GREATER         reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    AND             reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    OR              reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    XOR             reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    IS_EQUAL        reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    IS_NOT_EQUAL    reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    IS_IDENTICAL    reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    BOOLEAN_NOT     reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    WHILE           reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    DO              reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    FOR             reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    FOREACH         reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    TRY             reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    LPAREN          reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    SWITCH          reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    GOTO            reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    FUNCTION        reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    PUBLIC          reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    PRIVATE         reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    PROTECTED       reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    STATIC          reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    IF              reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    BREAK           reduce using rule 90 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)


state 215

    (91) innerSwitch -> CASE ENTERO . COLON cuerpo BREAK SEMI
    (92) innerSwitch -> CASE ENTERO . COLON cuerpo BREAK SEMI innerSwitch

    COLON           shift and go to state 226


state 216

    (84) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .

    $end            reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    RBRACE          reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    ECHO            reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    PRINT           reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    VARIABLE        reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    DEFINE          reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    READLINE        reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    SUMA            reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    RESTA           reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    MULTIPLICACION  reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    DIVISION        reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    MODULO          reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    SMALLER         reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    GREATER         reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    AND             reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    OR              reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    XOR             reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IS_EQUAL        reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IS_NOT_EQUAL    reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IS_IDENTICAL    reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    BOOLEAN_NOT     reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    WHILE           reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    DO              reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    FOR             reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    FOREACH         reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    TRY             reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    LPAREN          reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    SWITCH          reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    GOTO            reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    FUNCTION        reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    PUBLIC          reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    PRIVATE         reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    PROTECTED       reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    STATIC          reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IF              reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    BREAK           reduce using rule 84 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)


state 217

    (82) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE . empty RBRACE
    (113) empty -> .

    RBRACE          reduce using rule 113 (empty -> .)

    empty                          shift and go to state 227

state 218

    (40) condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .

    ELSE            reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    ELSEIF          reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    $end            reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    ECHO            reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PRINT           reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    VARIABLE        reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DEFINE          reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    READLINE        reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SUMA            reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RESTA           reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    MULTIPLICACION  reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DIVISION        reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    MODULO          reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SMALLER         reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    GREATER         reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    AND             reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    OR              reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    XOR             reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_EQUAL        reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_NOT_EQUAL    reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_IDENTICAL    reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    BOOLEAN_NOT     reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    WHILE           reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DO              reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FOR             reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FOREACH         reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    TRY             reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    LPAREN          reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SWITCH          reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    GOTO            reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FUNCTION        reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PUBLIC          reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PRIVATE         reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PROTECTED       reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    STATIC          reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IF              reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    BREAK           reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)


state 219

    (93) bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN . stc_bloque_def
    (98) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 113

    stc_bloque_def                 shift and go to state 228

state 220

    (99) for_incr -> VARIABLE SUMA . SUMA
    (103) for_incr -> VARIABLE SUMA . EQUALS numero

    SUMA            shift and go to state 229
    EQUALS          shift and go to state 230


state 221

    (101) for_incr -> VARIABLE RESTA . RESTA
    (104) for_incr -> VARIABLE RESTA . EQUALS numero

    RESTA           shift and go to state 231
    EQUALS          shift and go to state 232


state 222

    (100) for_incr -> SUMA SUMA . VARIABLE

    VARIABLE        shift and go to state 233


state 223

    (102) for_incr -> RESTA RESTA . VARIABLE

    VARIABLE        shift and go to state 234


state 224

    (111) catches -> catches CATCH LPAREN NOMBRE . VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 235


state 225

    (41) condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .

    ELSE            reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    $end            reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    ECHO            reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PRINT           reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    VARIABLE        reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DEFINE          reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    READLINE        reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SUMA            reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RESTA           reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    MULTIPLICACION  reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DIVISION        reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    MODULO          reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SMALLER         reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    GREATER         reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    AND             reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    OR              reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    XOR             reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_EQUAL        reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_NOT_EQUAL    reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_IDENTICAL    reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    BOOLEAN_NOT     reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    WHILE           reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DO              reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FOR             reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FOREACH         reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    TRY             reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    LPAREN          reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SWITCH          reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    GOTO            reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FUNCTION        reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PUBLIC          reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PRIVATE         reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PROTECTED       reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    STATIC          reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IF              reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    BREAK           reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)


state 226

    (91) innerSwitch -> CASE ENTERO COLON . cuerpo BREAK SEMI
    (92) innerSwitch -> CASE ENTERO COLON . cuerpo BREAK SEMI innerSwitch
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat_par
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (21) imprimir -> . ECHO valor SEMI
    (22) imprimir -> . PRINT valor SEMI
    (23) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (24) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (69) funciones -> . funcion_nparams
    (70) funciones -> . proteccion funcion_nparams
    (71) funciones -> . funcion_opreturn
    (72) funciones -> . proteccion funcion_opreturn
    (73) funciones -> . funcion_blank
    (74) funciones -> . proteccion funcion_blank
    (75) funciones -> . funcion_void
    (61) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (62) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (63) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (64) lectura -> . READLINE LPAREN RPAREN SEMI
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL
    (47) condicion_booleana -> . AND
    (48) condicion_booleana -> . OR
    (49) condicion_booleana -> . XOR
    (50) condicion_booleana -> . IS_EQUAL
    (51) condicion_booleana -> . IS_NOT_EQUAL
    (52) condicion_booleana -> . IS_IDENTICAL
    (53) condicion_booleana -> . IS_NOT_IDENTICAL
    (54) condicion_booleana -> . BOOLEAN_NOT
    (87) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (88) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (89) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (93) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (105) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (110) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (43) condicion_ifelse -> . condicion_if
    (44) condicion_ifelse -> . condicion_if condicion_else
    (45) condicion_ifelse -> . condicion_if condicion_elseif
    (46) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (90) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (114) bgoto -> . GOTO NOMBRE SEMI
    (78) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (65) proteccion -> . PUBLIC
    (66) proteccion -> . PRIVATE
    (67) proteccion -> . PROTECTED
    (68) proteccion -> . STATIC
    (81) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (84) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (82) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (40) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    VARIABLE        shift and go to state 23
    DEFINE          shift and go to state 29
    READLINE        shift and go to state 30
    SUMA            shift and go to state 31
    RESTA           shift and go to state 32
    MULTIPLICACION  shift and go to state 33
    DIVISION        shift and go to state 34
    MODULO          shift and go to state 35
    SMALLER         shift and go to state 36
    GREATER         shift and go to state 37
    IS_SMALLER_OR_EQUAL shift and go to state 38
    IS_GREATER_OR_EQUAL shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    XOR             shift and go to state 42
    IS_EQUAL        shift and go to state 43
    IS_NOT_EQUAL    shift and go to state 44
    IS_IDENTICAL    shift and go to state 45
    IS_NOT_IDENTICAL shift and go to state 46
    BOOLEAN_NOT     shift and go to state 47
    WHILE           shift and go to state 48
    DO              shift and go to state 49
    FOR             shift and go to state 50
    FOREACH         shift and go to state 51
    TRY             shift and go to state 52
    LPAREN          shift and go to state 22
    SWITCH          shift and go to state 54
    GOTO            shift and go to state 55
    FUNCTION        shift and go to state 56
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60
    IF              shift and go to state 61

    cuerpo                         shift and go to state 236
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat_par            shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    funcion_nparams                shift and go to state 24
    proteccion                     shift and go to state 25
    funcion_opreturn               shift and go to state 26
    funcion_blank                  shift and go to state 27
    funcion_void                   shift and go to state 28
    condicion_if                   shift and go to state 53

state 227

    (82) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty . RBRACE

    RBRACE          shift and go to state 237


state 228

    (93) bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .

    $end            reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    ECHO            reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    PRINT           reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    VARIABLE        reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    DEFINE          reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    READLINE        reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    SUMA            reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    RESTA           reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    MULTIPLICACION  reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    DIVISION        reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    MODULO          reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    SMALLER         reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    GREATER         reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_SMALLER_OR_EQUAL reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_GREATER_OR_EQUAL reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    AND             reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    OR              reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    XOR             reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_EQUAL        reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_NOT_EQUAL    reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_IDENTICAL    reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_NOT_IDENTICAL reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    BOOLEAN_NOT     reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    WHILE           reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    DO              reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    FOR             reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    FOREACH         reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    TRY             reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    LPAREN          reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    SWITCH          reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    GOTO            reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    FUNCTION        reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    PUBLIC          reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    PRIVATE         reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    PROTECTED       reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    STATIC          reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IF              reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    BREAK           reduce using rule 93 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)


state 229

    (99) for_incr -> VARIABLE SUMA SUMA .

    RPAREN          reduce using rule 99 (for_incr -> VARIABLE SUMA SUMA .)


state 230

    (103) for_incr -> VARIABLE SUMA EQUALS . numero
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    ENTERO          shift and go to state 64
    DECIMAL         shift and go to state 68

    numero                         shift and go to state 238

state 231

    (101) for_incr -> VARIABLE RESTA RESTA .

    RPAREN          reduce using rule 101 (for_incr -> VARIABLE RESTA RESTA .)


state 232

    (104) for_incr -> VARIABLE RESTA EQUALS . numero
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    ENTERO          shift and go to state 64
    DECIMAL         shift and go to state 68

    numero                         shift and go to state 239

state 233

    (100) for_incr -> SUMA SUMA VARIABLE .

    RPAREN          reduce using rule 100 (for_incr -> SUMA SUMA VARIABLE .)


state 234

    (102) for_incr -> RESTA RESTA VARIABLE .

    RPAREN          reduce using rule 102 (for_incr -> RESTA RESTA VARIABLE .)


state 235

    (111) catches -> catches CATCH LPAREN NOMBRE VARIABLE . RPAREN stc_bloque_def

    RPAREN          shift and go to state 240


state 236

    (91) innerSwitch -> CASE ENTERO COLON cuerpo . BREAK SEMI
    (92) innerSwitch -> CASE ENTERO COLON cuerpo . BREAK SEMI innerSwitch

    BREAK           shift and go to state 241


state 237

    (82) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .

    $end            reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    RBRACE          reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    ECHO            reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    PRINT           reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    VARIABLE        reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    DEFINE          reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    READLINE        reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    SUMA            reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    RESTA           reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    MULTIPLICACION  reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    DIVISION        reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    MODULO          reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    SMALLER         reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    GREATER         reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    AND             reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    OR              reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    XOR             reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    IS_EQUAL        reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    IS_NOT_EQUAL    reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    IS_IDENTICAL    reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    BOOLEAN_NOT     reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    WHILE           reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    DO              reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    FOR             reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    FOREACH         reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    TRY             reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    LPAREN          reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    SWITCH          reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    GOTO            reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    FUNCTION        reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    PUBLIC          reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    PRIVATE         reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    PROTECTED       reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    STATIC          reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    IF              reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    BREAK           reduce using rule 82 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)


state 238

    (103) for_incr -> VARIABLE SUMA EQUALS numero .

    RPAREN          reduce using rule 103 (for_incr -> VARIABLE SUMA EQUALS numero .)


state 239

    (104) for_incr -> VARIABLE RESTA EQUALS numero .

    RPAREN          reduce using rule 104 (for_incr -> VARIABLE RESTA EQUALS numero .)


state 240

    (111) catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN . stc_bloque_def
    (98) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 113

    stc_bloque_def                 shift and go to state 242

state 241

    (91) innerSwitch -> CASE ENTERO COLON cuerpo BREAK . SEMI
    (92) innerSwitch -> CASE ENTERO COLON cuerpo BREAK . SEMI innerSwitch

    SEMI            shift and go to state 243


state 242

    (111) catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .

    CATCH           reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    $end            reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    ECHO            reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    PRINT           reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    VARIABLE        reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    DEFINE          reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    READLINE        reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    SUMA            reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    RESTA           reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    MULTIPLICACION  reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    DIVISION        reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    MODULO          reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    SMALLER         reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    GREATER         reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_SMALLER_OR_EQUAL reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_GREATER_OR_EQUAL reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    AND             reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    OR              reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    XOR             reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_EQUAL        reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_NOT_EQUAL    reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_IDENTICAL    reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_NOT_IDENTICAL reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    BOOLEAN_NOT     reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    WHILE           reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    DO              reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    FOR             reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    FOREACH         reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    TRY             reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    LPAREN          reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    SWITCH          reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    GOTO            reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    FUNCTION        reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    PUBLIC          reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    PRIVATE         reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    PROTECTED       reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    STATIC          reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IF              reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    BREAK           reduce using rule 111 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)


state 243

    (91) innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI .
    (92) innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI . innerSwitch
    (91) innerSwitch -> . CASE ENTERO COLON cuerpo BREAK SEMI
    (92) innerSwitch -> . CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch

    RBRACE          reduce using rule 91 (innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI .)
    CASE            shift and go to state 198

    innerSwitch                    shift and go to state 244

state 244

    (92) innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch .

    RBRACE          reduce using rule 92 (innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SMALLER in state 107 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 107 resolved as shift
WARNING: shift/reduce conflict for IS_SMALLER_OR_EQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for IS_GREATER_OR_EQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 128 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 192 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 192 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 192 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 192 resolved as shift
WARNING: shift/reduce conflict for READLINE in state 192 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 192 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 192 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 192 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 192 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 192 resolved as shift
WARNING: shift/reduce conflict for SMALLER in state 192 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 192 resolved as shift
WARNING: shift/reduce conflict for IS_SMALLER_OR_EQUAL in state 192 resolved as shift
WARNING: shift/reduce conflict for IS_GREATER_OR_EQUAL in state 192 resolved as shift
WARNING: shift/reduce conflict for AND in state 192 resolved as shift
WARNING: shift/reduce conflict for OR in state 192 resolved as shift
WARNING: shift/reduce conflict for XOR in state 192 resolved as shift
WARNING: shift/reduce conflict for IS_EQUAL in state 192 resolved as shift
WARNING: shift/reduce conflict for IS_NOT_EQUAL in state 192 resolved as shift
WARNING: shift/reduce conflict for IS_IDENTICAL in state 192 resolved as shift
WARNING: shift/reduce conflict for IS_NOT_IDENTICAL in state 192 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN_NOT in state 192 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 192 resolved as shift
WARNING: shift/reduce conflict for DO in state 192 resolved as shift
WARNING: shift/reduce conflict for FOR in state 192 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 192 resolved as shift
WARNING: shift/reduce conflict for TRY in state 192 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 192 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 192 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 192 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 192 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 192 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 192 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 192 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 192 resolved as shift
WARNING: shift/reduce conflict for IF in state 192 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 201 resolved as shift
WARNING: reduce/reduce conflict in state 199 resolved using rule (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def)
WARNING: rejected rule (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def) in state 199
WARNING: Rule (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def) is never reduced
