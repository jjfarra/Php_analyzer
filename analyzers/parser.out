Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL
    COMENTARIOS
    CONCAT
    CONTINUE
    CURLY_OPEN
    DEFAULT
    DIV_EQUAL
    DOC_COMENTARIOS
    DOUBLE
    EXIT
    FALSE
    FLOAT
    INT
    MINUS_EQUAL
    MOD_EQUAL
    MUL_EQUAL
    NOT
    PLUS_EQUAL
    REQUIRE
    TRUE
    queue

Grammar

Rule 0     S' -> cuerpo
Rule 1     cuerpo -> imprimir
Rule 2     cuerpo -> asignacion
Rule 3     cuerpo -> asignacion_array
Rule 4     cuerpo -> funciones
Rule 5     cuerpo -> constante
Rule 6     cuerpo -> lectura
Rule 7     cuerpo -> operadores
Rule 8     cuerpo -> operador_logico
Rule 9     cuerpo -> condicion_booleana
Rule 10    cuerpo -> bwhile
Rule 11    cuerpo -> bdo
Rule 12    cuerpo -> bfor
Rule 13    cuerpo -> bforeach
Rule 14    cuerpo -> btry
Rule 15    cuerpo -> operaciones_mat_par
Rule 16    cuerpo -> condicion_ifelse
Rule 17    cuerpo -> bswitch
Rule 18    cuerpo -> bgoto
Rule 19    cuerpo_general -> cuerpo
Rule 20    form -> OPEN_TAG cuerpo_general CLOSE_TAG
Rule 21    imprimir -> ECHO valor SEMI
Rule 22    imprimir -> PRINT valor SEMI
Rule 23    imprimir -> PRINT LPAREN valor RPAREN SEMI
Rule 24    imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
Rule 25    valor -> numero
Rule 26    valor -> VARIABLE
Rule 27    valor -> STRING
Rule 28    valor -> NOMBRE
Rule 29    numero -> ENTERO
Rule 30    numero -> DECIMAL
Rule 31    operadores -> SUMA
Rule 32    operadores -> RESTA
Rule 33    operadores -> MULTIPLICACION
Rule 34    operadores -> DIVISION
Rule 35    operadores -> MODULO
Rule 36    operador_logico -> SMALLER
Rule 37    operador_logico -> GREATER
Rule 38    operador_logico -> IS_SMALLER_OR_EQUAL
Rule 39    operador_logico -> IS_GREATER_OR_EQUAL
Rule 40    condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
Rule 41    condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE
Rule 42    condicion_else -> ELSE LBRACE cuerpo RBRACE
Rule 43    condicion_ifelse -> condicion_if
Rule 44    condicion_ifelse -> condicion_if condicion_else
Rule 45    condicion_ifelse -> condicion_if condicion_elseif
Rule 46    condicion_ifelse -> condicion_if condicion_elseif condicion_else
Rule 47    condicion_booleana -> AND
Rule 48    condicion_booleana -> OR
Rule 49    condicion_booleana -> XOR
Rule 50    condicion_booleana -> IS_EQUAL
Rule 51    condicion_booleana -> IS_NOT_EQUAL
Rule 52    condicion_booleana -> IS_IDENTICAL
Rule 53    condicion_booleana -> IS_NOT_IDENTICAL
Rule 54    condicion_booleana -> BOOLEAN_NOT
Rule 55    operaciones_mat -> valor operadores valor
Rule 56    operaciones_mat -> valor operadores operaciones_mat
Rule 57    operaciones_mat_par -> LPAREN valor operadores valor RPAREN
Rule 58    operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN
Rule 59    asignacion -> VARIABLE EQUALS valor SEMI
Rule 60    asignacion -> VAR asignacion
Rule 61    asignacion -> proteccion asignacion
Rule 62    asignacion_array -> VARIABLE EQUALS array_def SEMI
Rule 63    constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI
Rule 64    constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
Rule 65    lectura -> READLINE LPAREN STRING RPAREN SEMI
Rule 66    lectura -> READLINE LPAREN RPAREN SEMI
Rule 67    proteccion -> PUBLIC
Rule 68    proteccion -> PRIVATE
Rule 69    proteccion -> PROTECTED
Rule 70    proteccion -> STATIC
Rule 71    funciones -> funcion_nparams
Rule 72    funciones -> proteccion funcion_nparams
Rule 73    funciones -> funcion_opreturn
Rule 74    funciones -> proteccion funcion_opreturn
Rule 75    funciones -> funcion_blank
Rule 76    funciones -> proteccion funcion_blank
Rule 77    funciones -> funcion_void
Rule 78    param -> VARIABLE
Rule 79    param -> asignacion
Rule 80    funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
Rule 81    params_list -> params_list COMMA param
Rule 82    params_list -> param
Rule 83    funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
Rule 84    funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
Rule 85    funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
Rule 86    funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
Rule 87    condicion -> VARIABLE operador_logico VARIABLE
Rule 88    condicion -> valor operador_logico valor
Rule 89    bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
Rule 90    bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque
Rule 91    bdo -> DO LBRACE cuerpo RBRACE bwhile
Rule 92    bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
Rule 93    innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI
Rule 94    innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch
Rule 95    colas -> <empty>
Rule 96    bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
Rule 97    stc_bloque -> stc_bloque cuerpo
Rule 98    stc_bloque -> empty
Rule 99    stc_bloque -> RETURN
Rule 100   stc_bloque -> RETURN NULL
Rule 101   stc_bloque_def -> LBRACE stc_bloque RBRACE
Rule 102   for_incr -> VARIABLE SUMA SUMA
Rule 103   for_incr -> SUMA SUMA VARIABLE
Rule 104   for_incr -> VARIABLE RESTA RESTA
Rule 105   for_incr -> RESTA RESTA VARIABLE
Rule 106   for_incr -> VARIABLE SUMA EQUALS numero
Rule 107   for_incr -> VARIABLE RESTA EQUALS numero
Rule 108   bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
Rule 109   array_def -> ARRAY LPAREN RPAREN
Rule 110   array_def -> ARRAY LPAREN array_elmnt RPAREN
Rule 111   array_elmnt -> valor
Rule 112   array_elmnt -> empty
Rule 113   btry -> TRY LBRACE stc_bloque_def RBRACE catches
Rule 114   catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def
Rule 115   catches -> empty
Rule 116   empty -> <empty>
Rule 117   bgoto -> GOTO NOMBRE SEMI

Terminals, with rules where they appear

AND                  : 47
ARRAY                : 64 109 110
AS                   : 108
BOOL                 : 
BOOLEAN_NOT          : 54
BREAK                : 93 94
CASE                 : 93 94
CATCH                : 114
CLOSE_TAG            : 20
COLON                : 84 90 93 94
COMENTARIOS          : 
COMMA                : 63 64 81
CONCAT               : 
CONTINUE             : 
CURLY_OPEN           : 
DECIMAL              : 30
DEFAULT              : 
DEFINE               : 63 64
DIVISION             : 34
DIV_EQUAL            : 
DO                   : 91
DOC_COMENTARIOS      : 
DOUBLE               : 
ECHO                 : 21 24
ELSE                 : 42
ELSEIF               : 41
ENTERO               : 24 29 93 94
EQUALS               : 59 62 106 107
EXIT                 : 
FALSE                : 
FLOAT                : 
FOR                  : 96
FOREACH              : 108
FUNCTION             : 80 83 84 85 86
GOTO                 : 117
GREATER              : 37
IF                   : 40
INT                  : 
IS_EQUAL             : 50
IS_GREATER_OR_EQUAL  : 39
IS_IDENTICAL         : 52
IS_NOT_EQUAL         : 51
IS_NOT_IDENTICAL     : 53
IS_SMALLER_OR_EQUAL  : 38
LBRACE               : 40 41 42 84 86 89 91 92 101 113
LBRACKET             : 24
LPAREN               : 23 40 41 57 58 63 64 65 66 80 83 84 85 86 89 90 92 96 108 109 110 114
MINUS_EQUAL          : 
MODULO               : 35
MOD_EQUAL            : 
MULTIPLICACION       : 33
MUL_EQUAL            : 
NOMBRE               : 24 28 64 80 83 84 85 86 114 117
NOT                  : 
NULL                 : 100
OPEN_TAG             : 20
OR                   : 48
PLUS_EQUAL           : 
PRINT                : 22 23
PRIVATE              : 68
PROTECTED            : 69
PUBLIC               : 67
RBRACE               : 40 41 42 84 86 89 91 92 101 113
RBRACKET             : 24
READLINE             : 65 66
REQUIRE              : 
RESTA                : 32 104 104 105 105 107
RETURN               : 99 100
RPAREN               : 23 40 41 57 58 63 64 65 66 80 83 84 85 86 89 90 92 96 108 109 110 114
SEMI                 : 21 22 23 24 59 62 63 64 65 66 93 94 96 96 117
SMALLER              : 36
STATIC               : 70
STRING               : 27 63 65
SUMA                 : 31 102 102 103 103 106
SWITCH               : 92
TRUE                 : 
TRY                  : 113
VAR                  : 60
VARIABLE             : 26 59 62 78 87 87 92 102 103 104 105 106 107 108 108 114
VOID                 : 84
WHILE                : 89 90
XOR                  : 49
error                : 
queue                : 

Nonterminals, with rules where they appear

array_def            : 62
array_elmnt          : 110
asignacion           : 2 60 61 79 96
asignacion_array     : 3
bdo                  : 11
bfor                 : 12
bforeach             : 13
bgoto                : 18
bswitch              : 17
btry                 : 14
bwhile               : 10 91
catches              : 113 114
colas                : 
condicion            : 40 41 89 90 96
condicion_booleana   : 9
condicion_else       : 44 46
condicion_elseif     : 45 46
condicion_if         : 43 44 45 46
condicion_ifelse     : 16
constante            : 5
cuerpo               : 19 40 41 42 91 93 94 97 0
cuerpo_general       : 20
empty                : 84 86 98 112 115
for_incr             : 96
form                 : 
funcion_blank        : 75 76
funcion_nparams      : 71 72
funcion_opreturn     : 73 74
funcion_void         : 77
funciones            : 4
imprimir             : 1
innerSwitch          : 92 94
lectura              : 6
numero               : 25 106 107
operaciones_mat      : 56
operaciones_mat_par  : 15 58
operador_logico      : 8 87 88
operadores           : 7 55 56 57 58
param                : 81 82
params_list          : 80 81 83
proteccion           : 61 72 74 76
stc_bloque           : 89 90 97 101
stc_bloque_def       : 80 83 85 96 108 113 114
valor                : 21 22 23 55 55 56 57 57 58 59 63 88 88 111

Parsing method: LALR

state 0

    (0) S' -> . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat_par
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (21) imprimir -> . ECHO valor SEMI
    (22) imprimir -> . PRINT valor SEMI
    (23) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (24) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion -> . VAR asignacion
    (61) asignacion -> . proteccion asignacion
    (62) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (71) funciones -> . funcion_nparams
    (72) funciones -> . proteccion funcion_nparams
    (73) funciones -> . funcion_opreturn
    (74) funciones -> . proteccion funcion_opreturn
    (75) funciones -> . funcion_blank
    (76) funciones -> . proteccion funcion_blank
    (77) funciones -> . funcion_void
    (63) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (64) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (65) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (66) lectura -> . READLINE LPAREN RPAREN SEMI
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL
    (47) condicion_booleana -> . AND
    (48) condicion_booleana -> . OR
    (49) condicion_booleana -> . XOR
    (50) condicion_booleana -> . IS_EQUAL
    (51) condicion_booleana -> . IS_NOT_EQUAL
    (52) condicion_booleana -> . IS_IDENTICAL
    (53) condicion_booleana -> . IS_NOT_IDENTICAL
    (54) condicion_booleana -> . BOOLEAN_NOT
    (89) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (90) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (91) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (96) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (108) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (113) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (43) condicion_ifelse -> . condicion_if
    (44) condicion_ifelse -> . condicion_if condicion_else
    (45) condicion_ifelse -> . condicion_if condicion_elseif
    (46) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (92) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (117) bgoto -> . GOTO NOMBRE SEMI
    (67) proteccion -> . PUBLIC
    (68) proteccion -> . PRIVATE
    (69) proteccion -> . PROTECTED
    (70) proteccion -> . STATIC
    (80) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (85) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (86) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (84) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (40) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    DEFINE          shift and go to state 30
    READLINE        shift and go to state 31
    SUMA            shift and go to state 32
    RESTA           shift and go to state 33
    MULTIPLICACION  shift and go to state 34
    DIVISION        shift and go to state 35
    MODULO          shift and go to state 36
    SMALLER         shift and go to state 37
    GREATER         shift and go to state 38
    IS_SMALLER_OR_EQUAL shift and go to state 39
    IS_GREATER_OR_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    IS_EQUAL        shift and go to state 44
    IS_NOT_EQUAL    shift and go to state 45
    IS_IDENTICAL    shift and go to state 46
    IS_NOT_IDENTICAL shift and go to state 47
    BOOLEAN_NOT     shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    FOREACH         shift and go to state 52
    TRY             shift and go to state 53
    LPAREN          shift and go to state 22
    SWITCH          shift and go to state 55
    GOTO            shift and go to state 56
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60
    FUNCTION        shift and go to state 61
    IF              shift and go to state 62

    cuerpo                         shift and go to state 1
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat_par            shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    proteccion                     shift and go to state 25
    funcion_nparams                shift and go to state 26
    funcion_opreturn               shift and go to state 27
    funcion_blank                  shift and go to state 28
    funcion_void                   shift and go to state 29
    condicion_if                   shift and go to state 54

state 1

    (0) S' -> cuerpo .



state 2

    (1) cuerpo -> imprimir .

    $end            reduce using rule 1 (cuerpo -> imprimir .)
    RBRACE          reduce using rule 1 (cuerpo -> imprimir .)
    ECHO            reduce using rule 1 (cuerpo -> imprimir .)
    PRINT           reduce using rule 1 (cuerpo -> imprimir .)
    VARIABLE        reduce using rule 1 (cuerpo -> imprimir .)
    VAR             reduce using rule 1 (cuerpo -> imprimir .)
    DEFINE          reduce using rule 1 (cuerpo -> imprimir .)
    READLINE        reduce using rule 1 (cuerpo -> imprimir .)
    SUMA            reduce using rule 1 (cuerpo -> imprimir .)
    RESTA           reduce using rule 1 (cuerpo -> imprimir .)
    MULTIPLICACION  reduce using rule 1 (cuerpo -> imprimir .)
    DIVISION        reduce using rule 1 (cuerpo -> imprimir .)
    MODULO          reduce using rule 1 (cuerpo -> imprimir .)
    SMALLER         reduce using rule 1 (cuerpo -> imprimir .)
    GREATER         reduce using rule 1 (cuerpo -> imprimir .)
    IS_SMALLER_OR_EQUAL reduce using rule 1 (cuerpo -> imprimir .)
    IS_GREATER_OR_EQUAL reduce using rule 1 (cuerpo -> imprimir .)
    AND             reduce using rule 1 (cuerpo -> imprimir .)
    OR              reduce using rule 1 (cuerpo -> imprimir .)
    XOR             reduce using rule 1 (cuerpo -> imprimir .)
    IS_EQUAL        reduce using rule 1 (cuerpo -> imprimir .)
    IS_NOT_EQUAL    reduce using rule 1 (cuerpo -> imprimir .)
    IS_IDENTICAL    reduce using rule 1 (cuerpo -> imprimir .)
    IS_NOT_IDENTICAL reduce using rule 1 (cuerpo -> imprimir .)
    BOOLEAN_NOT     reduce using rule 1 (cuerpo -> imprimir .)
    WHILE           reduce using rule 1 (cuerpo -> imprimir .)
    DO              reduce using rule 1 (cuerpo -> imprimir .)
    FOR             reduce using rule 1 (cuerpo -> imprimir .)
    FOREACH         reduce using rule 1 (cuerpo -> imprimir .)
    TRY             reduce using rule 1 (cuerpo -> imprimir .)
    LPAREN          reduce using rule 1 (cuerpo -> imprimir .)
    SWITCH          reduce using rule 1 (cuerpo -> imprimir .)
    GOTO            reduce using rule 1 (cuerpo -> imprimir .)
    PUBLIC          reduce using rule 1 (cuerpo -> imprimir .)
    PRIVATE         reduce using rule 1 (cuerpo -> imprimir .)
    PROTECTED       reduce using rule 1 (cuerpo -> imprimir .)
    STATIC          reduce using rule 1 (cuerpo -> imprimir .)
    FUNCTION        reduce using rule 1 (cuerpo -> imprimir .)
    IF              reduce using rule 1 (cuerpo -> imprimir .)
    BREAK           reduce using rule 1 (cuerpo -> imprimir .)


state 3

    (2) cuerpo -> asignacion .

    $end            reduce using rule 2 (cuerpo -> asignacion .)
    RBRACE          reduce using rule 2 (cuerpo -> asignacion .)
    ECHO            reduce using rule 2 (cuerpo -> asignacion .)
    PRINT           reduce using rule 2 (cuerpo -> asignacion .)
    VARIABLE        reduce using rule 2 (cuerpo -> asignacion .)
    VAR             reduce using rule 2 (cuerpo -> asignacion .)
    DEFINE          reduce using rule 2 (cuerpo -> asignacion .)
    READLINE        reduce using rule 2 (cuerpo -> asignacion .)
    SUMA            reduce using rule 2 (cuerpo -> asignacion .)
    RESTA           reduce using rule 2 (cuerpo -> asignacion .)
    MULTIPLICACION  reduce using rule 2 (cuerpo -> asignacion .)
    DIVISION        reduce using rule 2 (cuerpo -> asignacion .)
    MODULO          reduce using rule 2 (cuerpo -> asignacion .)
    SMALLER         reduce using rule 2 (cuerpo -> asignacion .)
    GREATER         reduce using rule 2 (cuerpo -> asignacion .)
    IS_SMALLER_OR_EQUAL reduce using rule 2 (cuerpo -> asignacion .)
    IS_GREATER_OR_EQUAL reduce using rule 2 (cuerpo -> asignacion .)
    AND             reduce using rule 2 (cuerpo -> asignacion .)
    OR              reduce using rule 2 (cuerpo -> asignacion .)
    XOR             reduce using rule 2 (cuerpo -> asignacion .)
    IS_EQUAL        reduce using rule 2 (cuerpo -> asignacion .)
    IS_NOT_EQUAL    reduce using rule 2 (cuerpo -> asignacion .)
    IS_IDENTICAL    reduce using rule 2 (cuerpo -> asignacion .)
    IS_NOT_IDENTICAL reduce using rule 2 (cuerpo -> asignacion .)
    BOOLEAN_NOT     reduce using rule 2 (cuerpo -> asignacion .)
    WHILE           reduce using rule 2 (cuerpo -> asignacion .)
    DO              reduce using rule 2 (cuerpo -> asignacion .)
    FOR             reduce using rule 2 (cuerpo -> asignacion .)
    FOREACH         reduce using rule 2 (cuerpo -> asignacion .)
    TRY             reduce using rule 2 (cuerpo -> asignacion .)
    LPAREN          reduce using rule 2 (cuerpo -> asignacion .)
    SWITCH          reduce using rule 2 (cuerpo -> asignacion .)
    GOTO            reduce using rule 2 (cuerpo -> asignacion .)
    PUBLIC          reduce using rule 2 (cuerpo -> asignacion .)
    PRIVATE         reduce using rule 2 (cuerpo -> asignacion .)
    PROTECTED       reduce using rule 2 (cuerpo -> asignacion .)
    STATIC          reduce using rule 2 (cuerpo -> asignacion .)
    FUNCTION        reduce using rule 2 (cuerpo -> asignacion .)
    IF              reduce using rule 2 (cuerpo -> asignacion .)
    BREAK           reduce using rule 2 (cuerpo -> asignacion .)


state 4

    (3) cuerpo -> asignacion_array .

    $end            reduce using rule 3 (cuerpo -> asignacion_array .)
    RBRACE          reduce using rule 3 (cuerpo -> asignacion_array .)
    ECHO            reduce using rule 3 (cuerpo -> asignacion_array .)
    PRINT           reduce using rule 3 (cuerpo -> asignacion_array .)
    VARIABLE        reduce using rule 3 (cuerpo -> asignacion_array .)
    VAR             reduce using rule 3 (cuerpo -> asignacion_array .)
    DEFINE          reduce using rule 3 (cuerpo -> asignacion_array .)
    READLINE        reduce using rule 3 (cuerpo -> asignacion_array .)
    SUMA            reduce using rule 3 (cuerpo -> asignacion_array .)
    RESTA           reduce using rule 3 (cuerpo -> asignacion_array .)
    MULTIPLICACION  reduce using rule 3 (cuerpo -> asignacion_array .)
    DIVISION        reduce using rule 3 (cuerpo -> asignacion_array .)
    MODULO          reduce using rule 3 (cuerpo -> asignacion_array .)
    SMALLER         reduce using rule 3 (cuerpo -> asignacion_array .)
    GREATER         reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_SMALLER_OR_EQUAL reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_GREATER_OR_EQUAL reduce using rule 3 (cuerpo -> asignacion_array .)
    AND             reduce using rule 3 (cuerpo -> asignacion_array .)
    OR              reduce using rule 3 (cuerpo -> asignacion_array .)
    XOR             reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_EQUAL        reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_NOT_EQUAL    reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_IDENTICAL    reduce using rule 3 (cuerpo -> asignacion_array .)
    IS_NOT_IDENTICAL reduce using rule 3 (cuerpo -> asignacion_array .)
    BOOLEAN_NOT     reduce using rule 3 (cuerpo -> asignacion_array .)
    WHILE           reduce using rule 3 (cuerpo -> asignacion_array .)
    DO              reduce using rule 3 (cuerpo -> asignacion_array .)
    FOR             reduce using rule 3 (cuerpo -> asignacion_array .)
    FOREACH         reduce using rule 3 (cuerpo -> asignacion_array .)
    TRY             reduce using rule 3 (cuerpo -> asignacion_array .)
    LPAREN          reduce using rule 3 (cuerpo -> asignacion_array .)
    SWITCH          reduce using rule 3 (cuerpo -> asignacion_array .)
    GOTO            reduce using rule 3 (cuerpo -> asignacion_array .)
    PUBLIC          reduce using rule 3 (cuerpo -> asignacion_array .)
    PRIVATE         reduce using rule 3 (cuerpo -> asignacion_array .)
    PROTECTED       reduce using rule 3 (cuerpo -> asignacion_array .)
    STATIC          reduce using rule 3 (cuerpo -> asignacion_array .)
    FUNCTION        reduce using rule 3 (cuerpo -> asignacion_array .)
    IF              reduce using rule 3 (cuerpo -> asignacion_array .)
    BREAK           reduce using rule 3 (cuerpo -> asignacion_array .)


state 5

    (4) cuerpo -> funciones .

    $end            reduce using rule 4 (cuerpo -> funciones .)
    RBRACE          reduce using rule 4 (cuerpo -> funciones .)
    ECHO            reduce using rule 4 (cuerpo -> funciones .)
    PRINT           reduce using rule 4 (cuerpo -> funciones .)
    VARIABLE        reduce using rule 4 (cuerpo -> funciones .)
    VAR             reduce using rule 4 (cuerpo -> funciones .)
    DEFINE          reduce using rule 4 (cuerpo -> funciones .)
    READLINE        reduce using rule 4 (cuerpo -> funciones .)
    SUMA            reduce using rule 4 (cuerpo -> funciones .)
    RESTA           reduce using rule 4 (cuerpo -> funciones .)
    MULTIPLICACION  reduce using rule 4 (cuerpo -> funciones .)
    DIVISION        reduce using rule 4 (cuerpo -> funciones .)
    MODULO          reduce using rule 4 (cuerpo -> funciones .)
    SMALLER         reduce using rule 4 (cuerpo -> funciones .)
    GREATER         reduce using rule 4 (cuerpo -> funciones .)
    IS_SMALLER_OR_EQUAL reduce using rule 4 (cuerpo -> funciones .)
    IS_GREATER_OR_EQUAL reduce using rule 4 (cuerpo -> funciones .)
    AND             reduce using rule 4 (cuerpo -> funciones .)
    OR              reduce using rule 4 (cuerpo -> funciones .)
    XOR             reduce using rule 4 (cuerpo -> funciones .)
    IS_EQUAL        reduce using rule 4 (cuerpo -> funciones .)
    IS_NOT_EQUAL    reduce using rule 4 (cuerpo -> funciones .)
    IS_IDENTICAL    reduce using rule 4 (cuerpo -> funciones .)
    IS_NOT_IDENTICAL reduce using rule 4 (cuerpo -> funciones .)
    BOOLEAN_NOT     reduce using rule 4 (cuerpo -> funciones .)
    WHILE           reduce using rule 4 (cuerpo -> funciones .)
    DO              reduce using rule 4 (cuerpo -> funciones .)
    FOR             reduce using rule 4 (cuerpo -> funciones .)
    FOREACH         reduce using rule 4 (cuerpo -> funciones .)
    TRY             reduce using rule 4 (cuerpo -> funciones .)
    LPAREN          reduce using rule 4 (cuerpo -> funciones .)
    SWITCH          reduce using rule 4 (cuerpo -> funciones .)
    GOTO            reduce using rule 4 (cuerpo -> funciones .)
    PUBLIC          reduce using rule 4 (cuerpo -> funciones .)
    PRIVATE         reduce using rule 4 (cuerpo -> funciones .)
    PROTECTED       reduce using rule 4 (cuerpo -> funciones .)
    STATIC          reduce using rule 4 (cuerpo -> funciones .)
    FUNCTION        reduce using rule 4 (cuerpo -> funciones .)
    IF              reduce using rule 4 (cuerpo -> funciones .)
    BREAK           reduce using rule 4 (cuerpo -> funciones .)


state 6

    (5) cuerpo -> constante .

    $end            reduce using rule 5 (cuerpo -> constante .)
    RBRACE          reduce using rule 5 (cuerpo -> constante .)
    ECHO            reduce using rule 5 (cuerpo -> constante .)
    PRINT           reduce using rule 5 (cuerpo -> constante .)
    VARIABLE        reduce using rule 5 (cuerpo -> constante .)
    VAR             reduce using rule 5 (cuerpo -> constante .)
    DEFINE          reduce using rule 5 (cuerpo -> constante .)
    READLINE        reduce using rule 5 (cuerpo -> constante .)
    SUMA            reduce using rule 5 (cuerpo -> constante .)
    RESTA           reduce using rule 5 (cuerpo -> constante .)
    MULTIPLICACION  reduce using rule 5 (cuerpo -> constante .)
    DIVISION        reduce using rule 5 (cuerpo -> constante .)
    MODULO          reduce using rule 5 (cuerpo -> constante .)
    SMALLER         reduce using rule 5 (cuerpo -> constante .)
    GREATER         reduce using rule 5 (cuerpo -> constante .)
    IS_SMALLER_OR_EQUAL reduce using rule 5 (cuerpo -> constante .)
    IS_GREATER_OR_EQUAL reduce using rule 5 (cuerpo -> constante .)
    AND             reduce using rule 5 (cuerpo -> constante .)
    OR              reduce using rule 5 (cuerpo -> constante .)
    XOR             reduce using rule 5 (cuerpo -> constante .)
    IS_EQUAL        reduce using rule 5 (cuerpo -> constante .)
    IS_NOT_EQUAL    reduce using rule 5 (cuerpo -> constante .)
    IS_IDENTICAL    reduce using rule 5 (cuerpo -> constante .)
    IS_NOT_IDENTICAL reduce using rule 5 (cuerpo -> constante .)
    BOOLEAN_NOT     reduce using rule 5 (cuerpo -> constante .)
    WHILE           reduce using rule 5 (cuerpo -> constante .)
    DO              reduce using rule 5 (cuerpo -> constante .)
    FOR             reduce using rule 5 (cuerpo -> constante .)
    FOREACH         reduce using rule 5 (cuerpo -> constante .)
    TRY             reduce using rule 5 (cuerpo -> constante .)
    LPAREN          reduce using rule 5 (cuerpo -> constante .)
    SWITCH          reduce using rule 5 (cuerpo -> constante .)
    GOTO            reduce using rule 5 (cuerpo -> constante .)
    PUBLIC          reduce using rule 5 (cuerpo -> constante .)
    PRIVATE         reduce using rule 5 (cuerpo -> constante .)
    PROTECTED       reduce using rule 5 (cuerpo -> constante .)
    STATIC          reduce using rule 5 (cuerpo -> constante .)
    FUNCTION        reduce using rule 5 (cuerpo -> constante .)
    IF              reduce using rule 5 (cuerpo -> constante .)
    BREAK           reduce using rule 5 (cuerpo -> constante .)


state 7

    (6) cuerpo -> lectura .

    $end            reduce using rule 6 (cuerpo -> lectura .)
    RBRACE          reduce using rule 6 (cuerpo -> lectura .)
    ECHO            reduce using rule 6 (cuerpo -> lectura .)
    PRINT           reduce using rule 6 (cuerpo -> lectura .)
    VARIABLE        reduce using rule 6 (cuerpo -> lectura .)
    VAR             reduce using rule 6 (cuerpo -> lectura .)
    DEFINE          reduce using rule 6 (cuerpo -> lectura .)
    READLINE        reduce using rule 6 (cuerpo -> lectura .)
    SUMA            reduce using rule 6 (cuerpo -> lectura .)
    RESTA           reduce using rule 6 (cuerpo -> lectura .)
    MULTIPLICACION  reduce using rule 6 (cuerpo -> lectura .)
    DIVISION        reduce using rule 6 (cuerpo -> lectura .)
    MODULO          reduce using rule 6 (cuerpo -> lectura .)
    SMALLER         reduce using rule 6 (cuerpo -> lectura .)
    GREATER         reduce using rule 6 (cuerpo -> lectura .)
    IS_SMALLER_OR_EQUAL reduce using rule 6 (cuerpo -> lectura .)
    IS_GREATER_OR_EQUAL reduce using rule 6 (cuerpo -> lectura .)
    AND             reduce using rule 6 (cuerpo -> lectura .)
    OR              reduce using rule 6 (cuerpo -> lectura .)
    XOR             reduce using rule 6 (cuerpo -> lectura .)
    IS_EQUAL        reduce using rule 6 (cuerpo -> lectura .)
    IS_NOT_EQUAL    reduce using rule 6 (cuerpo -> lectura .)
    IS_IDENTICAL    reduce using rule 6 (cuerpo -> lectura .)
    IS_NOT_IDENTICAL reduce using rule 6 (cuerpo -> lectura .)
    BOOLEAN_NOT     reduce using rule 6 (cuerpo -> lectura .)
    WHILE           reduce using rule 6 (cuerpo -> lectura .)
    DO              reduce using rule 6 (cuerpo -> lectura .)
    FOR             reduce using rule 6 (cuerpo -> lectura .)
    FOREACH         reduce using rule 6 (cuerpo -> lectura .)
    TRY             reduce using rule 6 (cuerpo -> lectura .)
    LPAREN          reduce using rule 6 (cuerpo -> lectura .)
    SWITCH          reduce using rule 6 (cuerpo -> lectura .)
    GOTO            reduce using rule 6 (cuerpo -> lectura .)
    PUBLIC          reduce using rule 6 (cuerpo -> lectura .)
    PRIVATE         reduce using rule 6 (cuerpo -> lectura .)
    PROTECTED       reduce using rule 6 (cuerpo -> lectura .)
    STATIC          reduce using rule 6 (cuerpo -> lectura .)
    FUNCTION        reduce using rule 6 (cuerpo -> lectura .)
    IF              reduce using rule 6 (cuerpo -> lectura .)
    BREAK           reduce using rule 6 (cuerpo -> lectura .)


state 8

    (7) cuerpo -> operadores .

    $end            reduce using rule 7 (cuerpo -> operadores .)
    RBRACE          reduce using rule 7 (cuerpo -> operadores .)
    ECHO            reduce using rule 7 (cuerpo -> operadores .)
    PRINT           reduce using rule 7 (cuerpo -> operadores .)
    VARIABLE        reduce using rule 7 (cuerpo -> operadores .)
    VAR             reduce using rule 7 (cuerpo -> operadores .)
    DEFINE          reduce using rule 7 (cuerpo -> operadores .)
    READLINE        reduce using rule 7 (cuerpo -> operadores .)
    SUMA            reduce using rule 7 (cuerpo -> operadores .)
    RESTA           reduce using rule 7 (cuerpo -> operadores .)
    MULTIPLICACION  reduce using rule 7 (cuerpo -> operadores .)
    DIVISION        reduce using rule 7 (cuerpo -> operadores .)
    MODULO          reduce using rule 7 (cuerpo -> operadores .)
    SMALLER         reduce using rule 7 (cuerpo -> operadores .)
    GREATER         reduce using rule 7 (cuerpo -> operadores .)
    IS_SMALLER_OR_EQUAL reduce using rule 7 (cuerpo -> operadores .)
    IS_GREATER_OR_EQUAL reduce using rule 7 (cuerpo -> operadores .)
    AND             reduce using rule 7 (cuerpo -> operadores .)
    OR              reduce using rule 7 (cuerpo -> operadores .)
    XOR             reduce using rule 7 (cuerpo -> operadores .)
    IS_EQUAL        reduce using rule 7 (cuerpo -> operadores .)
    IS_NOT_EQUAL    reduce using rule 7 (cuerpo -> operadores .)
    IS_IDENTICAL    reduce using rule 7 (cuerpo -> operadores .)
    IS_NOT_IDENTICAL reduce using rule 7 (cuerpo -> operadores .)
    BOOLEAN_NOT     reduce using rule 7 (cuerpo -> operadores .)
    WHILE           reduce using rule 7 (cuerpo -> operadores .)
    DO              reduce using rule 7 (cuerpo -> operadores .)
    FOR             reduce using rule 7 (cuerpo -> operadores .)
    FOREACH         reduce using rule 7 (cuerpo -> operadores .)
    TRY             reduce using rule 7 (cuerpo -> operadores .)
    LPAREN          reduce using rule 7 (cuerpo -> operadores .)
    SWITCH          reduce using rule 7 (cuerpo -> operadores .)
    GOTO            reduce using rule 7 (cuerpo -> operadores .)
    PUBLIC          reduce using rule 7 (cuerpo -> operadores .)
    PRIVATE         reduce using rule 7 (cuerpo -> operadores .)
    PROTECTED       reduce using rule 7 (cuerpo -> operadores .)
    STATIC          reduce using rule 7 (cuerpo -> operadores .)
    FUNCTION        reduce using rule 7 (cuerpo -> operadores .)
    IF              reduce using rule 7 (cuerpo -> operadores .)
    BREAK           reduce using rule 7 (cuerpo -> operadores .)


state 9

    (8) cuerpo -> operador_logico .

    $end            reduce using rule 8 (cuerpo -> operador_logico .)
    RBRACE          reduce using rule 8 (cuerpo -> operador_logico .)
    ECHO            reduce using rule 8 (cuerpo -> operador_logico .)
    PRINT           reduce using rule 8 (cuerpo -> operador_logico .)
    VARIABLE        reduce using rule 8 (cuerpo -> operador_logico .)
    VAR             reduce using rule 8 (cuerpo -> operador_logico .)
    DEFINE          reduce using rule 8 (cuerpo -> operador_logico .)
    READLINE        reduce using rule 8 (cuerpo -> operador_logico .)
    SUMA            reduce using rule 8 (cuerpo -> operador_logico .)
    RESTA           reduce using rule 8 (cuerpo -> operador_logico .)
    MULTIPLICACION  reduce using rule 8 (cuerpo -> operador_logico .)
    DIVISION        reduce using rule 8 (cuerpo -> operador_logico .)
    MODULO          reduce using rule 8 (cuerpo -> operador_logico .)
    SMALLER         reduce using rule 8 (cuerpo -> operador_logico .)
    GREATER         reduce using rule 8 (cuerpo -> operador_logico .)
    IS_SMALLER_OR_EQUAL reduce using rule 8 (cuerpo -> operador_logico .)
    IS_GREATER_OR_EQUAL reduce using rule 8 (cuerpo -> operador_logico .)
    AND             reduce using rule 8 (cuerpo -> operador_logico .)
    OR              reduce using rule 8 (cuerpo -> operador_logico .)
    XOR             reduce using rule 8 (cuerpo -> operador_logico .)
    IS_EQUAL        reduce using rule 8 (cuerpo -> operador_logico .)
    IS_NOT_EQUAL    reduce using rule 8 (cuerpo -> operador_logico .)
    IS_IDENTICAL    reduce using rule 8 (cuerpo -> operador_logico .)
    IS_NOT_IDENTICAL reduce using rule 8 (cuerpo -> operador_logico .)
    BOOLEAN_NOT     reduce using rule 8 (cuerpo -> operador_logico .)
    WHILE           reduce using rule 8 (cuerpo -> operador_logico .)
    DO              reduce using rule 8 (cuerpo -> operador_logico .)
    FOR             reduce using rule 8 (cuerpo -> operador_logico .)
    FOREACH         reduce using rule 8 (cuerpo -> operador_logico .)
    TRY             reduce using rule 8 (cuerpo -> operador_logico .)
    LPAREN          reduce using rule 8 (cuerpo -> operador_logico .)
    SWITCH          reduce using rule 8 (cuerpo -> operador_logico .)
    GOTO            reduce using rule 8 (cuerpo -> operador_logico .)
    PUBLIC          reduce using rule 8 (cuerpo -> operador_logico .)
    PRIVATE         reduce using rule 8 (cuerpo -> operador_logico .)
    PROTECTED       reduce using rule 8 (cuerpo -> operador_logico .)
    STATIC          reduce using rule 8 (cuerpo -> operador_logico .)
    FUNCTION        reduce using rule 8 (cuerpo -> operador_logico .)
    IF              reduce using rule 8 (cuerpo -> operador_logico .)
    BREAK           reduce using rule 8 (cuerpo -> operador_logico .)


state 10

    (9) cuerpo -> condicion_booleana .

    $end            reduce using rule 9 (cuerpo -> condicion_booleana .)
    RBRACE          reduce using rule 9 (cuerpo -> condicion_booleana .)
    ECHO            reduce using rule 9 (cuerpo -> condicion_booleana .)
    PRINT           reduce using rule 9 (cuerpo -> condicion_booleana .)
    VARIABLE        reduce using rule 9 (cuerpo -> condicion_booleana .)
    VAR             reduce using rule 9 (cuerpo -> condicion_booleana .)
    DEFINE          reduce using rule 9 (cuerpo -> condicion_booleana .)
    READLINE        reduce using rule 9 (cuerpo -> condicion_booleana .)
    SUMA            reduce using rule 9 (cuerpo -> condicion_booleana .)
    RESTA           reduce using rule 9 (cuerpo -> condicion_booleana .)
    MULTIPLICACION  reduce using rule 9 (cuerpo -> condicion_booleana .)
    DIVISION        reduce using rule 9 (cuerpo -> condicion_booleana .)
    MODULO          reduce using rule 9 (cuerpo -> condicion_booleana .)
    SMALLER         reduce using rule 9 (cuerpo -> condicion_booleana .)
    GREATER         reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_SMALLER_OR_EQUAL reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_GREATER_OR_EQUAL reduce using rule 9 (cuerpo -> condicion_booleana .)
    AND             reduce using rule 9 (cuerpo -> condicion_booleana .)
    OR              reduce using rule 9 (cuerpo -> condicion_booleana .)
    XOR             reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_EQUAL        reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_NOT_EQUAL    reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_IDENTICAL    reduce using rule 9 (cuerpo -> condicion_booleana .)
    IS_NOT_IDENTICAL reduce using rule 9 (cuerpo -> condicion_booleana .)
    BOOLEAN_NOT     reduce using rule 9 (cuerpo -> condicion_booleana .)
    WHILE           reduce using rule 9 (cuerpo -> condicion_booleana .)
    DO              reduce using rule 9 (cuerpo -> condicion_booleana .)
    FOR             reduce using rule 9 (cuerpo -> condicion_booleana .)
    FOREACH         reduce using rule 9 (cuerpo -> condicion_booleana .)
    TRY             reduce using rule 9 (cuerpo -> condicion_booleana .)
    LPAREN          reduce using rule 9 (cuerpo -> condicion_booleana .)
    SWITCH          reduce using rule 9 (cuerpo -> condicion_booleana .)
    GOTO            reduce using rule 9 (cuerpo -> condicion_booleana .)
    PUBLIC          reduce using rule 9 (cuerpo -> condicion_booleana .)
    PRIVATE         reduce using rule 9 (cuerpo -> condicion_booleana .)
    PROTECTED       reduce using rule 9 (cuerpo -> condicion_booleana .)
    STATIC          reduce using rule 9 (cuerpo -> condicion_booleana .)
    FUNCTION        reduce using rule 9 (cuerpo -> condicion_booleana .)
    IF              reduce using rule 9 (cuerpo -> condicion_booleana .)
    BREAK           reduce using rule 9 (cuerpo -> condicion_booleana .)


state 11

    (10) cuerpo -> bwhile .

    $end            reduce using rule 10 (cuerpo -> bwhile .)
    RBRACE          reduce using rule 10 (cuerpo -> bwhile .)
    ECHO            reduce using rule 10 (cuerpo -> bwhile .)
    PRINT           reduce using rule 10 (cuerpo -> bwhile .)
    VARIABLE        reduce using rule 10 (cuerpo -> bwhile .)
    VAR             reduce using rule 10 (cuerpo -> bwhile .)
    DEFINE          reduce using rule 10 (cuerpo -> bwhile .)
    READLINE        reduce using rule 10 (cuerpo -> bwhile .)
    SUMA            reduce using rule 10 (cuerpo -> bwhile .)
    RESTA           reduce using rule 10 (cuerpo -> bwhile .)
    MULTIPLICACION  reduce using rule 10 (cuerpo -> bwhile .)
    DIVISION        reduce using rule 10 (cuerpo -> bwhile .)
    MODULO          reduce using rule 10 (cuerpo -> bwhile .)
    SMALLER         reduce using rule 10 (cuerpo -> bwhile .)
    GREATER         reduce using rule 10 (cuerpo -> bwhile .)
    IS_SMALLER_OR_EQUAL reduce using rule 10 (cuerpo -> bwhile .)
    IS_GREATER_OR_EQUAL reduce using rule 10 (cuerpo -> bwhile .)
    AND             reduce using rule 10 (cuerpo -> bwhile .)
    OR              reduce using rule 10 (cuerpo -> bwhile .)
    XOR             reduce using rule 10 (cuerpo -> bwhile .)
    IS_EQUAL        reduce using rule 10 (cuerpo -> bwhile .)
    IS_NOT_EQUAL    reduce using rule 10 (cuerpo -> bwhile .)
    IS_IDENTICAL    reduce using rule 10 (cuerpo -> bwhile .)
    IS_NOT_IDENTICAL reduce using rule 10 (cuerpo -> bwhile .)
    BOOLEAN_NOT     reduce using rule 10 (cuerpo -> bwhile .)
    WHILE           reduce using rule 10 (cuerpo -> bwhile .)
    DO              reduce using rule 10 (cuerpo -> bwhile .)
    FOR             reduce using rule 10 (cuerpo -> bwhile .)
    FOREACH         reduce using rule 10 (cuerpo -> bwhile .)
    TRY             reduce using rule 10 (cuerpo -> bwhile .)
    LPAREN          reduce using rule 10 (cuerpo -> bwhile .)
    SWITCH          reduce using rule 10 (cuerpo -> bwhile .)
    GOTO            reduce using rule 10 (cuerpo -> bwhile .)
    PUBLIC          reduce using rule 10 (cuerpo -> bwhile .)
    PRIVATE         reduce using rule 10 (cuerpo -> bwhile .)
    PROTECTED       reduce using rule 10 (cuerpo -> bwhile .)
    STATIC          reduce using rule 10 (cuerpo -> bwhile .)
    FUNCTION        reduce using rule 10 (cuerpo -> bwhile .)
    IF              reduce using rule 10 (cuerpo -> bwhile .)
    BREAK           reduce using rule 10 (cuerpo -> bwhile .)


state 12

    (11) cuerpo -> bdo .

    $end            reduce using rule 11 (cuerpo -> bdo .)
    RBRACE          reduce using rule 11 (cuerpo -> bdo .)
    ECHO            reduce using rule 11 (cuerpo -> bdo .)
    PRINT           reduce using rule 11 (cuerpo -> bdo .)
    VARIABLE        reduce using rule 11 (cuerpo -> bdo .)
    VAR             reduce using rule 11 (cuerpo -> bdo .)
    DEFINE          reduce using rule 11 (cuerpo -> bdo .)
    READLINE        reduce using rule 11 (cuerpo -> bdo .)
    SUMA            reduce using rule 11 (cuerpo -> bdo .)
    RESTA           reduce using rule 11 (cuerpo -> bdo .)
    MULTIPLICACION  reduce using rule 11 (cuerpo -> bdo .)
    DIVISION        reduce using rule 11 (cuerpo -> bdo .)
    MODULO          reduce using rule 11 (cuerpo -> bdo .)
    SMALLER         reduce using rule 11 (cuerpo -> bdo .)
    GREATER         reduce using rule 11 (cuerpo -> bdo .)
    IS_SMALLER_OR_EQUAL reduce using rule 11 (cuerpo -> bdo .)
    IS_GREATER_OR_EQUAL reduce using rule 11 (cuerpo -> bdo .)
    AND             reduce using rule 11 (cuerpo -> bdo .)
    OR              reduce using rule 11 (cuerpo -> bdo .)
    XOR             reduce using rule 11 (cuerpo -> bdo .)
    IS_EQUAL        reduce using rule 11 (cuerpo -> bdo .)
    IS_NOT_EQUAL    reduce using rule 11 (cuerpo -> bdo .)
    IS_IDENTICAL    reduce using rule 11 (cuerpo -> bdo .)
    IS_NOT_IDENTICAL reduce using rule 11 (cuerpo -> bdo .)
    BOOLEAN_NOT     reduce using rule 11 (cuerpo -> bdo .)
    WHILE           reduce using rule 11 (cuerpo -> bdo .)
    DO              reduce using rule 11 (cuerpo -> bdo .)
    FOR             reduce using rule 11 (cuerpo -> bdo .)
    FOREACH         reduce using rule 11 (cuerpo -> bdo .)
    TRY             reduce using rule 11 (cuerpo -> bdo .)
    LPAREN          reduce using rule 11 (cuerpo -> bdo .)
    SWITCH          reduce using rule 11 (cuerpo -> bdo .)
    GOTO            reduce using rule 11 (cuerpo -> bdo .)
    PUBLIC          reduce using rule 11 (cuerpo -> bdo .)
    PRIVATE         reduce using rule 11 (cuerpo -> bdo .)
    PROTECTED       reduce using rule 11 (cuerpo -> bdo .)
    STATIC          reduce using rule 11 (cuerpo -> bdo .)
    FUNCTION        reduce using rule 11 (cuerpo -> bdo .)
    IF              reduce using rule 11 (cuerpo -> bdo .)
    BREAK           reduce using rule 11 (cuerpo -> bdo .)


state 13

    (12) cuerpo -> bfor .

    $end            reduce using rule 12 (cuerpo -> bfor .)
    RBRACE          reduce using rule 12 (cuerpo -> bfor .)
    ECHO            reduce using rule 12 (cuerpo -> bfor .)
    PRINT           reduce using rule 12 (cuerpo -> bfor .)
    VARIABLE        reduce using rule 12 (cuerpo -> bfor .)
    VAR             reduce using rule 12 (cuerpo -> bfor .)
    DEFINE          reduce using rule 12 (cuerpo -> bfor .)
    READLINE        reduce using rule 12 (cuerpo -> bfor .)
    SUMA            reduce using rule 12 (cuerpo -> bfor .)
    RESTA           reduce using rule 12 (cuerpo -> bfor .)
    MULTIPLICACION  reduce using rule 12 (cuerpo -> bfor .)
    DIVISION        reduce using rule 12 (cuerpo -> bfor .)
    MODULO          reduce using rule 12 (cuerpo -> bfor .)
    SMALLER         reduce using rule 12 (cuerpo -> bfor .)
    GREATER         reduce using rule 12 (cuerpo -> bfor .)
    IS_SMALLER_OR_EQUAL reduce using rule 12 (cuerpo -> bfor .)
    IS_GREATER_OR_EQUAL reduce using rule 12 (cuerpo -> bfor .)
    AND             reduce using rule 12 (cuerpo -> bfor .)
    OR              reduce using rule 12 (cuerpo -> bfor .)
    XOR             reduce using rule 12 (cuerpo -> bfor .)
    IS_EQUAL        reduce using rule 12 (cuerpo -> bfor .)
    IS_NOT_EQUAL    reduce using rule 12 (cuerpo -> bfor .)
    IS_IDENTICAL    reduce using rule 12 (cuerpo -> bfor .)
    IS_NOT_IDENTICAL reduce using rule 12 (cuerpo -> bfor .)
    BOOLEAN_NOT     reduce using rule 12 (cuerpo -> bfor .)
    WHILE           reduce using rule 12 (cuerpo -> bfor .)
    DO              reduce using rule 12 (cuerpo -> bfor .)
    FOR             reduce using rule 12 (cuerpo -> bfor .)
    FOREACH         reduce using rule 12 (cuerpo -> bfor .)
    TRY             reduce using rule 12 (cuerpo -> bfor .)
    LPAREN          reduce using rule 12 (cuerpo -> bfor .)
    SWITCH          reduce using rule 12 (cuerpo -> bfor .)
    GOTO            reduce using rule 12 (cuerpo -> bfor .)
    PUBLIC          reduce using rule 12 (cuerpo -> bfor .)
    PRIVATE         reduce using rule 12 (cuerpo -> bfor .)
    PROTECTED       reduce using rule 12 (cuerpo -> bfor .)
    STATIC          reduce using rule 12 (cuerpo -> bfor .)
    FUNCTION        reduce using rule 12 (cuerpo -> bfor .)
    IF              reduce using rule 12 (cuerpo -> bfor .)
    BREAK           reduce using rule 12 (cuerpo -> bfor .)


state 14

    (13) cuerpo -> bforeach .

    $end            reduce using rule 13 (cuerpo -> bforeach .)
    RBRACE          reduce using rule 13 (cuerpo -> bforeach .)
    ECHO            reduce using rule 13 (cuerpo -> bforeach .)
    PRINT           reduce using rule 13 (cuerpo -> bforeach .)
    VARIABLE        reduce using rule 13 (cuerpo -> bforeach .)
    VAR             reduce using rule 13 (cuerpo -> bforeach .)
    DEFINE          reduce using rule 13 (cuerpo -> bforeach .)
    READLINE        reduce using rule 13 (cuerpo -> bforeach .)
    SUMA            reduce using rule 13 (cuerpo -> bforeach .)
    RESTA           reduce using rule 13 (cuerpo -> bforeach .)
    MULTIPLICACION  reduce using rule 13 (cuerpo -> bforeach .)
    DIVISION        reduce using rule 13 (cuerpo -> bforeach .)
    MODULO          reduce using rule 13 (cuerpo -> bforeach .)
    SMALLER         reduce using rule 13 (cuerpo -> bforeach .)
    GREATER         reduce using rule 13 (cuerpo -> bforeach .)
    IS_SMALLER_OR_EQUAL reduce using rule 13 (cuerpo -> bforeach .)
    IS_GREATER_OR_EQUAL reduce using rule 13 (cuerpo -> bforeach .)
    AND             reduce using rule 13 (cuerpo -> bforeach .)
    OR              reduce using rule 13 (cuerpo -> bforeach .)
    XOR             reduce using rule 13 (cuerpo -> bforeach .)
    IS_EQUAL        reduce using rule 13 (cuerpo -> bforeach .)
    IS_NOT_EQUAL    reduce using rule 13 (cuerpo -> bforeach .)
    IS_IDENTICAL    reduce using rule 13 (cuerpo -> bforeach .)
    IS_NOT_IDENTICAL reduce using rule 13 (cuerpo -> bforeach .)
    BOOLEAN_NOT     reduce using rule 13 (cuerpo -> bforeach .)
    WHILE           reduce using rule 13 (cuerpo -> bforeach .)
    DO              reduce using rule 13 (cuerpo -> bforeach .)
    FOR             reduce using rule 13 (cuerpo -> bforeach .)
    FOREACH         reduce using rule 13 (cuerpo -> bforeach .)
    TRY             reduce using rule 13 (cuerpo -> bforeach .)
    LPAREN          reduce using rule 13 (cuerpo -> bforeach .)
    SWITCH          reduce using rule 13 (cuerpo -> bforeach .)
    GOTO            reduce using rule 13 (cuerpo -> bforeach .)
    PUBLIC          reduce using rule 13 (cuerpo -> bforeach .)
    PRIVATE         reduce using rule 13 (cuerpo -> bforeach .)
    PROTECTED       reduce using rule 13 (cuerpo -> bforeach .)
    STATIC          reduce using rule 13 (cuerpo -> bforeach .)
    FUNCTION        reduce using rule 13 (cuerpo -> bforeach .)
    IF              reduce using rule 13 (cuerpo -> bforeach .)
    BREAK           reduce using rule 13 (cuerpo -> bforeach .)


state 15

    (14) cuerpo -> btry .

    $end            reduce using rule 14 (cuerpo -> btry .)
    RBRACE          reduce using rule 14 (cuerpo -> btry .)
    ECHO            reduce using rule 14 (cuerpo -> btry .)
    PRINT           reduce using rule 14 (cuerpo -> btry .)
    VARIABLE        reduce using rule 14 (cuerpo -> btry .)
    VAR             reduce using rule 14 (cuerpo -> btry .)
    DEFINE          reduce using rule 14 (cuerpo -> btry .)
    READLINE        reduce using rule 14 (cuerpo -> btry .)
    SUMA            reduce using rule 14 (cuerpo -> btry .)
    RESTA           reduce using rule 14 (cuerpo -> btry .)
    MULTIPLICACION  reduce using rule 14 (cuerpo -> btry .)
    DIVISION        reduce using rule 14 (cuerpo -> btry .)
    MODULO          reduce using rule 14 (cuerpo -> btry .)
    SMALLER         reduce using rule 14 (cuerpo -> btry .)
    GREATER         reduce using rule 14 (cuerpo -> btry .)
    IS_SMALLER_OR_EQUAL reduce using rule 14 (cuerpo -> btry .)
    IS_GREATER_OR_EQUAL reduce using rule 14 (cuerpo -> btry .)
    AND             reduce using rule 14 (cuerpo -> btry .)
    OR              reduce using rule 14 (cuerpo -> btry .)
    XOR             reduce using rule 14 (cuerpo -> btry .)
    IS_EQUAL        reduce using rule 14 (cuerpo -> btry .)
    IS_NOT_EQUAL    reduce using rule 14 (cuerpo -> btry .)
    IS_IDENTICAL    reduce using rule 14 (cuerpo -> btry .)
    IS_NOT_IDENTICAL reduce using rule 14 (cuerpo -> btry .)
    BOOLEAN_NOT     reduce using rule 14 (cuerpo -> btry .)
    WHILE           reduce using rule 14 (cuerpo -> btry .)
    DO              reduce using rule 14 (cuerpo -> btry .)
    FOR             reduce using rule 14 (cuerpo -> btry .)
    FOREACH         reduce using rule 14 (cuerpo -> btry .)
    TRY             reduce using rule 14 (cuerpo -> btry .)
    LPAREN          reduce using rule 14 (cuerpo -> btry .)
    SWITCH          reduce using rule 14 (cuerpo -> btry .)
    GOTO            reduce using rule 14 (cuerpo -> btry .)
    PUBLIC          reduce using rule 14 (cuerpo -> btry .)
    PRIVATE         reduce using rule 14 (cuerpo -> btry .)
    PROTECTED       reduce using rule 14 (cuerpo -> btry .)
    STATIC          reduce using rule 14 (cuerpo -> btry .)
    FUNCTION        reduce using rule 14 (cuerpo -> btry .)
    IF              reduce using rule 14 (cuerpo -> btry .)
    BREAK           reduce using rule 14 (cuerpo -> btry .)


state 16

    (15) cuerpo -> operaciones_mat_par .

    $end            reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    RBRACE          reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    ECHO            reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    PRINT           reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    VARIABLE        reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    VAR             reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    DEFINE          reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    READLINE        reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    SUMA            reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    RESTA           reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    MULTIPLICACION  reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    DIVISION        reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    MODULO          reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    SMALLER         reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    GREATER         reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    IS_SMALLER_OR_EQUAL reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    IS_GREATER_OR_EQUAL reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    AND             reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    OR              reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    XOR             reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    IS_EQUAL        reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    IS_NOT_EQUAL    reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    IS_IDENTICAL    reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    IS_NOT_IDENTICAL reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    BOOLEAN_NOT     reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    WHILE           reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    DO              reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    FOR             reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    FOREACH         reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    TRY             reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    LPAREN          reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    SWITCH          reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    GOTO            reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    PUBLIC          reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    PRIVATE         reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    PROTECTED       reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    STATIC          reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    FUNCTION        reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    IF              reduce using rule 15 (cuerpo -> operaciones_mat_par .)
    BREAK           reduce using rule 15 (cuerpo -> operaciones_mat_par .)


state 17

    (16) cuerpo -> condicion_ifelse .

    $end            reduce using rule 16 (cuerpo -> condicion_ifelse .)
    RBRACE          reduce using rule 16 (cuerpo -> condicion_ifelse .)
    ECHO            reduce using rule 16 (cuerpo -> condicion_ifelse .)
    PRINT           reduce using rule 16 (cuerpo -> condicion_ifelse .)
    VARIABLE        reduce using rule 16 (cuerpo -> condicion_ifelse .)
    VAR             reduce using rule 16 (cuerpo -> condicion_ifelse .)
    DEFINE          reduce using rule 16 (cuerpo -> condicion_ifelse .)
    READLINE        reduce using rule 16 (cuerpo -> condicion_ifelse .)
    SUMA            reduce using rule 16 (cuerpo -> condicion_ifelse .)
    RESTA           reduce using rule 16 (cuerpo -> condicion_ifelse .)
    MULTIPLICACION  reduce using rule 16 (cuerpo -> condicion_ifelse .)
    DIVISION        reduce using rule 16 (cuerpo -> condicion_ifelse .)
    MODULO          reduce using rule 16 (cuerpo -> condicion_ifelse .)
    SMALLER         reduce using rule 16 (cuerpo -> condicion_ifelse .)
    GREATER         reduce using rule 16 (cuerpo -> condicion_ifelse .)
    IS_SMALLER_OR_EQUAL reduce using rule 16 (cuerpo -> condicion_ifelse .)
    IS_GREATER_OR_EQUAL reduce using rule 16 (cuerpo -> condicion_ifelse .)
    AND             reduce using rule 16 (cuerpo -> condicion_ifelse .)
    OR              reduce using rule 16 (cuerpo -> condicion_ifelse .)
    XOR             reduce using rule 16 (cuerpo -> condicion_ifelse .)
    IS_EQUAL        reduce using rule 16 (cuerpo -> condicion_ifelse .)
    IS_NOT_EQUAL    reduce using rule 16 (cuerpo -> condicion_ifelse .)
    IS_IDENTICAL    reduce using rule 16 (cuerpo -> condicion_ifelse .)
    IS_NOT_IDENTICAL reduce using rule 16 (cuerpo -> condicion_ifelse .)
    BOOLEAN_NOT     reduce using rule 16 (cuerpo -> condicion_ifelse .)
    WHILE           reduce using rule 16 (cuerpo -> condicion_ifelse .)
    DO              reduce using rule 16 (cuerpo -> condicion_ifelse .)
    FOR             reduce using rule 16 (cuerpo -> condicion_ifelse .)
    FOREACH         reduce using rule 16 (cuerpo -> condicion_ifelse .)
    TRY             reduce using rule 16 (cuerpo -> condicion_ifelse .)
    LPAREN          reduce using rule 16 (cuerpo -> condicion_ifelse .)
    SWITCH          reduce using rule 16 (cuerpo -> condicion_ifelse .)
    GOTO            reduce using rule 16 (cuerpo -> condicion_ifelse .)
    PUBLIC          reduce using rule 16 (cuerpo -> condicion_ifelse .)
    PRIVATE         reduce using rule 16 (cuerpo -> condicion_ifelse .)
    PROTECTED       reduce using rule 16 (cuerpo -> condicion_ifelse .)
    STATIC          reduce using rule 16 (cuerpo -> condicion_ifelse .)
    FUNCTION        reduce using rule 16 (cuerpo -> condicion_ifelse .)
    IF              reduce using rule 16 (cuerpo -> condicion_ifelse .)
    BREAK           reduce using rule 16 (cuerpo -> condicion_ifelse .)


state 18

    (17) cuerpo -> bswitch .

    $end            reduce using rule 17 (cuerpo -> bswitch .)
    RBRACE          reduce using rule 17 (cuerpo -> bswitch .)
    ECHO            reduce using rule 17 (cuerpo -> bswitch .)
    PRINT           reduce using rule 17 (cuerpo -> bswitch .)
    VARIABLE        reduce using rule 17 (cuerpo -> bswitch .)
    VAR             reduce using rule 17 (cuerpo -> bswitch .)
    DEFINE          reduce using rule 17 (cuerpo -> bswitch .)
    READLINE        reduce using rule 17 (cuerpo -> bswitch .)
    SUMA            reduce using rule 17 (cuerpo -> bswitch .)
    RESTA           reduce using rule 17 (cuerpo -> bswitch .)
    MULTIPLICACION  reduce using rule 17 (cuerpo -> bswitch .)
    DIVISION        reduce using rule 17 (cuerpo -> bswitch .)
    MODULO          reduce using rule 17 (cuerpo -> bswitch .)
    SMALLER         reduce using rule 17 (cuerpo -> bswitch .)
    GREATER         reduce using rule 17 (cuerpo -> bswitch .)
    IS_SMALLER_OR_EQUAL reduce using rule 17 (cuerpo -> bswitch .)
    IS_GREATER_OR_EQUAL reduce using rule 17 (cuerpo -> bswitch .)
    AND             reduce using rule 17 (cuerpo -> bswitch .)
    OR              reduce using rule 17 (cuerpo -> bswitch .)
    XOR             reduce using rule 17 (cuerpo -> bswitch .)
    IS_EQUAL        reduce using rule 17 (cuerpo -> bswitch .)
    IS_NOT_EQUAL    reduce using rule 17 (cuerpo -> bswitch .)
    IS_IDENTICAL    reduce using rule 17 (cuerpo -> bswitch .)
    IS_NOT_IDENTICAL reduce using rule 17 (cuerpo -> bswitch .)
    BOOLEAN_NOT     reduce using rule 17 (cuerpo -> bswitch .)
    WHILE           reduce using rule 17 (cuerpo -> bswitch .)
    DO              reduce using rule 17 (cuerpo -> bswitch .)
    FOR             reduce using rule 17 (cuerpo -> bswitch .)
    FOREACH         reduce using rule 17 (cuerpo -> bswitch .)
    TRY             reduce using rule 17 (cuerpo -> bswitch .)
    LPAREN          reduce using rule 17 (cuerpo -> bswitch .)
    SWITCH          reduce using rule 17 (cuerpo -> bswitch .)
    GOTO            reduce using rule 17 (cuerpo -> bswitch .)
    PUBLIC          reduce using rule 17 (cuerpo -> bswitch .)
    PRIVATE         reduce using rule 17 (cuerpo -> bswitch .)
    PROTECTED       reduce using rule 17 (cuerpo -> bswitch .)
    STATIC          reduce using rule 17 (cuerpo -> bswitch .)
    FUNCTION        reduce using rule 17 (cuerpo -> bswitch .)
    IF              reduce using rule 17 (cuerpo -> bswitch .)
    BREAK           reduce using rule 17 (cuerpo -> bswitch .)


state 19

    (18) cuerpo -> bgoto .

    $end            reduce using rule 18 (cuerpo -> bgoto .)
    RBRACE          reduce using rule 18 (cuerpo -> bgoto .)
    ECHO            reduce using rule 18 (cuerpo -> bgoto .)
    PRINT           reduce using rule 18 (cuerpo -> bgoto .)
    VARIABLE        reduce using rule 18 (cuerpo -> bgoto .)
    VAR             reduce using rule 18 (cuerpo -> bgoto .)
    DEFINE          reduce using rule 18 (cuerpo -> bgoto .)
    READLINE        reduce using rule 18 (cuerpo -> bgoto .)
    SUMA            reduce using rule 18 (cuerpo -> bgoto .)
    RESTA           reduce using rule 18 (cuerpo -> bgoto .)
    MULTIPLICACION  reduce using rule 18 (cuerpo -> bgoto .)
    DIVISION        reduce using rule 18 (cuerpo -> bgoto .)
    MODULO          reduce using rule 18 (cuerpo -> bgoto .)
    SMALLER         reduce using rule 18 (cuerpo -> bgoto .)
    GREATER         reduce using rule 18 (cuerpo -> bgoto .)
    IS_SMALLER_OR_EQUAL reduce using rule 18 (cuerpo -> bgoto .)
    IS_GREATER_OR_EQUAL reduce using rule 18 (cuerpo -> bgoto .)
    AND             reduce using rule 18 (cuerpo -> bgoto .)
    OR              reduce using rule 18 (cuerpo -> bgoto .)
    XOR             reduce using rule 18 (cuerpo -> bgoto .)
    IS_EQUAL        reduce using rule 18 (cuerpo -> bgoto .)
    IS_NOT_EQUAL    reduce using rule 18 (cuerpo -> bgoto .)
    IS_IDENTICAL    reduce using rule 18 (cuerpo -> bgoto .)
    IS_NOT_IDENTICAL reduce using rule 18 (cuerpo -> bgoto .)
    BOOLEAN_NOT     reduce using rule 18 (cuerpo -> bgoto .)
    WHILE           reduce using rule 18 (cuerpo -> bgoto .)
    DO              reduce using rule 18 (cuerpo -> bgoto .)
    FOR             reduce using rule 18 (cuerpo -> bgoto .)
    FOREACH         reduce using rule 18 (cuerpo -> bgoto .)
    TRY             reduce using rule 18 (cuerpo -> bgoto .)
    LPAREN          reduce using rule 18 (cuerpo -> bgoto .)
    SWITCH          reduce using rule 18 (cuerpo -> bgoto .)
    GOTO            reduce using rule 18 (cuerpo -> bgoto .)
    PUBLIC          reduce using rule 18 (cuerpo -> bgoto .)
    PRIVATE         reduce using rule 18 (cuerpo -> bgoto .)
    PROTECTED       reduce using rule 18 (cuerpo -> bgoto .)
    STATIC          reduce using rule 18 (cuerpo -> bgoto .)
    FUNCTION        reduce using rule 18 (cuerpo -> bgoto .)
    IF              reduce using rule 18 (cuerpo -> bgoto .)
    BREAK           reduce using rule 18 (cuerpo -> bgoto .)


state 20

    (21) imprimir -> ECHO . valor SEMI
    (24) imprimir -> ECHO . NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    NOMBRE          shift and go to state 64
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 68
    ENTERO          shift and go to state 65
    DECIMAL         shift and go to state 69

    valor                          shift and go to state 63
    numero                         shift and go to state 66

state 21

    (22) imprimir -> PRINT . valor SEMI
    (23) imprimir -> PRINT . LPAREN valor RPAREN SEMI
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    LPAREN          shift and go to state 71
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 68
    NOMBRE          shift and go to state 72
    ENTERO          shift and go to state 65
    DECIMAL         shift and go to state 69

    valor                          shift and go to state 70
    numero                         shift and go to state 66

state 22

    (57) operaciones_mat_par -> LPAREN . valor operadores valor RPAREN
    (58) operaciones_mat_par -> LPAREN . valor operadores operaciones_mat_par RPAREN
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 67
    STRING          shift and go to state 68
    NOMBRE          shift and go to state 72
    ENTERO          shift and go to state 65
    DECIMAL         shift and go to state 69

    valor                          shift and go to state 73
    numero                         shift and go to state 66

state 23

    (59) asignacion -> VARIABLE . EQUALS valor SEMI
    (62) asignacion_array -> VARIABLE . EQUALS array_def SEMI

    EQUALS          shift and go to state 74


state 24

    (60) asignacion -> VAR . asignacion
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion -> . VAR asignacion
    (61) asignacion -> . proteccion asignacion
    (67) proteccion -> . PUBLIC
    (68) proteccion -> . PRIVATE
    (69) proteccion -> . PROTECTED
    (70) proteccion -> . STATIC

    VARIABLE        shift and go to state 76
    VAR             shift and go to state 24
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60

    asignacion                     shift and go to state 75
    proteccion                     shift and go to state 77

state 25

    (61) asignacion -> proteccion . asignacion
    (72) funciones -> proteccion . funcion_nparams
    (74) funciones -> proteccion . funcion_opreturn
    (76) funciones -> proteccion . funcion_blank
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion -> . VAR asignacion
    (61) asignacion -> . proteccion asignacion
    (80) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (85) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (86) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (67) proteccion -> . PUBLIC
    (68) proteccion -> . PRIVATE
    (69) proteccion -> . PROTECTED
    (70) proteccion -> . STATIC

    VARIABLE        shift and go to state 76
    VAR             shift and go to state 24
    FUNCTION        shift and go to state 82
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60

    proteccion                     shift and go to state 77
    asignacion                     shift and go to state 78
    funcion_nparams                shift and go to state 79
    funcion_opreturn               shift and go to state 80
    funcion_blank                  shift and go to state 81

state 26

    (71) funciones -> funcion_nparams .

    $end            reduce using rule 71 (funciones -> funcion_nparams .)
    RBRACE          reduce using rule 71 (funciones -> funcion_nparams .)
    ECHO            reduce using rule 71 (funciones -> funcion_nparams .)
    PRINT           reduce using rule 71 (funciones -> funcion_nparams .)
    VARIABLE        reduce using rule 71 (funciones -> funcion_nparams .)
    VAR             reduce using rule 71 (funciones -> funcion_nparams .)
    DEFINE          reduce using rule 71 (funciones -> funcion_nparams .)
    READLINE        reduce using rule 71 (funciones -> funcion_nparams .)
    SUMA            reduce using rule 71 (funciones -> funcion_nparams .)
    RESTA           reduce using rule 71 (funciones -> funcion_nparams .)
    MULTIPLICACION  reduce using rule 71 (funciones -> funcion_nparams .)
    DIVISION        reduce using rule 71 (funciones -> funcion_nparams .)
    MODULO          reduce using rule 71 (funciones -> funcion_nparams .)
    SMALLER         reduce using rule 71 (funciones -> funcion_nparams .)
    GREATER         reduce using rule 71 (funciones -> funcion_nparams .)
    IS_SMALLER_OR_EQUAL reduce using rule 71 (funciones -> funcion_nparams .)
    IS_GREATER_OR_EQUAL reduce using rule 71 (funciones -> funcion_nparams .)
    AND             reduce using rule 71 (funciones -> funcion_nparams .)
    OR              reduce using rule 71 (funciones -> funcion_nparams .)
    XOR             reduce using rule 71 (funciones -> funcion_nparams .)
    IS_EQUAL        reduce using rule 71 (funciones -> funcion_nparams .)
    IS_NOT_EQUAL    reduce using rule 71 (funciones -> funcion_nparams .)
    IS_IDENTICAL    reduce using rule 71 (funciones -> funcion_nparams .)
    IS_NOT_IDENTICAL reduce using rule 71 (funciones -> funcion_nparams .)
    BOOLEAN_NOT     reduce using rule 71 (funciones -> funcion_nparams .)
    WHILE           reduce using rule 71 (funciones -> funcion_nparams .)
    DO              reduce using rule 71 (funciones -> funcion_nparams .)
    FOR             reduce using rule 71 (funciones -> funcion_nparams .)
    FOREACH         reduce using rule 71 (funciones -> funcion_nparams .)
    TRY             reduce using rule 71 (funciones -> funcion_nparams .)
    LPAREN          reduce using rule 71 (funciones -> funcion_nparams .)
    SWITCH          reduce using rule 71 (funciones -> funcion_nparams .)
    GOTO            reduce using rule 71 (funciones -> funcion_nparams .)
    PUBLIC          reduce using rule 71 (funciones -> funcion_nparams .)
    PRIVATE         reduce using rule 71 (funciones -> funcion_nparams .)
    PROTECTED       reduce using rule 71 (funciones -> funcion_nparams .)
    STATIC          reduce using rule 71 (funciones -> funcion_nparams .)
    FUNCTION        reduce using rule 71 (funciones -> funcion_nparams .)
    IF              reduce using rule 71 (funciones -> funcion_nparams .)
    BREAK           reduce using rule 71 (funciones -> funcion_nparams .)


state 27

    (73) funciones -> funcion_opreturn .

    $end            reduce using rule 73 (funciones -> funcion_opreturn .)
    RBRACE          reduce using rule 73 (funciones -> funcion_opreturn .)
    ECHO            reduce using rule 73 (funciones -> funcion_opreturn .)
    PRINT           reduce using rule 73 (funciones -> funcion_opreturn .)
    VARIABLE        reduce using rule 73 (funciones -> funcion_opreturn .)
    VAR             reduce using rule 73 (funciones -> funcion_opreturn .)
    DEFINE          reduce using rule 73 (funciones -> funcion_opreturn .)
    READLINE        reduce using rule 73 (funciones -> funcion_opreturn .)
    SUMA            reduce using rule 73 (funciones -> funcion_opreturn .)
    RESTA           reduce using rule 73 (funciones -> funcion_opreturn .)
    MULTIPLICACION  reduce using rule 73 (funciones -> funcion_opreturn .)
    DIVISION        reduce using rule 73 (funciones -> funcion_opreturn .)
    MODULO          reduce using rule 73 (funciones -> funcion_opreturn .)
    SMALLER         reduce using rule 73 (funciones -> funcion_opreturn .)
    GREATER         reduce using rule 73 (funciones -> funcion_opreturn .)
    IS_SMALLER_OR_EQUAL reduce using rule 73 (funciones -> funcion_opreturn .)
    IS_GREATER_OR_EQUAL reduce using rule 73 (funciones -> funcion_opreturn .)
    AND             reduce using rule 73 (funciones -> funcion_opreturn .)
    OR              reduce using rule 73 (funciones -> funcion_opreturn .)
    XOR             reduce using rule 73 (funciones -> funcion_opreturn .)
    IS_EQUAL        reduce using rule 73 (funciones -> funcion_opreturn .)
    IS_NOT_EQUAL    reduce using rule 73 (funciones -> funcion_opreturn .)
    IS_IDENTICAL    reduce using rule 73 (funciones -> funcion_opreturn .)
    IS_NOT_IDENTICAL reduce using rule 73 (funciones -> funcion_opreturn .)
    BOOLEAN_NOT     reduce using rule 73 (funciones -> funcion_opreturn .)
    WHILE           reduce using rule 73 (funciones -> funcion_opreturn .)
    DO              reduce using rule 73 (funciones -> funcion_opreturn .)
    FOR             reduce using rule 73 (funciones -> funcion_opreturn .)
    FOREACH         reduce using rule 73 (funciones -> funcion_opreturn .)
    TRY             reduce using rule 73 (funciones -> funcion_opreturn .)
    LPAREN          reduce using rule 73 (funciones -> funcion_opreturn .)
    SWITCH          reduce using rule 73 (funciones -> funcion_opreturn .)
    GOTO            reduce using rule 73 (funciones -> funcion_opreturn .)
    PUBLIC          reduce using rule 73 (funciones -> funcion_opreturn .)
    PRIVATE         reduce using rule 73 (funciones -> funcion_opreturn .)
    PROTECTED       reduce using rule 73 (funciones -> funcion_opreturn .)
    STATIC          reduce using rule 73 (funciones -> funcion_opreturn .)
    FUNCTION        reduce using rule 73 (funciones -> funcion_opreturn .)
    IF              reduce using rule 73 (funciones -> funcion_opreturn .)
    BREAK           reduce using rule 73 (funciones -> funcion_opreturn .)


state 28

    (75) funciones -> funcion_blank .

    $end            reduce using rule 75 (funciones -> funcion_blank .)
    RBRACE          reduce using rule 75 (funciones -> funcion_blank .)
    ECHO            reduce using rule 75 (funciones -> funcion_blank .)
    PRINT           reduce using rule 75 (funciones -> funcion_blank .)
    VARIABLE        reduce using rule 75 (funciones -> funcion_blank .)
    VAR             reduce using rule 75 (funciones -> funcion_blank .)
    DEFINE          reduce using rule 75 (funciones -> funcion_blank .)
    READLINE        reduce using rule 75 (funciones -> funcion_blank .)
    SUMA            reduce using rule 75 (funciones -> funcion_blank .)
    RESTA           reduce using rule 75 (funciones -> funcion_blank .)
    MULTIPLICACION  reduce using rule 75 (funciones -> funcion_blank .)
    DIVISION        reduce using rule 75 (funciones -> funcion_blank .)
    MODULO          reduce using rule 75 (funciones -> funcion_blank .)
    SMALLER         reduce using rule 75 (funciones -> funcion_blank .)
    GREATER         reduce using rule 75 (funciones -> funcion_blank .)
    IS_SMALLER_OR_EQUAL reduce using rule 75 (funciones -> funcion_blank .)
    IS_GREATER_OR_EQUAL reduce using rule 75 (funciones -> funcion_blank .)
    AND             reduce using rule 75 (funciones -> funcion_blank .)
    OR              reduce using rule 75 (funciones -> funcion_blank .)
    XOR             reduce using rule 75 (funciones -> funcion_blank .)
    IS_EQUAL        reduce using rule 75 (funciones -> funcion_blank .)
    IS_NOT_EQUAL    reduce using rule 75 (funciones -> funcion_blank .)
    IS_IDENTICAL    reduce using rule 75 (funciones -> funcion_blank .)
    IS_NOT_IDENTICAL reduce using rule 75 (funciones -> funcion_blank .)
    BOOLEAN_NOT     reduce using rule 75 (funciones -> funcion_blank .)
    WHILE           reduce using rule 75 (funciones -> funcion_blank .)
    DO              reduce using rule 75 (funciones -> funcion_blank .)
    FOR             reduce using rule 75 (funciones -> funcion_blank .)
    FOREACH         reduce using rule 75 (funciones -> funcion_blank .)
    TRY             reduce using rule 75 (funciones -> funcion_blank .)
    LPAREN          reduce using rule 75 (funciones -> funcion_blank .)
    SWITCH          reduce using rule 75 (funciones -> funcion_blank .)
    GOTO            reduce using rule 75 (funciones -> funcion_blank .)
    PUBLIC          reduce using rule 75 (funciones -> funcion_blank .)
    PRIVATE         reduce using rule 75 (funciones -> funcion_blank .)
    PROTECTED       reduce using rule 75 (funciones -> funcion_blank .)
    STATIC          reduce using rule 75 (funciones -> funcion_blank .)
    FUNCTION        reduce using rule 75 (funciones -> funcion_blank .)
    IF              reduce using rule 75 (funciones -> funcion_blank .)
    BREAK           reduce using rule 75 (funciones -> funcion_blank .)


state 29

    (77) funciones -> funcion_void .

    $end            reduce using rule 77 (funciones -> funcion_void .)
    RBRACE          reduce using rule 77 (funciones -> funcion_void .)
    ECHO            reduce using rule 77 (funciones -> funcion_void .)
    PRINT           reduce using rule 77 (funciones -> funcion_void .)
    VARIABLE        reduce using rule 77 (funciones -> funcion_void .)
    VAR             reduce using rule 77 (funciones -> funcion_void .)
    DEFINE          reduce using rule 77 (funciones -> funcion_void .)
    READLINE        reduce using rule 77 (funciones -> funcion_void .)
    SUMA            reduce using rule 77 (funciones -> funcion_void .)
    RESTA           reduce using rule 77 (funciones -> funcion_void .)
    MULTIPLICACION  reduce using rule 77 (funciones -> funcion_void .)
    DIVISION        reduce using rule 77 (funciones -> funcion_void .)
    MODULO          reduce using rule 77 (funciones -> funcion_void .)
    SMALLER         reduce using rule 77 (funciones -> funcion_void .)
    GREATER         reduce using rule 77 (funciones -> funcion_void .)
    IS_SMALLER_OR_EQUAL reduce using rule 77 (funciones -> funcion_void .)
    IS_GREATER_OR_EQUAL reduce using rule 77 (funciones -> funcion_void .)
    AND             reduce using rule 77 (funciones -> funcion_void .)
    OR              reduce using rule 77 (funciones -> funcion_void .)
    XOR             reduce using rule 77 (funciones -> funcion_void .)
    IS_EQUAL        reduce using rule 77 (funciones -> funcion_void .)
    IS_NOT_EQUAL    reduce using rule 77 (funciones -> funcion_void .)
    IS_IDENTICAL    reduce using rule 77 (funciones -> funcion_void .)
    IS_NOT_IDENTICAL reduce using rule 77 (funciones -> funcion_void .)
    BOOLEAN_NOT     reduce using rule 77 (funciones -> funcion_void .)
    WHILE           reduce using rule 77 (funciones -> funcion_void .)
    DO              reduce using rule 77 (funciones -> funcion_void .)
    FOR             reduce using rule 77 (funciones -> funcion_void .)
    FOREACH         reduce using rule 77 (funciones -> funcion_void .)
    TRY             reduce using rule 77 (funciones -> funcion_void .)
    LPAREN          reduce using rule 77 (funciones -> funcion_void .)
    SWITCH          reduce using rule 77 (funciones -> funcion_void .)
    GOTO            reduce using rule 77 (funciones -> funcion_void .)
    PUBLIC          reduce using rule 77 (funciones -> funcion_void .)
    PRIVATE         reduce using rule 77 (funciones -> funcion_void .)
    PROTECTED       reduce using rule 77 (funciones -> funcion_void .)
    STATIC          reduce using rule 77 (funciones -> funcion_void .)
    FUNCTION        reduce using rule 77 (funciones -> funcion_void .)
    IF              reduce using rule 77 (funciones -> funcion_void .)
    BREAK           reduce using rule 77 (funciones -> funcion_void .)


state 30

    (63) constante -> DEFINE . LPAREN STRING COMMA valor RPAREN SEMI
    (64) constante -> DEFINE . LPAREN NOMBRE COMMA ARRAY RPAREN SEMI

    LPAREN          shift and go to state 83


state 31

    (65) lectura -> READLINE . LPAREN STRING RPAREN SEMI
    (66) lectura -> READLINE . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 84


state 32

    (31) operadores -> SUMA .

    $end            reduce using rule 31 (operadores -> SUMA .)
    VARIABLE        reduce using rule 31 (operadores -> SUMA .)
    STRING          reduce using rule 31 (operadores -> SUMA .)
    NOMBRE          reduce using rule 31 (operadores -> SUMA .)
    LPAREN          reduce using rule 31 (operadores -> SUMA .)
    ENTERO          reduce using rule 31 (operadores -> SUMA .)
    DECIMAL         reduce using rule 31 (operadores -> SUMA .)
    RBRACE          reduce using rule 31 (operadores -> SUMA .)
    ECHO            reduce using rule 31 (operadores -> SUMA .)
    PRINT           reduce using rule 31 (operadores -> SUMA .)
    VAR             reduce using rule 31 (operadores -> SUMA .)
    DEFINE          reduce using rule 31 (operadores -> SUMA .)
    READLINE        reduce using rule 31 (operadores -> SUMA .)
    SUMA            reduce using rule 31 (operadores -> SUMA .)
    RESTA           reduce using rule 31 (operadores -> SUMA .)
    MULTIPLICACION  reduce using rule 31 (operadores -> SUMA .)
    DIVISION        reduce using rule 31 (operadores -> SUMA .)
    MODULO          reduce using rule 31 (operadores -> SUMA .)
    SMALLER         reduce using rule 31 (operadores -> SUMA .)
    GREATER         reduce using rule 31 (operadores -> SUMA .)
    IS_SMALLER_OR_EQUAL reduce using rule 31 (operadores -> SUMA .)
    IS_GREATER_OR_EQUAL reduce using rule 31 (operadores -> SUMA .)
    AND             reduce using rule 31 (operadores -> SUMA .)
    OR              reduce using rule 31 (operadores -> SUMA .)
    XOR             reduce using rule 31 (operadores -> SUMA .)
    IS_EQUAL        reduce using rule 31 (operadores -> SUMA .)
    IS_NOT_EQUAL    reduce using rule 31 (operadores -> SUMA .)
    IS_IDENTICAL    reduce using rule 31 (operadores -> SUMA .)
    IS_NOT_IDENTICAL reduce using rule 31 (operadores -> SUMA .)
    BOOLEAN_NOT     reduce using rule 31 (operadores -> SUMA .)
    WHILE           reduce using rule 31 (operadores -> SUMA .)
    DO              reduce using rule 31 (operadores -> SUMA .)
    FOR             reduce using rule 31 (operadores -> SUMA .)
    FOREACH         reduce using rule 31 (operadores -> SUMA .)
    TRY             reduce using rule 31 (operadores -> SUMA .)
    SWITCH          reduce using rule 31 (operadores -> SUMA .)
    GOTO            reduce using rule 31 (operadores -> SUMA .)
    PUBLIC          reduce using rule 31 (operadores -> SUMA .)
    PRIVATE         reduce using rule 31 (operadores -> SUMA .)
    PROTECTED       reduce using rule 31 (operadores -> SUMA .)
    STATIC          reduce using rule 31 (operadores -> SUMA .)
    FUNCTION        reduce using rule 31 (operadores -> SUMA .)
    IF              reduce using rule 31 (operadores -> SUMA .)
    BREAK           reduce using rule 31 (operadores -> SUMA .)


state 33

    (32) operadores -> RESTA .

    $end            reduce using rule 32 (operadores -> RESTA .)
    VARIABLE        reduce using rule 32 (operadores -> RESTA .)
    STRING          reduce using rule 32 (operadores -> RESTA .)
    NOMBRE          reduce using rule 32 (operadores -> RESTA .)
    LPAREN          reduce using rule 32 (operadores -> RESTA .)
    ENTERO          reduce using rule 32 (operadores -> RESTA .)
    DECIMAL         reduce using rule 32 (operadores -> RESTA .)
    RBRACE          reduce using rule 32 (operadores -> RESTA .)
    ECHO            reduce using rule 32 (operadores -> RESTA .)
    PRINT           reduce using rule 32 (operadores -> RESTA .)
    VAR             reduce using rule 32 (operadores -> RESTA .)
    DEFINE          reduce using rule 32 (operadores -> RESTA .)
    READLINE        reduce using rule 32 (operadores -> RESTA .)
    SUMA            reduce using rule 32 (operadores -> RESTA .)
    RESTA           reduce using rule 32 (operadores -> RESTA .)
    MULTIPLICACION  reduce using rule 32 (operadores -> RESTA .)
    DIVISION        reduce using rule 32 (operadores -> RESTA .)
    MODULO          reduce using rule 32 (operadores -> RESTA .)
    SMALLER         reduce using rule 32 (operadores -> RESTA .)
    GREATER         reduce using rule 32 (operadores -> RESTA .)
    IS_SMALLER_OR_EQUAL reduce using rule 32 (operadores -> RESTA .)
    IS_GREATER_OR_EQUAL reduce using rule 32 (operadores -> RESTA .)
    AND             reduce using rule 32 (operadores -> RESTA .)
    OR              reduce using rule 32 (operadores -> RESTA .)
    XOR             reduce using rule 32 (operadores -> RESTA .)
    IS_EQUAL        reduce using rule 32 (operadores -> RESTA .)
    IS_NOT_EQUAL    reduce using rule 32 (operadores -> RESTA .)
    IS_IDENTICAL    reduce using rule 32 (operadores -> RESTA .)
    IS_NOT_IDENTICAL reduce using rule 32 (operadores -> RESTA .)
    BOOLEAN_NOT     reduce using rule 32 (operadores -> RESTA .)
    WHILE           reduce using rule 32 (operadores -> RESTA .)
    DO              reduce using rule 32 (operadores -> RESTA .)
    FOR             reduce using rule 32 (operadores -> RESTA .)
    FOREACH         reduce using rule 32 (operadores -> RESTA .)
    TRY             reduce using rule 32 (operadores -> RESTA .)
    SWITCH          reduce using rule 32 (operadores -> RESTA .)
    GOTO            reduce using rule 32 (operadores -> RESTA .)
    PUBLIC          reduce using rule 32 (operadores -> RESTA .)
    PRIVATE         reduce using rule 32 (operadores -> RESTA .)
    PROTECTED       reduce using rule 32 (operadores -> RESTA .)
    STATIC          reduce using rule 32 (operadores -> RESTA .)
    FUNCTION        reduce using rule 32 (operadores -> RESTA .)
    IF              reduce using rule 32 (operadores -> RESTA .)
    BREAK           reduce using rule 32 (operadores -> RESTA .)


state 34

    (33) operadores -> MULTIPLICACION .

    $end            reduce using rule 33 (operadores -> MULTIPLICACION .)
    VARIABLE        reduce using rule 33 (operadores -> MULTIPLICACION .)
    STRING          reduce using rule 33 (operadores -> MULTIPLICACION .)
    NOMBRE          reduce using rule 33 (operadores -> MULTIPLICACION .)
    LPAREN          reduce using rule 33 (operadores -> MULTIPLICACION .)
    ENTERO          reduce using rule 33 (operadores -> MULTIPLICACION .)
    DECIMAL         reduce using rule 33 (operadores -> MULTIPLICACION .)
    RBRACE          reduce using rule 33 (operadores -> MULTIPLICACION .)
    ECHO            reduce using rule 33 (operadores -> MULTIPLICACION .)
    PRINT           reduce using rule 33 (operadores -> MULTIPLICACION .)
    VAR             reduce using rule 33 (operadores -> MULTIPLICACION .)
    DEFINE          reduce using rule 33 (operadores -> MULTIPLICACION .)
    READLINE        reduce using rule 33 (operadores -> MULTIPLICACION .)
    SUMA            reduce using rule 33 (operadores -> MULTIPLICACION .)
    RESTA           reduce using rule 33 (operadores -> MULTIPLICACION .)
    MULTIPLICACION  reduce using rule 33 (operadores -> MULTIPLICACION .)
    DIVISION        reduce using rule 33 (operadores -> MULTIPLICACION .)
    MODULO          reduce using rule 33 (operadores -> MULTIPLICACION .)
    SMALLER         reduce using rule 33 (operadores -> MULTIPLICACION .)
    GREATER         reduce using rule 33 (operadores -> MULTIPLICACION .)
    IS_SMALLER_OR_EQUAL reduce using rule 33 (operadores -> MULTIPLICACION .)
    IS_GREATER_OR_EQUAL reduce using rule 33 (operadores -> MULTIPLICACION .)
    AND             reduce using rule 33 (operadores -> MULTIPLICACION .)
    OR              reduce using rule 33 (operadores -> MULTIPLICACION .)
    XOR             reduce using rule 33 (operadores -> MULTIPLICACION .)
    IS_EQUAL        reduce using rule 33 (operadores -> MULTIPLICACION .)
    IS_NOT_EQUAL    reduce using rule 33 (operadores -> MULTIPLICACION .)
    IS_IDENTICAL    reduce using rule 33 (operadores -> MULTIPLICACION .)
    IS_NOT_IDENTICAL reduce using rule 33 (operadores -> MULTIPLICACION .)
    BOOLEAN_NOT     reduce using rule 33 (operadores -> MULTIPLICACION .)
    WHILE           reduce using rule 33 (operadores -> MULTIPLICACION .)
    DO              reduce using rule 33 (operadores -> MULTIPLICACION .)
    FOR             reduce using rule 33 (operadores -> MULTIPLICACION .)
    FOREACH         reduce using rule 33 (operadores -> MULTIPLICACION .)
    TRY             reduce using rule 33 (operadores -> MULTIPLICACION .)
    SWITCH          reduce using rule 33 (operadores -> MULTIPLICACION .)
    GOTO            reduce using rule 33 (operadores -> MULTIPLICACION .)
    PUBLIC          reduce using rule 33 (operadores -> MULTIPLICACION .)
    PRIVATE         reduce using rule 33 (operadores -> MULTIPLICACION .)
    PROTECTED       reduce using rule 33 (operadores -> MULTIPLICACION .)
    STATIC          reduce using rule 33 (operadores -> MULTIPLICACION .)
    FUNCTION        reduce using rule 33 (operadores -> MULTIPLICACION .)
    IF              reduce using rule 33 (operadores -> MULTIPLICACION .)
    BREAK           reduce using rule 33 (operadores -> MULTIPLICACION .)


state 35

    (34) operadores -> DIVISION .

    $end            reduce using rule 34 (operadores -> DIVISION .)
    VARIABLE        reduce using rule 34 (operadores -> DIVISION .)
    STRING          reduce using rule 34 (operadores -> DIVISION .)
    NOMBRE          reduce using rule 34 (operadores -> DIVISION .)
    LPAREN          reduce using rule 34 (operadores -> DIVISION .)
    ENTERO          reduce using rule 34 (operadores -> DIVISION .)
    DECIMAL         reduce using rule 34 (operadores -> DIVISION .)
    RBRACE          reduce using rule 34 (operadores -> DIVISION .)
    ECHO            reduce using rule 34 (operadores -> DIVISION .)
    PRINT           reduce using rule 34 (operadores -> DIVISION .)
    VAR             reduce using rule 34 (operadores -> DIVISION .)
    DEFINE          reduce using rule 34 (operadores -> DIVISION .)
    READLINE        reduce using rule 34 (operadores -> DIVISION .)
    SUMA            reduce using rule 34 (operadores -> DIVISION .)
    RESTA           reduce using rule 34 (operadores -> DIVISION .)
    MULTIPLICACION  reduce using rule 34 (operadores -> DIVISION .)
    DIVISION        reduce using rule 34 (operadores -> DIVISION .)
    MODULO          reduce using rule 34 (operadores -> DIVISION .)
    SMALLER         reduce using rule 34 (operadores -> DIVISION .)
    GREATER         reduce using rule 34 (operadores -> DIVISION .)
    IS_SMALLER_OR_EQUAL reduce using rule 34 (operadores -> DIVISION .)
    IS_GREATER_OR_EQUAL reduce using rule 34 (operadores -> DIVISION .)
    AND             reduce using rule 34 (operadores -> DIVISION .)
    OR              reduce using rule 34 (operadores -> DIVISION .)
    XOR             reduce using rule 34 (operadores -> DIVISION .)
    IS_EQUAL        reduce using rule 34 (operadores -> DIVISION .)
    IS_NOT_EQUAL    reduce using rule 34 (operadores -> DIVISION .)
    IS_IDENTICAL    reduce using rule 34 (operadores -> DIVISION .)
    IS_NOT_IDENTICAL reduce using rule 34 (operadores -> DIVISION .)
    BOOLEAN_NOT     reduce using rule 34 (operadores -> DIVISION .)
    WHILE           reduce using rule 34 (operadores -> DIVISION .)
    DO              reduce using rule 34 (operadores -> DIVISION .)
    FOR             reduce using rule 34 (operadores -> DIVISION .)
    FOREACH         reduce using rule 34 (operadores -> DIVISION .)
    TRY             reduce using rule 34 (operadores -> DIVISION .)
    SWITCH          reduce using rule 34 (operadores -> DIVISION .)
    GOTO            reduce using rule 34 (operadores -> DIVISION .)
    PUBLIC          reduce using rule 34 (operadores -> DIVISION .)
    PRIVATE         reduce using rule 34 (operadores -> DIVISION .)
    PROTECTED       reduce using rule 34 (operadores -> DIVISION .)
    STATIC          reduce using rule 34 (operadores -> DIVISION .)
    FUNCTION        reduce using rule 34 (operadores -> DIVISION .)
    IF              reduce using rule 34 (operadores -> DIVISION .)
    BREAK           reduce using rule 34 (operadores -> DIVISION .)


state 36

    (35) operadores -> MODULO .

    $end            reduce using rule 35 (operadores -> MODULO .)
    VARIABLE        reduce using rule 35 (operadores -> MODULO .)
    STRING          reduce using rule 35 (operadores -> MODULO .)
    NOMBRE          reduce using rule 35 (operadores -> MODULO .)
    LPAREN          reduce using rule 35 (operadores -> MODULO .)
    ENTERO          reduce using rule 35 (operadores -> MODULO .)
    DECIMAL         reduce using rule 35 (operadores -> MODULO .)
    RBRACE          reduce using rule 35 (operadores -> MODULO .)
    ECHO            reduce using rule 35 (operadores -> MODULO .)
    PRINT           reduce using rule 35 (operadores -> MODULO .)
    VAR             reduce using rule 35 (operadores -> MODULO .)
    DEFINE          reduce using rule 35 (operadores -> MODULO .)
    READLINE        reduce using rule 35 (operadores -> MODULO .)
    SUMA            reduce using rule 35 (operadores -> MODULO .)
    RESTA           reduce using rule 35 (operadores -> MODULO .)
    MULTIPLICACION  reduce using rule 35 (operadores -> MODULO .)
    DIVISION        reduce using rule 35 (operadores -> MODULO .)
    MODULO          reduce using rule 35 (operadores -> MODULO .)
    SMALLER         reduce using rule 35 (operadores -> MODULO .)
    GREATER         reduce using rule 35 (operadores -> MODULO .)
    IS_SMALLER_OR_EQUAL reduce using rule 35 (operadores -> MODULO .)
    IS_GREATER_OR_EQUAL reduce using rule 35 (operadores -> MODULO .)
    AND             reduce using rule 35 (operadores -> MODULO .)
    OR              reduce using rule 35 (operadores -> MODULO .)
    XOR             reduce using rule 35 (operadores -> MODULO .)
    IS_EQUAL        reduce using rule 35 (operadores -> MODULO .)
    IS_NOT_EQUAL    reduce using rule 35 (operadores -> MODULO .)
    IS_IDENTICAL    reduce using rule 35 (operadores -> MODULO .)
    IS_NOT_IDENTICAL reduce using rule 35 (operadores -> MODULO .)
    BOOLEAN_NOT     reduce using rule 35 (operadores -> MODULO .)
    WHILE           reduce using rule 35 (operadores -> MODULO .)
    DO              reduce using rule 35 (operadores -> MODULO .)
    FOR             reduce using rule 35 (operadores -> MODULO .)
    FOREACH         reduce using rule 35 (operadores -> MODULO .)
    TRY             reduce using rule 35 (operadores -> MODULO .)
    SWITCH          reduce using rule 35 (operadores -> MODULO .)
    GOTO            reduce using rule 35 (operadores -> MODULO .)
    PUBLIC          reduce using rule 35 (operadores -> MODULO .)
    PRIVATE         reduce using rule 35 (operadores -> MODULO .)
    PROTECTED       reduce using rule 35 (operadores -> MODULO .)
    STATIC          reduce using rule 35 (operadores -> MODULO .)
    FUNCTION        reduce using rule 35 (operadores -> MODULO .)
    IF              reduce using rule 35 (operadores -> MODULO .)
    BREAK           reduce using rule 35 (operadores -> MODULO .)


state 37

    (36) operador_logico -> SMALLER .

    $end            reduce using rule 36 (operador_logico -> SMALLER .)
    RBRACE          reduce using rule 36 (operador_logico -> SMALLER .)
    VARIABLE        reduce using rule 36 (operador_logico -> SMALLER .)
    STRING          reduce using rule 36 (operador_logico -> SMALLER .)
    NOMBRE          reduce using rule 36 (operador_logico -> SMALLER .)
    ENTERO          reduce using rule 36 (operador_logico -> SMALLER .)
    DECIMAL         reduce using rule 36 (operador_logico -> SMALLER .)
    ECHO            reduce using rule 36 (operador_logico -> SMALLER .)
    PRINT           reduce using rule 36 (operador_logico -> SMALLER .)
    VAR             reduce using rule 36 (operador_logico -> SMALLER .)
    DEFINE          reduce using rule 36 (operador_logico -> SMALLER .)
    READLINE        reduce using rule 36 (operador_logico -> SMALLER .)
    SUMA            reduce using rule 36 (operador_logico -> SMALLER .)
    RESTA           reduce using rule 36 (operador_logico -> SMALLER .)
    MULTIPLICACION  reduce using rule 36 (operador_logico -> SMALLER .)
    DIVISION        reduce using rule 36 (operador_logico -> SMALLER .)
    MODULO          reduce using rule 36 (operador_logico -> SMALLER .)
    SMALLER         reduce using rule 36 (operador_logico -> SMALLER .)
    GREATER         reduce using rule 36 (operador_logico -> SMALLER .)
    IS_SMALLER_OR_EQUAL reduce using rule 36 (operador_logico -> SMALLER .)
    IS_GREATER_OR_EQUAL reduce using rule 36 (operador_logico -> SMALLER .)
    AND             reduce using rule 36 (operador_logico -> SMALLER .)
    OR              reduce using rule 36 (operador_logico -> SMALLER .)
    XOR             reduce using rule 36 (operador_logico -> SMALLER .)
    IS_EQUAL        reduce using rule 36 (operador_logico -> SMALLER .)
    IS_NOT_EQUAL    reduce using rule 36 (operador_logico -> SMALLER .)
    IS_IDENTICAL    reduce using rule 36 (operador_logico -> SMALLER .)
    IS_NOT_IDENTICAL reduce using rule 36 (operador_logico -> SMALLER .)
    BOOLEAN_NOT     reduce using rule 36 (operador_logico -> SMALLER .)
    WHILE           reduce using rule 36 (operador_logico -> SMALLER .)
    DO              reduce using rule 36 (operador_logico -> SMALLER .)
    FOR             reduce using rule 36 (operador_logico -> SMALLER .)
    FOREACH         reduce using rule 36 (operador_logico -> SMALLER .)
    TRY             reduce using rule 36 (operador_logico -> SMALLER .)
    LPAREN          reduce using rule 36 (operador_logico -> SMALLER .)
    SWITCH          reduce using rule 36 (operador_logico -> SMALLER .)
    GOTO            reduce using rule 36 (operador_logico -> SMALLER .)
    PUBLIC          reduce using rule 36 (operador_logico -> SMALLER .)
    PRIVATE         reduce using rule 36 (operador_logico -> SMALLER .)
    PROTECTED       reduce using rule 36 (operador_logico -> SMALLER .)
    STATIC          reduce using rule 36 (operador_logico -> SMALLER .)
    FUNCTION        reduce using rule 36 (operador_logico -> SMALLER .)
    IF              reduce using rule 36 (operador_logico -> SMALLER .)
    BREAK           reduce using rule 36 (operador_logico -> SMALLER .)


state 38

    (37) operador_logico -> GREATER .

    $end            reduce using rule 37 (operador_logico -> GREATER .)
    RBRACE          reduce using rule 37 (operador_logico -> GREATER .)
    VARIABLE        reduce using rule 37 (operador_logico -> GREATER .)
    STRING          reduce using rule 37 (operador_logico -> GREATER .)
    NOMBRE          reduce using rule 37 (operador_logico -> GREATER .)
    ENTERO          reduce using rule 37 (operador_logico -> GREATER .)
    DECIMAL         reduce using rule 37 (operador_logico -> GREATER .)
    ECHO            reduce using rule 37 (operador_logico -> GREATER .)
    PRINT           reduce using rule 37 (operador_logico -> GREATER .)
    VAR             reduce using rule 37 (operador_logico -> GREATER .)
    DEFINE          reduce using rule 37 (operador_logico -> GREATER .)
    READLINE        reduce using rule 37 (operador_logico -> GREATER .)
    SUMA            reduce using rule 37 (operador_logico -> GREATER .)
    RESTA           reduce using rule 37 (operador_logico -> GREATER .)
    MULTIPLICACION  reduce using rule 37 (operador_logico -> GREATER .)
    DIVISION        reduce using rule 37 (operador_logico -> GREATER .)
    MODULO          reduce using rule 37 (operador_logico -> GREATER .)
    SMALLER         reduce using rule 37 (operador_logico -> GREATER .)
    GREATER         reduce using rule 37 (operador_logico -> GREATER .)
    IS_SMALLER_OR_EQUAL reduce using rule 37 (operador_logico -> GREATER .)
    IS_GREATER_OR_EQUAL reduce using rule 37 (operador_logico -> GREATER .)
    AND             reduce using rule 37 (operador_logico -> GREATER .)
    OR              reduce using rule 37 (operador_logico -> GREATER .)
    XOR             reduce using rule 37 (operador_logico -> GREATER .)
    IS_EQUAL        reduce using rule 37 (operador_logico -> GREATER .)
    IS_NOT_EQUAL    reduce using rule 37 (operador_logico -> GREATER .)
    IS_IDENTICAL    reduce using rule 37 (operador_logico -> GREATER .)
    IS_NOT_IDENTICAL reduce using rule 37 (operador_logico -> GREATER .)
    BOOLEAN_NOT     reduce using rule 37 (operador_logico -> GREATER .)
    WHILE           reduce using rule 37 (operador_logico -> GREATER .)
    DO              reduce using rule 37 (operador_logico -> GREATER .)
    FOR             reduce using rule 37 (operador_logico -> GREATER .)
    FOREACH         reduce using rule 37 (operador_logico -> GREATER .)
    TRY             reduce using rule 37 (operador_logico -> GREATER .)
    LPAREN          reduce using rule 37 (operador_logico -> GREATER .)
    SWITCH          reduce using rule 37 (operador_logico -> GREATER .)
    GOTO            reduce using rule 37 (operador_logico -> GREATER .)
    PUBLIC          reduce using rule 37 (operador_logico -> GREATER .)
    PRIVATE         reduce using rule 37 (operador_logico -> GREATER .)
    PROTECTED       reduce using rule 37 (operador_logico -> GREATER .)
    STATIC          reduce using rule 37 (operador_logico -> GREATER .)
    FUNCTION        reduce using rule 37 (operador_logico -> GREATER .)
    IF              reduce using rule 37 (operador_logico -> GREATER .)
    BREAK           reduce using rule 37 (operador_logico -> GREATER .)


state 39

    (38) operador_logico -> IS_SMALLER_OR_EQUAL .

    $end            reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    RBRACE          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    VARIABLE        reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    STRING          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    NOMBRE          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    ENTERO          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    DECIMAL         reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    ECHO            reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    PRINT           reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    VAR             reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    DEFINE          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    READLINE        reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    SUMA            reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    RESTA           reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    MULTIPLICACION  reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    DIVISION        reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    MODULO          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    SMALLER         reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    GREATER         reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_GREATER_OR_EQUAL reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    AND             reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    OR              reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    XOR             reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_EQUAL        reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_NOT_EQUAL    reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_IDENTICAL    reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IS_NOT_IDENTICAL reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    BOOLEAN_NOT     reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    WHILE           reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    DO              reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    FOR             reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    FOREACH         reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    TRY             reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    LPAREN          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    SWITCH          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    GOTO            reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    PUBLIC          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    PRIVATE         reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    PROTECTED       reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    STATIC          reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    FUNCTION        reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    IF              reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)
    BREAK           reduce using rule 38 (operador_logico -> IS_SMALLER_OR_EQUAL .)


state 40

    (39) operador_logico -> IS_GREATER_OR_EQUAL .

    $end            reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    RBRACE          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    VARIABLE        reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    STRING          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    NOMBRE          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    ENTERO          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    DECIMAL         reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    ECHO            reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    PRINT           reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    VAR             reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    DEFINE          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    READLINE        reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    SUMA            reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    RESTA           reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    MULTIPLICACION  reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    DIVISION        reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    MODULO          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    SMALLER         reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    GREATER         reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_GREATER_OR_EQUAL reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    AND             reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    OR              reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    XOR             reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_EQUAL        reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_NOT_EQUAL    reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_IDENTICAL    reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IS_NOT_IDENTICAL reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    BOOLEAN_NOT     reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    WHILE           reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    DO              reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    FOR             reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    FOREACH         reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    TRY             reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    LPAREN          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    SWITCH          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    GOTO            reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    PUBLIC          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    PRIVATE         reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    PROTECTED       reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    STATIC          reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    FUNCTION        reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    IF              reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)
    BREAK           reduce using rule 39 (operador_logico -> IS_GREATER_OR_EQUAL .)


state 41

    (47) condicion_booleana -> AND .

    $end            reduce using rule 47 (condicion_booleana -> AND .)
    RBRACE          reduce using rule 47 (condicion_booleana -> AND .)
    ECHO            reduce using rule 47 (condicion_booleana -> AND .)
    PRINT           reduce using rule 47 (condicion_booleana -> AND .)
    VARIABLE        reduce using rule 47 (condicion_booleana -> AND .)
    VAR             reduce using rule 47 (condicion_booleana -> AND .)
    DEFINE          reduce using rule 47 (condicion_booleana -> AND .)
    READLINE        reduce using rule 47 (condicion_booleana -> AND .)
    SUMA            reduce using rule 47 (condicion_booleana -> AND .)
    RESTA           reduce using rule 47 (condicion_booleana -> AND .)
    MULTIPLICACION  reduce using rule 47 (condicion_booleana -> AND .)
    DIVISION        reduce using rule 47 (condicion_booleana -> AND .)
    MODULO          reduce using rule 47 (condicion_booleana -> AND .)
    SMALLER         reduce using rule 47 (condicion_booleana -> AND .)
    GREATER         reduce using rule 47 (condicion_booleana -> AND .)
    IS_SMALLER_OR_EQUAL reduce using rule 47 (condicion_booleana -> AND .)
    IS_GREATER_OR_EQUAL reduce using rule 47 (condicion_booleana -> AND .)
    AND             reduce using rule 47 (condicion_booleana -> AND .)
    OR              reduce using rule 47 (condicion_booleana -> AND .)
    XOR             reduce using rule 47 (condicion_booleana -> AND .)
    IS_EQUAL        reduce using rule 47 (condicion_booleana -> AND .)
    IS_NOT_EQUAL    reduce using rule 47 (condicion_booleana -> AND .)
    IS_IDENTICAL    reduce using rule 47 (condicion_booleana -> AND .)
    IS_NOT_IDENTICAL reduce using rule 47 (condicion_booleana -> AND .)
    BOOLEAN_NOT     reduce using rule 47 (condicion_booleana -> AND .)
    WHILE           reduce using rule 47 (condicion_booleana -> AND .)
    DO              reduce using rule 47 (condicion_booleana -> AND .)
    FOR             reduce using rule 47 (condicion_booleana -> AND .)
    FOREACH         reduce using rule 47 (condicion_booleana -> AND .)
    TRY             reduce using rule 47 (condicion_booleana -> AND .)
    LPAREN          reduce using rule 47 (condicion_booleana -> AND .)
    SWITCH          reduce using rule 47 (condicion_booleana -> AND .)
    GOTO            reduce using rule 47 (condicion_booleana -> AND .)
    PUBLIC          reduce using rule 47 (condicion_booleana -> AND .)
    PRIVATE         reduce using rule 47 (condicion_booleana -> AND .)
    PROTECTED       reduce using rule 47 (condicion_booleana -> AND .)
    STATIC          reduce using rule 47 (condicion_booleana -> AND .)
    FUNCTION        reduce using rule 47 (condicion_booleana -> AND .)
    IF              reduce using rule 47 (condicion_booleana -> AND .)
    BREAK           reduce using rule 47 (condicion_booleana -> AND .)


state 42

    (48) condicion_booleana -> OR .

    $end            reduce using rule 48 (condicion_booleana -> OR .)
    RBRACE          reduce using rule 48 (condicion_booleana -> OR .)
    ECHO            reduce using rule 48 (condicion_booleana -> OR .)
    PRINT           reduce using rule 48 (condicion_booleana -> OR .)
    VARIABLE        reduce using rule 48 (condicion_booleana -> OR .)
    VAR             reduce using rule 48 (condicion_booleana -> OR .)
    DEFINE          reduce using rule 48 (condicion_booleana -> OR .)
    READLINE        reduce using rule 48 (condicion_booleana -> OR .)
    SUMA            reduce using rule 48 (condicion_booleana -> OR .)
    RESTA           reduce using rule 48 (condicion_booleana -> OR .)
    MULTIPLICACION  reduce using rule 48 (condicion_booleana -> OR .)
    DIVISION        reduce using rule 48 (condicion_booleana -> OR .)
    MODULO          reduce using rule 48 (condicion_booleana -> OR .)
    SMALLER         reduce using rule 48 (condicion_booleana -> OR .)
    GREATER         reduce using rule 48 (condicion_booleana -> OR .)
    IS_SMALLER_OR_EQUAL reduce using rule 48 (condicion_booleana -> OR .)
    IS_GREATER_OR_EQUAL reduce using rule 48 (condicion_booleana -> OR .)
    AND             reduce using rule 48 (condicion_booleana -> OR .)
    OR              reduce using rule 48 (condicion_booleana -> OR .)
    XOR             reduce using rule 48 (condicion_booleana -> OR .)
    IS_EQUAL        reduce using rule 48 (condicion_booleana -> OR .)
    IS_NOT_EQUAL    reduce using rule 48 (condicion_booleana -> OR .)
    IS_IDENTICAL    reduce using rule 48 (condicion_booleana -> OR .)
    IS_NOT_IDENTICAL reduce using rule 48 (condicion_booleana -> OR .)
    BOOLEAN_NOT     reduce using rule 48 (condicion_booleana -> OR .)
    WHILE           reduce using rule 48 (condicion_booleana -> OR .)
    DO              reduce using rule 48 (condicion_booleana -> OR .)
    FOR             reduce using rule 48 (condicion_booleana -> OR .)
    FOREACH         reduce using rule 48 (condicion_booleana -> OR .)
    TRY             reduce using rule 48 (condicion_booleana -> OR .)
    LPAREN          reduce using rule 48 (condicion_booleana -> OR .)
    SWITCH          reduce using rule 48 (condicion_booleana -> OR .)
    GOTO            reduce using rule 48 (condicion_booleana -> OR .)
    PUBLIC          reduce using rule 48 (condicion_booleana -> OR .)
    PRIVATE         reduce using rule 48 (condicion_booleana -> OR .)
    PROTECTED       reduce using rule 48 (condicion_booleana -> OR .)
    STATIC          reduce using rule 48 (condicion_booleana -> OR .)
    FUNCTION        reduce using rule 48 (condicion_booleana -> OR .)
    IF              reduce using rule 48 (condicion_booleana -> OR .)
    BREAK           reduce using rule 48 (condicion_booleana -> OR .)


state 43

    (49) condicion_booleana -> XOR .

    $end            reduce using rule 49 (condicion_booleana -> XOR .)
    RBRACE          reduce using rule 49 (condicion_booleana -> XOR .)
    ECHO            reduce using rule 49 (condicion_booleana -> XOR .)
    PRINT           reduce using rule 49 (condicion_booleana -> XOR .)
    VARIABLE        reduce using rule 49 (condicion_booleana -> XOR .)
    VAR             reduce using rule 49 (condicion_booleana -> XOR .)
    DEFINE          reduce using rule 49 (condicion_booleana -> XOR .)
    READLINE        reduce using rule 49 (condicion_booleana -> XOR .)
    SUMA            reduce using rule 49 (condicion_booleana -> XOR .)
    RESTA           reduce using rule 49 (condicion_booleana -> XOR .)
    MULTIPLICACION  reduce using rule 49 (condicion_booleana -> XOR .)
    DIVISION        reduce using rule 49 (condicion_booleana -> XOR .)
    MODULO          reduce using rule 49 (condicion_booleana -> XOR .)
    SMALLER         reduce using rule 49 (condicion_booleana -> XOR .)
    GREATER         reduce using rule 49 (condicion_booleana -> XOR .)
    IS_SMALLER_OR_EQUAL reduce using rule 49 (condicion_booleana -> XOR .)
    IS_GREATER_OR_EQUAL reduce using rule 49 (condicion_booleana -> XOR .)
    AND             reduce using rule 49 (condicion_booleana -> XOR .)
    OR              reduce using rule 49 (condicion_booleana -> XOR .)
    XOR             reduce using rule 49 (condicion_booleana -> XOR .)
    IS_EQUAL        reduce using rule 49 (condicion_booleana -> XOR .)
    IS_NOT_EQUAL    reduce using rule 49 (condicion_booleana -> XOR .)
    IS_IDENTICAL    reduce using rule 49 (condicion_booleana -> XOR .)
    IS_NOT_IDENTICAL reduce using rule 49 (condicion_booleana -> XOR .)
    BOOLEAN_NOT     reduce using rule 49 (condicion_booleana -> XOR .)
    WHILE           reduce using rule 49 (condicion_booleana -> XOR .)
    DO              reduce using rule 49 (condicion_booleana -> XOR .)
    FOR             reduce using rule 49 (condicion_booleana -> XOR .)
    FOREACH         reduce using rule 49 (condicion_booleana -> XOR .)
    TRY             reduce using rule 49 (condicion_booleana -> XOR .)
    LPAREN          reduce using rule 49 (condicion_booleana -> XOR .)
    SWITCH          reduce using rule 49 (condicion_booleana -> XOR .)
    GOTO            reduce using rule 49 (condicion_booleana -> XOR .)
    PUBLIC          reduce using rule 49 (condicion_booleana -> XOR .)
    PRIVATE         reduce using rule 49 (condicion_booleana -> XOR .)
    PROTECTED       reduce using rule 49 (condicion_booleana -> XOR .)
    STATIC          reduce using rule 49 (condicion_booleana -> XOR .)
    FUNCTION        reduce using rule 49 (condicion_booleana -> XOR .)
    IF              reduce using rule 49 (condicion_booleana -> XOR .)
    BREAK           reduce using rule 49 (condicion_booleana -> XOR .)


state 44

    (50) condicion_booleana -> IS_EQUAL .

    $end            reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    RBRACE          reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    ECHO            reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    PRINT           reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    VARIABLE        reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    VAR             reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    DEFINE          reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    READLINE        reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    SUMA            reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    RESTA           reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    MULTIPLICACION  reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    DIVISION        reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    MODULO          reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    SMALLER         reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    GREATER         reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    IS_GREATER_OR_EQUAL reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    AND             reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    OR              reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    XOR             reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    IS_EQUAL        reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    IS_NOT_EQUAL    reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    IS_IDENTICAL    reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    IS_NOT_IDENTICAL reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    BOOLEAN_NOT     reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    WHILE           reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    DO              reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    FOR             reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    FOREACH         reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    TRY             reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    LPAREN          reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    SWITCH          reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    GOTO            reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    PUBLIC          reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    PRIVATE         reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    PROTECTED       reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    STATIC          reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    FUNCTION        reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    IF              reduce using rule 50 (condicion_booleana -> IS_EQUAL .)
    BREAK           reduce using rule 50 (condicion_booleana -> IS_EQUAL .)


state 45

    (51) condicion_booleana -> IS_NOT_EQUAL .

    $end            reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    RBRACE          reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    ECHO            reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    PRINT           reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    VARIABLE        reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    VAR             reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    DEFINE          reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    READLINE        reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    SUMA            reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    RESTA           reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    MULTIPLICACION  reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    DIVISION        reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    MODULO          reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    SMALLER         reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    GREATER         reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_GREATER_OR_EQUAL reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    AND             reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    OR              reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    XOR             reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_EQUAL        reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_NOT_EQUAL    reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_IDENTICAL    reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    IS_NOT_IDENTICAL reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    BOOLEAN_NOT     reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    WHILE           reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    DO              reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    FOR             reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    FOREACH         reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    TRY             reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    LPAREN          reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    SWITCH          reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    GOTO            reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    PUBLIC          reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    PRIVATE         reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    PROTECTED       reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    STATIC          reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    FUNCTION        reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    IF              reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)
    BREAK           reduce using rule 51 (condicion_booleana -> IS_NOT_EQUAL .)


state 46

    (52) condicion_booleana -> IS_IDENTICAL .

    $end            reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    RBRACE          reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    ECHO            reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    PRINT           reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    VARIABLE        reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    VAR             reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    DEFINE          reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    READLINE        reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    SUMA            reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    RESTA           reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    MULTIPLICACION  reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    DIVISION        reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    MODULO          reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    SMALLER         reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    GREATER         reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    IS_GREATER_OR_EQUAL reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    AND             reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    OR              reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    XOR             reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    IS_EQUAL        reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    IS_NOT_EQUAL    reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    IS_IDENTICAL    reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    IS_NOT_IDENTICAL reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    BOOLEAN_NOT     reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    WHILE           reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    DO              reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    FOR             reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    FOREACH         reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    TRY             reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    LPAREN          reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    SWITCH          reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    GOTO            reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    PUBLIC          reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    PRIVATE         reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    PROTECTED       reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    STATIC          reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    FUNCTION        reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    IF              reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)
    BREAK           reduce using rule 52 (condicion_booleana -> IS_IDENTICAL .)


state 47

    (53) condicion_booleana -> IS_NOT_IDENTICAL .

    $end            reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    RBRACE          reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    ECHO            reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    PRINT           reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    VARIABLE        reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    VAR             reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    DEFINE          reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    READLINE        reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    SUMA            reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    RESTA           reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    MULTIPLICACION  reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    DIVISION        reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    MODULO          reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    SMALLER         reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    GREATER         reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_GREATER_OR_EQUAL reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    AND             reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    OR              reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    XOR             reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_EQUAL        reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_NOT_EQUAL    reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_IDENTICAL    reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IS_NOT_IDENTICAL reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    BOOLEAN_NOT     reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    WHILE           reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    DO              reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    FOR             reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    FOREACH         reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    TRY             reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    LPAREN          reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    SWITCH          reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    GOTO            reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    PUBLIC          reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    PRIVATE         reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    PROTECTED       reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    STATIC          reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    FUNCTION        reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    IF              reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)
    BREAK           reduce using rule 53 (condicion_booleana -> IS_NOT_IDENTICAL .)


state 48

    (54) condicion_booleana -> BOOLEAN_NOT .

    $end            reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    RBRACE          reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    ECHO            reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    PRINT           reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    VARIABLE        reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    VAR             reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    DEFINE          reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    READLINE        reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    SUMA            reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    RESTA           reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    MULTIPLICACION  reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    DIVISION        reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    MODULO          reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    SMALLER         reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    GREATER         reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    IS_SMALLER_OR_EQUAL reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    IS_GREATER_OR_EQUAL reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    AND             reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    OR              reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    XOR             reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    IS_EQUAL        reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    IS_NOT_EQUAL    reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    IS_IDENTICAL    reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    IS_NOT_IDENTICAL reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    BOOLEAN_NOT     reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    WHILE           reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    DO              reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    FOR             reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    FOREACH         reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    TRY             reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    LPAREN          reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    SWITCH          reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    GOTO            reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    PUBLIC          reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    PRIVATE         reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    PROTECTED       reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    STATIC          reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    FUNCTION        reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    IF              reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)
    BREAK           reduce using rule 54 (condicion_booleana -> BOOLEAN_NOT .)


state 49

    (89) bwhile -> WHILE . LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (90) bwhile -> WHILE . LPAREN condicion RPAREN COLON stc_bloque

    LPAREN          shift and go to state 85


state 50

    (91) bdo -> DO . LBRACE cuerpo RBRACE bwhile

    LBRACE          shift and go to state 86


state 51

    (96) bfor -> FOR . LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def

    LPAREN          shift and go to state 87


state 52

    (108) bforeach -> FOREACH . LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def

    LPAREN          shift and go to state 88


state 53

    (113) btry -> TRY . LBRACE stc_bloque_def RBRACE catches

    LBRACE          shift and go to state 89


state 54

    (43) condicion_ifelse -> condicion_if .
    (44) condicion_ifelse -> condicion_if . condicion_else
    (45) condicion_ifelse -> condicion_if . condicion_elseif
    (46) condicion_ifelse -> condicion_if . condicion_elseif condicion_else
    (42) condicion_else -> . ELSE LBRACE cuerpo RBRACE
    (41) condicion_elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    $end            reduce using rule 43 (condicion_ifelse -> condicion_if .)
    RBRACE          reduce using rule 43 (condicion_ifelse -> condicion_if .)
    ECHO            reduce using rule 43 (condicion_ifelse -> condicion_if .)
    PRINT           reduce using rule 43 (condicion_ifelse -> condicion_if .)
    VARIABLE        reduce using rule 43 (condicion_ifelse -> condicion_if .)
    VAR             reduce using rule 43 (condicion_ifelse -> condicion_if .)
    DEFINE          reduce using rule 43 (condicion_ifelse -> condicion_if .)
    READLINE        reduce using rule 43 (condicion_ifelse -> condicion_if .)
    SUMA            reduce using rule 43 (condicion_ifelse -> condicion_if .)
    RESTA           reduce using rule 43 (condicion_ifelse -> condicion_if .)
    MULTIPLICACION  reduce using rule 43 (condicion_ifelse -> condicion_if .)
    DIVISION        reduce using rule 43 (condicion_ifelse -> condicion_if .)
    MODULO          reduce using rule 43 (condicion_ifelse -> condicion_if .)
    SMALLER         reduce using rule 43 (condicion_ifelse -> condicion_if .)
    GREATER         reduce using rule 43 (condicion_ifelse -> condicion_if .)
    IS_SMALLER_OR_EQUAL reduce using rule 43 (condicion_ifelse -> condicion_if .)
    IS_GREATER_OR_EQUAL reduce using rule 43 (condicion_ifelse -> condicion_if .)
    AND             reduce using rule 43 (condicion_ifelse -> condicion_if .)
    OR              reduce using rule 43 (condicion_ifelse -> condicion_if .)
    XOR             reduce using rule 43 (condicion_ifelse -> condicion_if .)
    IS_EQUAL        reduce using rule 43 (condicion_ifelse -> condicion_if .)
    IS_NOT_EQUAL    reduce using rule 43 (condicion_ifelse -> condicion_if .)
    IS_IDENTICAL    reduce using rule 43 (condicion_ifelse -> condicion_if .)
    IS_NOT_IDENTICAL reduce using rule 43 (condicion_ifelse -> condicion_if .)
    BOOLEAN_NOT     reduce using rule 43 (condicion_ifelse -> condicion_if .)
    WHILE           reduce using rule 43 (condicion_ifelse -> condicion_if .)
    DO              reduce using rule 43 (condicion_ifelse -> condicion_if .)
    FOR             reduce using rule 43 (condicion_ifelse -> condicion_if .)
    FOREACH         reduce using rule 43 (condicion_ifelse -> condicion_if .)
    TRY             reduce using rule 43 (condicion_ifelse -> condicion_if .)
    LPAREN          reduce using rule 43 (condicion_ifelse -> condicion_if .)
    SWITCH          reduce using rule 43 (condicion_ifelse -> condicion_if .)
    GOTO            reduce using rule 43 (condicion_ifelse -> condicion_if .)
    PUBLIC          reduce using rule 43 (condicion_ifelse -> condicion_if .)
    PRIVATE         reduce using rule 43 (condicion_ifelse -> condicion_if .)
    PROTECTED       reduce using rule 43 (condicion_ifelse -> condicion_if .)
    STATIC          reduce using rule 43 (condicion_ifelse -> condicion_if .)
    FUNCTION        reduce using rule 43 (condicion_ifelse -> condicion_if .)
    IF              reduce using rule 43 (condicion_ifelse -> condicion_if .)
    BREAK           reduce using rule 43 (condicion_ifelse -> condicion_if .)
    ELSE            shift and go to state 92
    ELSEIF          shift and go to state 93

    condicion_else                 shift and go to state 90
    condicion_elseif               shift and go to state 91

state 55

    (92) bswitch -> SWITCH . LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE

    LPAREN          shift and go to state 94


state 56

    (117) bgoto -> GOTO . NOMBRE SEMI

    NOMBRE          shift and go to state 95


state 57

    (67) proteccion -> PUBLIC .

    VARIABLE        reduce using rule 67 (proteccion -> PUBLIC .)
    VAR             reduce using rule 67 (proteccion -> PUBLIC .)
    FUNCTION        reduce using rule 67 (proteccion -> PUBLIC .)
    PUBLIC          reduce using rule 67 (proteccion -> PUBLIC .)
    PRIVATE         reduce using rule 67 (proteccion -> PUBLIC .)
    PROTECTED       reduce using rule 67 (proteccion -> PUBLIC .)
    STATIC          reduce using rule 67 (proteccion -> PUBLIC .)


state 58

    (68) proteccion -> PRIVATE .

    VARIABLE        reduce using rule 68 (proteccion -> PRIVATE .)
    VAR             reduce using rule 68 (proteccion -> PRIVATE .)
    FUNCTION        reduce using rule 68 (proteccion -> PRIVATE .)
    PUBLIC          reduce using rule 68 (proteccion -> PRIVATE .)
    PRIVATE         reduce using rule 68 (proteccion -> PRIVATE .)
    PROTECTED       reduce using rule 68 (proteccion -> PRIVATE .)
    STATIC          reduce using rule 68 (proteccion -> PRIVATE .)


state 59

    (69) proteccion -> PROTECTED .

    VARIABLE        reduce using rule 69 (proteccion -> PROTECTED .)
    VAR             reduce using rule 69 (proteccion -> PROTECTED .)
    FUNCTION        reduce using rule 69 (proteccion -> PROTECTED .)
    PUBLIC          reduce using rule 69 (proteccion -> PROTECTED .)
    PRIVATE         reduce using rule 69 (proteccion -> PROTECTED .)
    PROTECTED       reduce using rule 69 (proteccion -> PROTECTED .)
    STATIC          reduce using rule 69 (proteccion -> PROTECTED .)


state 60

    (70) proteccion -> STATIC .

    VARIABLE        reduce using rule 70 (proteccion -> STATIC .)
    VAR             reduce using rule 70 (proteccion -> STATIC .)
    FUNCTION        reduce using rule 70 (proteccion -> STATIC .)
    PUBLIC          reduce using rule 70 (proteccion -> STATIC .)
    PRIVATE         reduce using rule 70 (proteccion -> STATIC .)
    PROTECTED       reduce using rule 70 (proteccion -> STATIC .)
    STATIC          reduce using rule 70 (proteccion -> STATIC .)


state 61

    (80) funcion_nparams -> FUNCTION . NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_opreturn -> FUNCTION . NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (85) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN stc_bloque_def
    (86) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (84) funcion_void -> FUNCTION . NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE

    NOMBRE          shift and go to state 96


state 62

    (40) condicion_if -> IF . LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    LPAREN          shift and go to state 97


state 63

    (21) imprimir -> ECHO valor . SEMI

    SEMI            shift and go to state 98


state 64

    (24) imprimir -> ECHO NOMBRE . LBRACKET ENTERO RBRACKET SEMI
    (28) valor -> NOMBRE .

    LBRACKET        shift and go to state 99
    SEMI            reduce using rule 28 (valor -> NOMBRE .)


state 65

    (29) numero -> ENTERO .

    SEMI            reduce using rule 29 (numero -> ENTERO .)
    SUMA            reduce using rule 29 (numero -> ENTERO .)
    RESTA           reduce using rule 29 (numero -> ENTERO .)
    MULTIPLICACION  reduce using rule 29 (numero -> ENTERO .)
    DIVISION        reduce using rule 29 (numero -> ENTERO .)
    MODULO          reduce using rule 29 (numero -> ENTERO .)
    RPAREN          reduce using rule 29 (numero -> ENTERO .)
    SMALLER         reduce using rule 29 (numero -> ENTERO .)
    GREATER         reduce using rule 29 (numero -> ENTERO .)
    IS_SMALLER_OR_EQUAL reduce using rule 29 (numero -> ENTERO .)
    IS_GREATER_OR_EQUAL reduce using rule 29 (numero -> ENTERO .)


state 66

    (25) valor -> numero .

    SEMI            reduce using rule 25 (valor -> numero .)
    SUMA            reduce using rule 25 (valor -> numero .)
    RESTA           reduce using rule 25 (valor -> numero .)
    MULTIPLICACION  reduce using rule 25 (valor -> numero .)
    DIVISION        reduce using rule 25 (valor -> numero .)
    MODULO          reduce using rule 25 (valor -> numero .)
    RPAREN          reduce using rule 25 (valor -> numero .)
    SMALLER         reduce using rule 25 (valor -> numero .)
    GREATER         reduce using rule 25 (valor -> numero .)
    IS_SMALLER_OR_EQUAL reduce using rule 25 (valor -> numero .)
    IS_GREATER_OR_EQUAL reduce using rule 25 (valor -> numero .)


state 67

    (26) valor -> VARIABLE .

    SEMI            reduce using rule 26 (valor -> VARIABLE .)
    SUMA            reduce using rule 26 (valor -> VARIABLE .)
    RESTA           reduce using rule 26 (valor -> VARIABLE .)
    MULTIPLICACION  reduce using rule 26 (valor -> VARIABLE .)
    DIVISION        reduce using rule 26 (valor -> VARIABLE .)
    MODULO          reduce using rule 26 (valor -> VARIABLE .)
    RPAREN          reduce using rule 26 (valor -> VARIABLE .)


state 68

    (27) valor -> STRING .

    SEMI            reduce using rule 27 (valor -> STRING .)
    SUMA            reduce using rule 27 (valor -> STRING .)
    RESTA           reduce using rule 27 (valor -> STRING .)
    MULTIPLICACION  reduce using rule 27 (valor -> STRING .)
    DIVISION        reduce using rule 27 (valor -> STRING .)
    MODULO          reduce using rule 27 (valor -> STRING .)
    RPAREN          reduce using rule 27 (valor -> STRING .)
    SMALLER         reduce using rule 27 (valor -> STRING .)
    GREATER         reduce using rule 27 (valor -> STRING .)
    IS_SMALLER_OR_EQUAL reduce using rule 27 (valor -> STRING .)
    IS_GREATER_OR_EQUAL reduce using rule 27 (valor -> STRING .)


state 69

    (30) numero -> DECIMAL .

    SEMI            reduce using rule 30 (numero -> DECIMAL .)
    SUMA            reduce using rule 30 (numero -> DECIMAL .)
    RESTA           reduce using rule 30 (numero -> DECIMAL .)
    MULTIPLICACION  reduce using rule 30 (numero -> DECIMAL .)
    DIVISION        reduce using rule 30 (numero -> DECIMAL .)
    MODULO          reduce using rule 30 (numero -> DECIMAL .)
    RPAREN          reduce using rule 30 (numero -> DECIMAL .)
    SMALLER         reduce using rule 30 (numero -> DECIMAL .)
    GREATER         reduce using rule 30 (numero -> DECIMAL .)
    IS_SMALLER_OR_EQUAL reduce using rule 30 (numero -> DECIMAL .)
    IS_GREATER_OR_EQUAL reduce using rule 30 (numero -> DECIMAL .)


state 70

    (22) imprimir -> PRINT valor . SEMI

    SEMI            shift and go to state 100


state 71

    (23) imprimir -> PRINT LPAREN . valor RPAREN SEMI
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 67
    STRING          shift and go to state 68
    NOMBRE          shift and go to state 72
    ENTERO          shift and go to state 65
    DECIMAL         shift and go to state 69

    valor                          shift and go to state 101
    numero                         shift and go to state 66

state 72

    (28) valor -> NOMBRE .

    SEMI            reduce using rule 28 (valor -> NOMBRE .)
    SUMA            reduce using rule 28 (valor -> NOMBRE .)
    RESTA           reduce using rule 28 (valor -> NOMBRE .)
    MULTIPLICACION  reduce using rule 28 (valor -> NOMBRE .)
    DIVISION        reduce using rule 28 (valor -> NOMBRE .)
    MODULO          reduce using rule 28 (valor -> NOMBRE .)
    RPAREN          reduce using rule 28 (valor -> NOMBRE .)
    SMALLER         reduce using rule 28 (valor -> NOMBRE .)
    GREATER         reduce using rule 28 (valor -> NOMBRE .)
    IS_SMALLER_OR_EQUAL reduce using rule 28 (valor -> NOMBRE .)
    IS_GREATER_OR_EQUAL reduce using rule 28 (valor -> NOMBRE .)


state 73

    (57) operaciones_mat_par -> LPAREN valor . operadores valor RPAREN
    (58) operaciones_mat_par -> LPAREN valor . operadores operaciones_mat_par RPAREN
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO

    SUMA            shift and go to state 32
    RESTA           shift and go to state 33
    MULTIPLICACION  shift and go to state 34
    DIVISION        shift and go to state 35
    MODULO          shift and go to state 36

    operadores                     shift and go to state 102

state 74

    (59) asignacion -> VARIABLE EQUALS . valor SEMI
    (62) asignacion_array -> VARIABLE EQUALS . array_def SEMI
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (109) array_def -> . ARRAY LPAREN RPAREN
    (110) array_def -> . ARRAY LPAREN array_elmnt RPAREN
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 67
    STRING          shift and go to state 68
    NOMBRE          shift and go to state 72
    ARRAY           shift and go to state 105
    ENTERO          shift and go to state 65
    DECIMAL         shift and go to state 69

    valor                          shift and go to state 103
    array_def                      shift and go to state 104
    numero                         shift and go to state 66

state 75

    (60) asignacion -> VAR asignacion .

    $end            reduce using rule 60 (asignacion -> VAR asignacion .)
    RBRACE          reduce using rule 60 (asignacion -> VAR asignacion .)
    ECHO            reduce using rule 60 (asignacion -> VAR asignacion .)
    PRINT           reduce using rule 60 (asignacion -> VAR asignacion .)
    VARIABLE        reduce using rule 60 (asignacion -> VAR asignacion .)
    VAR             reduce using rule 60 (asignacion -> VAR asignacion .)
    DEFINE          reduce using rule 60 (asignacion -> VAR asignacion .)
    READLINE        reduce using rule 60 (asignacion -> VAR asignacion .)
    SUMA            reduce using rule 60 (asignacion -> VAR asignacion .)
    RESTA           reduce using rule 60 (asignacion -> VAR asignacion .)
    MULTIPLICACION  reduce using rule 60 (asignacion -> VAR asignacion .)
    DIVISION        reduce using rule 60 (asignacion -> VAR asignacion .)
    MODULO          reduce using rule 60 (asignacion -> VAR asignacion .)
    SMALLER         reduce using rule 60 (asignacion -> VAR asignacion .)
    GREATER         reduce using rule 60 (asignacion -> VAR asignacion .)
    IS_SMALLER_OR_EQUAL reduce using rule 60 (asignacion -> VAR asignacion .)
    IS_GREATER_OR_EQUAL reduce using rule 60 (asignacion -> VAR asignacion .)
    AND             reduce using rule 60 (asignacion -> VAR asignacion .)
    OR              reduce using rule 60 (asignacion -> VAR asignacion .)
    XOR             reduce using rule 60 (asignacion -> VAR asignacion .)
    IS_EQUAL        reduce using rule 60 (asignacion -> VAR asignacion .)
    IS_NOT_EQUAL    reduce using rule 60 (asignacion -> VAR asignacion .)
    IS_IDENTICAL    reduce using rule 60 (asignacion -> VAR asignacion .)
    IS_NOT_IDENTICAL reduce using rule 60 (asignacion -> VAR asignacion .)
    BOOLEAN_NOT     reduce using rule 60 (asignacion -> VAR asignacion .)
    WHILE           reduce using rule 60 (asignacion -> VAR asignacion .)
    DO              reduce using rule 60 (asignacion -> VAR asignacion .)
    FOR             reduce using rule 60 (asignacion -> VAR asignacion .)
    FOREACH         reduce using rule 60 (asignacion -> VAR asignacion .)
    TRY             reduce using rule 60 (asignacion -> VAR asignacion .)
    LPAREN          reduce using rule 60 (asignacion -> VAR asignacion .)
    SWITCH          reduce using rule 60 (asignacion -> VAR asignacion .)
    GOTO            reduce using rule 60 (asignacion -> VAR asignacion .)
    PUBLIC          reduce using rule 60 (asignacion -> VAR asignacion .)
    PRIVATE         reduce using rule 60 (asignacion -> VAR asignacion .)
    PROTECTED       reduce using rule 60 (asignacion -> VAR asignacion .)
    STATIC          reduce using rule 60 (asignacion -> VAR asignacion .)
    FUNCTION        reduce using rule 60 (asignacion -> VAR asignacion .)
    IF              reduce using rule 60 (asignacion -> VAR asignacion .)
    BREAK           reduce using rule 60 (asignacion -> VAR asignacion .)
    SEMI            reduce using rule 60 (asignacion -> VAR asignacion .)
    RPAREN          reduce using rule 60 (asignacion -> VAR asignacion .)
    COMMA           reduce using rule 60 (asignacion -> VAR asignacion .)


state 76

    (59) asignacion -> VARIABLE . EQUALS valor SEMI

    EQUALS          shift and go to state 106


state 77

    (61) asignacion -> proteccion . asignacion
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion -> . VAR asignacion
    (61) asignacion -> . proteccion asignacion
    (67) proteccion -> . PUBLIC
    (68) proteccion -> . PRIVATE
    (69) proteccion -> . PROTECTED
    (70) proteccion -> . STATIC

    VARIABLE        shift and go to state 76
    VAR             shift and go to state 24
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60

    proteccion                     shift and go to state 77
    asignacion                     shift and go to state 78

state 78

    (61) asignacion -> proteccion asignacion .

    $end            reduce using rule 61 (asignacion -> proteccion asignacion .)
    RBRACE          reduce using rule 61 (asignacion -> proteccion asignacion .)
    ECHO            reduce using rule 61 (asignacion -> proteccion asignacion .)
    PRINT           reduce using rule 61 (asignacion -> proteccion asignacion .)
    VARIABLE        reduce using rule 61 (asignacion -> proteccion asignacion .)
    VAR             reduce using rule 61 (asignacion -> proteccion asignacion .)
    DEFINE          reduce using rule 61 (asignacion -> proteccion asignacion .)
    READLINE        reduce using rule 61 (asignacion -> proteccion asignacion .)
    SUMA            reduce using rule 61 (asignacion -> proteccion asignacion .)
    RESTA           reduce using rule 61 (asignacion -> proteccion asignacion .)
    MULTIPLICACION  reduce using rule 61 (asignacion -> proteccion asignacion .)
    DIVISION        reduce using rule 61 (asignacion -> proteccion asignacion .)
    MODULO          reduce using rule 61 (asignacion -> proteccion asignacion .)
    SMALLER         reduce using rule 61 (asignacion -> proteccion asignacion .)
    GREATER         reduce using rule 61 (asignacion -> proteccion asignacion .)
    IS_SMALLER_OR_EQUAL reduce using rule 61 (asignacion -> proteccion asignacion .)
    IS_GREATER_OR_EQUAL reduce using rule 61 (asignacion -> proteccion asignacion .)
    AND             reduce using rule 61 (asignacion -> proteccion asignacion .)
    OR              reduce using rule 61 (asignacion -> proteccion asignacion .)
    XOR             reduce using rule 61 (asignacion -> proteccion asignacion .)
    IS_EQUAL        reduce using rule 61 (asignacion -> proteccion asignacion .)
    IS_NOT_EQUAL    reduce using rule 61 (asignacion -> proteccion asignacion .)
    IS_IDENTICAL    reduce using rule 61 (asignacion -> proteccion asignacion .)
    IS_NOT_IDENTICAL reduce using rule 61 (asignacion -> proteccion asignacion .)
    BOOLEAN_NOT     reduce using rule 61 (asignacion -> proteccion asignacion .)
    WHILE           reduce using rule 61 (asignacion -> proteccion asignacion .)
    DO              reduce using rule 61 (asignacion -> proteccion asignacion .)
    FOR             reduce using rule 61 (asignacion -> proteccion asignacion .)
    FOREACH         reduce using rule 61 (asignacion -> proteccion asignacion .)
    TRY             reduce using rule 61 (asignacion -> proteccion asignacion .)
    LPAREN          reduce using rule 61 (asignacion -> proteccion asignacion .)
    SWITCH          reduce using rule 61 (asignacion -> proteccion asignacion .)
    GOTO            reduce using rule 61 (asignacion -> proteccion asignacion .)
    PUBLIC          reduce using rule 61 (asignacion -> proteccion asignacion .)
    PRIVATE         reduce using rule 61 (asignacion -> proteccion asignacion .)
    PROTECTED       reduce using rule 61 (asignacion -> proteccion asignacion .)
    STATIC          reduce using rule 61 (asignacion -> proteccion asignacion .)
    FUNCTION        reduce using rule 61 (asignacion -> proteccion asignacion .)
    IF              reduce using rule 61 (asignacion -> proteccion asignacion .)
    BREAK           reduce using rule 61 (asignacion -> proteccion asignacion .)
    SEMI            reduce using rule 61 (asignacion -> proteccion asignacion .)
    RPAREN          reduce using rule 61 (asignacion -> proteccion asignacion .)
    COMMA           reduce using rule 61 (asignacion -> proteccion asignacion .)


state 79

    (72) funciones -> proteccion funcion_nparams .

    $end            reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    RBRACE          reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    ECHO            reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    PRINT           reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    VARIABLE        reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    VAR             reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    DEFINE          reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    READLINE        reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    SUMA            reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    RESTA           reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    MULTIPLICACION  reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    DIVISION        reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    MODULO          reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    SMALLER         reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    GREATER         reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    IS_SMALLER_OR_EQUAL reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    IS_GREATER_OR_EQUAL reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    AND             reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    OR              reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    XOR             reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    IS_EQUAL        reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    IS_NOT_EQUAL    reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    IS_IDENTICAL    reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    IS_NOT_IDENTICAL reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    BOOLEAN_NOT     reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    WHILE           reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    DO              reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    FOR             reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    FOREACH         reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    TRY             reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    LPAREN          reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    SWITCH          reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    GOTO            reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    PUBLIC          reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    PRIVATE         reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    PROTECTED       reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    STATIC          reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    FUNCTION        reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    IF              reduce using rule 72 (funciones -> proteccion funcion_nparams .)
    BREAK           reduce using rule 72 (funciones -> proteccion funcion_nparams .)


state 80

    (74) funciones -> proteccion funcion_opreturn .

    $end            reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    RBRACE          reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    ECHO            reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    PRINT           reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    VARIABLE        reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    VAR             reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    DEFINE          reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    READLINE        reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    SUMA            reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    RESTA           reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    MULTIPLICACION  reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    DIVISION        reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    MODULO          reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    SMALLER         reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    GREATER         reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    IS_SMALLER_OR_EQUAL reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    IS_GREATER_OR_EQUAL reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    AND             reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    OR              reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    XOR             reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    IS_EQUAL        reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    IS_NOT_EQUAL    reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    IS_IDENTICAL    reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    IS_NOT_IDENTICAL reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    BOOLEAN_NOT     reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    WHILE           reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    DO              reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    FOR             reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    FOREACH         reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    TRY             reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    LPAREN          reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    SWITCH          reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    GOTO            reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    PUBLIC          reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    PRIVATE         reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    PROTECTED       reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    STATIC          reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    FUNCTION        reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    IF              reduce using rule 74 (funciones -> proteccion funcion_opreturn .)
    BREAK           reduce using rule 74 (funciones -> proteccion funcion_opreturn .)


state 81

    (76) funciones -> proteccion funcion_blank .

    $end            reduce using rule 76 (funciones -> proteccion funcion_blank .)
    RBRACE          reduce using rule 76 (funciones -> proteccion funcion_blank .)
    ECHO            reduce using rule 76 (funciones -> proteccion funcion_blank .)
    PRINT           reduce using rule 76 (funciones -> proteccion funcion_blank .)
    VARIABLE        reduce using rule 76 (funciones -> proteccion funcion_blank .)
    VAR             reduce using rule 76 (funciones -> proteccion funcion_blank .)
    DEFINE          reduce using rule 76 (funciones -> proteccion funcion_blank .)
    READLINE        reduce using rule 76 (funciones -> proteccion funcion_blank .)
    SUMA            reduce using rule 76 (funciones -> proteccion funcion_blank .)
    RESTA           reduce using rule 76 (funciones -> proteccion funcion_blank .)
    MULTIPLICACION  reduce using rule 76 (funciones -> proteccion funcion_blank .)
    DIVISION        reduce using rule 76 (funciones -> proteccion funcion_blank .)
    MODULO          reduce using rule 76 (funciones -> proteccion funcion_blank .)
    SMALLER         reduce using rule 76 (funciones -> proteccion funcion_blank .)
    GREATER         reduce using rule 76 (funciones -> proteccion funcion_blank .)
    IS_SMALLER_OR_EQUAL reduce using rule 76 (funciones -> proteccion funcion_blank .)
    IS_GREATER_OR_EQUAL reduce using rule 76 (funciones -> proteccion funcion_blank .)
    AND             reduce using rule 76 (funciones -> proteccion funcion_blank .)
    OR              reduce using rule 76 (funciones -> proteccion funcion_blank .)
    XOR             reduce using rule 76 (funciones -> proteccion funcion_blank .)
    IS_EQUAL        reduce using rule 76 (funciones -> proteccion funcion_blank .)
    IS_NOT_EQUAL    reduce using rule 76 (funciones -> proteccion funcion_blank .)
    IS_IDENTICAL    reduce using rule 76 (funciones -> proteccion funcion_blank .)
    IS_NOT_IDENTICAL reduce using rule 76 (funciones -> proteccion funcion_blank .)
    BOOLEAN_NOT     reduce using rule 76 (funciones -> proteccion funcion_blank .)
    WHILE           reduce using rule 76 (funciones -> proteccion funcion_blank .)
    DO              reduce using rule 76 (funciones -> proteccion funcion_blank .)
    FOR             reduce using rule 76 (funciones -> proteccion funcion_blank .)
    FOREACH         reduce using rule 76 (funciones -> proteccion funcion_blank .)
    TRY             reduce using rule 76 (funciones -> proteccion funcion_blank .)
    LPAREN          reduce using rule 76 (funciones -> proteccion funcion_blank .)
    SWITCH          reduce using rule 76 (funciones -> proteccion funcion_blank .)
    GOTO            reduce using rule 76 (funciones -> proteccion funcion_blank .)
    PUBLIC          reduce using rule 76 (funciones -> proteccion funcion_blank .)
    PRIVATE         reduce using rule 76 (funciones -> proteccion funcion_blank .)
    PROTECTED       reduce using rule 76 (funciones -> proteccion funcion_blank .)
    STATIC          reduce using rule 76 (funciones -> proteccion funcion_blank .)
    FUNCTION        reduce using rule 76 (funciones -> proteccion funcion_blank .)
    IF              reduce using rule 76 (funciones -> proteccion funcion_blank .)
    BREAK           reduce using rule 76 (funciones -> proteccion funcion_blank .)


state 82

    (80) funcion_nparams -> FUNCTION . NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_opreturn -> FUNCTION . NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (85) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN stc_bloque_def
    (86) funcion_blank -> FUNCTION . NOMBRE LPAREN RPAREN LBRACE empty RBRACE

    NOMBRE          shift and go to state 107


state 83

    (63) constante -> DEFINE LPAREN . STRING COMMA valor RPAREN SEMI
    (64) constante -> DEFINE LPAREN . NOMBRE COMMA ARRAY RPAREN SEMI

    STRING          shift and go to state 108
    NOMBRE          shift and go to state 109


state 84

    (65) lectura -> READLINE LPAREN . STRING RPAREN SEMI
    (66) lectura -> READLINE LPAREN . RPAREN SEMI

    STRING          shift and go to state 110
    RPAREN          shift and go to state 111


state 85

    (89) bwhile -> WHILE LPAREN . condicion RPAREN LBRACE stc_bloque RBRACE
    (90) bwhile -> WHILE LPAREN . condicion RPAREN COLON stc_bloque
    (87) condicion -> . VARIABLE operador_logico VARIABLE
    (88) condicion -> . valor operador_logico valor
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 113
    STRING          shift and go to state 68
    NOMBRE          shift and go to state 72
    ENTERO          shift and go to state 65
    DECIMAL         shift and go to state 69

    condicion                      shift and go to state 112
    valor                          shift and go to state 114
    numero                         shift and go to state 66

state 86

    (91) bdo -> DO LBRACE . cuerpo RBRACE bwhile
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat_par
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (21) imprimir -> . ECHO valor SEMI
    (22) imprimir -> . PRINT valor SEMI
    (23) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (24) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion -> . VAR asignacion
    (61) asignacion -> . proteccion asignacion
    (62) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (71) funciones -> . funcion_nparams
    (72) funciones -> . proteccion funcion_nparams
    (73) funciones -> . funcion_opreturn
    (74) funciones -> . proteccion funcion_opreturn
    (75) funciones -> . funcion_blank
    (76) funciones -> . proteccion funcion_blank
    (77) funciones -> . funcion_void
    (63) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (64) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (65) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (66) lectura -> . READLINE LPAREN RPAREN SEMI
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL
    (47) condicion_booleana -> . AND
    (48) condicion_booleana -> . OR
    (49) condicion_booleana -> . XOR
    (50) condicion_booleana -> . IS_EQUAL
    (51) condicion_booleana -> . IS_NOT_EQUAL
    (52) condicion_booleana -> . IS_IDENTICAL
    (53) condicion_booleana -> . IS_NOT_IDENTICAL
    (54) condicion_booleana -> . BOOLEAN_NOT
    (89) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (90) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (91) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (96) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (108) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (113) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (43) condicion_ifelse -> . condicion_if
    (44) condicion_ifelse -> . condicion_if condicion_else
    (45) condicion_ifelse -> . condicion_if condicion_elseif
    (46) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (92) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (117) bgoto -> . GOTO NOMBRE SEMI
    (67) proteccion -> . PUBLIC
    (68) proteccion -> . PRIVATE
    (69) proteccion -> . PROTECTED
    (70) proteccion -> . STATIC
    (80) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (85) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (86) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (84) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (40) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    DEFINE          shift and go to state 30
    READLINE        shift and go to state 31
    SUMA            shift and go to state 32
    RESTA           shift and go to state 33
    MULTIPLICACION  shift and go to state 34
    DIVISION        shift and go to state 35
    MODULO          shift and go to state 36
    SMALLER         shift and go to state 37
    GREATER         shift and go to state 38
    IS_SMALLER_OR_EQUAL shift and go to state 39
    IS_GREATER_OR_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    IS_EQUAL        shift and go to state 44
    IS_NOT_EQUAL    shift and go to state 45
    IS_IDENTICAL    shift and go to state 46
    IS_NOT_IDENTICAL shift and go to state 47
    BOOLEAN_NOT     shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    FOREACH         shift and go to state 52
    TRY             shift and go to state 53
    LPAREN          shift and go to state 22
    SWITCH          shift and go to state 55
    GOTO            shift and go to state 56
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60
    FUNCTION        shift and go to state 61
    IF              shift and go to state 62

    cuerpo                         shift and go to state 115
    bwhile                         shift and go to state 11
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat_par            shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    proteccion                     shift and go to state 25
    funcion_nparams                shift and go to state 26
    funcion_opreturn               shift and go to state 27
    funcion_blank                  shift and go to state 28
    funcion_void                   shift and go to state 29
    condicion_if                   shift and go to state 54

state 87

    (96) bfor -> FOR LPAREN . asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion -> . VAR asignacion
    (61) asignacion -> . proteccion asignacion
    (67) proteccion -> . PUBLIC
    (68) proteccion -> . PRIVATE
    (69) proteccion -> . PROTECTED
    (70) proteccion -> . STATIC

    VARIABLE        shift and go to state 76
    VAR             shift and go to state 24
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60

    asignacion                     shift and go to state 116
    proteccion                     shift and go to state 77

state 88

    (108) bforeach -> FOREACH LPAREN . VARIABLE AS VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 117


state 89

    (113) btry -> TRY LBRACE . stc_bloque_def RBRACE catches
    (101) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 118

    stc_bloque_def                 shift and go to state 119

state 90

    (44) condicion_ifelse -> condicion_if condicion_else .

    $end            reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    RBRACE          reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    ECHO            reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    PRINT           reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    VARIABLE        reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    VAR             reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    DEFINE          reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    READLINE        reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    SUMA            reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    RESTA           reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    MULTIPLICACION  reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    DIVISION        reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    MODULO          reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    SMALLER         reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    GREATER         reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    IS_SMALLER_OR_EQUAL reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    IS_GREATER_OR_EQUAL reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    AND             reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    OR              reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    XOR             reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    IS_EQUAL        reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    IS_NOT_EQUAL    reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    IS_IDENTICAL    reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    IS_NOT_IDENTICAL reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    BOOLEAN_NOT     reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    WHILE           reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    DO              reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    FOR             reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    FOREACH         reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    TRY             reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    LPAREN          reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    SWITCH          reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    GOTO            reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    PUBLIC          reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    PRIVATE         reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    PROTECTED       reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    STATIC          reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    FUNCTION        reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    IF              reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)
    BREAK           reduce using rule 44 (condicion_ifelse -> condicion_if condicion_else .)


state 91

    (45) condicion_ifelse -> condicion_if condicion_elseif .
    (46) condicion_ifelse -> condicion_if condicion_elseif . condicion_else
    (42) condicion_else -> . ELSE LBRACE cuerpo RBRACE

    $end            reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    RBRACE          reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    ECHO            reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    PRINT           reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    VARIABLE        reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    VAR             reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    DEFINE          reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    READLINE        reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    SUMA            reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    RESTA           reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    MULTIPLICACION  reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    DIVISION        reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    MODULO          reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    SMALLER         reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    GREATER         reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    IS_SMALLER_OR_EQUAL reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    IS_GREATER_OR_EQUAL reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    AND             reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    OR              reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    XOR             reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    IS_EQUAL        reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    IS_NOT_EQUAL    reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    IS_IDENTICAL    reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    IS_NOT_IDENTICAL reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    BOOLEAN_NOT     reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    WHILE           reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    DO              reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    FOR             reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    FOREACH         reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    TRY             reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    LPAREN          reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    SWITCH          reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    GOTO            reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    PUBLIC          reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    PRIVATE         reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    PROTECTED       reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    STATIC          reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    FUNCTION        reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    IF              reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    BREAK           reduce using rule 45 (condicion_ifelse -> condicion_if condicion_elseif .)
    ELSE            shift and go to state 92

    condicion_else                 shift and go to state 120

state 92

    (42) condicion_else -> ELSE . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 121


state 93

    (41) condicion_elseif -> ELSEIF . LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    LPAREN          shift and go to state 122


state 94

    (92) bswitch -> SWITCH LPAREN . VARIABLE RPAREN LBRACE innerSwitch RBRACE

    VARIABLE        shift and go to state 123


state 95

    (117) bgoto -> GOTO NOMBRE . SEMI

    SEMI            shift and go to state 124


state 96

    (80) funcion_nparams -> FUNCTION NOMBRE . LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_opreturn -> FUNCTION NOMBRE . LPAREN params_list RPAREN stc_bloque_def
    (85) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN stc_bloque_def
    (86) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN LBRACE empty RBRACE
    (84) funcion_void -> FUNCTION NOMBRE . LPAREN RPAREN COLON VOID LBRACE empty RBRACE

    LPAREN          shift and go to state 125


state 97

    (40) condicion_if -> IF LPAREN . condicion RPAREN LBRACE cuerpo RBRACE
    (87) condicion -> . VARIABLE operador_logico VARIABLE
    (88) condicion -> . valor operador_logico valor
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 113
    STRING          shift and go to state 68
    NOMBRE          shift and go to state 72
    ENTERO          shift and go to state 65
    DECIMAL         shift and go to state 69

    condicion                      shift and go to state 126
    valor                          shift and go to state 114
    numero                         shift and go to state 66

state 98

    (21) imprimir -> ECHO valor SEMI .

    $end            reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    RBRACE          reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    ECHO            reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    PRINT           reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    VARIABLE        reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    VAR             reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    DEFINE          reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    READLINE        reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    SUMA            reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    RESTA           reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    MULTIPLICACION  reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    DIVISION        reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    MODULO          reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    SMALLER         reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    GREATER         reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    AND             reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    OR              reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    XOR             reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    IS_EQUAL        reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    IS_NOT_EQUAL    reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    IS_IDENTICAL    reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    IS_NOT_IDENTICAL reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    BOOLEAN_NOT     reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    WHILE           reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    DO              reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    FOR             reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    FOREACH         reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    TRY             reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    LPAREN          reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    SWITCH          reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    GOTO            reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    PUBLIC          reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    PRIVATE         reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    PROTECTED       reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    STATIC          reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    FUNCTION        reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    IF              reduce using rule 21 (imprimir -> ECHO valor SEMI .)
    BREAK           reduce using rule 21 (imprimir -> ECHO valor SEMI .)


state 99

    (24) imprimir -> ECHO NOMBRE LBRACKET . ENTERO RBRACKET SEMI

    ENTERO          shift and go to state 127


state 100

    (22) imprimir -> PRINT valor SEMI .

    $end            reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    RBRACE          reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    ECHO            reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    PRINT           reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    VARIABLE        reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    VAR             reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    DEFINE          reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    READLINE        reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    SUMA            reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    RESTA           reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    MULTIPLICACION  reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    DIVISION        reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    MODULO          reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    SMALLER         reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    GREATER         reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    AND             reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    OR              reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    XOR             reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    IS_EQUAL        reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    IS_NOT_EQUAL    reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    IS_IDENTICAL    reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    IS_NOT_IDENTICAL reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    BOOLEAN_NOT     reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    WHILE           reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    DO              reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    FOR             reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    FOREACH         reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    TRY             reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    LPAREN          reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    SWITCH          reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    GOTO            reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    PUBLIC          reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    PRIVATE         reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    PROTECTED       reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    STATIC          reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    FUNCTION        reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    IF              reduce using rule 22 (imprimir -> PRINT valor SEMI .)
    BREAK           reduce using rule 22 (imprimir -> PRINT valor SEMI .)


state 101

    (23) imprimir -> PRINT LPAREN valor . RPAREN SEMI

    RPAREN          shift and go to state 128


state 102

    (57) operaciones_mat_par -> LPAREN valor operadores . valor RPAREN
    (58) operaciones_mat_par -> LPAREN valor operadores . operaciones_mat_par RPAREN
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 67
    STRING          shift and go to state 68
    NOMBRE          shift and go to state 72
    LPAREN          shift and go to state 22
    ENTERO          shift and go to state 65
    DECIMAL         shift and go to state 69

    valor                          shift and go to state 129
    operaciones_mat_par            shift and go to state 130
    numero                         shift and go to state 66

state 103

    (59) asignacion -> VARIABLE EQUALS valor . SEMI

    SEMI            shift and go to state 131


state 104

    (62) asignacion_array -> VARIABLE EQUALS array_def . SEMI

    SEMI            shift and go to state 132


state 105

    (109) array_def -> ARRAY . LPAREN RPAREN
    (110) array_def -> ARRAY . LPAREN array_elmnt RPAREN

    LPAREN          shift and go to state 133


state 106

    (59) asignacion -> VARIABLE EQUALS . valor SEMI
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 67
    STRING          shift and go to state 68
    NOMBRE          shift and go to state 72
    ENTERO          shift and go to state 65
    DECIMAL         shift and go to state 69

    valor                          shift and go to state 103
    numero                         shift and go to state 66

state 107

    (80) funcion_nparams -> FUNCTION NOMBRE . LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_opreturn -> FUNCTION NOMBRE . LPAREN params_list RPAREN stc_bloque_def
    (85) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN stc_bloque_def
    (86) funcion_blank -> FUNCTION NOMBRE . LPAREN RPAREN LBRACE empty RBRACE

    LPAREN          shift and go to state 134


state 108

    (63) constante -> DEFINE LPAREN STRING . COMMA valor RPAREN SEMI

    COMMA           shift and go to state 135


state 109

    (64) constante -> DEFINE LPAREN NOMBRE . COMMA ARRAY RPAREN SEMI

    COMMA           shift and go to state 136


state 110

    (65) lectura -> READLINE LPAREN STRING . RPAREN SEMI

    RPAREN          shift and go to state 137


state 111

    (66) lectura -> READLINE LPAREN RPAREN . SEMI

    SEMI            shift and go to state 138


state 112

    (89) bwhile -> WHILE LPAREN condicion . RPAREN LBRACE stc_bloque RBRACE
    (90) bwhile -> WHILE LPAREN condicion . RPAREN COLON stc_bloque

    RPAREN          shift and go to state 139


state 113

    (87) condicion -> VARIABLE . operador_logico VARIABLE
    (26) valor -> VARIABLE .
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL

  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for IS_SMALLER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for IS_GREATER_OR_EQUAL resolved as shift
    SMALLER         shift and go to state 37
    GREATER         shift and go to state 38
    IS_SMALLER_OR_EQUAL shift and go to state 39
    IS_GREATER_OR_EQUAL shift and go to state 40

  ! SMALLER         [ reduce using rule 26 (valor -> VARIABLE .) ]
  ! GREATER         [ reduce using rule 26 (valor -> VARIABLE .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 26 (valor -> VARIABLE .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 26 (valor -> VARIABLE .) ]

    operador_logico                shift and go to state 140

state 114

    (88) condicion -> valor . operador_logico valor
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL

    SMALLER         shift and go to state 37
    GREATER         shift and go to state 38
    IS_SMALLER_OR_EQUAL shift and go to state 39
    IS_GREATER_OR_EQUAL shift and go to state 40

    operador_logico                shift and go to state 141

state 115

    (91) bdo -> DO LBRACE cuerpo . RBRACE bwhile

    RBRACE          shift and go to state 142


state 116

    (96) bfor -> FOR LPAREN asignacion . SEMI condicion SEMI for_incr RPAREN stc_bloque_def

    SEMI            shift and go to state 143


state 117

    (108) bforeach -> FOREACH LPAREN VARIABLE . AS VARIABLE RPAREN stc_bloque_def

    AS              shift and go to state 144


state 118

    (101) stc_bloque_def -> LBRACE . stc_bloque RBRACE
    (97) stc_bloque -> . stc_bloque cuerpo
    (98) stc_bloque -> . empty
    (99) stc_bloque -> . RETURN
    (100) stc_bloque -> . RETURN NULL
    (116) empty -> .

    RETURN          shift and go to state 147
    RBRACE          reduce using rule 116 (empty -> .)
    ECHO            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    VARIABLE        reduce using rule 116 (empty -> .)
    VAR             reduce using rule 116 (empty -> .)
    DEFINE          reduce using rule 116 (empty -> .)
    READLINE        reduce using rule 116 (empty -> .)
    SUMA            reduce using rule 116 (empty -> .)
    RESTA           reduce using rule 116 (empty -> .)
    MULTIPLICACION  reduce using rule 116 (empty -> .)
    DIVISION        reduce using rule 116 (empty -> .)
    MODULO          reduce using rule 116 (empty -> .)
    SMALLER         reduce using rule 116 (empty -> .)
    GREATER         reduce using rule 116 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 116 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    XOR             reduce using rule 116 (empty -> .)
    IS_EQUAL        reduce using rule 116 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 116 (empty -> .)
    IS_IDENTICAL    reduce using rule 116 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 116 (empty -> .)
    BOOLEAN_NOT     reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    DO              reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    FOREACH         reduce using rule 116 (empty -> .)
    TRY             reduce using rule 116 (empty -> .)
    LPAREN          reduce using rule 116 (empty -> .)
    SWITCH          reduce using rule 116 (empty -> .)
    GOTO            reduce using rule 116 (empty -> .)
    PUBLIC          reduce using rule 116 (empty -> .)
    PRIVATE         reduce using rule 116 (empty -> .)
    PROTECTED       reduce using rule 116 (empty -> .)
    STATIC          reduce using rule 116 (empty -> .)
    FUNCTION        reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)

    stc_bloque                     shift and go to state 145
    empty                          shift and go to state 146

state 119

    (113) btry -> TRY LBRACE stc_bloque_def . RBRACE catches

    RBRACE          shift and go to state 148


state 120

    (46) condicion_ifelse -> condicion_if condicion_elseif condicion_else .

    $end            reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    RBRACE          reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    ECHO            reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    PRINT           reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    VARIABLE        reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    VAR             reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    DEFINE          reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    READLINE        reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    SUMA            reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    RESTA           reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    MULTIPLICACION  reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    DIVISION        reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    MODULO          reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    SMALLER         reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    GREATER         reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IS_SMALLER_OR_EQUAL reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IS_GREATER_OR_EQUAL reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    AND             reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    OR              reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    XOR             reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IS_EQUAL        reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IS_NOT_EQUAL    reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IS_IDENTICAL    reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IS_NOT_IDENTICAL reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    BOOLEAN_NOT     reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    WHILE           reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    DO              reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    FOR             reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    FOREACH         reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    TRY             reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    LPAREN          reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    SWITCH          reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    GOTO            reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    PUBLIC          reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    PRIVATE         reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    PROTECTED       reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    STATIC          reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    FUNCTION        reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    IF              reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)
    BREAK           reduce using rule 46 (condicion_ifelse -> condicion_if condicion_elseif condicion_else .)


state 121

    (42) condicion_else -> ELSE LBRACE . cuerpo RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat_par
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (21) imprimir -> . ECHO valor SEMI
    (22) imprimir -> . PRINT valor SEMI
    (23) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (24) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion -> . VAR asignacion
    (61) asignacion -> . proteccion asignacion
    (62) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (71) funciones -> . funcion_nparams
    (72) funciones -> . proteccion funcion_nparams
    (73) funciones -> . funcion_opreturn
    (74) funciones -> . proteccion funcion_opreturn
    (75) funciones -> . funcion_blank
    (76) funciones -> . proteccion funcion_blank
    (77) funciones -> . funcion_void
    (63) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (64) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (65) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (66) lectura -> . READLINE LPAREN RPAREN SEMI
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL
    (47) condicion_booleana -> . AND
    (48) condicion_booleana -> . OR
    (49) condicion_booleana -> . XOR
    (50) condicion_booleana -> . IS_EQUAL
    (51) condicion_booleana -> . IS_NOT_EQUAL
    (52) condicion_booleana -> . IS_IDENTICAL
    (53) condicion_booleana -> . IS_NOT_IDENTICAL
    (54) condicion_booleana -> . BOOLEAN_NOT
    (89) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (90) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (91) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (96) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (108) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (113) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (43) condicion_ifelse -> . condicion_if
    (44) condicion_ifelse -> . condicion_if condicion_else
    (45) condicion_ifelse -> . condicion_if condicion_elseif
    (46) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (92) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (117) bgoto -> . GOTO NOMBRE SEMI
    (67) proteccion -> . PUBLIC
    (68) proteccion -> . PRIVATE
    (69) proteccion -> . PROTECTED
    (70) proteccion -> . STATIC
    (80) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (85) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (86) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (84) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (40) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    DEFINE          shift and go to state 30
    READLINE        shift and go to state 31
    SUMA            shift and go to state 32
    RESTA           shift and go to state 33
    MULTIPLICACION  shift and go to state 34
    DIVISION        shift and go to state 35
    MODULO          shift and go to state 36
    SMALLER         shift and go to state 37
    GREATER         shift and go to state 38
    IS_SMALLER_OR_EQUAL shift and go to state 39
    IS_GREATER_OR_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    IS_EQUAL        shift and go to state 44
    IS_NOT_EQUAL    shift and go to state 45
    IS_IDENTICAL    shift and go to state 46
    IS_NOT_IDENTICAL shift and go to state 47
    BOOLEAN_NOT     shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    FOREACH         shift and go to state 52
    TRY             shift and go to state 53
    LPAREN          shift and go to state 22
    SWITCH          shift and go to state 55
    GOTO            shift and go to state 56
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60
    FUNCTION        shift and go to state 61
    IF              shift and go to state 62

    cuerpo                         shift and go to state 149
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat_par            shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    proteccion                     shift and go to state 25
    funcion_nparams                shift and go to state 26
    funcion_opreturn               shift and go to state 27
    funcion_blank                  shift and go to state 28
    funcion_void                   shift and go to state 29
    condicion_if                   shift and go to state 54

state 122

    (41) condicion_elseif -> ELSEIF LPAREN . condicion RPAREN LBRACE cuerpo RBRACE
    (87) condicion -> . VARIABLE operador_logico VARIABLE
    (88) condicion -> . valor operador_logico valor
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 113
    STRING          shift and go to state 68
    NOMBRE          shift and go to state 72
    ENTERO          shift and go to state 65
    DECIMAL         shift and go to state 69

    condicion                      shift and go to state 150
    valor                          shift and go to state 114
    numero                         shift and go to state 66

state 123

    (92) bswitch -> SWITCH LPAREN VARIABLE . RPAREN LBRACE innerSwitch RBRACE

    RPAREN          shift and go to state 151


state 124

    (117) bgoto -> GOTO NOMBRE SEMI .

    $end            reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    RBRACE          reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    ECHO            reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    PRINT           reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    VARIABLE        reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    VAR             reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    DEFINE          reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    READLINE        reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    SUMA            reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    RESTA           reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    MULTIPLICACION  reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    DIVISION        reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    MODULO          reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    SMALLER         reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    GREATER         reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    AND             reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    OR              reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    XOR             reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    IS_EQUAL        reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    IS_NOT_EQUAL    reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    IS_IDENTICAL    reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    IS_NOT_IDENTICAL reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    BOOLEAN_NOT     reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    WHILE           reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    DO              reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    FOR             reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    FOREACH         reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    TRY             reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    LPAREN          reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    SWITCH          reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    GOTO            reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    PUBLIC          reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    PRIVATE         reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    PROTECTED       reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    STATIC          reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    FUNCTION        reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    IF              reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)
    BREAK           reduce using rule 117 (bgoto -> GOTO NOMBRE SEMI .)


state 125

    (80) funcion_nparams -> FUNCTION NOMBRE LPAREN . params_list RPAREN stc_bloque_def
    (83) funcion_opreturn -> FUNCTION NOMBRE LPAREN . params_list RPAREN stc_bloque_def
    (85) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN stc_bloque_def
    (86) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN LBRACE empty RBRACE
    (84) funcion_void -> FUNCTION NOMBRE LPAREN . RPAREN COLON VOID LBRACE empty RBRACE
    (81) params_list -> . params_list COMMA param
    (82) params_list -> . param
    (78) param -> . VARIABLE
    (79) param -> . asignacion
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion -> . VAR asignacion
    (61) asignacion -> . proteccion asignacion
    (67) proteccion -> . PUBLIC
    (68) proteccion -> . PRIVATE
    (69) proteccion -> . PROTECTED
    (70) proteccion -> . STATIC

    RPAREN          shift and go to state 153
    VARIABLE        shift and go to state 155
    VAR             shift and go to state 24
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60

    params_list                    shift and go to state 152
    param                          shift and go to state 154
    asignacion                     shift and go to state 156
    proteccion                     shift and go to state 77

state 126

    (40) condicion_if -> IF LPAREN condicion . RPAREN LBRACE cuerpo RBRACE

    RPAREN          shift and go to state 157


state 127

    (24) imprimir -> ECHO NOMBRE LBRACKET ENTERO . RBRACKET SEMI

    RBRACKET        shift and go to state 158


state 128

    (23) imprimir -> PRINT LPAREN valor RPAREN . SEMI

    SEMI            shift and go to state 159


state 129

    (57) operaciones_mat_par -> LPAREN valor operadores valor . RPAREN

    RPAREN          shift and go to state 160


state 130

    (58) operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par . RPAREN

    RPAREN          shift and go to state 161


state 131

    (59) asignacion -> VARIABLE EQUALS valor SEMI .

    $end            reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    RBRACE          reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    ECHO            reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    PRINT           reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    VARIABLE        reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    VAR             reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    DEFINE          reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    READLINE        reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    SUMA            reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    RESTA           reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    MULTIPLICACION  reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    DIVISION        reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    MODULO          reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    SMALLER         reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    GREATER         reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    AND             reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    OR              reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    XOR             reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_EQUAL        reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_NOT_EQUAL    reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_IDENTICAL    reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IS_NOT_IDENTICAL reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    BOOLEAN_NOT     reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    WHILE           reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    DO              reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    FOR             reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    FOREACH         reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    TRY             reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    LPAREN          reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    SWITCH          reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    GOTO            reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    PUBLIC          reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    PRIVATE         reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    PROTECTED       reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    STATIC          reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    FUNCTION        reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    IF              reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    BREAK           reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    SEMI            reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    RPAREN          reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)
    COMMA           reduce using rule 59 (asignacion -> VARIABLE EQUALS valor SEMI .)


state 132

    (62) asignacion_array -> VARIABLE EQUALS array_def SEMI .

    $end            reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    RBRACE          reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    ECHO            reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    PRINT           reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    VARIABLE        reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    VAR             reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    DEFINE          reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    READLINE        reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    SUMA            reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    RESTA           reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    MULTIPLICACION  reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    DIVISION        reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    MODULO          reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    SMALLER         reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    GREATER         reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    AND             reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    OR              reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    XOR             reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_EQUAL        reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_NOT_EQUAL    reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_IDENTICAL    reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IS_NOT_IDENTICAL reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    BOOLEAN_NOT     reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    WHILE           reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    DO              reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    FOR             reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    FOREACH         reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    TRY             reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    LPAREN          reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    SWITCH          reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    GOTO            reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    PUBLIC          reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    PRIVATE         reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    PROTECTED       reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    STATIC          reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    FUNCTION        reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    IF              reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)
    BREAK           reduce using rule 62 (asignacion_array -> VARIABLE EQUALS array_def SEMI .)


state 133

    (109) array_def -> ARRAY LPAREN . RPAREN
    (110) array_def -> ARRAY LPAREN . array_elmnt RPAREN
    (111) array_elmnt -> . valor
    (112) array_elmnt -> . empty
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (116) empty -> .
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 162
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 68
    NOMBRE          shift and go to state 72
    ENTERO          shift and go to state 65
    DECIMAL         shift and go to state 69

  ! RPAREN          [ reduce using rule 116 (empty -> .) ]

    array_elmnt                    shift and go to state 163
    valor                          shift and go to state 164
    empty                          shift and go to state 165
    numero                         shift and go to state 66

state 134

    (80) funcion_nparams -> FUNCTION NOMBRE LPAREN . params_list RPAREN stc_bloque_def
    (83) funcion_opreturn -> FUNCTION NOMBRE LPAREN . params_list RPAREN stc_bloque_def
    (85) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN stc_bloque_def
    (86) funcion_blank -> FUNCTION NOMBRE LPAREN . RPAREN LBRACE empty RBRACE
    (81) params_list -> . params_list COMMA param
    (82) params_list -> . param
    (78) param -> . VARIABLE
    (79) param -> . asignacion
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion -> . VAR asignacion
    (61) asignacion -> . proteccion asignacion
    (67) proteccion -> . PUBLIC
    (68) proteccion -> . PRIVATE
    (69) proteccion -> . PROTECTED
    (70) proteccion -> . STATIC

    RPAREN          shift and go to state 166
    VARIABLE        shift and go to state 155
    VAR             shift and go to state 24
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60

    params_list                    shift and go to state 152
    param                          shift and go to state 154
    asignacion                     shift and go to state 156
    proteccion                     shift and go to state 77

state 135

    (63) constante -> DEFINE LPAREN STRING COMMA . valor RPAREN SEMI
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 67
    STRING          shift and go to state 68
    NOMBRE          shift and go to state 72
    ENTERO          shift and go to state 65
    DECIMAL         shift and go to state 69

    valor                          shift and go to state 167
    numero                         shift and go to state 66

state 136

    (64) constante -> DEFINE LPAREN NOMBRE COMMA . ARRAY RPAREN SEMI

    ARRAY           shift and go to state 168


state 137

    (65) lectura -> READLINE LPAREN STRING RPAREN . SEMI

    SEMI            shift and go to state 169


state 138

    (66) lectura -> READLINE LPAREN RPAREN SEMI .

    $end            reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    ECHO            reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    PRINT           reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    VAR             reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    DEFINE          reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    READLINE        reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    SUMA            reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    RESTA           reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    DIVISION        reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    MODULO          reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    SMALLER         reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    GREATER         reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    AND             reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    OR              reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    XOR             reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_EQUAL        reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    DO              reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    FOR             reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    FOREACH         reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    TRY             reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    LPAREN          reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    SWITCH          reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    GOTO            reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    PUBLIC          reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    PRIVATE         reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    PROTECTED       reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    STATIC          reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    FUNCTION        reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    IF              reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)
    BREAK           reduce using rule 66 (lectura -> READLINE LPAREN RPAREN SEMI .)


state 139

    (89) bwhile -> WHILE LPAREN condicion RPAREN . LBRACE stc_bloque RBRACE
    (90) bwhile -> WHILE LPAREN condicion RPAREN . COLON stc_bloque

    LBRACE          shift and go to state 170
    COLON           shift and go to state 171


state 140

    (87) condicion -> VARIABLE operador_logico . VARIABLE

    VARIABLE        shift and go to state 172


state 141

    (88) condicion -> valor operador_logico . valor
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 67
    STRING          shift and go to state 68
    NOMBRE          shift and go to state 72
    ENTERO          shift and go to state 65
    DECIMAL         shift and go to state 69

    valor                          shift and go to state 173
    numero                         shift and go to state 66

state 142

    (91) bdo -> DO LBRACE cuerpo RBRACE . bwhile
    (89) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (90) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque

    WHILE           shift and go to state 49

    bwhile                         shift and go to state 174

state 143

    (96) bfor -> FOR LPAREN asignacion SEMI . condicion SEMI for_incr RPAREN stc_bloque_def
    (87) condicion -> . VARIABLE operador_logico VARIABLE
    (88) condicion -> . valor operador_logico valor
    (25) valor -> . numero
    (26) valor -> . VARIABLE
    (27) valor -> . STRING
    (28) valor -> . NOMBRE
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    VARIABLE        shift and go to state 113
    STRING          shift and go to state 68
    NOMBRE          shift and go to state 72
    ENTERO          shift and go to state 65
    DECIMAL         shift and go to state 69

    condicion                      shift and go to state 175
    valor                          shift and go to state 114
    numero                         shift and go to state 66

state 144

    (108) bforeach -> FOREACH LPAREN VARIABLE AS . VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 176


state 145

    (101) stc_bloque_def -> LBRACE stc_bloque . RBRACE
    (97) stc_bloque -> stc_bloque . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat_par
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (21) imprimir -> . ECHO valor SEMI
    (22) imprimir -> . PRINT valor SEMI
    (23) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (24) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion -> . VAR asignacion
    (61) asignacion -> . proteccion asignacion
    (62) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (71) funciones -> . funcion_nparams
    (72) funciones -> . proteccion funcion_nparams
    (73) funciones -> . funcion_opreturn
    (74) funciones -> . proteccion funcion_opreturn
    (75) funciones -> . funcion_blank
    (76) funciones -> . proteccion funcion_blank
    (77) funciones -> . funcion_void
    (63) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (64) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (65) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (66) lectura -> . READLINE LPAREN RPAREN SEMI
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL
    (47) condicion_booleana -> . AND
    (48) condicion_booleana -> . OR
    (49) condicion_booleana -> . XOR
    (50) condicion_booleana -> . IS_EQUAL
    (51) condicion_booleana -> . IS_NOT_EQUAL
    (52) condicion_booleana -> . IS_IDENTICAL
    (53) condicion_booleana -> . IS_NOT_IDENTICAL
    (54) condicion_booleana -> . BOOLEAN_NOT
    (89) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (90) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (91) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (96) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (108) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (113) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (43) condicion_ifelse -> . condicion_if
    (44) condicion_ifelse -> . condicion_if condicion_else
    (45) condicion_ifelse -> . condicion_if condicion_elseif
    (46) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (92) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (117) bgoto -> . GOTO NOMBRE SEMI
    (67) proteccion -> . PUBLIC
    (68) proteccion -> . PRIVATE
    (69) proteccion -> . PROTECTED
    (70) proteccion -> . STATIC
    (80) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (85) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (86) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (84) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (40) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    RBRACE          shift and go to state 177
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    DEFINE          shift and go to state 30
    READLINE        shift and go to state 31
    SUMA            shift and go to state 32
    RESTA           shift and go to state 33
    MULTIPLICACION  shift and go to state 34
    DIVISION        shift and go to state 35
    MODULO          shift and go to state 36
    SMALLER         shift and go to state 37
    GREATER         shift and go to state 38
    IS_SMALLER_OR_EQUAL shift and go to state 39
    IS_GREATER_OR_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    IS_EQUAL        shift and go to state 44
    IS_NOT_EQUAL    shift and go to state 45
    IS_IDENTICAL    shift and go to state 46
    IS_NOT_IDENTICAL shift and go to state 47
    BOOLEAN_NOT     shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    FOREACH         shift and go to state 52
    TRY             shift and go to state 53
    LPAREN          shift and go to state 22
    SWITCH          shift and go to state 55
    GOTO            shift and go to state 56
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60
    FUNCTION        shift and go to state 61
    IF              shift and go to state 62

    cuerpo                         shift and go to state 178
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat_par            shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    proteccion                     shift and go to state 25
    funcion_nparams                shift and go to state 26
    funcion_opreturn               shift and go to state 27
    funcion_blank                  shift and go to state 28
    funcion_void                   shift and go to state 29
    condicion_if                   shift and go to state 54

state 146

    (98) stc_bloque -> empty .

    RBRACE          reduce using rule 98 (stc_bloque -> empty .)
    ECHO            reduce using rule 98 (stc_bloque -> empty .)
    PRINT           reduce using rule 98 (stc_bloque -> empty .)
    VARIABLE        reduce using rule 98 (stc_bloque -> empty .)
    VAR             reduce using rule 98 (stc_bloque -> empty .)
    DEFINE          reduce using rule 98 (stc_bloque -> empty .)
    READLINE        reduce using rule 98 (stc_bloque -> empty .)
    SUMA            reduce using rule 98 (stc_bloque -> empty .)
    RESTA           reduce using rule 98 (stc_bloque -> empty .)
    MULTIPLICACION  reduce using rule 98 (stc_bloque -> empty .)
    DIVISION        reduce using rule 98 (stc_bloque -> empty .)
    MODULO          reduce using rule 98 (stc_bloque -> empty .)
    SMALLER         reduce using rule 98 (stc_bloque -> empty .)
    GREATER         reduce using rule 98 (stc_bloque -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 98 (stc_bloque -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 98 (stc_bloque -> empty .)
    AND             reduce using rule 98 (stc_bloque -> empty .)
    OR              reduce using rule 98 (stc_bloque -> empty .)
    XOR             reduce using rule 98 (stc_bloque -> empty .)
    IS_EQUAL        reduce using rule 98 (stc_bloque -> empty .)
    IS_NOT_EQUAL    reduce using rule 98 (stc_bloque -> empty .)
    IS_IDENTICAL    reduce using rule 98 (stc_bloque -> empty .)
    IS_NOT_IDENTICAL reduce using rule 98 (stc_bloque -> empty .)
    BOOLEAN_NOT     reduce using rule 98 (stc_bloque -> empty .)
    WHILE           reduce using rule 98 (stc_bloque -> empty .)
    DO              reduce using rule 98 (stc_bloque -> empty .)
    FOR             reduce using rule 98 (stc_bloque -> empty .)
    FOREACH         reduce using rule 98 (stc_bloque -> empty .)
    TRY             reduce using rule 98 (stc_bloque -> empty .)
    LPAREN          reduce using rule 98 (stc_bloque -> empty .)
    SWITCH          reduce using rule 98 (stc_bloque -> empty .)
    GOTO            reduce using rule 98 (stc_bloque -> empty .)
    PUBLIC          reduce using rule 98 (stc_bloque -> empty .)
    PRIVATE         reduce using rule 98 (stc_bloque -> empty .)
    PROTECTED       reduce using rule 98 (stc_bloque -> empty .)
    STATIC          reduce using rule 98 (stc_bloque -> empty .)
    FUNCTION        reduce using rule 98 (stc_bloque -> empty .)
    IF              reduce using rule 98 (stc_bloque -> empty .)
    $end            reduce using rule 98 (stc_bloque -> empty .)
    BREAK           reduce using rule 98 (stc_bloque -> empty .)


state 147

    (99) stc_bloque -> RETURN .
    (100) stc_bloque -> RETURN . NULL

    RBRACE          reduce using rule 99 (stc_bloque -> RETURN .)
    ECHO            reduce using rule 99 (stc_bloque -> RETURN .)
    PRINT           reduce using rule 99 (stc_bloque -> RETURN .)
    VARIABLE        reduce using rule 99 (stc_bloque -> RETURN .)
    VAR             reduce using rule 99 (stc_bloque -> RETURN .)
    DEFINE          reduce using rule 99 (stc_bloque -> RETURN .)
    READLINE        reduce using rule 99 (stc_bloque -> RETURN .)
    SUMA            reduce using rule 99 (stc_bloque -> RETURN .)
    RESTA           reduce using rule 99 (stc_bloque -> RETURN .)
    MULTIPLICACION  reduce using rule 99 (stc_bloque -> RETURN .)
    DIVISION        reduce using rule 99 (stc_bloque -> RETURN .)
    MODULO          reduce using rule 99 (stc_bloque -> RETURN .)
    SMALLER         reduce using rule 99 (stc_bloque -> RETURN .)
    GREATER         reduce using rule 99 (stc_bloque -> RETURN .)
    IS_SMALLER_OR_EQUAL reduce using rule 99 (stc_bloque -> RETURN .)
    IS_GREATER_OR_EQUAL reduce using rule 99 (stc_bloque -> RETURN .)
    AND             reduce using rule 99 (stc_bloque -> RETURN .)
    OR              reduce using rule 99 (stc_bloque -> RETURN .)
    XOR             reduce using rule 99 (stc_bloque -> RETURN .)
    IS_EQUAL        reduce using rule 99 (stc_bloque -> RETURN .)
    IS_NOT_EQUAL    reduce using rule 99 (stc_bloque -> RETURN .)
    IS_IDENTICAL    reduce using rule 99 (stc_bloque -> RETURN .)
    IS_NOT_IDENTICAL reduce using rule 99 (stc_bloque -> RETURN .)
    BOOLEAN_NOT     reduce using rule 99 (stc_bloque -> RETURN .)
    WHILE           reduce using rule 99 (stc_bloque -> RETURN .)
    DO              reduce using rule 99 (stc_bloque -> RETURN .)
    FOR             reduce using rule 99 (stc_bloque -> RETURN .)
    FOREACH         reduce using rule 99 (stc_bloque -> RETURN .)
    TRY             reduce using rule 99 (stc_bloque -> RETURN .)
    LPAREN          reduce using rule 99 (stc_bloque -> RETURN .)
    SWITCH          reduce using rule 99 (stc_bloque -> RETURN .)
    GOTO            reduce using rule 99 (stc_bloque -> RETURN .)
    PUBLIC          reduce using rule 99 (stc_bloque -> RETURN .)
    PRIVATE         reduce using rule 99 (stc_bloque -> RETURN .)
    PROTECTED       reduce using rule 99 (stc_bloque -> RETURN .)
    STATIC          reduce using rule 99 (stc_bloque -> RETURN .)
    FUNCTION        reduce using rule 99 (stc_bloque -> RETURN .)
    IF              reduce using rule 99 (stc_bloque -> RETURN .)
    $end            reduce using rule 99 (stc_bloque -> RETURN .)
    BREAK           reduce using rule 99 (stc_bloque -> RETURN .)
    NULL            shift and go to state 179


state 148

    (113) btry -> TRY LBRACE stc_bloque_def RBRACE . catches
    (114) catches -> . catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def
    (115) catches -> . empty
    (116) empty -> .

    CATCH           reduce using rule 116 (empty -> .)
    $end            reduce using rule 116 (empty -> .)
    RBRACE          reduce using rule 116 (empty -> .)
    ECHO            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    VARIABLE        reduce using rule 116 (empty -> .)
    VAR             reduce using rule 116 (empty -> .)
    DEFINE          reduce using rule 116 (empty -> .)
    READLINE        reduce using rule 116 (empty -> .)
    SUMA            reduce using rule 116 (empty -> .)
    RESTA           reduce using rule 116 (empty -> .)
    MULTIPLICACION  reduce using rule 116 (empty -> .)
    DIVISION        reduce using rule 116 (empty -> .)
    MODULO          reduce using rule 116 (empty -> .)
    SMALLER         reduce using rule 116 (empty -> .)
    GREATER         reduce using rule 116 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 116 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    XOR             reduce using rule 116 (empty -> .)
    IS_EQUAL        reduce using rule 116 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 116 (empty -> .)
    IS_IDENTICAL    reduce using rule 116 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 116 (empty -> .)
    BOOLEAN_NOT     reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    DO              reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    FOREACH         reduce using rule 116 (empty -> .)
    TRY             reduce using rule 116 (empty -> .)
    LPAREN          reduce using rule 116 (empty -> .)
    SWITCH          reduce using rule 116 (empty -> .)
    GOTO            reduce using rule 116 (empty -> .)
    PUBLIC          reduce using rule 116 (empty -> .)
    PRIVATE         reduce using rule 116 (empty -> .)
    PROTECTED       reduce using rule 116 (empty -> .)
    STATIC          reduce using rule 116 (empty -> .)
    FUNCTION        reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    BREAK           reduce using rule 116 (empty -> .)

    catches                        shift and go to state 180
    empty                          shift and go to state 181

state 149

    (42) condicion_else -> ELSE LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 182


state 150

    (41) condicion_elseif -> ELSEIF LPAREN condicion . RPAREN LBRACE cuerpo RBRACE

    RPAREN          shift and go to state 183


state 151

    (92) bswitch -> SWITCH LPAREN VARIABLE RPAREN . LBRACE innerSwitch RBRACE

    LBRACE          shift and go to state 184


state 152

    (80) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list . RPAREN stc_bloque_def
    (83) funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list . RPAREN stc_bloque_def
    (81) params_list -> params_list . COMMA param

    RPAREN          shift and go to state 185
    COMMA           shift and go to state 186


state 153

    (85) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . stc_bloque_def
    (86) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . LBRACE empty RBRACE
    (84) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN . COLON VOID LBRACE empty RBRACE
    (101) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 188
    COLON           shift and go to state 189

    stc_bloque_def                 shift and go to state 187

state 154

    (82) params_list -> param .

    RPAREN          reduce using rule 82 (params_list -> param .)
    COMMA           reduce using rule 82 (params_list -> param .)


state 155

    (78) param -> VARIABLE .
    (59) asignacion -> VARIABLE . EQUALS valor SEMI

    RPAREN          reduce using rule 78 (param -> VARIABLE .)
    COMMA           reduce using rule 78 (param -> VARIABLE .)
    EQUALS          shift and go to state 106


state 156

    (79) param -> asignacion .

    RPAREN          reduce using rule 79 (param -> asignacion .)
    COMMA           reduce using rule 79 (param -> asignacion .)


state 157

    (40) condicion_if -> IF LPAREN condicion RPAREN . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 190


state 158

    (24) imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET . SEMI

    SEMI            shift and go to state 191


state 159

    (23) imprimir -> PRINT LPAREN valor RPAREN SEMI .

    $end            reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    RBRACE          reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    ECHO            reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    PRINT           reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    VARIABLE        reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    VAR             reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    DEFINE          reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    READLINE        reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    SUMA            reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    RESTA           reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    DIVISION        reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    MODULO          reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    SMALLER         reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    GREATER         reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    AND             reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    OR              reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    XOR             reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_EQUAL        reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    WHILE           reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    DO              reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    FOR             reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    FOREACH         reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    TRY             reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    LPAREN          reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    SWITCH          reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    GOTO            reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    PUBLIC          reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    PRIVATE         reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    PROTECTED       reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    STATIC          reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    FUNCTION        reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    IF              reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)
    BREAK           reduce using rule 23 (imprimir -> PRINT LPAREN valor RPAREN SEMI .)


state 160

    (57) operaciones_mat_par -> LPAREN valor operadores valor RPAREN .

    $end            reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    RBRACE          reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    RPAREN          reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    ECHO            reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    PRINT           reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    VARIABLE        reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    VAR             reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    DEFINE          reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    READLINE        reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    SUMA            reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    RESTA           reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    MULTIPLICACION  reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    DIVISION        reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    MODULO          reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    SMALLER         reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    GREATER         reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    AND             reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    OR              reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    XOR             reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IS_EQUAL        reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IS_NOT_EQUAL    reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IS_IDENTICAL    reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    BOOLEAN_NOT     reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    WHILE           reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    DO              reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    FOR             reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    FOREACH         reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    TRY             reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    LPAREN          reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    SWITCH          reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    GOTO            reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    PUBLIC          reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    PRIVATE         reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    PROTECTED       reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    STATIC          reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    FUNCTION        reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    IF              reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)
    BREAK           reduce using rule 57 (operaciones_mat_par -> LPAREN valor operadores valor RPAREN .)


state 161

    (58) operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .

    $end            reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    RBRACE          reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    RPAREN          reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    ECHO            reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    PRINT           reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    VARIABLE        reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    VAR             reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    DEFINE          reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    READLINE        reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    SUMA            reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    RESTA           reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    MULTIPLICACION  reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    DIVISION        reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    MODULO          reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    SMALLER         reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    GREATER         reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IS_SMALLER_OR_EQUAL reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IS_GREATER_OR_EQUAL reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    AND             reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    OR              reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    XOR             reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IS_EQUAL        reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IS_NOT_EQUAL    reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IS_IDENTICAL    reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IS_NOT_IDENTICAL reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    BOOLEAN_NOT     reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    WHILE           reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    DO              reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    FOR             reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    FOREACH         reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    TRY             reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    LPAREN          reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    SWITCH          reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    GOTO            reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    PUBLIC          reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    PRIVATE         reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    PROTECTED       reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    STATIC          reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    FUNCTION        reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    IF              reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)
    BREAK           reduce using rule 58 (operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN .)


state 162

    (109) array_def -> ARRAY LPAREN RPAREN .

    SEMI            reduce using rule 109 (array_def -> ARRAY LPAREN RPAREN .)


state 163

    (110) array_def -> ARRAY LPAREN array_elmnt . RPAREN

    RPAREN          shift and go to state 192


state 164

    (111) array_elmnt -> valor .

    RPAREN          reduce using rule 111 (array_elmnt -> valor .)


state 165

    (112) array_elmnt -> empty .

    RPAREN          reduce using rule 112 (array_elmnt -> empty .)


state 166

    (85) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . stc_bloque_def
    (86) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN . LBRACE empty RBRACE
    (101) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 188

    stc_bloque_def                 shift and go to state 187

state 167

    (63) constante -> DEFINE LPAREN STRING COMMA valor . RPAREN SEMI

    RPAREN          shift and go to state 193


state 168

    (64) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY . RPAREN SEMI

    RPAREN          shift and go to state 194


state 169

    (65) lectura -> READLINE LPAREN STRING RPAREN SEMI .

    $end            reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    RBRACE          reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    ECHO            reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    PRINT           reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    VARIABLE        reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    VAR             reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    DEFINE          reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    READLINE        reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    SUMA            reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    RESTA           reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    DIVISION        reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    MODULO          reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    SMALLER         reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    GREATER         reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    AND             reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    OR              reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    XOR             reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_EQUAL        reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    WHILE           reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    DO              reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    FOR             reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    FOREACH         reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    TRY             reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    LPAREN          reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    SWITCH          reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    GOTO            reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    PUBLIC          reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    PRIVATE         reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    PROTECTED       reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    STATIC          reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    FUNCTION        reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    IF              reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)
    BREAK           reduce using rule 65 (lectura -> READLINE LPAREN STRING RPAREN SEMI .)


state 170

    (89) bwhile -> WHILE LPAREN condicion RPAREN LBRACE . stc_bloque RBRACE
    (97) stc_bloque -> . stc_bloque cuerpo
    (98) stc_bloque -> . empty
    (99) stc_bloque -> . RETURN
    (100) stc_bloque -> . RETURN NULL
    (116) empty -> .

    RETURN          shift and go to state 147
    RBRACE          reduce using rule 116 (empty -> .)
    ECHO            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    VARIABLE        reduce using rule 116 (empty -> .)
    VAR             reduce using rule 116 (empty -> .)
    DEFINE          reduce using rule 116 (empty -> .)
    READLINE        reduce using rule 116 (empty -> .)
    SUMA            reduce using rule 116 (empty -> .)
    RESTA           reduce using rule 116 (empty -> .)
    MULTIPLICACION  reduce using rule 116 (empty -> .)
    DIVISION        reduce using rule 116 (empty -> .)
    MODULO          reduce using rule 116 (empty -> .)
    SMALLER         reduce using rule 116 (empty -> .)
    GREATER         reduce using rule 116 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 116 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    XOR             reduce using rule 116 (empty -> .)
    IS_EQUAL        reduce using rule 116 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 116 (empty -> .)
    IS_IDENTICAL    reduce using rule 116 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 116 (empty -> .)
    BOOLEAN_NOT     reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    DO              reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    FOREACH         reduce using rule 116 (empty -> .)
    TRY             reduce using rule 116 (empty -> .)
    LPAREN          reduce using rule 116 (empty -> .)
    SWITCH          reduce using rule 116 (empty -> .)
    GOTO            reduce using rule 116 (empty -> .)
    PUBLIC          reduce using rule 116 (empty -> .)
    PRIVATE         reduce using rule 116 (empty -> .)
    PROTECTED       reduce using rule 116 (empty -> .)
    STATIC          reduce using rule 116 (empty -> .)
    FUNCTION        reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)

    stc_bloque                     shift and go to state 195
    empty                          shift and go to state 146

state 171

    (90) bwhile -> WHILE LPAREN condicion RPAREN COLON . stc_bloque
    (97) stc_bloque -> . stc_bloque cuerpo
    (98) stc_bloque -> . empty
    (99) stc_bloque -> . RETURN
    (100) stc_bloque -> . RETURN NULL
    (116) empty -> .

    RETURN          shift and go to state 147
    ECHO            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    VARIABLE        reduce using rule 116 (empty -> .)
    VAR             reduce using rule 116 (empty -> .)
    DEFINE          reduce using rule 116 (empty -> .)
    READLINE        reduce using rule 116 (empty -> .)
    SUMA            reduce using rule 116 (empty -> .)
    RESTA           reduce using rule 116 (empty -> .)
    MULTIPLICACION  reduce using rule 116 (empty -> .)
    DIVISION        reduce using rule 116 (empty -> .)
    MODULO          reduce using rule 116 (empty -> .)
    SMALLER         reduce using rule 116 (empty -> .)
    GREATER         reduce using rule 116 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 116 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    XOR             reduce using rule 116 (empty -> .)
    IS_EQUAL        reduce using rule 116 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 116 (empty -> .)
    IS_IDENTICAL    reduce using rule 116 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 116 (empty -> .)
    BOOLEAN_NOT     reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    DO              reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    FOREACH         reduce using rule 116 (empty -> .)
    TRY             reduce using rule 116 (empty -> .)
    LPAREN          reduce using rule 116 (empty -> .)
    SWITCH          reduce using rule 116 (empty -> .)
    GOTO            reduce using rule 116 (empty -> .)
    PUBLIC          reduce using rule 116 (empty -> .)
    PRIVATE         reduce using rule 116 (empty -> .)
    PROTECTED       reduce using rule 116 (empty -> .)
    STATIC          reduce using rule 116 (empty -> .)
    FUNCTION        reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    $end            reduce using rule 116 (empty -> .)
    RBRACE          reduce using rule 116 (empty -> .)
    BREAK           reduce using rule 116 (empty -> .)

    stc_bloque                     shift and go to state 196
    empty                          shift and go to state 146

state 172

    (87) condicion -> VARIABLE operador_logico VARIABLE .

    RPAREN          reduce using rule 87 (condicion -> VARIABLE operador_logico VARIABLE .)
    SEMI            reduce using rule 87 (condicion -> VARIABLE operador_logico VARIABLE .)


state 173

    (88) condicion -> valor operador_logico valor .

    RPAREN          reduce using rule 88 (condicion -> valor operador_logico valor .)
    SEMI            reduce using rule 88 (condicion -> valor operador_logico valor .)


state 174

    (91) bdo -> DO LBRACE cuerpo RBRACE bwhile .

    $end            reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    RBRACE          reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    ECHO            reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    PRINT           reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    VARIABLE        reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    VAR             reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    DEFINE          reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    READLINE        reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    SUMA            reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    RESTA           reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    MULTIPLICACION  reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    DIVISION        reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    MODULO          reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    SMALLER         reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    GREATER         reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    IS_SMALLER_OR_EQUAL reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    IS_GREATER_OR_EQUAL reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    AND             reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    OR              reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    XOR             reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    IS_EQUAL        reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    IS_NOT_EQUAL    reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    IS_IDENTICAL    reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    IS_NOT_IDENTICAL reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    BOOLEAN_NOT     reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    WHILE           reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    DO              reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    FOR             reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    FOREACH         reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    TRY             reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    LPAREN          reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    SWITCH          reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    GOTO            reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    PUBLIC          reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    PRIVATE         reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    PROTECTED       reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    STATIC          reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    FUNCTION        reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    IF              reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)
    BREAK           reduce using rule 91 (bdo -> DO LBRACE cuerpo RBRACE bwhile .)


state 175

    (96) bfor -> FOR LPAREN asignacion SEMI condicion . SEMI for_incr RPAREN stc_bloque_def

    SEMI            shift and go to state 197


state 176

    (108) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE . RPAREN stc_bloque_def

    RPAREN          shift and go to state 198


state 177

    (101) stc_bloque_def -> LBRACE stc_bloque RBRACE .

    RBRACE          reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    $end            reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    ECHO            reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    PRINT           reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    VARIABLE        reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    VAR             reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    DEFINE          reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    READLINE        reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    SUMA            reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    RESTA           reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    MULTIPLICACION  reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    DIVISION        reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    MODULO          reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    SMALLER         reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    GREATER         reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    AND             reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    OR              reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    XOR             reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_EQUAL        reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_NOT_EQUAL    reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_IDENTICAL    reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    BOOLEAN_NOT     reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    WHILE           reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    DO              reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    FOR             reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    FOREACH         reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    TRY             reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    LPAREN          reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    SWITCH          reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    GOTO            reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    PUBLIC          reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    PRIVATE         reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    PROTECTED       reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    STATIC          reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    FUNCTION        reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    IF              reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    BREAK           reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)
    CATCH           reduce using rule 101 (stc_bloque_def -> LBRACE stc_bloque RBRACE .)


state 178

    (97) stc_bloque -> stc_bloque cuerpo .

    RBRACE          reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    ECHO            reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    PRINT           reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    VARIABLE        reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    VAR             reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    DEFINE          reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    READLINE        reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    SUMA            reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    RESTA           reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    MULTIPLICACION  reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    DIVISION        reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    MODULO          reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    SMALLER         reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    GREATER         reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    IS_SMALLER_OR_EQUAL reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    IS_GREATER_OR_EQUAL reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    AND             reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    OR              reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    XOR             reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    IS_EQUAL        reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    IS_NOT_EQUAL    reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    IS_IDENTICAL    reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    IS_NOT_IDENTICAL reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    BOOLEAN_NOT     reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    WHILE           reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    DO              reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    FOR             reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    FOREACH         reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    TRY             reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    LPAREN          reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    SWITCH          reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    GOTO            reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    PUBLIC          reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    PRIVATE         reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    PROTECTED       reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    STATIC          reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    FUNCTION        reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    IF              reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    $end            reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)
    BREAK           reduce using rule 97 (stc_bloque -> stc_bloque cuerpo .)


state 179

    (100) stc_bloque -> RETURN NULL .

    RBRACE          reduce using rule 100 (stc_bloque -> RETURN NULL .)
    ECHO            reduce using rule 100 (stc_bloque -> RETURN NULL .)
    PRINT           reduce using rule 100 (stc_bloque -> RETURN NULL .)
    VARIABLE        reduce using rule 100 (stc_bloque -> RETURN NULL .)
    VAR             reduce using rule 100 (stc_bloque -> RETURN NULL .)
    DEFINE          reduce using rule 100 (stc_bloque -> RETURN NULL .)
    READLINE        reduce using rule 100 (stc_bloque -> RETURN NULL .)
    SUMA            reduce using rule 100 (stc_bloque -> RETURN NULL .)
    RESTA           reduce using rule 100 (stc_bloque -> RETURN NULL .)
    MULTIPLICACION  reduce using rule 100 (stc_bloque -> RETURN NULL .)
    DIVISION        reduce using rule 100 (stc_bloque -> RETURN NULL .)
    MODULO          reduce using rule 100 (stc_bloque -> RETURN NULL .)
    SMALLER         reduce using rule 100 (stc_bloque -> RETURN NULL .)
    GREATER         reduce using rule 100 (stc_bloque -> RETURN NULL .)
    IS_SMALLER_OR_EQUAL reduce using rule 100 (stc_bloque -> RETURN NULL .)
    IS_GREATER_OR_EQUAL reduce using rule 100 (stc_bloque -> RETURN NULL .)
    AND             reduce using rule 100 (stc_bloque -> RETURN NULL .)
    OR              reduce using rule 100 (stc_bloque -> RETURN NULL .)
    XOR             reduce using rule 100 (stc_bloque -> RETURN NULL .)
    IS_EQUAL        reduce using rule 100 (stc_bloque -> RETURN NULL .)
    IS_NOT_EQUAL    reduce using rule 100 (stc_bloque -> RETURN NULL .)
    IS_IDENTICAL    reduce using rule 100 (stc_bloque -> RETURN NULL .)
    IS_NOT_IDENTICAL reduce using rule 100 (stc_bloque -> RETURN NULL .)
    BOOLEAN_NOT     reduce using rule 100 (stc_bloque -> RETURN NULL .)
    WHILE           reduce using rule 100 (stc_bloque -> RETURN NULL .)
    DO              reduce using rule 100 (stc_bloque -> RETURN NULL .)
    FOR             reduce using rule 100 (stc_bloque -> RETURN NULL .)
    FOREACH         reduce using rule 100 (stc_bloque -> RETURN NULL .)
    TRY             reduce using rule 100 (stc_bloque -> RETURN NULL .)
    LPAREN          reduce using rule 100 (stc_bloque -> RETURN NULL .)
    SWITCH          reduce using rule 100 (stc_bloque -> RETURN NULL .)
    GOTO            reduce using rule 100 (stc_bloque -> RETURN NULL .)
    PUBLIC          reduce using rule 100 (stc_bloque -> RETURN NULL .)
    PRIVATE         reduce using rule 100 (stc_bloque -> RETURN NULL .)
    PROTECTED       reduce using rule 100 (stc_bloque -> RETURN NULL .)
    STATIC          reduce using rule 100 (stc_bloque -> RETURN NULL .)
    FUNCTION        reduce using rule 100 (stc_bloque -> RETURN NULL .)
    IF              reduce using rule 100 (stc_bloque -> RETURN NULL .)
    $end            reduce using rule 100 (stc_bloque -> RETURN NULL .)
    BREAK           reduce using rule 100 (stc_bloque -> RETURN NULL .)


state 180

    (113) btry -> TRY LBRACE stc_bloque_def RBRACE catches .
    (114) catches -> catches . CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def

    $end            reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    RBRACE          reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    ECHO            reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    PRINT           reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    VARIABLE        reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    VAR             reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    DEFINE          reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    READLINE        reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    SUMA            reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    RESTA           reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    MULTIPLICACION  reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    DIVISION        reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    MODULO          reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    SMALLER         reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    GREATER         reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_SMALLER_OR_EQUAL reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_GREATER_OR_EQUAL reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    AND             reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    OR              reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    XOR             reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_EQUAL        reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_NOT_EQUAL    reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_IDENTICAL    reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IS_NOT_IDENTICAL reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    BOOLEAN_NOT     reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    WHILE           reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    DO              reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    FOR             reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    FOREACH         reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    TRY             reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    LPAREN          reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    SWITCH          reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    GOTO            reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    PUBLIC          reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    PRIVATE         reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    PROTECTED       reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    STATIC          reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    FUNCTION        reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    IF              reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    BREAK           reduce using rule 113 (btry -> TRY LBRACE stc_bloque_def RBRACE catches .)
    CATCH           shift and go to state 199


state 181

    (115) catches -> empty .

    CATCH           reduce using rule 115 (catches -> empty .)
    $end            reduce using rule 115 (catches -> empty .)
    RBRACE          reduce using rule 115 (catches -> empty .)
    ECHO            reduce using rule 115 (catches -> empty .)
    PRINT           reduce using rule 115 (catches -> empty .)
    VARIABLE        reduce using rule 115 (catches -> empty .)
    VAR             reduce using rule 115 (catches -> empty .)
    DEFINE          reduce using rule 115 (catches -> empty .)
    READLINE        reduce using rule 115 (catches -> empty .)
    SUMA            reduce using rule 115 (catches -> empty .)
    RESTA           reduce using rule 115 (catches -> empty .)
    MULTIPLICACION  reduce using rule 115 (catches -> empty .)
    DIVISION        reduce using rule 115 (catches -> empty .)
    MODULO          reduce using rule 115 (catches -> empty .)
    SMALLER         reduce using rule 115 (catches -> empty .)
    GREATER         reduce using rule 115 (catches -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 115 (catches -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 115 (catches -> empty .)
    AND             reduce using rule 115 (catches -> empty .)
    OR              reduce using rule 115 (catches -> empty .)
    XOR             reduce using rule 115 (catches -> empty .)
    IS_EQUAL        reduce using rule 115 (catches -> empty .)
    IS_NOT_EQUAL    reduce using rule 115 (catches -> empty .)
    IS_IDENTICAL    reduce using rule 115 (catches -> empty .)
    IS_NOT_IDENTICAL reduce using rule 115 (catches -> empty .)
    BOOLEAN_NOT     reduce using rule 115 (catches -> empty .)
    WHILE           reduce using rule 115 (catches -> empty .)
    DO              reduce using rule 115 (catches -> empty .)
    FOR             reduce using rule 115 (catches -> empty .)
    FOREACH         reduce using rule 115 (catches -> empty .)
    TRY             reduce using rule 115 (catches -> empty .)
    LPAREN          reduce using rule 115 (catches -> empty .)
    SWITCH          reduce using rule 115 (catches -> empty .)
    GOTO            reduce using rule 115 (catches -> empty .)
    PUBLIC          reduce using rule 115 (catches -> empty .)
    PRIVATE         reduce using rule 115 (catches -> empty .)
    PROTECTED       reduce using rule 115 (catches -> empty .)
    STATIC          reduce using rule 115 (catches -> empty .)
    FUNCTION        reduce using rule 115 (catches -> empty .)
    IF              reduce using rule 115 (catches -> empty .)
    BREAK           reduce using rule 115 (catches -> empty .)


state 182

    (42) condicion_else -> ELSE LBRACE cuerpo RBRACE .

    $end            reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    ECHO            reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    PRINT           reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    VARIABLE        reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    VAR             reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    DEFINE          reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    READLINE        reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    SUMA            reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    RESTA           reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    MULTIPLICACION  reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    DIVISION        reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    MODULO          reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    SMALLER         reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    GREATER         reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    AND             reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    OR              reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    XOR             reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IS_EQUAL        reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IS_NOT_EQUAL    reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IS_IDENTICAL    reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    BOOLEAN_NOT     reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    WHILE           reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    DO              reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    FOR             reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    FOREACH         reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    TRY             reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    LPAREN          reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    SWITCH          reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    GOTO            reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    PUBLIC          reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    PRIVATE         reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    PROTECTED       reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    STATIC          reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    FUNCTION        reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    IF              reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)
    BREAK           reduce using rule 42 (condicion_else -> ELSE LBRACE cuerpo RBRACE .)


state 183

    (41) condicion_elseif -> ELSEIF LPAREN condicion RPAREN . LBRACE cuerpo RBRACE

    LBRACE          shift and go to state 200


state 184

    (92) bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE . innerSwitch RBRACE
    (93) innerSwitch -> . CASE ENTERO COLON cuerpo BREAK SEMI
    (94) innerSwitch -> . CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch

    CASE            shift and go to state 202

    innerSwitch                    shift and go to state 201

state 185

    (80) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN . stc_bloque_def
    (83) funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN . stc_bloque_def
    (101) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 118

    stc_bloque_def                 shift and go to state 203

state 186

    (81) params_list -> params_list COMMA . param
    (78) param -> . VARIABLE
    (79) param -> . asignacion
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion -> . VAR asignacion
    (61) asignacion -> . proteccion asignacion
    (67) proteccion -> . PUBLIC
    (68) proteccion -> . PRIVATE
    (69) proteccion -> . PROTECTED
    (70) proteccion -> . STATIC

    VARIABLE        shift and go to state 155
    VAR             shift and go to state 24
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60

    param                          shift and go to state 204
    asignacion                     shift and go to state 156
    proteccion                     shift and go to state 77

state 187

    (85) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .

    $end            reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    ECHO            reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    PRINT           reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    VARIABLE        reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    VAR             reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    DEFINE          reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    READLINE        reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    SUMA            reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    RESTA           reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    MULTIPLICACION  reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    DIVISION        reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    MODULO          reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    SMALLER         reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    GREATER         reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IS_SMALLER_OR_EQUAL reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IS_GREATER_OR_EQUAL reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    AND             reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    OR              reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    XOR             reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IS_EQUAL        reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IS_NOT_EQUAL    reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IS_IDENTICAL    reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IS_NOT_IDENTICAL reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    BOOLEAN_NOT     reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    WHILE           reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    DO              reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    FOR             reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    FOREACH         reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    TRY             reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    LPAREN          reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    SWITCH          reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    GOTO            reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    PUBLIC          reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    PRIVATE         reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    PROTECTED       reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    STATIC          reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    FUNCTION        reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    IF              reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)
    BREAK           reduce using rule 85 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def .)


state 188

    (86) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE . empty RBRACE
    (101) stc_bloque_def -> LBRACE . stc_bloque RBRACE
    (116) empty -> .
    (97) stc_bloque -> . stc_bloque cuerpo
    (98) stc_bloque -> . empty
    (99) stc_bloque -> . RETURN
    (100) stc_bloque -> . RETURN NULL

    RBRACE          reduce using rule 116 (empty -> .)
    ECHO            reduce using rule 116 (empty -> .)
    PRINT           reduce using rule 116 (empty -> .)
    VARIABLE        reduce using rule 116 (empty -> .)
    VAR             reduce using rule 116 (empty -> .)
    DEFINE          reduce using rule 116 (empty -> .)
    READLINE        reduce using rule 116 (empty -> .)
    SUMA            reduce using rule 116 (empty -> .)
    RESTA           reduce using rule 116 (empty -> .)
    MULTIPLICACION  reduce using rule 116 (empty -> .)
    DIVISION        reduce using rule 116 (empty -> .)
    MODULO          reduce using rule 116 (empty -> .)
    SMALLER         reduce using rule 116 (empty -> .)
    GREATER         reduce using rule 116 (empty -> .)
    IS_SMALLER_OR_EQUAL reduce using rule 116 (empty -> .)
    IS_GREATER_OR_EQUAL reduce using rule 116 (empty -> .)
    AND             reduce using rule 116 (empty -> .)
    OR              reduce using rule 116 (empty -> .)
    XOR             reduce using rule 116 (empty -> .)
    IS_EQUAL        reduce using rule 116 (empty -> .)
    IS_NOT_EQUAL    reduce using rule 116 (empty -> .)
    IS_IDENTICAL    reduce using rule 116 (empty -> .)
    IS_NOT_IDENTICAL reduce using rule 116 (empty -> .)
    BOOLEAN_NOT     reduce using rule 116 (empty -> .)
    WHILE           reduce using rule 116 (empty -> .)
    DO              reduce using rule 116 (empty -> .)
    FOR             reduce using rule 116 (empty -> .)
    FOREACH         reduce using rule 116 (empty -> .)
    TRY             reduce using rule 116 (empty -> .)
    LPAREN          reduce using rule 116 (empty -> .)
    SWITCH          reduce using rule 116 (empty -> .)
    GOTO            reduce using rule 116 (empty -> .)
    PUBLIC          reduce using rule 116 (empty -> .)
    PRIVATE         reduce using rule 116 (empty -> .)
    PROTECTED       reduce using rule 116 (empty -> .)
    STATIC          reduce using rule 116 (empty -> .)
    FUNCTION        reduce using rule 116 (empty -> .)
    IF              reduce using rule 116 (empty -> .)
    RETURN          shift and go to state 147

    empty                          shift and go to state 205
    stc_bloque                     shift and go to state 145

state 189

    (84) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON . VOID LBRACE empty RBRACE

    VOID            shift and go to state 206


state 190

    (40) condicion_if -> IF LPAREN condicion RPAREN LBRACE . cuerpo RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat_par
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (21) imprimir -> . ECHO valor SEMI
    (22) imprimir -> . PRINT valor SEMI
    (23) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (24) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion -> . VAR asignacion
    (61) asignacion -> . proteccion asignacion
    (62) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (71) funciones -> . funcion_nparams
    (72) funciones -> . proteccion funcion_nparams
    (73) funciones -> . funcion_opreturn
    (74) funciones -> . proteccion funcion_opreturn
    (75) funciones -> . funcion_blank
    (76) funciones -> . proteccion funcion_blank
    (77) funciones -> . funcion_void
    (63) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (64) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (65) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (66) lectura -> . READLINE LPAREN RPAREN SEMI
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL
    (47) condicion_booleana -> . AND
    (48) condicion_booleana -> . OR
    (49) condicion_booleana -> . XOR
    (50) condicion_booleana -> . IS_EQUAL
    (51) condicion_booleana -> . IS_NOT_EQUAL
    (52) condicion_booleana -> . IS_IDENTICAL
    (53) condicion_booleana -> . IS_NOT_IDENTICAL
    (54) condicion_booleana -> . BOOLEAN_NOT
    (89) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (90) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (91) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (96) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (108) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (113) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (43) condicion_ifelse -> . condicion_if
    (44) condicion_ifelse -> . condicion_if condicion_else
    (45) condicion_ifelse -> . condicion_if condicion_elseif
    (46) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (92) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (117) bgoto -> . GOTO NOMBRE SEMI
    (67) proteccion -> . PUBLIC
    (68) proteccion -> . PRIVATE
    (69) proteccion -> . PROTECTED
    (70) proteccion -> . STATIC
    (80) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (85) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (86) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (84) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (40) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    DEFINE          shift and go to state 30
    READLINE        shift and go to state 31
    SUMA            shift and go to state 32
    RESTA           shift and go to state 33
    MULTIPLICACION  shift and go to state 34
    DIVISION        shift and go to state 35
    MODULO          shift and go to state 36
    SMALLER         shift and go to state 37
    GREATER         shift and go to state 38
    IS_SMALLER_OR_EQUAL shift and go to state 39
    IS_GREATER_OR_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    IS_EQUAL        shift and go to state 44
    IS_NOT_EQUAL    shift and go to state 45
    IS_IDENTICAL    shift and go to state 46
    IS_NOT_IDENTICAL shift and go to state 47
    BOOLEAN_NOT     shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    FOREACH         shift and go to state 52
    TRY             shift and go to state 53
    LPAREN          shift and go to state 22
    SWITCH          shift and go to state 55
    GOTO            shift and go to state 56
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60
    FUNCTION        shift and go to state 61
    IF              shift and go to state 62

    cuerpo                         shift and go to state 207
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat_par            shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    proteccion                     shift and go to state 25
    funcion_nparams                shift and go to state 26
    funcion_opreturn               shift and go to state 27
    funcion_blank                  shift and go to state 28
    funcion_void                   shift and go to state 29
    condicion_if                   shift and go to state 54

state 191

    (24) imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .

    $end            reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    RBRACE          reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    ECHO            reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    PRINT           reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    VARIABLE        reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    VAR             reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    DEFINE          reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    READLINE        reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    SUMA            reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    RESTA           reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    MULTIPLICACION  reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    DIVISION        reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    MODULO          reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    SMALLER         reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    GREATER         reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    AND             reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    OR              reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    XOR             reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_EQUAL        reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_NOT_EQUAL    reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_IDENTICAL    reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IS_NOT_IDENTICAL reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    BOOLEAN_NOT     reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    WHILE           reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    DO              reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    FOR             reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    FOREACH         reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    TRY             reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    LPAREN          reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    SWITCH          reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    GOTO            reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    PUBLIC          reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    PRIVATE         reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    PROTECTED       reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    STATIC          reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    FUNCTION        reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    IF              reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)
    BREAK           reduce using rule 24 (imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI .)


state 192

    (110) array_def -> ARRAY LPAREN array_elmnt RPAREN .

    SEMI            reduce using rule 110 (array_def -> ARRAY LPAREN array_elmnt RPAREN .)


state 193

    (63) constante -> DEFINE LPAREN STRING COMMA valor RPAREN . SEMI

    SEMI            shift and go to state 208


state 194

    (64) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN . SEMI

    SEMI            shift and go to state 209


state 195

    (89) bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque . RBRACE
    (97) stc_bloque -> stc_bloque . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat_par
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (21) imprimir -> . ECHO valor SEMI
    (22) imprimir -> . PRINT valor SEMI
    (23) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (24) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion -> . VAR asignacion
    (61) asignacion -> . proteccion asignacion
    (62) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (71) funciones -> . funcion_nparams
    (72) funciones -> . proteccion funcion_nparams
    (73) funciones -> . funcion_opreturn
    (74) funciones -> . proteccion funcion_opreturn
    (75) funciones -> . funcion_blank
    (76) funciones -> . proteccion funcion_blank
    (77) funciones -> . funcion_void
    (63) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (64) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (65) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (66) lectura -> . READLINE LPAREN RPAREN SEMI
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL
    (47) condicion_booleana -> . AND
    (48) condicion_booleana -> . OR
    (49) condicion_booleana -> . XOR
    (50) condicion_booleana -> . IS_EQUAL
    (51) condicion_booleana -> . IS_NOT_EQUAL
    (52) condicion_booleana -> . IS_IDENTICAL
    (53) condicion_booleana -> . IS_NOT_IDENTICAL
    (54) condicion_booleana -> . BOOLEAN_NOT
    (89) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (90) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (91) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (96) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (108) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (113) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (43) condicion_ifelse -> . condicion_if
    (44) condicion_ifelse -> . condicion_if condicion_else
    (45) condicion_ifelse -> . condicion_if condicion_elseif
    (46) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (92) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (117) bgoto -> . GOTO NOMBRE SEMI
    (67) proteccion -> . PUBLIC
    (68) proteccion -> . PRIVATE
    (69) proteccion -> . PROTECTED
    (70) proteccion -> . STATIC
    (80) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (85) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (86) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (84) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (40) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    RBRACE          shift and go to state 210
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    DEFINE          shift and go to state 30
    READLINE        shift and go to state 31
    SUMA            shift and go to state 32
    RESTA           shift and go to state 33
    MULTIPLICACION  shift and go to state 34
    DIVISION        shift and go to state 35
    MODULO          shift and go to state 36
    SMALLER         shift and go to state 37
    GREATER         shift and go to state 38
    IS_SMALLER_OR_EQUAL shift and go to state 39
    IS_GREATER_OR_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    IS_EQUAL        shift and go to state 44
    IS_NOT_EQUAL    shift and go to state 45
    IS_IDENTICAL    shift and go to state 46
    IS_NOT_IDENTICAL shift and go to state 47
    BOOLEAN_NOT     shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    FOREACH         shift and go to state 52
    TRY             shift and go to state 53
    LPAREN          shift and go to state 22
    SWITCH          shift and go to state 55
    GOTO            shift and go to state 56
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60
    FUNCTION        shift and go to state 61
    IF              shift and go to state 62

    cuerpo                         shift and go to state 178
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat_par            shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    proteccion                     shift and go to state 25
    funcion_nparams                shift and go to state 26
    funcion_opreturn               shift and go to state 27
    funcion_blank                  shift and go to state 28
    funcion_void                   shift and go to state 29
    condicion_if                   shift and go to state 54

state 196

    (90) bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .
    (97) stc_bloque -> stc_bloque . cuerpo
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat_par
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (21) imprimir -> . ECHO valor SEMI
    (22) imprimir -> . PRINT valor SEMI
    (23) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (24) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion -> . VAR asignacion
    (61) asignacion -> . proteccion asignacion
    (62) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (71) funciones -> . funcion_nparams
    (72) funciones -> . proteccion funcion_nparams
    (73) funciones -> . funcion_opreturn
    (74) funciones -> . proteccion funcion_opreturn
    (75) funciones -> . funcion_blank
    (76) funciones -> . proteccion funcion_blank
    (77) funciones -> . funcion_void
    (63) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (64) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (65) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (66) lectura -> . READLINE LPAREN RPAREN SEMI
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL
    (47) condicion_booleana -> . AND
    (48) condicion_booleana -> . OR
    (49) condicion_booleana -> . XOR
    (50) condicion_booleana -> . IS_EQUAL
    (51) condicion_booleana -> . IS_NOT_EQUAL
    (52) condicion_booleana -> . IS_IDENTICAL
    (53) condicion_booleana -> . IS_NOT_IDENTICAL
    (54) condicion_booleana -> . BOOLEAN_NOT
    (89) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (90) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (91) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (96) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (108) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (113) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (43) condicion_ifelse -> . condicion_if
    (44) condicion_ifelse -> . condicion_if condicion_else
    (45) condicion_ifelse -> . condicion_if condicion_elseif
    (46) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (92) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (117) bgoto -> . GOTO NOMBRE SEMI
    (67) proteccion -> . PUBLIC
    (68) proteccion -> . PRIVATE
    (69) proteccion -> . PROTECTED
    (70) proteccion -> . STATIC
    (80) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (85) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (86) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (84) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (40) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for READLINE resolved as shift
  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for SMALLER resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for IS_SMALLER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for IS_GREATER_OR_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for IS_EQUAL resolved as shift
  ! shift/reduce conflict for IS_NOT_EQUAL resolved as shift
  ! shift/reduce conflict for IS_IDENTICAL resolved as shift
  ! shift/reduce conflict for IS_NOT_IDENTICAL resolved as shift
  ! shift/reduce conflict for BOOLEAN_NOT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for GOTO resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .)
    RBRACE          reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .)
    BREAK           reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .)
    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    DEFINE          shift and go to state 30
    READLINE        shift and go to state 31
    SUMA            shift and go to state 32
    RESTA           shift and go to state 33
    MULTIPLICACION  shift and go to state 34
    DIVISION        shift and go to state 35
    MODULO          shift and go to state 36
    SMALLER         shift and go to state 37
    GREATER         shift and go to state 38
    IS_SMALLER_OR_EQUAL shift and go to state 39
    IS_GREATER_OR_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    IS_EQUAL        shift and go to state 44
    IS_NOT_EQUAL    shift and go to state 45
    IS_IDENTICAL    shift and go to state 46
    IS_NOT_IDENTICAL shift and go to state 47
    BOOLEAN_NOT     shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    FOREACH         shift and go to state 52
    TRY             shift and go to state 53
    LPAREN          shift and go to state 22
    SWITCH          shift and go to state 55
    GOTO            shift and go to state 56
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60
    FUNCTION        shift and go to state 61
    IF              shift and go to state 62

  ! ECHO            [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! PRINT           [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! VARIABLE        [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! VAR             [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! DEFINE          [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! READLINE        [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! SUMA            [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! RESTA           [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! MULTIPLICACION  [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! DIVISION        [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! MODULO          [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! SMALLER         [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! GREATER         [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! AND             [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! OR              [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! XOR             [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IS_EQUAL        [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IS_IDENTICAL    [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! BOOLEAN_NOT     [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! WHILE           [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! DO              [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! FOR             [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! FOREACH         [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! TRY             [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! LPAREN          [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! SWITCH          [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! GOTO            [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! PUBLIC          [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! PRIVATE         [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! PROTECTED       [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! STATIC          [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! FUNCTION        [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]
  ! IF              [ reduce using rule 90 (bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque .) ]

    cuerpo                         shift and go to state 178
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat_par            shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    proteccion                     shift and go to state 25
    funcion_nparams                shift and go to state 26
    funcion_opreturn               shift and go to state 27
    funcion_blank                  shift and go to state 28
    funcion_void                   shift and go to state 29
    condicion_if                   shift and go to state 54

state 197

    (96) bfor -> FOR LPAREN asignacion SEMI condicion SEMI . for_incr RPAREN stc_bloque_def
    (102) for_incr -> . VARIABLE SUMA SUMA
    (103) for_incr -> . SUMA SUMA VARIABLE
    (104) for_incr -> . VARIABLE RESTA RESTA
    (105) for_incr -> . RESTA RESTA VARIABLE
    (106) for_incr -> . VARIABLE SUMA EQUALS numero
    (107) for_incr -> . VARIABLE RESTA EQUALS numero

    VARIABLE        shift and go to state 212
    SUMA            shift and go to state 213
    RESTA           shift and go to state 214

    for_incr                       shift and go to state 211

state 198

    (108) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN . stc_bloque_def
    (101) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 118

    stc_bloque_def                 shift and go to state 215

state 199

    (114) catches -> catches CATCH . LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def

    LPAREN          shift and go to state 216


state 200

    (41) condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE . cuerpo RBRACE
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat_par
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (21) imprimir -> . ECHO valor SEMI
    (22) imprimir -> . PRINT valor SEMI
    (23) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (24) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion -> . VAR asignacion
    (61) asignacion -> . proteccion asignacion
    (62) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (71) funciones -> . funcion_nparams
    (72) funciones -> . proteccion funcion_nparams
    (73) funciones -> . funcion_opreturn
    (74) funciones -> . proteccion funcion_opreturn
    (75) funciones -> . funcion_blank
    (76) funciones -> . proteccion funcion_blank
    (77) funciones -> . funcion_void
    (63) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (64) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (65) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (66) lectura -> . READLINE LPAREN RPAREN SEMI
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL
    (47) condicion_booleana -> . AND
    (48) condicion_booleana -> . OR
    (49) condicion_booleana -> . XOR
    (50) condicion_booleana -> . IS_EQUAL
    (51) condicion_booleana -> . IS_NOT_EQUAL
    (52) condicion_booleana -> . IS_IDENTICAL
    (53) condicion_booleana -> . IS_NOT_IDENTICAL
    (54) condicion_booleana -> . BOOLEAN_NOT
    (89) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (90) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (91) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (96) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (108) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (113) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (43) condicion_ifelse -> . condicion_if
    (44) condicion_ifelse -> . condicion_if condicion_else
    (45) condicion_ifelse -> . condicion_if condicion_elseif
    (46) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (92) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (117) bgoto -> . GOTO NOMBRE SEMI
    (67) proteccion -> . PUBLIC
    (68) proteccion -> . PRIVATE
    (69) proteccion -> . PROTECTED
    (70) proteccion -> . STATIC
    (80) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (85) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (86) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (84) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (40) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    DEFINE          shift and go to state 30
    READLINE        shift and go to state 31
    SUMA            shift and go to state 32
    RESTA           shift and go to state 33
    MULTIPLICACION  shift and go to state 34
    DIVISION        shift and go to state 35
    MODULO          shift and go to state 36
    SMALLER         shift and go to state 37
    GREATER         shift and go to state 38
    IS_SMALLER_OR_EQUAL shift and go to state 39
    IS_GREATER_OR_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    IS_EQUAL        shift and go to state 44
    IS_NOT_EQUAL    shift and go to state 45
    IS_IDENTICAL    shift and go to state 46
    IS_NOT_IDENTICAL shift and go to state 47
    BOOLEAN_NOT     shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    FOREACH         shift and go to state 52
    TRY             shift and go to state 53
    LPAREN          shift and go to state 22
    SWITCH          shift and go to state 55
    GOTO            shift and go to state 56
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60
    FUNCTION        shift and go to state 61
    IF              shift and go to state 62

    cuerpo                         shift and go to state 217
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat_par            shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    proteccion                     shift and go to state 25
    funcion_nparams                shift and go to state 26
    funcion_opreturn               shift and go to state 27
    funcion_blank                  shift and go to state 28
    funcion_void                   shift and go to state 29
    condicion_if                   shift and go to state 54

state 201

    (92) bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch . RBRACE

    RBRACE          shift and go to state 218


state 202

    (93) innerSwitch -> CASE . ENTERO COLON cuerpo BREAK SEMI
    (94) innerSwitch -> CASE . ENTERO COLON cuerpo BREAK SEMI innerSwitch

    ENTERO          shift and go to state 219


state 203

    (80) funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .
    (83) funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .

  ! reduce/reduce conflict for $end resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for RBRACE resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for ECHO resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for PRINT resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for VAR resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for DEFINE resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for READLINE resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for SUMA resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for RESTA resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for MULTIPLICACION resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for DIVISION resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for MODULO resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for SMALLER resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for GREATER resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IS_SMALLER_OR_EQUAL resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IS_GREATER_OR_EQUAL resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for AND resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for OR resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for XOR resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IS_EQUAL resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IS_NOT_EQUAL resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IS_IDENTICAL resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IS_NOT_IDENTICAL resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for BOOLEAN_NOT resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for WHILE resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for DO resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for FOR resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for FOREACH resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for TRY resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for LPAREN resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for SWITCH resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for GOTO resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for STATIC resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for IF resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
  ! reduce/reduce conflict for BREAK resolved using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    $end            reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    ECHO            reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    PRINT           reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    VARIABLE        reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    VAR             reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    DEFINE          reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    READLINE        reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    SUMA            reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    RESTA           reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    MULTIPLICACION  reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    DIVISION        reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    MODULO          reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    SMALLER         reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    GREATER         reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_SMALLER_OR_EQUAL reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_GREATER_OR_EQUAL reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    AND             reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    OR              reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    XOR             reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_EQUAL        reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_NOT_EQUAL    reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_IDENTICAL    reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IS_NOT_IDENTICAL reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    BOOLEAN_NOT     reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    WHILE           reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    DO              reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    FOR             reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    FOREACH         reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    TRY             reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    LPAREN          reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    SWITCH          reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    GOTO            reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    PUBLIC          reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    PRIVATE         reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    PROTECTED       reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    STATIC          reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    FUNCTION        reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    IF              reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)
    BREAK           reduce using rule 80 (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .)

  ! $end            [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! RBRACE          [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! ECHO            [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! PRINT           [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! VARIABLE        [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! VAR             [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! DEFINE          [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! READLINE        [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! SUMA            [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! RESTA           [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! MULTIPLICACION  [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! DIVISION        [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! MODULO          [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! SMALLER         [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! GREATER         [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IS_SMALLER_OR_EQUAL [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IS_GREATER_OR_EQUAL [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! AND             [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! OR              [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! XOR             [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IS_EQUAL        [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IS_NOT_EQUAL    [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IS_IDENTICAL    [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IS_NOT_IDENTICAL [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! BOOLEAN_NOT     [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! WHILE           [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! DO              [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! FOR             [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! FOREACH         [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! TRY             [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! LPAREN          [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! SWITCH          [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! GOTO            [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! PUBLIC          [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! PRIVATE         [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! PROTECTED       [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! STATIC          [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! FUNCTION        [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! IF              [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]
  ! BREAK           [ reduce using rule 83 (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def .) ]


state 204

    (81) params_list -> params_list COMMA param .

    RPAREN          reduce using rule 81 (params_list -> params_list COMMA param .)
    COMMA           reduce using rule 81 (params_list -> params_list COMMA param .)


state 205

    (86) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty . RBRACE
    (98) stc_bloque -> empty .

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 220
    ECHO            reduce using rule 98 (stc_bloque -> empty .)
    PRINT           reduce using rule 98 (stc_bloque -> empty .)
    VARIABLE        reduce using rule 98 (stc_bloque -> empty .)
    VAR             reduce using rule 98 (stc_bloque -> empty .)
    DEFINE          reduce using rule 98 (stc_bloque -> empty .)
    READLINE        reduce using rule 98 (stc_bloque -> empty .)
    SUMA            reduce using rule 98 (stc_bloque -> empty .)
    RESTA           reduce using rule 98 (stc_bloque -> empty .)
    MULTIPLICACION  reduce using rule 98 (stc_bloque -> empty .)
    DIVISION        reduce using rule 98 (stc_bloque -> empty .)
    MODULO          reduce using rule 98 (stc_bloque -> empty .)
    SMALLER         reduce using rule 98 (stc_bloque -> empty .)
    GREATER         reduce using rule 98 (stc_bloque -> empty .)
    IS_SMALLER_OR_EQUAL reduce using rule 98 (stc_bloque -> empty .)
    IS_GREATER_OR_EQUAL reduce using rule 98 (stc_bloque -> empty .)
    AND             reduce using rule 98 (stc_bloque -> empty .)
    OR              reduce using rule 98 (stc_bloque -> empty .)
    XOR             reduce using rule 98 (stc_bloque -> empty .)
    IS_EQUAL        reduce using rule 98 (stc_bloque -> empty .)
    IS_NOT_EQUAL    reduce using rule 98 (stc_bloque -> empty .)
    IS_IDENTICAL    reduce using rule 98 (stc_bloque -> empty .)
    IS_NOT_IDENTICAL reduce using rule 98 (stc_bloque -> empty .)
    BOOLEAN_NOT     reduce using rule 98 (stc_bloque -> empty .)
    WHILE           reduce using rule 98 (stc_bloque -> empty .)
    DO              reduce using rule 98 (stc_bloque -> empty .)
    FOR             reduce using rule 98 (stc_bloque -> empty .)
    FOREACH         reduce using rule 98 (stc_bloque -> empty .)
    TRY             reduce using rule 98 (stc_bloque -> empty .)
    LPAREN          reduce using rule 98 (stc_bloque -> empty .)
    SWITCH          reduce using rule 98 (stc_bloque -> empty .)
    GOTO            reduce using rule 98 (stc_bloque -> empty .)
    PUBLIC          reduce using rule 98 (stc_bloque -> empty .)
    PRIVATE         reduce using rule 98 (stc_bloque -> empty .)
    PROTECTED       reduce using rule 98 (stc_bloque -> empty .)
    STATIC          reduce using rule 98 (stc_bloque -> empty .)
    FUNCTION        reduce using rule 98 (stc_bloque -> empty .)
    IF              reduce using rule 98 (stc_bloque -> empty .)

  ! RBRACE          [ reduce using rule 98 (stc_bloque -> empty .) ]


state 206

    (84) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID . LBRACE empty RBRACE

    LBRACE          shift and go to state 221


state 207

    (40) condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 222


state 208

    (63) constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .

    $end            reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    RBRACE          reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    ECHO            reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    PRINT           reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    VARIABLE        reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    VAR             reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    DEFINE          reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    READLINE        reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    SUMA            reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    RESTA           reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    DIVISION        reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    MODULO          reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    SMALLER         reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    GREATER         reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    AND             reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    OR              reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    XOR             reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_EQUAL        reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    WHILE           reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    DO              reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    FOR             reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    FOREACH         reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    TRY             reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    LPAREN          reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    SWITCH          reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    GOTO            reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    PUBLIC          reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    PRIVATE         reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    PROTECTED       reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    STATIC          reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    FUNCTION        reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    IF              reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)
    BREAK           reduce using rule 63 (constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI .)


state 209

    (64) constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .

    $end            reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    RBRACE          reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    ECHO            reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    PRINT           reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    VARIABLE        reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    VAR             reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    DEFINE          reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    READLINE        reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    SUMA            reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    RESTA           reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    MULTIPLICACION  reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    DIVISION        reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    MODULO          reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    SMALLER         reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    GREATER         reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_SMALLER_OR_EQUAL reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_GREATER_OR_EQUAL reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    AND             reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    OR              reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    XOR             reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_EQUAL        reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_NOT_EQUAL    reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_IDENTICAL    reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IS_NOT_IDENTICAL reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    BOOLEAN_NOT     reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    WHILE           reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    DO              reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    FOR             reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    FOREACH         reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    TRY             reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    LPAREN          reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    SWITCH          reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    GOTO            reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    PUBLIC          reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    PRIVATE         reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    PROTECTED       reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    STATIC          reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    FUNCTION        reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    IF              reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)
    BREAK           reduce using rule 64 (constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI .)


state 210

    (89) bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .

    $end            reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    RBRACE          reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    ECHO            reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    PRINT           reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    VARIABLE        reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    VAR             reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    DEFINE          reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    READLINE        reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    SUMA            reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    RESTA           reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    MULTIPLICACION  reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    DIVISION        reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    MODULO          reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    SMALLER         reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    GREATER         reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    AND             reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    OR              reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    XOR             reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_EQUAL        reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_NOT_EQUAL    reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_IDENTICAL    reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    BOOLEAN_NOT     reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    WHILE           reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    DO              reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    FOR             reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    FOREACH         reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    TRY             reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    LPAREN          reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    SWITCH          reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    GOTO            reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    PUBLIC          reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    PRIVATE         reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    PROTECTED       reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    STATIC          reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    FUNCTION        reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    IF              reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)
    BREAK           reduce using rule 89 (bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE .)


state 211

    (96) bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr . RPAREN stc_bloque_def

    RPAREN          shift and go to state 223


state 212

    (102) for_incr -> VARIABLE . SUMA SUMA
    (104) for_incr -> VARIABLE . RESTA RESTA
    (106) for_incr -> VARIABLE . SUMA EQUALS numero
    (107) for_incr -> VARIABLE . RESTA EQUALS numero

    SUMA            shift and go to state 224
    RESTA           shift and go to state 225


state 213

    (103) for_incr -> SUMA . SUMA VARIABLE

    SUMA            shift and go to state 226


state 214

    (105) for_incr -> RESTA . RESTA VARIABLE

    RESTA           shift and go to state 227


state 215

    (108) bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .

    $end            reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    ECHO            reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    PRINT           reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    VARIABLE        reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    VAR             reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    DEFINE          reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    READLINE        reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    SUMA            reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    RESTA           reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    MULTIPLICACION  reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    DIVISION        reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    MODULO          reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    SMALLER         reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    GREATER         reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_SMALLER_OR_EQUAL reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_GREATER_OR_EQUAL reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    AND             reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    OR              reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    XOR             reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_EQUAL        reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_NOT_EQUAL    reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_IDENTICAL    reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IS_NOT_IDENTICAL reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    BOOLEAN_NOT     reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    WHILE           reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    DO              reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    FOR             reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    FOREACH         reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    TRY             reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    LPAREN          reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    SWITCH          reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    GOTO            reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    PUBLIC          reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    PRIVATE         reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    PROTECTED       reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    STATIC          reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    FUNCTION        reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    IF              reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)
    BREAK           reduce using rule 108 (bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def .)


state 216

    (114) catches -> catches CATCH LPAREN . NOMBRE VARIABLE RPAREN stc_bloque_def

    NOMBRE          shift and go to state 228


state 217

    (41) condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo . RBRACE

    RBRACE          shift and go to state 229


state 218

    (92) bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .

    $end            reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    RBRACE          reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    ECHO            reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    PRINT           reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    VARIABLE        reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    VAR             reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    DEFINE          reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    READLINE        reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    SUMA            reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    RESTA           reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    MULTIPLICACION  reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    DIVISION        reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    MODULO          reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    SMALLER         reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    GREATER         reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    AND             reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    OR              reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    XOR             reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    IS_EQUAL        reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    IS_NOT_EQUAL    reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    IS_IDENTICAL    reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    BOOLEAN_NOT     reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    WHILE           reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    DO              reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    FOR             reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    FOREACH         reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    TRY             reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    LPAREN          reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    SWITCH          reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    GOTO            reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    PUBLIC          reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    PRIVATE         reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    PROTECTED       reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    STATIC          reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    FUNCTION        reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    IF              reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)
    BREAK           reduce using rule 92 (bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE .)


state 219

    (93) innerSwitch -> CASE ENTERO . COLON cuerpo BREAK SEMI
    (94) innerSwitch -> CASE ENTERO . COLON cuerpo BREAK SEMI innerSwitch

    COLON           shift and go to state 230


state 220

    (86) funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .

    $end            reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    RBRACE          reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    ECHO            reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    PRINT           reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    VARIABLE        reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    VAR             reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    DEFINE          reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    READLINE        reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    SUMA            reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    RESTA           reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    MULTIPLICACION  reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    DIVISION        reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    MODULO          reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    SMALLER         reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    GREATER         reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    AND             reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    OR              reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    XOR             reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IS_EQUAL        reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IS_NOT_EQUAL    reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IS_IDENTICAL    reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    BOOLEAN_NOT     reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    WHILE           reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    DO              reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    FOR             reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    FOREACH         reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    TRY             reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    LPAREN          reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    SWITCH          reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    GOTO            reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    PUBLIC          reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    PRIVATE         reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    PROTECTED       reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    STATIC          reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    FUNCTION        reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    IF              reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)
    BREAK           reduce using rule 86 (funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE .)


state 221

    (84) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE . empty RBRACE
    (116) empty -> .

    RBRACE          reduce using rule 116 (empty -> .)

    empty                          shift and go to state 231

state 222

    (40) condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .

    ELSE            reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    ELSEIF          reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    $end            reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    ECHO            reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PRINT           reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    VARIABLE        reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    VAR             reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DEFINE          reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    READLINE        reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SUMA            reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RESTA           reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    MULTIPLICACION  reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DIVISION        reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    MODULO          reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SMALLER         reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    GREATER         reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    AND             reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    OR              reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    XOR             reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_EQUAL        reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_NOT_EQUAL    reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_IDENTICAL    reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    BOOLEAN_NOT     reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    WHILE           reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DO              reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FOR             reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FOREACH         reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    TRY             reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    LPAREN          reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SWITCH          reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    GOTO            reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PUBLIC          reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PRIVATE         reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PROTECTED       reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    STATIC          reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FUNCTION        reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IF              reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    BREAK           reduce using rule 40 (condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)


state 223

    (96) bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN . stc_bloque_def
    (101) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 118

    stc_bloque_def                 shift and go to state 232

state 224

    (102) for_incr -> VARIABLE SUMA . SUMA
    (106) for_incr -> VARIABLE SUMA . EQUALS numero

    SUMA            shift and go to state 233
    EQUALS          shift and go to state 234


state 225

    (104) for_incr -> VARIABLE RESTA . RESTA
    (107) for_incr -> VARIABLE RESTA . EQUALS numero

    RESTA           shift and go to state 235
    EQUALS          shift and go to state 236


state 226

    (103) for_incr -> SUMA SUMA . VARIABLE

    VARIABLE        shift and go to state 237


state 227

    (105) for_incr -> RESTA RESTA . VARIABLE

    VARIABLE        shift and go to state 238


state 228

    (114) catches -> catches CATCH LPAREN NOMBRE . VARIABLE RPAREN stc_bloque_def

    VARIABLE        shift and go to state 239


state 229

    (41) condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .

    ELSE            reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    $end            reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RBRACE          reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    ECHO            reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PRINT           reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    VARIABLE        reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    VAR             reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DEFINE          reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    READLINE        reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SUMA            reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    RESTA           reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    MULTIPLICACION  reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DIVISION        reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    MODULO          reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SMALLER         reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    GREATER         reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    AND             reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    OR              reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    XOR             reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_EQUAL        reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_NOT_EQUAL    reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_IDENTICAL    reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    BOOLEAN_NOT     reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    WHILE           reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    DO              reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FOR             reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FOREACH         reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    TRY             reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    LPAREN          reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    SWITCH          reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    GOTO            reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PUBLIC          reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PRIVATE         reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    PROTECTED       reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    STATIC          reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    FUNCTION        reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    IF              reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)
    BREAK           reduce using rule 41 (condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE .)


state 230

    (93) innerSwitch -> CASE ENTERO COLON . cuerpo BREAK SEMI
    (94) innerSwitch -> CASE ENTERO COLON . cuerpo BREAK SEMI innerSwitch
    (1) cuerpo -> . imprimir
    (2) cuerpo -> . asignacion
    (3) cuerpo -> . asignacion_array
    (4) cuerpo -> . funciones
    (5) cuerpo -> . constante
    (6) cuerpo -> . lectura
    (7) cuerpo -> . operadores
    (8) cuerpo -> . operador_logico
    (9) cuerpo -> . condicion_booleana
    (10) cuerpo -> . bwhile
    (11) cuerpo -> . bdo
    (12) cuerpo -> . bfor
    (13) cuerpo -> . bforeach
    (14) cuerpo -> . btry
    (15) cuerpo -> . operaciones_mat_par
    (16) cuerpo -> . condicion_ifelse
    (17) cuerpo -> . bswitch
    (18) cuerpo -> . bgoto
    (21) imprimir -> . ECHO valor SEMI
    (22) imprimir -> . PRINT valor SEMI
    (23) imprimir -> . PRINT LPAREN valor RPAREN SEMI
    (24) imprimir -> . ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI
    (59) asignacion -> . VARIABLE EQUALS valor SEMI
    (60) asignacion -> . VAR asignacion
    (61) asignacion -> . proteccion asignacion
    (62) asignacion_array -> . VARIABLE EQUALS array_def SEMI
    (71) funciones -> . funcion_nparams
    (72) funciones -> . proteccion funcion_nparams
    (73) funciones -> . funcion_opreturn
    (74) funciones -> . proteccion funcion_opreturn
    (75) funciones -> . funcion_blank
    (76) funciones -> . proteccion funcion_blank
    (77) funciones -> . funcion_void
    (63) constante -> . DEFINE LPAREN STRING COMMA valor RPAREN SEMI
    (64) constante -> . DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI
    (65) lectura -> . READLINE LPAREN STRING RPAREN SEMI
    (66) lectura -> . READLINE LPAREN RPAREN SEMI
    (31) operadores -> . SUMA
    (32) operadores -> . RESTA
    (33) operadores -> . MULTIPLICACION
    (34) operadores -> . DIVISION
    (35) operadores -> . MODULO
    (36) operador_logico -> . SMALLER
    (37) operador_logico -> . GREATER
    (38) operador_logico -> . IS_SMALLER_OR_EQUAL
    (39) operador_logico -> . IS_GREATER_OR_EQUAL
    (47) condicion_booleana -> . AND
    (48) condicion_booleana -> . OR
    (49) condicion_booleana -> . XOR
    (50) condicion_booleana -> . IS_EQUAL
    (51) condicion_booleana -> . IS_NOT_EQUAL
    (52) condicion_booleana -> . IS_IDENTICAL
    (53) condicion_booleana -> . IS_NOT_IDENTICAL
    (54) condicion_booleana -> . BOOLEAN_NOT
    (89) bwhile -> . WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE
    (90) bwhile -> . WHILE LPAREN condicion RPAREN COLON stc_bloque
    (91) bdo -> . DO LBRACE cuerpo RBRACE bwhile
    (96) bfor -> . FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def
    (108) bforeach -> . FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def
    (113) btry -> . TRY LBRACE stc_bloque_def RBRACE catches
    (57) operaciones_mat_par -> . LPAREN valor operadores valor RPAREN
    (58) operaciones_mat_par -> . LPAREN valor operadores operaciones_mat_par RPAREN
    (43) condicion_ifelse -> . condicion_if
    (44) condicion_ifelse -> . condicion_if condicion_else
    (45) condicion_ifelse -> . condicion_if condicion_elseif
    (46) condicion_ifelse -> . condicion_if condicion_elseif condicion_else
    (92) bswitch -> . SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE
    (117) bgoto -> . GOTO NOMBRE SEMI
    (67) proteccion -> . PUBLIC
    (68) proteccion -> . PRIVATE
    (69) proteccion -> . PROTECTED
    (70) proteccion -> . STATIC
    (80) funcion_nparams -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (83) funcion_opreturn -> . FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def
    (85) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def
    (86) funcion_blank -> . FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE
    (84) funcion_void -> . FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE
    (40) condicion_if -> . IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE

    ECHO            shift and go to state 20
    PRINT           shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    DEFINE          shift and go to state 30
    READLINE        shift and go to state 31
    SUMA            shift and go to state 32
    RESTA           shift and go to state 33
    MULTIPLICACION  shift and go to state 34
    DIVISION        shift and go to state 35
    MODULO          shift and go to state 36
    SMALLER         shift and go to state 37
    GREATER         shift and go to state 38
    IS_SMALLER_OR_EQUAL shift and go to state 39
    IS_GREATER_OR_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    XOR             shift and go to state 43
    IS_EQUAL        shift and go to state 44
    IS_NOT_EQUAL    shift and go to state 45
    IS_IDENTICAL    shift and go to state 46
    IS_NOT_IDENTICAL shift and go to state 47
    BOOLEAN_NOT     shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    FOREACH         shift and go to state 52
    TRY             shift and go to state 53
    LPAREN          shift and go to state 22
    SWITCH          shift and go to state 55
    GOTO            shift and go to state 56
    PUBLIC          shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    STATIC          shift and go to state 60
    FUNCTION        shift and go to state 61
    IF              shift and go to state 62

    cuerpo                         shift and go to state 240
    imprimir                       shift and go to state 2
    asignacion                     shift and go to state 3
    asignacion_array               shift and go to state 4
    funciones                      shift and go to state 5
    constante                      shift and go to state 6
    lectura                        shift and go to state 7
    operadores                     shift and go to state 8
    operador_logico                shift and go to state 9
    condicion_booleana             shift and go to state 10
    bwhile                         shift and go to state 11
    bdo                            shift and go to state 12
    bfor                           shift and go to state 13
    bforeach                       shift and go to state 14
    btry                           shift and go to state 15
    operaciones_mat_par            shift and go to state 16
    condicion_ifelse               shift and go to state 17
    bswitch                        shift and go to state 18
    bgoto                          shift and go to state 19
    proteccion                     shift and go to state 25
    funcion_nparams                shift and go to state 26
    funcion_opreturn               shift and go to state 27
    funcion_blank                  shift and go to state 28
    funcion_void                   shift and go to state 29
    condicion_if                   shift and go to state 54

state 231

    (84) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty . RBRACE

    RBRACE          shift and go to state 241


state 232

    (96) bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .

    $end            reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    ECHO            reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    PRINT           reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    VARIABLE        reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    VAR             reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    DEFINE          reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    READLINE        reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    SUMA            reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    RESTA           reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    MULTIPLICACION  reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    DIVISION        reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    MODULO          reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    SMALLER         reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    GREATER         reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_SMALLER_OR_EQUAL reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_GREATER_OR_EQUAL reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    AND             reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    OR              reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    XOR             reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_EQUAL        reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_NOT_EQUAL    reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_IDENTICAL    reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IS_NOT_IDENTICAL reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    BOOLEAN_NOT     reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    WHILE           reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    DO              reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    FOR             reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    FOREACH         reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    TRY             reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    LPAREN          reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    SWITCH          reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    GOTO            reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    PUBLIC          reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    PRIVATE         reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    PROTECTED       reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    STATIC          reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    FUNCTION        reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    IF              reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)
    BREAK           reduce using rule 96 (bfor -> FOR LPAREN asignacion SEMI condicion SEMI for_incr RPAREN stc_bloque_def .)


state 233

    (102) for_incr -> VARIABLE SUMA SUMA .

    RPAREN          reduce using rule 102 (for_incr -> VARIABLE SUMA SUMA .)


state 234

    (106) for_incr -> VARIABLE SUMA EQUALS . numero
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    ENTERO          shift and go to state 65
    DECIMAL         shift and go to state 69

    numero                         shift and go to state 242

state 235

    (104) for_incr -> VARIABLE RESTA RESTA .

    RPAREN          reduce using rule 104 (for_incr -> VARIABLE RESTA RESTA .)


state 236

    (107) for_incr -> VARIABLE RESTA EQUALS . numero
    (29) numero -> . ENTERO
    (30) numero -> . DECIMAL

    ENTERO          shift and go to state 65
    DECIMAL         shift and go to state 69

    numero                         shift and go to state 243

state 237

    (103) for_incr -> SUMA SUMA VARIABLE .

    RPAREN          reduce using rule 103 (for_incr -> SUMA SUMA VARIABLE .)


state 238

    (105) for_incr -> RESTA RESTA VARIABLE .

    RPAREN          reduce using rule 105 (for_incr -> RESTA RESTA VARIABLE .)


state 239

    (114) catches -> catches CATCH LPAREN NOMBRE VARIABLE . RPAREN stc_bloque_def

    RPAREN          shift and go to state 244


state 240

    (93) innerSwitch -> CASE ENTERO COLON cuerpo . BREAK SEMI
    (94) innerSwitch -> CASE ENTERO COLON cuerpo . BREAK SEMI innerSwitch

    BREAK           shift and go to state 245


state 241

    (84) funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .

    $end            reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    RBRACE          reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    ECHO            reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    PRINT           reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    VARIABLE        reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    VAR             reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    DEFINE          reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    READLINE        reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    SUMA            reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    RESTA           reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    MULTIPLICACION  reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    DIVISION        reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    MODULO          reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    SMALLER         reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    GREATER         reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    IS_SMALLER_OR_EQUAL reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    IS_GREATER_OR_EQUAL reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    AND             reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    OR              reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    XOR             reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    IS_EQUAL        reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    IS_NOT_EQUAL    reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    IS_IDENTICAL    reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    IS_NOT_IDENTICAL reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    BOOLEAN_NOT     reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    WHILE           reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    DO              reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    FOR             reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    FOREACH         reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    TRY             reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    LPAREN          reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    SWITCH          reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    GOTO            reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    PUBLIC          reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    PRIVATE         reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    PROTECTED       reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    STATIC          reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    FUNCTION        reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    IF              reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)
    BREAK           reduce using rule 84 (funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE .)


state 242

    (106) for_incr -> VARIABLE SUMA EQUALS numero .

    RPAREN          reduce using rule 106 (for_incr -> VARIABLE SUMA EQUALS numero .)


state 243

    (107) for_incr -> VARIABLE RESTA EQUALS numero .

    RPAREN          reduce using rule 107 (for_incr -> VARIABLE RESTA EQUALS numero .)


state 244

    (114) catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN . stc_bloque_def
    (101) stc_bloque_def -> . LBRACE stc_bloque RBRACE

    LBRACE          shift and go to state 118

    stc_bloque_def                 shift and go to state 246

state 245

    (93) innerSwitch -> CASE ENTERO COLON cuerpo BREAK . SEMI
    (94) innerSwitch -> CASE ENTERO COLON cuerpo BREAK . SEMI innerSwitch

    SEMI            shift and go to state 247


state 246

    (114) catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .

    CATCH           reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    $end            reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    RBRACE          reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    ECHO            reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    PRINT           reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    VARIABLE        reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    VAR             reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    DEFINE          reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    READLINE        reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    SUMA            reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    RESTA           reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    MULTIPLICACION  reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    DIVISION        reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    MODULO          reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    SMALLER         reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    GREATER         reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_SMALLER_OR_EQUAL reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_GREATER_OR_EQUAL reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    AND             reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    OR              reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    XOR             reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_EQUAL        reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_NOT_EQUAL    reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_IDENTICAL    reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IS_NOT_IDENTICAL reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    BOOLEAN_NOT     reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    WHILE           reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    DO              reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    FOR             reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    FOREACH         reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    TRY             reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    LPAREN          reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    SWITCH          reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    GOTO            reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    PUBLIC          reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    PRIVATE         reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    PROTECTED       reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    STATIC          reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    FUNCTION        reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    IF              reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)
    BREAK           reduce using rule 114 (catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def .)


state 247

    (93) innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI .
    (94) innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI . innerSwitch
    (93) innerSwitch -> . CASE ENTERO COLON cuerpo BREAK SEMI
    (94) innerSwitch -> . CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch

    RBRACE          reduce using rule 93 (innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI .)
    CASE            shift and go to state 202

    innerSwitch                    shift and go to state 248

state 248

    (94) innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch .

    RBRACE          reduce using rule 94 (innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SMALLER in state 113 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 113 resolved as shift
WARNING: shift/reduce conflict for IS_SMALLER_OR_EQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for IS_GREATER_OR_EQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 133 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 196 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 196 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 196 resolved as shift
WARNING: shift/reduce conflict for VAR in state 196 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 196 resolved as shift
WARNING: shift/reduce conflict for READLINE in state 196 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 196 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 196 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 196 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 196 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 196 resolved as shift
WARNING: shift/reduce conflict for SMALLER in state 196 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 196 resolved as shift
WARNING: shift/reduce conflict for IS_SMALLER_OR_EQUAL in state 196 resolved as shift
WARNING: shift/reduce conflict for IS_GREATER_OR_EQUAL in state 196 resolved as shift
WARNING: shift/reduce conflict for AND in state 196 resolved as shift
WARNING: shift/reduce conflict for OR in state 196 resolved as shift
WARNING: shift/reduce conflict for XOR in state 196 resolved as shift
WARNING: shift/reduce conflict for IS_EQUAL in state 196 resolved as shift
WARNING: shift/reduce conflict for IS_NOT_EQUAL in state 196 resolved as shift
WARNING: shift/reduce conflict for IS_IDENTICAL in state 196 resolved as shift
WARNING: shift/reduce conflict for IS_NOT_IDENTICAL in state 196 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN_NOT in state 196 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 196 resolved as shift
WARNING: shift/reduce conflict for DO in state 196 resolved as shift
WARNING: shift/reduce conflict for FOR in state 196 resolved as shift
WARNING: shift/reduce conflict for FOREACH in state 196 resolved as shift
WARNING: shift/reduce conflict for TRY in state 196 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 196 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 196 resolved as shift
WARNING: shift/reduce conflict for GOTO in state 196 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 196 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 196 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 196 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 196 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 196 resolved as shift
WARNING: shift/reduce conflict for IF in state 196 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 205 resolved as shift
WARNING: reduce/reduce conflict in state 203 resolved using rule (funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def)
WARNING: rejected rule (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def) in state 203
WARNING: Rule (funcion_opreturn -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def) is never reduced
