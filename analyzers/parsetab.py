
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY AS BOOL BOOLEAN_NOT BREAK CASE CATCH CLOSE_TAG COLON COMENTARIOS COMMA CONCAT CONTINUE DECIMAL DEFAULT DEFINE DIVISION DIV_EQUAL DO DOC_COMENTARIOS DOUBLE ECHO ELSE ELSEIF ENTERO EQUALS EXIT FALSE FLOAT FOR FOREACH FUNCTION FWRITE GOTO GREATER IF INT IS_EQUAL IS_GREATER_OR_EQUAL IS_IDENTICAL IS_NOT_EQUAL IS_NOT_IDENTICAL IS_SMALLER_OR_EQUAL LBRACE LBRACKET LPAREN MINUS_EQUAL MODULO MOD_EQUAL MULTIPLICACION MUL_EQUAL NEW NOMBRE NOT NULL OPEN_TAG OR PLUS_EQUAL PRINT PRIVATE PROTECTED PUBLIC RAND RBRACE RBRACKET READLINE RESTA RETURN RPAREN SEMI SMALLER SPLQUEUE SPLSTACK STATIC STRING SUMA SWITCH TRIM TRUE TRY VAR VARIABLE VOID WHILE XORcuerpo : imprimir\n            | asignacion\n            | asignacion_array\n            | funciones\n            | constante\n            | lectura\n            | operadores\n            | operador_logico\n            | condicion_booleana\n            | bwhile\n            | bdo\n            | bfor\n            | bforeach\n            | btry\n            | operaciones_mat\n            | condicion_ifelse \n            | bswitch\n            | bgoto\n            | bcolas\n            | bpila\n            | incrementos_mat\n            | bcortes\n            | brand\n  imprimir : ECHO valor SEMI\n            | PRINT valor SEMI\n            | PRINT LPAREN valor RPAREN SEMI\n            | ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI\n  valor : numero\n            | VARIABLE\n            | STRING\n            | NOMBRE\n  numero : ENTERO\n          | DECIMAL\n  operadores : SUMA \n                  | RESTA\n                  | MULTIPLICACION\n                  | DIVISION\n                  | MODULO\n  operador_logico :  SMALLER\n                        | GREATER\n                        | IS_SMALLER_OR_EQUAL\n                        | IS_GREATER_OR_EQUAL\n  incrementos_mat :  MINUS_EQUAL\n                        | MOD_EQUAL\n                        | MUL_EQUAL\n                        | PLUS_EQUAL\n  condicion_if :  IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_elseif :  ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_else :  ELSE LBRACE cuerpo RBRACE\n  condicion_ifelse :  condicion_if\n                      | condicion_if condicion_else\n                      | condicion_if condicion_elseif\n                      | condicion_if condicion_elseif condicion_else\n  condicion_booleana :  AND\n                        | OR\n                        | XOR\n                        | IS_EQUAL\n                        | IS_NOT_EQUAL\n                        | IS_IDENTICAL\n                        | IS_NOT_IDENTICAL\n                        | BOOLEAN_NOT\n  operaciones_mat :  valor operadores valor\n                        | valor operadores operaciones_mat\n                        | operaciones_mat_par\n                       \n  operaciones_mat_par :  LPAREN valor operadores valor RPAREN\n                          |  LPAREN valor operadores operaciones_mat_par RPAREN\n                          |  valor operadores operaciones_mat_par \n  asignacion : VARIABLE EQUALS valor SEMI\n                | VAR asignacion\n                | proteccion asignacion\n  asignacion_array : VARIABLE EQUALS array_def SEMIconstante : DEFINE LPAREN STRING COMMA valor RPAREN SEMI\n          | DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMIlectura : READLINE LPAREN STRING RPAREN SEMI\n          | READLINE LPAREN RPAREN SEMIbrand : RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMIproteccion : PUBLIC\n          | PRIVATE\n          | PROTECTED\n          | STATIC\n  funciones : funcion_nparams\n              | proteccion funcion_nparams\n              | funcion_blank\n              | proteccion funcion_blank\n              | funcion_void\n  param : VARIABLE\n          | asignacionfuncion_nparams : FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_defparams_list : params_list COMMA param\n                      | paramfuncion_void : FUNCTION NOMBRE LPAREN  RPAREN COLON VOID LBRACE empty RBRACE funcion_blank : FUNCTION NOMBRE LPAREN  RPAREN stc_bloque_def\n                    | FUNCTION NOMBRE LPAREN  RPAREN LBRACE empty RBRACE\n   condicion : VARIABLE operador_logico VARIABLE\n            | valor operador_logico valor \n            | VARIABLE operador_logico valor\n   bwhile : WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE \n  | WHILE LPAREN condicion RPAREN COLON stc_bloque  \n   bdo : DO LBRACE cuerpo RBRACE bwhile \n   bswitch : SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE innerSwitch : CASE ENTERO COLON cuerpo BREAK SEMI\n    | CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch \n   bcolas : VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI\n  bfor : FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_defstc_bloque : stc_bloque SEMI cuerpo\n        | empty\n        | RETURN\n        | RETURN NULL\n        stc_bloque_def : LBRACE stc_bloque RBRACEfor_incr : VARIABLE SUMA SUMA\n          | SUMA SUMA VARIABLE\n          | VARIABLE RESTA RESTA\n          | RESTA RESTA VARIABLE\n          | VARIABLE SUMA EQUALS numero\n          | VARIABLE RESTA EQUALS numerobforeach :  FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_defarray_def : ARRAY LPAREN RPAREN\n          | ARRAY LPAREN array_elmnt RPARENarray_elmnt : array_elmnt COMMA valor\n            | valorbtry : TRY LBRACE stc_bloque_def RBRACE catchescatches : catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def\n          | emptyempty : bgoto : GOTO NOMBRE SEMIbpila : VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMIbcortes : EXIT SEMI\n              | BREAK SEMI\n              | DEFAULT SEMI\n              | CONTINUE SEMI\n   '
    
_lr_action_items = {'ECHO':([0,101,145,209,222,241,279,],[25,25,25,25,25,25,25,]),'PRINT':([0,101,145,209,222,241,279,],[27,27,27,27,27,27,27,]),'VARIABLE':([0,25,27,28,32,33,40,41,42,43,44,45,46,47,48,75,76,77,78,86,88,90,91,93,94,100,101,102,103,109,117,125,130,140,145,146,150,156,160,161,162,167,168,171,188,206,209,218,222,229,241,259,260,277,279,],[31,85,85,85,92,92,-34,-35,-36,-37,-38,-39,-40,-41,-42,-77,-78,-79,-80,85,85,85,-69,92,-70,137,31,92,141,147,137,85,85,137,31,137,183,-68,85,183,85,202,85,207,85,235,31,183,31,85,31,275,276,283,31,]),'VAR':([0,32,33,75,76,77,78,93,101,102,145,150,161,209,218,222,241,279,],[32,32,32,-77,-78,-79,-80,32,32,32,32,32,32,32,32,32,32,32,]),'DEFINE':([0,101,145,209,222,241,279,],[37,37,37,37,37,37,37,]),'READLINE':([0,101,145,209,222,241,279,],[39,39,39,39,39,39,39,]),'SUMA':([0,26,29,30,31,38,80,82,85,89,101,120,145,154,206,209,222,224,235,236,241,257,279,],[40,40,-31,-32,-29,-30,-28,-33,-29,40,40,40,40,40,236,40,40,40,257,259,40,271,40,]),'RESTA':([0,26,29,30,31,38,80,82,85,89,101,120,145,154,206,209,222,224,235,237,241,258,279,],[41,41,-31,-32,-29,-30,-28,-33,-29,41,41,41,41,41,237,41,41,41,258,260,41,273,41,]),'MULTIPLICACION':([0,26,29,30,31,38,80,82,85,89,101,120,145,154,209,222,224,241,279,],[42,42,-31,-32,-29,-30,-28,-33,-29,42,42,42,42,42,42,42,42,42,42,]),'DIVISION':([0,26,29,30,31,38,80,82,85,89,101,120,145,154,209,222,224,241,279,],[43,43,-31,-32,-29,-30,-28,-33,-29,43,43,43,43,43,43,43,43,43,43,]),'MODULO':([0,26,29,30,31,38,80,82,85,89,101,120,145,154,209,222,224,241,279,],[44,44,-31,-32,-29,-30,-28,-33,-29,44,44,44,44,44,44,44,44,44,44,]),'SMALLER':([0,29,30,38,80,82,101,137,138,145,209,222,241,279,],[45,-31,-32,-30,-28,-33,45,45,45,45,45,45,45,45,]),'GREATER':([0,29,30,38,80,82,101,137,138,145,209,222,241,279,],[46,-31,-32,-30,-28,-33,46,46,46,46,46,46,46,46,]),'IS_SMALLER_OR_EQUAL':([0,29,30,38,80,82,101,137,138,145,209,222,241,279,],[47,-31,-32,-30,-28,-33,47,47,47,47,47,47,47,47,]),'IS_GREATER_OR_EQUAL':([0,29,30,38,80,82,101,137,138,145,209,222,241,279,],[48,-31,-32,-30,-28,-33,48,48,48,48,48,48,48,48,]),'AND':([0,101,145,209,222,241,279,],[49,49,49,49,49,49,49,]),'OR':([0,101,145,209,222,241,279,],[50,50,50,50,50,50,50,]),'XOR':([0,101,145,209,222,241,279,],[51,51,51,51,51,51,51,]),'IS_EQUAL':([0,101,145,209,222,241,279,],[52,52,52,52,52,52,52,]),'IS_NOT_EQUAL':([0,101,145,209,222,241,279,],[53,53,53,53,53,53,53,]),'IS_IDENTICAL':([0,101,145,209,222,241,279,],[54,54,54,54,54,54,54,]),'IS_NOT_IDENTICAL':([0,101,145,209,222,241,279,],[55,55,55,55,55,55,55,]),'BOOLEAN_NOT':([0,101,145,209,222,241,279,],[56,56,56,56,56,56,56,]),'WHILE':([0,101,145,169,209,222,241,279,],[57,57,57,57,57,57,57,57,]),'DO':([0,101,145,209,222,241,279,],[58,58,58,58,58,58,58,]),'FOR':([0,101,145,209,222,241,279,],[59,59,59,59,59,59,59,]),'FOREACH':([0,101,145,209,222,241,279,],[60,60,60,60,60,60,60,]),'TRY':([0,101,145,209,222,241,279,],[61,61,61,61,61,61,61,]),'SWITCH':([0,101,145,209,222,241,279,],[64,64,64,64,64,64,64,]),'GOTO':([0,101,145,209,222,241,279,],[65,65,65,65,65,65,65,]),'MINUS_EQUAL':([0,101,145,209,222,241,279,],[66,66,66,66,66,66,66,]),'MOD_EQUAL':([0,101,145,209,222,241,279,],[67,67,67,67,67,67,67,]),'MUL_EQUAL':([0,101,145,209,222,241,279,],[68,68,68,68,68,68,68,]),'PLUS_EQUAL':([0,101,145,209,222,241,279,],[69,69,69,69,69,69,69,]),'EXIT':([0,101,145,209,222,241,279,],[70,70,70,70,70,70,70,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,29,30,34,35,36,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,62,63,66,67,68,69,80,82,85,91,94,95,96,101,105,106,111,112,113,114,118,120,121,122,123,144,145,148,156,157,165,173,174,175,187,189,190,199,201,205,208,209,210,211,212,213,219,222,223,233,239,241,245,250,251,253,254,255,261,264,266,267,269,270,278,279,284,285,288,],[71,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-31,-32,-81,-83,-85,-30,-34,-35,-36,-37,-38,-39,-40,-41,-42,-54,-55,-56,-57,-58,-59,-60,-61,-64,-50,-43,-44,-45,-46,-28,-33,-29,-69,-70,-82,-84,71,-51,-52,-127,-128,-129,-130,-24,-62,-63,-64,-25,-53,71,-125,-68,-71,-75,-106,-107,-124,-26,-65,-66,-74,-124,-99,-109,71,-108,-121,-123,-49,-92,71,-27,-98,-105,71,-88,-103,-126,-72,-73,-97,-116,-100,-76,-93,-47,-104,-48,71,287,-91,-122,]),'DEFAULT':([0,101,145,209,222,241,279,],[72,72,72,72,72,72,72,]),'CONTINUE':([0,101,145,209,222,241,279,],[73,73,73,73,73,73,73,]),'RAND':([0,101,145,209,222,241,279,],[74,74,74,74,74,74,74,]),'PUBLIC':([0,32,33,75,76,77,78,93,101,102,145,150,161,209,218,222,241,279,],[75,75,75,-77,-78,-79,-80,75,75,75,75,75,75,75,75,75,75,75,]),'PRIVATE':([0,32,33,75,76,77,78,93,101,102,145,150,161,209,218,222,241,279,],[76,76,76,-77,-78,-79,-80,76,76,76,76,76,76,76,76,76,76,76,]),'PROTECTED':([0,32,33,75,76,77,78,93,101,102,145,150,161,209,218,222,241,279,],[77,77,77,-77,-78,-79,-80,77,77,77,77,77,77,77,77,77,77,77,]),'STATIC':([0,32,33,75,76,77,78,93,101,102,145,150,161,209,218,222,241,279,],[78,78,78,-77,-78,-79,-80,78,78,78,78,78,78,78,78,78,78,78,]),'FUNCTION':([0,33,75,76,77,78,101,145,209,222,241,279,],[79,97,-77,-78,-79,-80,79,79,79,79,79,79,]),'STRING':([0,25,27,28,40,41,42,43,44,45,46,47,48,86,88,90,91,94,98,99,100,101,117,125,130,140,145,146,156,160,162,167,168,188,209,222,229,241,279,],[38,38,38,38,-34,-35,-36,-37,-38,-39,-40,-41,-42,38,38,38,-69,-70,132,134,38,38,38,38,38,38,38,38,-68,38,38,38,38,38,38,38,38,38,38,]),'NOMBRE':([0,25,27,28,40,41,42,43,44,45,46,47,48,65,79,86,88,90,91,94,97,98,100,101,117,125,130,140,145,146,156,160,162,167,168,188,209,222,229,241,262,279,],[29,84,29,29,-34,-35,-36,-37,-38,-39,-40,-41,-42,110,116,29,29,29,-69,-70,131,133,29,29,29,29,29,29,29,29,-68,29,29,29,29,29,29,29,29,29,277,29,]),'LPAREN':([0,27,37,39,40,41,42,43,44,57,59,60,64,74,81,86,101,108,116,125,129,131,145,158,159,188,209,222,240,241,279,],[28,88,98,99,-34,-35,-36,-37,-38,100,102,103,109,115,117,28,28,146,150,28,160,161,28,191,192,28,28,28,262,28,28,]),'IF':([0,101,145,209,222,241,279,],[81,81,81,81,81,81,81,]),'ENTERO':([0,25,27,28,40,41,42,43,44,45,46,47,48,86,88,90,91,94,100,101,115,117,119,125,130,140,145,146,156,160,162,167,168,179,188,209,222,229,241,243,272,274,279,],[30,30,30,30,-34,-35,-36,-37,-38,-39,-40,-41,-42,30,30,30,-69,-70,30,30,149,30,152,30,30,30,30,30,-68,30,30,30,30,216,30,30,30,30,30,265,30,30,30,]),'DECIMAL':([0,25,27,28,40,41,42,43,44,45,46,47,48,86,88,90,91,94,100,101,117,125,130,140,145,146,156,160,162,167,168,188,209,222,229,241,272,274,279,],[82,82,82,82,-34,-35,-36,-37,-38,-39,-40,-41,-42,82,82,82,-69,-70,82,82,82,82,82,82,82,82,-68,82,82,82,82,82,82,82,82,82,82,82,82,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,29,30,34,35,36,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,62,63,66,67,68,69,80,82,85,91,94,95,96,105,106,111,112,113,114,118,120,121,122,123,144,148,156,157,165,173,174,175,187,189,190,199,201,205,208,210,211,212,213,219,223,233,239,245,250,251,253,254,255,261,264,266,267,269,270,278,285,288,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-31,-32,-81,-83,-85,-30,-34,-35,-36,-37,-38,-39,-40,-41,-42,-54,-55,-56,-57,-58,-59,-60,-61,-64,-50,-43,-44,-45,-46,-28,-33,-29,-69,-70,-82,-84,-51,-52,-127,-128,-129,-130,-24,-62,-63,-64,-25,-53,-125,-68,-71,-75,-106,-107,-124,-26,-65,-66,-74,-124,-99,-109,-108,-121,-123,-49,-92,-27,-98,-105,-88,-103,-126,-72,-73,-97,-116,-100,-76,-93,-47,-104,-48,-91,-122,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,29,30,34,35,36,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,62,63,66,67,68,69,80,82,85,91,94,95,96,105,106,111,112,113,114,118,120,121,122,123,139,142,143,144,148,156,157,165,172,173,174,175,176,187,189,190,199,200,201,205,208,210,211,212,213,219,220,223,232,233,239,242,245,247,249,250,251,253,254,255,261,263,264,266,267,268,269,270,278,280,285,288,289,290,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-31,-32,-81,-83,-85,-30,-34,-35,-36,-37,-38,-39,-40,-41,-42,-54,-55,-56,-57,-58,-59,-60,-61,-64,-50,-43,-44,-45,-46,-28,-33,-29,-69,-70,-82,-84,-51,-52,-127,-128,-129,-130,-24,-62,-63,-64,-25,169,-124,175,-53,-125,-68,-71,-75,208,-106,-107,-124,213,-26,-65,-66,-74,-124,-124,-99,-109,-108,-121,-123,-49,-92,-124,-27,255,-98,-105,264,-88,267,269,-103,-126,-72,-73,-97,-116,278,-100,-76,-93,-124,-47,-104,-48,285,-91,-122,-101,-102,]),'SEMI':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,29,30,34,35,36,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,62,63,66,67,68,69,70,71,72,73,80,82,83,84,85,87,91,94,95,96,105,106,110,111,112,113,114,118,120,121,122,123,126,127,135,142,144,148,153,156,157,164,165,170,172,173,174,175,186,187,189,190,193,199,200,201,202,203,204,205,208,210,211,212,213,219,220,223,226,227,228,230,231,232,233,239,244,245,247,250,251,253,254,255,261,264,266,267,269,270,278,285,287,288,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-31,-32,-81,-83,-85,-30,-34,-35,-36,-37,-38,-39,-40,-41,-42,-54,-55,-56,-57,-58,-59,-60,-61,-64,-50,-43,-44,-45,-46,111,112,113,114,-28,-33,118,-31,-29,123,-69,-70,-82,-84,-51,-52,148,-127,-128,-129,-130,-24,-62,-63,-64,-25,156,157,165,-124,-53,-125,187,-68,-71,199,-75,206,209,-106,-107,-124,223,-26,-65,-66,-117,-74,-124,-124,-29,-96,-95,-99,-109,-108,-121,-123,-49,-92,-124,-27,250,251,-118,253,254,209,209,-105,266,-88,-106,-103,-126,-72,-73,-97,-116,-100,-76,-93,-47,-104,-48,-91,289,-122,]),'RPAREN':([29,30,38,80,82,85,91,94,99,124,134,136,147,150,151,154,155,156,160,161,177,180,182,183,184,189,190,191,192,194,195,197,198,202,203,204,207,216,225,234,246,252,271,273,275,276,281,282,283,],[-31,-32,-30,-28,-33,-29,-69,-70,135,153,164,166,178,181,185,189,190,-68,193,196,214,217,-90,-86,-87,-65,-66,226,227,228,-120,230,231,-29,-96,-95,238,244,-67,256,-89,-119,-110,-112,-111,-113,-114,-115,286,]),'COMMA':([29,30,38,80,82,85,91,94,132,133,149,156,180,182,183,184,194,195,246,252,],[-31,-32,-30,-28,-33,-29,-69,-70,162,163,179,-68,218,-90,-86,-87,229,-120,-89,-119,]),'EQUALS':([31,92,183,257,258,],[90,130,130,272,274,]),'LBRACE':([58,61,104,107,166,178,181,185,196,214,217,238,248,256,286,],[101,104,142,145,200,215,220,222,220,241,142,142,268,142,142,]),'ELSE':([63,106,269,278,],[107,107,-47,-48,]),'ELSEIF':([63,269,],[108,-47,]),'LBRACKET':([84,],[119,]),'NEW':([90,],[128,]),'ARRAY':([90,163,],[129,198,]),'SPLQUEUE':([128,],[158,]),'SPLSTACK':([128,],[159,]),'AS':([141,],[171,]),'RETURN':([142,200,201,220,],[174,174,174,174,]),'RBRACKET':([152,],[186,]),'COLON':([166,181,265,],[201,221,279,]),'NULL':([174,],[210,]),'CATCH':([175,208,211,212,288,],[-124,-109,240,-123,-122,]),'CASE':([215,289,],[243,243,]),'VOID':([221,],[248,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,101,145,209,222,241,279,],[1,139,176,239,249,263,284,]),'imprimir':([0,101,145,209,222,241,279,],[2,2,2,2,2,2,2,]),'asignacion':([0,32,33,93,101,102,145,150,161,209,218,222,241,279,],[3,91,94,94,3,140,3,184,184,3,184,3,3,3,]),'asignacion_array':([0,101,145,209,222,241,279,],[4,4,4,4,4,4,4,]),'funciones':([0,101,145,209,222,241,279,],[5,5,5,5,5,5,5,]),'constante':([0,101,145,209,222,241,279,],[6,6,6,6,6,6,6,]),'lectura':([0,101,145,209,222,241,279,],[7,7,7,7,7,7,7,]),'operadores':([0,26,89,101,120,145,154,209,222,224,241,279,],[8,86,125,8,86,8,188,8,8,188,8,8,]),'operador_logico':([0,101,137,138,145,209,222,241,279,],[9,9,167,168,9,9,9,9,9,]),'condicion_booleana':([0,101,145,209,222,241,279,],[10,10,10,10,10,10,10,]),'bwhile':([0,101,145,169,209,222,241,279,],[11,11,11,205,11,11,11,11,]),'bdo':([0,101,145,209,222,241,279,],[12,12,12,12,12,12,12,]),'bfor':([0,101,145,209,222,241,279,],[13,13,13,13,13,13,13,]),'bforeach':([0,101,145,209,222,241,279,],[14,14,14,14,14,14,14,]),'btry':([0,101,145,209,222,241,279,],[15,15,15,15,15,15,15,]),'operaciones_mat':([0,86,101,145,209,222,241,279,],[16,121,16,16,16,16,16,16,]),'condicion_ifelse':([0,101,145,209,222,241,279,],[17,17,17,17,17,17,17,]),'bswitch':([0,101,145,209,222,241,279,],[18,18,18,18,18,18,18,]),'bgoto':([0,101,145,209,222,241,279,],[19,19,19,19,19,19,19,]),'bcolas':([0,101,145,209,222,241,279,],[20,20,20,20,20,20,20,]),'bpila':([0,101,145,209,222,241,279,],[21,21,21,21,21,21,21,]),'incrementos_mat':([0,101,145,209,222,241,279,],[22,22,22,22,22,22,22,]),'bcortes':([0,101,145,209,222,241,279,],[23,23,23,23,23,23,23,]),'brand':([0,101,145,209,222,241,279,],[24,24,24,24,24,24,24,]),'valor':([0,25,27,28,86,88,90,100,101,117,125,130,140,145,146,160,162,167,168,188,209,222,229,241,279,],[26,83,87,89,120,124,126,138,26,138,154,126,138,26,138,195,197,203,204,224,26,26,252,26,26,]),'proteccion':([0,32,33,93,101,102,145,150,161,209,218,222,241,279,],[33,93,93,93,33,93,33,93,93,33,93,33,33,33,]),'funcion_nparams':([0,33,101,145,209,222,241,279,],[34,95,34,34,34,34,34,34,]),'funcion_blank':([0,33,101,145,209,222,241,279,],[35,96,35,35,35,35,35,35,]),'funcion_void':([0,101,145,209,222,241,279,],[36,36,36,36,36,36,36,]),'operaciones_mat_par':([0,86,101,125,145,188,209,222,241,279,],[62,122,62,155,62,225,62,62,62,62,]),'condicion_if':([0,101,145,209,222,241,279,],[63,63,63,63,63,63,63,]),'numero':([0,25,27,28,86,88,90,100,101,117,125,130,140,145,146,160,162,167,168,188,209,222,229,241,272,274,279,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,281,282,80,]),'condicion_else':([63,106,],[105,144,]),'condicion_elseif':([63,],[106,]),'array_def':([90,],[127,]),'condicion':([100,117,140,146,],[136,151,170,177,]),'stc_bloque_def':([104,181,196,217,238,256,286,],[143,219,219,245,261,270,288,]),'stc_bloque':([142,200,201,220,],[172,232,233,172,]),'empty':([142,175,200,201,220,268,],[173,212,173,173,247,280,]),'params_list':([150,161,],[180,180,]),'param':([150,161,218,],[182,182,246,]),'array_elmnt':([160,],[194,]),'catches':([175,],[211,]),'for_incr':([206,],[234,]),'innerSwitch':([215,289,],[242,290,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> imprimir','cuerpo',1,'p_cuerpo','sintactico.py',7),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','sintactico.py',8),
  ('cuerpo -> asignacion_array','cuerpo',1,'p_cuerpo','sintactico.py',9),
  ('cuerpo -> funciones','cuerpo',1,'p_cuerpo','sintactico.py',10),
  ('cuerpo -> constante','cuerpo',1,'p_cuerpo','sintactico.py',11),
  ('cuerpo -> lectura','cuerpo',1,'p_cuerpo','sintactico.py',12),
  ('cuerpo -> operadores','cuerpo',1,'p_cuerpo','sintactico.py',13),
  ('cuerpo -> operador_logico','cuerpo',1,'p_cuerpo','sintactico.py',14),
  ('cuerpo -> condicion_booleana','cuerpo',1,'p_cuerpo','sintactico.py',15),
  ('cuerpo -> bwhile','cuerpo',1,'p_cuerpo','sintactico.py',16),
  ('cuerpo -> bdo','cuerpo',1,'p_cuerpo','sintactico.py',17),
  ('cuerpo -> bfor','cuerpo',1,'p_cuerpo','sintactico.py',18),
  ('cuerpo -> bforeach','cuerpo',1,'p_cuerpo','sintactico.py',19),
  ('cuerpo -> btry','cuerpo',1,'p_cuerpo','sintactico.py',20),
  ('cuerpo -> operaciones_mat','cuerpo',1,'p_cuerpo','sintactico.py',21),
  ('cuerpo -> condicion_ifelse','cuerpo',1,'p_cuerpo','sintactico.py',22),
  ('cuerpo -> bswitch','cuerpo',1,'p_cuerpo','sintactico.py',23),
  ('cuerpo -> bgoto','cuerpo',1,'p_cuerpo','sintactico.py',24),
  ('cuerpo -> bcolas','cuerpo',1,'p_cuerpo','sintactico.py',25),
  ('cuerpo -> bpila','cuerpo',1,'p_cuerpo','sintactico.py',26),
  ('cuerpo -> incrementos_mat','cuerpo',1,'p_cuerpo','sintactico.py',27),
  ('cuerpo -> bcortes','cuerpo',1,'p_cuerpo','sintactico.py',28),
  ('cuerpo -> brand','cuerpo',1,'p_cuerpo','sintactico.py',29),
  ('imprimir -> ECHO valor SEMI','imprimir',3,'p_imprimir','sintactico.py',34),
  ('imprimir -> PRINT valor SEMI','imprimir',3,'p_imprimir','sintactico.py',35),
  ('imprimir -> PRINT LPAREN valor RPAREN SEMI','imprimir',5,'p_imprimir','sintactico.py',36),
  ('imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI','imprimir',6,'p_imprimir','sintactico.py',37),
  ('valor -> numero','valor',1,'p_valor','sintactico.py',42),
  ('valor -> VARIABLE','valor',1,'p_valor','sintactico.py',43),
  ('valor -> STRING','valor',1,'p_valor','sintactico.py',44),
  ('valor -> NOMBRE','valor',1,'p_valor','sintactico.py',45),
  ('numero -> ENTERO','numero',1,'p_numero','sintactico.py',50),
  ('numero -> DECIMAL','numero',1,'p_numero','sintactico.py',51),
  ('operadores -> SUMA','operadores',1,'p_operadores','sintactico.py',56),
  ('operadores -> RESTA','operadores',1,'p_operadores','sintactico.py',57),
  ('operadores -> MULTIPLICACION','operadores',1,'p_operadores','sintactico.py',58),
  ('operadores -> DIVISION','operadores',1,'p_operadores','sintactico.py',59),
  ('operadores -> MODULO','operadores',1,'p_operadores','sintactico.py',60),
  ('operador_logico -> SMALLER','operador_logico',1,'p_operador_logico','sintactico.py',65),
  ('operador_logico -> GREATER','operador_logico',1,'p_operador_logico','sintactico.py',66),
  ('operador_logico -> IS_SMALLER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico.py',67),
  ('operador_logico -> IS_GREATER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico.py',68),
  ('incrementos_mat -> MINUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',73),
  ('incrementos_mat -> MOD_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',74),
  ('incrementos_mat -> MUL_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',75),
  ('incrementos_mat -> PLUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',76),
  ('condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_if',7,'p_condicion_if','sintactico.py',81),
  ('condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_elseif',7,'p_condicion_elseif','sintactico.py',86),
  ('condicion_else -> ELSE LBRACE cuerpo RBRACE','condicion_else',4,'p_condicion_else','sintactico.py',91),
  ('condicion_ifelse -> condicion_if','condicion_ifelse',1,'p_condicion_ifelse','sintactico.py',96),
  ('condicion_ifelse -> condicion_if condicion_else','condicion_ifelse',2,'p_condicion_ifelse','sintactico.py',97),
  ('condicion_ifelse -> condicion_if condicion_elseif','condicion_ifelse',2,'p_condicion_ifelse','sintactico.py',98),
  ('condicion_ifelse -> condicion_if condicion_elseif condicion_else','condicion_ifelse',3,'p_condicion_ifelse','sintactico.py',99),
  ('condicion_booleana -> AND','condicion_booleana',1,'p_condicion_boolena','sintactico.py',104),
  ('condicion_booleana -> OR','condicion_booleana',1,'p_condicion_boolena','sintactico.py',105),
  ('condicion_booleana -> XOR','condicion_booleana',1,'p_condicion_boolena','sintactico.py',106),
  ('condicion_booleana -> IS_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',107),
  ('condicion_booleana -> IS_NOT_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',108),
  ('condicion_booleana -> IS_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',109),
  ('condicion_booleana -> IS_NOT_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',110),
  ('condicion_booleana -> BOOLEAN_NOT','condicion_booleana',1,'p_condicion_boolena','sintactico.py',111),
  ('operaciones_mat -> valor operadores valor','operaciones_mat',3,'p_operaciones_mat','sintactico.py',116),
  ('operaciones_mat -> valor operadores operaciones_mat','operaciones_mat',3,'p_operaciones_mat','sintactico.py',117),
  ('operaciones_mat -> operaciones_mat_par','operaciones_mat',1,'p_operaciones_mat','sintactico.py',118),
  ('operaciones_mat_par -> LPAREN valor operadores valor RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico.py',124),
  ('operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico.py',125),
  ('operaciones_mat_par -> valor operadores operaciones_mat_par','operaciones_mat_par',3,'p_operaciones_mat_par','sintactico.py',126),
  ('asignacion -> VARIABLE EQUALS valor SEMI','asignacion',4,'p_asignacion','sintactico.py',131),
  ('asignacion -> VAR asignacion','asignacion',2,'p_asignacion','sintactico.py',132),
  ('asignacion -> proteccion asignacion','asignacion',2,'p_asignacion','sintactico.py',133),
  ('asignacion_array -> VARIABLE EQUALS array_def SEMI','asignacion_array',4,'p_asignacion_array','sintactico.py',138),
  ('constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI','constante',7,'p_constante','sintactico.py',142),
  ('constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI','constante',7,'p_constante','sintactico.py',143),
  ('lectura -> READLINE LPAREN STRING RPAREN SEMI','lectura',5,'p_lectura','sintactico.py',147),
  ('lectura -> READLINE LPAREN RPAREN SEMI','lectura',4,'p_lectura','sintactico.py',148),
  ('brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI','brand',7,'p_brand','sintactico.py',152),
  ('proteccion -> PUBLIC','proteccion',1,'p_proteccion','sintactico.py',156),
  ('proteccion -> PRIVATE','proteccion',1,'p_proteccion','sintactico.py',157),
  ('proteccion -> PROTECTED','proteccion',1,'p_proteccion','sintactico.py',158),
  ('proteccion -> STATIC','proteccion',1,'p_proteccion','sintactico.py',159),
  ('funciones -> funcion_nparams','funciones',1,'p_funciones','sintactico.py',164),
  ('funciones -> proteccion funcion_nparams','funciones',2,'p_funciones','sintactico.py',165),
  ('funciones -> funcion_blank','funciones',1,'p_funciones','sintactico.py',166),
  ('funciones -> proteccion funcion_blank','funciones',2,'p_funciones','sintactico.py',167),
  ('funciones -> funcion_void','funciones',1,'p_funciones','sintactico.py',168),
  ('param -> VARIABLE','param',1,'p_param','sintactico.py',173),
  ('param -> asignacion','param',1,'p_param','sintactico.py',174),
  ('funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def','funcion_nparams',6,'p_funcion_nparams','sintactico.py',178),
  ('params_list -> params_list COMMA param','params_list',3,'p_params_list','sintactico.py',182),
  ('params_list -> param','params_list',1,'p_params_list','sintactico.py',183),
  ('funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE','funcion_void',9,'p_funcion_void','sintactico.py',187),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def','funcion_blank',5,'p_funcion_blank','sintactico.py',191),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE','funcion_blank',7,'p_funcion_blank','sintactico.py',192),
  ('condicion -> VARIABLE operador_logico VARIABLE','condicion',3,'p_condicion','sintactico.py',197),
  ('condicion -> valor operador_logico valor','condicion',3,'p_condicion','sintactico.py',198),
  ('condicion -> VARIABLE operador_logico valor','condicion',3,'p_condicion','sintactico.py',199),
  ('bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE','bwhile',7,'p_bwhile','sintactico.py',204),
  ('bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque','bwhile',6,'p_bwhile','sintactico.py',205),
  ('bdo -> DO LBRACE cuerpo RBRACE bwhile','bdo',5,'p_bdo','sintactico.py',210),
  ('bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE','bswitch',7,'p_bswitch','sintactico.py',215),
  ('innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI','innerSwitch',6,'p_innerSwitch','sintactico.py',219),
  ('innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch','innerSwitch',7,'p_innerSwitch','sintactico.py',220),
  ('bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI','bcolas',7,'p_bcolas','sintactico.py',225),
  ('bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def','bfor',8,'p_bfor','sintactico.py',230),
  ('stc_bloque -> stc_bloque SEMI cuerpo','stc_bloque',3,'p_stc_bloque','sintactico.py',234),
  ('stc_bloque -> empty','stc_bloque',1,'p_stc_bloque','sintactico.py',235),
  ('stc_bloque -> RETURN','stc_bloque',1,'p_stc_bloque','sintactico.py',236),
  ('stc_bloque -> RETURN NULL','stc_bloque',2,'p_stc_bloque','sintactico.py',237),
  ('stc_bloque_def -> LBRACE stc_bloque RBRACE','stc_bloque_def',3,'p_stc_bloque_def','sintactico.py',242),
  ('for_incr -> VARIABLE SUMA SUMA','for_incr',3,'p_for_incr','sintactico.py',246),
  ('for_incr -> SUMA SUMA VARIABLE','for_incr',3,'p_for_incr','sintactico.py',247),
  ('for_incr -> VARIABLE RESTA RESTA','for_incr',3,'p_for_incr','sintactico.py',248),
  ('for_incr -> RESTA RESTA VARIABLE','for_incr',3,'p_for_incr','sintactico.py',249),
  ('for_incr -> VARIABLE SUMA EQUALS numero','for_incr',4,'p_for_incr','sintactico.py',250),
  ('for_incr -> VARIABLE RESTA EQUALS numero','for_incr',4,'p_for_incr','sintactico.py',251),
  ('bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def','bforeach',7,'p_bforeach','sintactico.py',255),
  ('array_def -> ARRAY LPAREN RPAREN','array_def',3,'p_array_def','sintactico.py',259),
  ('array_def -> ARRAY LPAREN array_elmnt RPAREN','array_def',4,'p_array_def','sintactico.py',260),
  ('array_elmnt -> array_elmnt COMMA valor','array_elmnt',3,'p_array_elmnt','sintactico.py',264),
  ('array_elmnt -> valor','array_elmnt',1,'p_array_elmnt','sintactico.py',265),
  ('btry -> TRY LBRACE stc_bloque_def RBRACE catches','btry',5,'p_btry','sintactico.py',269),
  ('catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def','catches',7,'p_catches','sintactico.py',273),
  ('catches -> empty','catches',1,'p_catches','sintactico.py',274),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',278),
  ('bgoto -> GOTO NOMBRE SEMI','bgoto',3,'p_bgoto','sintactico.py',282),
  ('bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI','bpila',7,'p_bpila','sintactico.py',286),
  ('bcortes -> EXIT SEMI','bcortes',2,'p_bcortes','sintactico.py',290),
  ('bcortes -> BREAK SEMI','bcortes',2,'p_bcortes','sintactico.py',291),
  ('bcortes -> DEFAULT SEMI','bcortes',2,'p_bcortes','sintactico.py',292),
  ('bcortes -> CONTINUE SEMI','bcortes',2,'p_bcortes','sintactico.py',293),
]
