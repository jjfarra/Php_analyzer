
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY AS BOOL BOOLEAN BOOLEANO BREAK CADENA CASE CATCH CLOSE_TAG COLON COMENTARIOS COMMA CONCAT CONCAT_EQUAL CONTINUE DECIMAL DEFAULT DEFINE DIVISION DIV_EQUAL DO DOC_COMENTARIOS DOUBLE ECHO ELSE ELSEIF ENTERO EQUALS EXIT FLOAT FOR FOREACH FUNCTION FWRITE GOTO GREATER IF INT INTEGER IS_EQUAL IS_GREATER_OR_EQUAL IS_IDENTICAL IS_NOT_EQUAL IS_NOT_IDENTICAL IS_SMALLER_OR_EQUAL LBRACE LBRACKET LPAREN MINUS_EQUAL MODULO MOD_EQUAL MULTIPLICACION MUL_EQUAL NEW NOMBRE NULL OBJECT OPEN_TAG OR PLUS_EQUAL PRINT PRIVATE PROTECTED PUBLIC RAND RBRACE RBRACKET READLINE RESTA RETURN RPAREN SEMI SMALLER SPLQUEUE SPLSTACK STATIC STRING SUMA SWITCH TRIM TRY VAR VARIABLE VOID WHILE XORcuerpo : imprimir\n            | asignacion\n            | funciones\n            | constante\n            | lectura\n            | bwhile\n            | bdo\n            | bfor\n            | bforeach\n            | btry\n            | repiteCondicional\n            | bswitch\n            | bcase\n            | bgoto\n            | bcolas\n            | bpila\n            | bcortes\n            | brand\n            | escribir\n            | btrim\n            | otros\n            | breturn\n            | comment\n            | casting\n            | bconcat\n            | simbolos\n  asignacion : VARIABLE EQUALS valor SEMI\n                | VAR asignacion\n                | proteccion asignacion\n                | VARIABLE EQUALS brand\n                | VARIABLE EQUALS escribir\n                | VARIABLE EQUALS btrim\n                | VARIABLE EQUALS lectura\n                | VARIABLE EQUALS bconcat\n                | asignacion_array\n                | VARIABLE EQUALS operaciones_mat SEMI\n                | aumentoCasting\n  asignacion_array : VARIABLE EQUALS array_def SEMIconstante : DEFINE LPAREN CADENA COMMA valor RPAREN SEMI\n          | DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMIvalor : tipoDato\n            | bcolas\n            | bpila\n  tipoDato : numero\n            | CADENA\n            | BOOLEANO\n  numero : ENTERO\n          | DECIMAL\n  imprimir : ECHO valor SEMI\n            | PRINT valor SEMI\n            | PRINT LPAREN valor RPAREN SEMI\n            | ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI\n            | ECHO bconcat\n            | ECHO operaciones_mat SEMI\n            | PRINT operaciones_mat SEMI\n  condicion_if :  IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_elseif :  ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_else :  ELSE LBRACE cuerpo RBRACE\n  condicion_ifelse : condicion_if\n                      | condicion_if condicion_else\n                      | condicion_if condicion_elseif\n                      | condicion_if condicion_elseif condicion_else\n  repiteCondicional : condicion_ifelse\n                        | condicion_ifelse repiteCondicional \n   condicion : VARIABLE operador_logico VARIABLE\n            | valor operador_logico valor \n            | VARIABLE operador_logico valor\n            | VARIABLE condicion_booleana VARIABLE\n            | valor condicion_booleana valor\n            | VARIABLE condicion_booleana valor\n  bfor : FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_defstc_bloque : stc_bloque SEMI cuerpo\n        | breturn\n        stc_bloque_def : LBRACE stc_bloque RBRACEfor_incr : VARIABLE SUMA SUMA\n          | SUMA SUMA VARIABLE\n          | VARIABLE RESTA RESTA\n          | RESTA RESTA VARIABLE\n          | VARIABLE SUMA EQUALS numero\n          | VARIABLE RESTA EQUALS numerobforeach :  FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def bwhile : WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE \n  | WHILE LPAREN condicion RPAREN COLON stc_bloque  \n   bdo : DO LBRACE cuerpo RBRACE bwhile \n   bswitch : SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACEbcase : CASE ENTERO COLON innerSwitch : bcase cuerpo BREAK SEMI\n                 | CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch \n  btry : TRY LBRACE stc_bloque_def RBRACE catchescatches : catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def\n          | emptyoperadores : SUMA \n                  | RESTA\n                  | MULTIPLICACION\n                  | DIVISION\n                  | MODULO\n  operador_logico :  SMALLER\n                        | GREATER\n                        | IS_SMALLER_OR_EQUAL\n                        | IS_GREATER_OR_EQUAL\n  incrementos_mat :  MINUS_EQUAL\n                        | MOD_EQUAL\n                        | MUL_EQUAL\n                        | PLUS_EQUAL\n                        | DIV_EQUAL\n  condicion_booleana :  AND\n                        | OR\n                        | XOR\n                        | IS_EQUAL\n                        | IS_NOT_EQUAL\n                        | IS_IDENTICAL\n                        | IS_NOT_IDENTICAL\n  operaciones_mat :  valor operadores valor\n                        | valor operadores operaciones_mat\n                        | VARIABLE operadores VARIABLE\n                        | operaciones_mat_par\n                       \n  operaciones_mat_par :  LPAREN valor operadores valor RPAREN\n                          |  LPAREN valor operadores operaciones_mat_par RPAREN\n  funciones : funcion_nparams\n              | proteccion funcion_nparams\n              | funcion_blank\n              | proteccion funcion_blank\n              | funcion_void\n  param : VARIABLE\n          | asignacion\n          funcion_nparams : FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_defparams_list : params_list COMMA param\n                      | paramfuncion_void : FUNCTION NOMBRE LPAREN  RPAREN COLON VOID LBRACE empty RBRACE funcion_blank : FUNCTION NOMBRE LPAREN  RPAREN stc_bloque_def\n                    | FUNCTION NOMBRE LPAREN  RPAREN LBRACE empty RBRACE\n  brand : RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMIproteccion : PUBLIC\n          | PRIVATE\n          | PROTECTED\n          | STATIC\n  breturn : empty\n        | RETURN SEMI \n        | RETURN NULL SEMI\n        | RETURN VARIABLE SEMI\n        | RETURN BOOLEANO SEMI\n        array_def : ARRAY LPAREN RPAREN\n          | ARRAY LPAREN array_elmnt RPARENarray_elmnt : array_elmnt COMMA valor\n            | valorempty :  bcolas : VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI\n  bpila : VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMIlectura : READLINE LPAREN CADENA RPAREN SEMI\n          | READLINE LPAREN RPAREN SEMIescribir : FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI\n   btrim : TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI\n   comment : COMENTARIOS\n              | DOC_COMENTARIOS\n   bgoto : GOTO NOMBRE SEMIbcortes : EXIT SEMI\n              | BREAK SEMI\n              | DEFAULT SEMI\n              | CONTINUE SEMI\n   otros : SMALLER NOMBRE GREATER\n   \n  simbolos : LPAREN RPAREN\n            | LPAREN\n            | RPAREN\n            | LBRACKET RBRACKET\n            | LBRACKET\n            | RBRACKET\n            | LBRACE RBRACE\n            | LBRACE\n            | RBRACE instrucciones\n            | OPEN_TAG CLOSE_TAG\n            | OPEN_TAG\n            | CLOSE_TAG\n  \n    instrucciones : condicion_else\n                  | condicion_elseif\n  bconcat : CADENA CONCAT CADENA SEMI\n            |  VARIABLE CONCAT VARIABLE SEMI\n            | VARIABLE CONCAT CADENA SEMI\n            | VARIABLE CONCAT_EQUAL CADENA SEMI\n            | CADENA CONCAT_EQUAL CADENA SEMI\n            \n   tiposCast :  STRING\n            | BOOL\n            | BOOLEAN\n            | DOUBLE\n            | FLOAT\n            | ARRAY\n            | OBJECT \n            | INTEGER\n            | INT\n        \n            \n   casting : VARIABLE EQUALS LPAREN tiposCast RPAREN VARIABLE SEMI  \n              | LPAREN tiposCast RPAREN VARIABLE SEMI\n   \n    aumentoCasting : VARIABLE incrementos_mat tipoDato SEMI\n                    | VARIABLE EQUALS VARIABLE operadores tipoDato SEMI\n  '
    
_lr_action_items = {'ECHO':([0,136,205,315,318,327,341,],[28,28,28,28,28,28,28,]),'PRINT':([0,136,205,315,318,327,341,],[29,29,29,29,29,29,29,]),'VARIABLE':([0,28,29,35,36,37,38,65,70,71,72,73,90,93,109,110,118,120,121,129,136,137,138,141,160,162,163,164,165,166,167,170,177,180,181,182,183,184,187,194,205,206,208,222,229,232,233,234,238,239,240,241,242,243,244,245,247,248,250,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,271,293,300,312,315,318,323,327,331,336,341,369,370,374,375,388,390,],[34,86,95,119,119,-35,-37,154,-133,-134,-135,-136,173,173,178,190,-28,119,-29,203,34,119,209,212,203,95,-92,-93,-94,-95,-96,228,231,-30,-31,-32,-33,-34,173,178,34,203,203,282,173,228,-27,-36,-38,173,-176,-177,-178,-191,282,173,-175,-179,-150,303,305,-97,-98,-99,-100,-106,-107,-108,-109,-110,-111,-112,173,173,313,334,-149,343,34,34,282,34,-192,173,34,386,387,-132,-151,394,-152,]),'VAR':([0,35,36,70,71,72,73,120,136,137,205,222,244,315,318,323,327,341,],[35,35,35,-133,-134,-135,-136,35,35,35,35,35,35,35,35,35,35,35,]),'DEFINE':([0,136,205,315,318,327,341,],[42,42,42,42,42,42,42,]),'READLINE':([0,109,136,194,205,315,318,327,341,],[44,44,44,44,44,44,44,44,44,]),'WHILE':([0,136,205,269,315,318,327,341,],[45,45,45,45,45,45,45,45,]),'DO':([0,136,205,315,318,327,341,],[48,48,48,48,48,48,48,]),'FOR':([0,136,205,315,318,327,341,],[49,49,49,49,49,49,49,]),'FOREACH':([0,136,205,315,318,327,341,],[50,50,50,50,50,50,50,]),'TRY':([0,136,205,315,318,327,341,],[51,51,51,51,51,51,51,]),'SWITCH':([0,136,205,315,318,327,341,],[53,53,53,53,53,53,53,]),'CASE':([0,136,205,315,318,327,341,],[54,54,54,54,54,54,54,]),'GOTO':([0,136,205,315,318,327,341,],[55,55,55,55,55,55,55,]),'EXIT':([0,136,205,315,318,327,341,],[56,56,56,56,56,56,56,]),'BREAK':([0,136,205,315,318,327,341,],[57,57,57,57,57,57,57,]),'DEFAULT':([0,136,205,315,318,327,341,],[58,58,58,58,58,58,58,]),'CONTINUE':([0,136,205,315,318,327,341,],[59,59,59,59,59,59,59,]),'RAND':([0,109,136,194,205,315,318,327,341,],[60,60,60,60,60,60,60,60,60,]),'FWRITE':([0,109,136,194,205,315,318,327,341,],[61,61,61,61,61,61,61,61,61,]),'TRIM':([0,109,136,194,205,315,318,327,341,],[62,62,62,62,62,62,62,62,62,]),'SMALLER':([0,79,82,83,84,88,89,91,96,136,203,204,205,315,318,327,341,358,359,],[63,-47,-41,-42,-43,-44,-46,-48,-45,63,254,254,63,63,63,63,63,-147,-148,]),'RETURN':([0,136,205,210,301,302,315,318,325,327,341,],[65,65,65,65,65,65,65,65,65,65,65,]),'COMENTARIOS':([0,136,205,315,318,327,341,],[66,66,66,66,66,66,66,]),'DOC_COMENTARIOS':([0,136,205,315,318,327,341,],[67,67,67,67,67,67,67,]),'LPAREN':([0,28,29,42,44,45,49,50,53,60,61,62,76,109,135,136,157,162,163,164,165,166,167,189,194,195,205,217,229,235,236,315,318,327,341,348,],[30,90,93,125,128,129,137,138,141,148,149,150,160,187,206,30,222,90,-92,-93,-94,-95,-96,239,90,244,30,278,90,291,292,30,30,30,30,372,]),'CADENA':([0,28,29,37,38,90,93,109,110,111,112,113,114,115,116,117,118,121,125,126,127,128,129,136,160,162,163,164,165,166,167,180,181,182,183,184,187,194,205,206,208,229,232,233,234,238,239,240,241,242,243,245,247,248,250,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,277,300,315,318,327,331,336,341,374,375,390,],[43,85,96,-35,-37,96,96,85,191,192,96,-101,-102,-103,-104,-105,-28,-29,196,198,199,200,96,43,96,96,-92,-93,-94,-95,-96,-30,-31,-32,-33,-34,96,85,43,96,96,96,96,-27,-36,-38,96,-176,-177,-178,-191,96,-175,-179,-150,96,96,-97,-98,-99,-100,-106,-107,-108,-109,-110,-111,-112,96,96,320,-149,43,43,43,-192,96,43,-132,-151,-152,]),'RPAREN':([0,30,37,38,79,82,83,84,88,89,91,96,97,99,100,101,102,103,104,105,106,107,118,121,128,136,175,180,181,182,183,184,200,202,205,212,222,224,233,234,237,238,239,240,241,242,243,244,247,248,250,268,279,281,282,283,286,287,291,292,295,296,298,299,300,303,304,305,306,307,308,313,315,318,319,320,321,327,329,330,331,341,342,352,354,358,359,361,374,375,382,384,386,387,390,392,393,394,],[31,98,-35,-37,-47,-41,-42,-43,-44,-46,-48,-45,177,-180,-181,-182,-183,-184,-185,-186,-187,-188,-28,-29,201,31,230,-30,-31,-32,-33,-34,249,251,31,275,280,284,-27,-36,293,-38,294,-176,-177,-178,-191,297,-175,-179,-150,310,322,-128,-124,-125,329,330,332,333,335,-145,337,338,-149,-65,-67,-68,-70,-66,-69,346,31,31,350,351,352,31,-117,-118,-192,31,366,376,-127,-147,-148,-144,-132,-151,-75,-77,-76,-78,-152,-79,-80,396,]),'LBRACKET':([0,78,136,205,315,318,327,341,],[32,168,32,32,32,32,32,32,]),'RBRACKET':([0,32,136,205,227,315,318,327,341,],[33,108,33,33,285,33,33,33,33,]),'LBRACE':([0,48,51,134,136,139,205,251,275,280,284,297,310,315,318,322,327,341,346,356,366,396,],[46,136,139,205,46,210,46,301,318,325,327,325,341,46,46,210,46,46,210,378,210,210,]),'RBRACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,30,31,32,33,37,38,39,40,41,46,52,64,66,67,68,69,75,80,98,108,118,121,122,123,130,131,132,133,136,140,144,145,146,147,152,156,158,159,161,169,174,176,180,181,182,183,184,205,207,210,211,213,214,218,219,220,221,223,233,234,238,240,241,242,243,247,248,250,267,272,273,274,288,289,300,301,302,309,311,314,315,316,317,318,324,325,327,328,331,339,340,341,347,353,355,357,358,359,360,362,363,364,365,371,373,374,375,377,378,379,380,381,389,390,391,395,397,],[47,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-162,-163,-165,-166,-35,-37,-119,-121,-123,130,-63,-137,-153,-154,-171,-172,-59,-53,-161,-164,-28,-29,-120,-122,-167,-169,-173,-174,47,-64,-156,-157,-158,-159,-138,-170,-60,-61,-49,-54,-50,-55,-30,-31,-32,-33,-34,47,269,-146,274,-86,-155,-160,-139,-140,-141,-62,-27,-36,-38,-176,-177,-178,-191,-175,-179,-150,309,314,-73,-146,-51,-190,-149,-146,-146,-58,-84,-74,47,-89,-91,47,-130,-146,47,-52,-192,364,-83,47,-72,-126,377,379,-147,-148,-189,-39,-40,-82,380,-81,389,-132,-151,-131,-146,-56,-57,-71,-85,-152,395,-129,-90,]),'OPEN_TAG':([0,136,205,315,318,327,341,],[68,68,68,68,68,68,68,]),'CLOSE_TAG':([0,68,136,205,315,318,327,341,],[69,156,69,69,69,69,69,69,]),'PUBLIC':([0,35,36,70,71,72,73,120,136,137,205,222,244,315,318,323,327,341,],[70,70,70,-133,-134,-135,-136,70,70,70,70,70,70,70,70,70,70,70,]),'PRIVATE':([0,35,36,70,71,72,73,120,136,137,205,222,244,315,318,323,327,341,],[71,71,71,-133,-134,-135,-136,71,71,71,71,71,71,71,71,71,71,71,]),'PROTECTED':([0,35,36,70,71,72,73,120,136,137,205,222,244,315,318,323,327,341,],[72,72,72,-133,-134,-135,-136,72,72,72,72,72,72,72,72,72,72,72,]),'STATIC':([0,35,36,70,71,72,73,120,136,137,205,222,244,315,318,323,327,341,],[73,73,73,-133,-134,-135,-136,73,73,73,73,73,73,73,73,73,73,73,]),'FUNCTION':([0,36,70,71,72,73,136,205,315,318,327,341,],[74,124,-133,-134,-135,-136,74,74,74,74,74,74,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,30,31,32,33,37,38,39,40,41,46,52,64,66,67,68,69,75,80,98,108,118,121,122,123,130,131,132,133,140,144,145,146,147,152,156,158,159,161,169,174,176,180,181,182,183,184,213,214,218,219,220,221,223,233,234,238,240,241,242,243,247,248,250,273,274,288,289,300,302,309,311,314,315,316,317,324,328,331,340,347,353,358,359,360,362,363,364,371,374,375,377,379,380,381,389,390,395,397,],[-146,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-162,-163,-165,-166,-35,-37,-119,-121,-123,-168,-63,-137,-153,-154,-171,-172,-59,-53,-161,-164,-28,-29,-120,-122,-167,-169,-173,-174,-64,-156,-157,-158,-159,-138,-170,-60,-61,-49,-54,-50,-55,-30,-31,-32,-33,-34,-86,-155,-160,-139,-140,-141,-62,-27,-36,-38,-176,-177,-178,-191,-175,-179,-150,-73,-146,-51,-190,-149,-146,-58,-84,-74,-146,-89,-91,-130,-52,-192,-83,-72,-126,-147,-148,-189,-39,-40,-82,-81,-132,-151,-131,-56,-57,-71,-85,-152,-129,-90,]),'IF':([0,52,75,136,158,159,205,223,309,315,318,327,341,379,380,],[76,76,-59,76,-60,-61,76,-62,-58,76,76,76,76,-56,-57,]),'SEMI':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,30,31,32,33,37,38,39,40,41,46,52,56,57,58,59,64,65,66,67,68,69,75,77,79,80,81,82,83,84,85,87,88,89,91,92,94,96,98,108,118,121,122,123,130,131,132,133,140,143,144,145,146,147,152,153,154,155,156,158,159,161,169,174,176,179,180,181,182,183,184,185,188,190,191,192,193,198,199,201,210,213,214,218,219,220,221,223,225,226,228,230,231,233,234,238,240,241,242,243,247,248,249,250,270,272,273,274,285,288,289,290,294,300,301,302,303,304,305,306,307,308,309,311,314,315,316,317,318,324,325,328,329,330,331,332,333,334,335,337,338,339,340,347,349,350,351,353,355,358,359,360,362,363,364,371,374,375,376,377,379,380,381,389,390,395,397,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-162,-163,-165,-166,-35,-37,-119,-121,-123,-168,-63,144,145,146,147,-137,152,-153,-154,-171,-172,-59,161,-47,-53,169,-41,-42,-43,-45,-116,-44,-46,-48,174,176,-45,-161,-164,-28,-29,-120,-122,-167,-169,-173,-174,-64,214,-156,-157,-158,-159,-138,219,220,221,-170,-60,-61,-49,-54,-50,-55,233,-30,-31,-32,-33,-34,234,238,240,241,242,243,247,248,250,-146,-86,-155,-160,-139,-140,-141,-62,-113,-114,-115,288,289,-27,-36,-38,-176,-177,-178,-191,-175,-179,300,-150,312,315,-73,-146,328,-51,-190,331,-142,-149,-146,-146,-65,-67,-68,-70,-66,-69,-58,-84,-74,-146,-89,-91,-146,-130,-146,-52,-117,-118,-192,358,359,360,-143,362,363,315,315,-72,373,374,375,-126,-137,-147,-148,-189,-39,-40,-82,-81,-132,-151,390,-131,-56,-57,-71,-85,-152,-129,-90,]),'NOMBRE':([28,55,63,74,124,125,149,150,278,372,],[78,143,151,157,195,197,216,217,321,388,]),'BOOLEANO':([28,29,37,38,65,90,93,109,112,113,114,115,116,117,118,121,129,160,162,163,164,165,166,167,180,181,182,183,184,187,194,206,208,229,232,233,234,238,239,240,241,242,243,245,247,248,250,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,300,331,336,374,375,390,],[89,89,-35,-37,155,89,89,89,89,-101,-102,-103,-104,-105,-28,-29,89,89,89,-92,-93,-94,-95,-96,-30,-31,-32,-33,-34,89,89,89,89,89,89,-27,-36,-38,89,-176,-177,-178,-191,89,-175,-179,-150,89,89,-97,-98,-99,-100,-106,-107,-108,-109,-110,-111,-112,89,89,-149,-192,89,-132,-151,-152,]),'ENTERO':([28,29,37,38,54,90,93,109,112,113,114,115,116,117,118,121,129,148,160,162,163,164,165,166,167,168,180,181,182,183,184,187,194,206,208,229,232,233,234,238,239,240,241,242,243,245,247,248,250,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,276,300,331,336,374,375,383,385,390,],[79,79,-35,-37,142,79,79,79,79,-101,-102,-103,-104,-105,-28,-29,79,215,79,79,-92,-93,-94,-95,-96,227,-30,-31,-32,-33,-34,79,79,79,79,79,79,-27,-36,-38,79,-176,-177,-178,-191,79,-175,-179,-150,79,79,-97,-98,-99,-100,-106,-107,-108,-109,-110,-111,-112,79,79,319,-149,-192,79,-132,-151,79,79,-152,]),'DECIMAL':([28,29,37,38,90,93,109,112,113,114,115,116,117,118,121,129,160,162,163,164,165,166,167,180,181,182,183,184,187,194,206,208,229,232,233,234,238,239,240,241,242,243,245,247,248,250,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,300,331,336,374,375,383,385,390,],[91,91,-35,-37,91,91,91,91,-101,-102,-103,-104,-105,-28,-29,91,91,91,-92,-93,-94,-95,-96,-30,-31,-32,-33,-34,91,91,91,91,91,91,-27,-36,-38,91,-176,-177,-178,-191,91,-175,-179,-150,91,91,-97,-98,-99,-100,-106,-107,-108,-109,-110,-111,-112,91,91,-149,-192,91,-132,-151,91,91,-152,]),'STRING':([30,187,],[99,99,]),'BOOL':([30,187,],[100,100,]),'BOOLEAN':([30,187,],[101,101,]),'DOUBLE':([30,187,],[102,102,]),'FLOAT':([30,187,],[103,103,]),'ARRAY':([30,109,187,194,246,],[104,189,104,189,299,]),'OBJECT':([30,187,],[105,105,]),'INTEGER':([30,187,],[106,106,]),'INT':([30,187,],[107,107,]),'EQUALS':([34,86,95,119,173,178,203,282,303,305,367,368,],[109,171,171,194,171,171,171,194,171,171,383,385,]),'CONCAT':([34,43,85,86,178,],[110,126,126,110,110,]),'CONCAT_EQUAL':([34,43,85,86,178,],[111,127,127,111,111,]),'MINUS_EQUAL':([34,119,282,],[113,113,113,]),'MOD_EQUAL':([34,119,282,],[114,114,114,]),'MUL_EQUAL':([34,119,282,],[115,115,115,]),'PLUS_EQUAL':([34,119,282,],[116,116,116,]),'DIV_EQUAL':([34,119,282,],[117,117,117,]),'COMMA':([37,38,79,82,83,84,88,89,91,96,118,121,180,181,182,183,184,196,197,215,216,233,234,238,240,241,242,243,247,248,250,279,281,282,283,295,296,300,331,354,358,359,361,374,375,390,],[-35,-37,-47,-41,-42,-43,-44,-46,-48,-45,-28,-29,-30,-31,-32,-33,-34,245,246,276,277,-27,-36,-38,-176,-177,-178,-191,-175,-179,-150,323,-128,-124,-125,336,-145,-149,-192,-127,-147,-148,-144,-132,-151,-152,]),'ELSE':([47,75,159,379,380,],[134,134,134,-56,-57,]),'ELSEIF':([47,75,379,],[135,135,-56,]),'NULL':([65,],[153,]),'SUMA':([77,79,82,83,84,85,86,88,89,91,92,95,96,172,175,178,179,225,312,343,344,358,359,367,],[163,-47,-41,-42,-43,-45,163,-44,-46,-48,163,163,-45,163,163,163,163,163,344,367,369,-147,-148,382,]),'RESTA':([77,79,82,83,84,85,86,88,89,91,92,95,96,172,175,178,179,225,312,343,345,358,359,368,],[164,-47,-41,-42,-43,-45,164,-44,-46,-48,164,164,-45,164,164,164,164,164,345,368,370,-147,-148,384,]),'MULTIPLICACION':([77,79,82,83,84,85,86,88,89,91,92,95,96,172,175,178,179,225,358,359,],[165,-47,-41,-42,-43,-45,165,-44,-46,-48,165,165,-45,165,165,165,165,165,-147,-148,]),'DIVISION':([77,79,82,83,84,85,86,88,89,91,92,95,96,172,175,178,179,225,358,359,],[166,-47,-41,-42,-43,-45,166,-44,-46,-48,166,166,-45,166,166,166,166,166,-147,-148,]),'MODULO':([77,79,82,83,84,85,86,88,89,91,92,95,96,172,175,178,179,225,358,359,],[167,-47,-41,-42,-43,-45,167,-44,-46,-48,167,167,-45,167,167,167,167,167,-147,-148,]),'GREATER':([79,82,83,84,88,89,91,96,151,203,204,358,359,],[-47,-41,-42,-43,-44,-46,-48,-45,218,255,255,-147,-148,]),'IS_SMALLER_OR_EQUAL':([79,82,83,84,88,89,91,96,203,204,358,359,],[-47,-41,-42,-43,-44,-46,-48,-45,256,256,-147,-148,]),'IS_GREATER_OR_EQUAL':([79,82,83,84,88,89,91,96,203,204,358,359,],[-47,-41,-42,-43,-44,-46,-48,-45,257,257,-147,-148,]),'AND':([79,82,83,84,88,89,91,96,203,204,358,359,],[-47,-41,-42,-43,-44,-46,-48,-45,258,258,-147,-148,]),'OR':([79,82,83,84,88,89,91,96,203,204,358,359,],[-47,-41,-42,-43,-44,-46,-48,-45,259,259,-147,-148,]),'XOR':([79,82,83,84,88,89,91,96,203,204,358,359,],[-47,-41,-42,-43,-44,-46,-48,-45,260,260,-147,-148,]),'IS_EQUAL':([79,82,83,84,88,89,91,96,203,204,358,359,],[-47,-41,-42,-43,-44,-46,-48,-45,261,261,-147,-148,]),'IS_NOT_EQUAL':([79,82,83,84,88,89,91,96,203,204,358,359,],[-47,-41,-42,-43,-44,-46,-48,-45,262,262,-147,-148,]),'IS_IDENTICAL':([79,82,83,84,88,89,91,96,203,204,358,359,],[-47,-41,-42,-43,-44,-46,-48,-45,263,263,-147,-148,]),'IS_NOT_IDENTICAL':([79,82,83,84,88,89,91,96,203,204,358,359,],[-47,-41,-42,-43,-44,-46,-48,-45,264,264,-147,-148,]),'NEW':([109,171,],[186,186,]),'COLON':([142,251,280,],[213,302,326,]),'SPLQUEUE':([186,],[235,]),'SPLSTACK':([186,],[236,]),'AS':([209,],[271,]),'CATCH':([274,314,316,317,397,],[-146,-74,348,-91,-90,]),'VOID':([326,],[356,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,136,205,315,318,327,341,],[1,207,267,347,349,357,365,]),'imprimir':([0,136,205,315,318,327,341,],[2,2,2,2,2,2,2,]),'asignacion':([0,35,36,120,136,137,205,222,244,315,318,323,327,341,],[3,118,121,121,3,208,3,283,283,3,3,283,3,3,]),'funciones':([0,136,205,315,318,327,341,],[4,4,4,4,4,4,4,]),'constante':([0,136,205,315,318,327,341,],[5,5,5,5,5,5,5,]),'lectura':([0,109,136,194,205,315,318,327,341,],[6,183,6,183,6,6,6,6,6,]),'bwhile':([0,136,205,269,315,318,327,341,],[7,7,7,311,7,7,7,7,]),'bdo':([0,136,205,315,318,327,341,],[8,8,8,8,8,8,8,]),'bfor':([0,136,205,315,318,327,341,],[9,9,9,9,9,9,9,]),'bforeach':([0,136,205,315,318,327,341,],[10,10,10,10,10,10,10,]),'btry':([0,136,205,315,318,327,341,],[11,11,11,11,11,11,11,]),'repiteCondicional':([0,52,136,205,315,318,327,341,],[12,140,12,12,12,12,12,12,]),'bswitch':([0,136,205,315,318,327,341,],[13,13,13,13,13,13,13,]),'bcase':([0,136,205,315,318,327,341,],[14,14,14,14,14,14,14,]),'bgoto':([0,136,205,315,318,327,341,],[15,15,15,15,15,15,15,]),'bcolas':([0,28,29,90,93,109,129,136,160,162,187,194,205,206,208,229,239,245,252,253,265,266,315,318,327,336,341,],[16,83,83,83,83,83,83,16,83,83,83,83,16,83,83,83,83,83,83,83,83,83,16,16,16,83,16,]),'bpila':([0,28,29,90,93,109,129,136,160,162,187,194,205,206,208,229,239,245,252,253,265,266,315,318,327,336,341,],[17,84,84,84,84,84,84,17,84,84,84,84,17,84,84,84,84,84,84,84,84,84,17,17,17,84,17,]),'bcortes':([0,136,205,315,318,327,341,],[18,18,18,18,18,18,18,]),'brand':([0,109,136,194,205,315,318,327,341,],[19,180,19,180,19,19,19,19,19,]),'escribir':([0,109,136,194,205,315,318,327,341,],[20,181,20,181,20,20,20,20,20,]),'btrim':([0,109,136,194,205,315,318,327,341,],[21,182,21,182,21,21,21,21,21,]),'otros':([0,136,205,315,318,327,341,],[22,22,22,22,22,22,22,]),'breturn':([0,136,205,210,301,302,315,318,325,327,341,],[23,23,23,273,273,273,23,23,273,23,23,]),'comment':([0,136,205,315,318,327,341,],[24,24,24,24,24,24,24,]),'casting':([0,136,205,315,318,327,341,],[25,25,25,25,25,25,25,]),'bconcat':([0,28,109,136,194,205,315,318,327,341,],[26,80,184,26,184,26,26,26,26,26,]),'simbolos':([0,136,205,315,318,327,341,],[27,27,27,27,27,27,27,]),'proteccion':([0,35,36,120,136,137,205,222,244,315,318,323,327,341,],[36,120,120,120,36,120,36,120,120,36,36,120,36,36,]),'asignacion_array':([0,35,36,120,136,137,205,222,244,315,318,323,327,341,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'aumentoCasting':([0,35,36,120,136,137,205,222,244,315,318,323,327,341,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'funcion_nparams':([0,36,136,205,315,318,327,341,],[39,122,39,39,39,39,39,39,]),'funcion_blank':([0,36,136,205,315,318,327,341,],[40,123,40,40,40,40,40,40,]),'funcion_void':([0,136,205,315,318,327,341,],[41,41,41,41,41,41,41,]),'condicion_ifelse':([0,52,136,205,315,318,327,341,],[52,52,52,52,52,52,52,52,]),'empty':([0,136,205,210,274,301,302,315,318,325,327,341,378,],[64,64,64,64,317,64,64,64,64,355,64,64,391,]),'condicion_if':([0,52,136,205,315,318,327,341,],[75,75,75,75,75,75,75,75,]),'valor':([28,29,90,93,109,129,160,162,187,194,206,208,229,239,245,252,253,265,266,336,],[77,92,172,175,179,204,204,225,172,179,204,204,286,296,298,304,306,307,308,361,]),'operaciones_mat':([28,29,109,162,194,],[81,94,185,226,185,]),'tipoDato':([28,29,90,93,109,112,129,160,162,187,194,206,208,229,232,239,245,252,253,265,266,336,],[82,82,82,82,82,193,82,82,82,82,82,82,82,82,290,82,82,82,82,82,82,82,]),'operaciones_mat_par':([28,29,109,162,194,229,],[87,87,87,87,87,287,]),'numero':([28,29,90,93,109,112,129,160,162,187,194,206,208,229,232,239,245,252,253,265,266,336,383,385,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,392,393,]),'tiposCast':([30,187,],[97,237,]),'incrementos_mat':([34,119,282,],[112,112,112,]),'instrucciones':([47,],[131,]),'condicion_else':([47,75,159,],[132,158,223,]),'condicion_elseif':([47,75,],[133,159,]),'operadores':([77,86,92,95,172,175,178,179,225,],[162,170,162,170,229,229,232,162,162,]),'array_def':([109,194,],[188,188,]),'condicion':([129,160,206,208,],[202,224,268,270,]),'stc_bloque_def':([139,280,297,322,346,366,396,],[211,324,324,353,371,381,397,]),'operador_logico':([203,204,],[252,265,]),'condicion_booleana':([203,204,],[253,266,]),'stc_bloque':([210,301,302,325,],[272,339,340,272,]),'params_list':([222,244,],[279,279,]),'param':([222,244,323,],[281,281,354,]),'array_elmnt':([239,],[295,]),'catches':([274,],[316,]),'for_incr':([312,],[342,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> imprimir','cuerpo',1,'p_cuerpo','sintactico2.py',10),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','sintactico2.py',11),
  ('cuerpo -> funciones','cuerpo',1,'p_cuerpo','sintactico2.py',12),
  ('cuerpo -> constante','cuerpo',1,'p_cuerpo','sintactico2.py',13),
  ('cuerpo -> lectura','cuerpo',1,'p_cuerpo','sintactico2.py',14),
  ('cuerpo -> bwhile','cuerpo',1,'p_cuerpo','sintactico2.py',15),
  ('cuerpo -> bdo','cuerpo',1,'p_cuerpo','sintactico2.py',16),
  ('cuerpo -> bfor','cuerpo',1,'p_cuerpo','sintactico2.py',17),
  ('cuerpo -> bforeach','cuerpo',1,'p_cuerpo','sintactico2.py',18),
  ('cuerpo -> btry','cuerpo',1,'p_cuerpo','sintactico2.py',19),
  ('cuerpo -> repiteCondicional','cuerpo',1,'p_cuerpo','sintactico2.py',20),
  ('cuerpo -> bswitch','cuerpo',1,'p_cuerpo','sintactico2.py',21),
  ('cuerpo -> bcase','cuerpo',1,'p_cuerpo','sintactico2.py',22),
  ('cuerpo -> bgoto','cuerpo',1,'p_cuerpo','sintactico2.py',23),
  ('cuerpo -> bcolas','cuerpo',1,'p_cuerpo','sintactico2.py',24),
  ('cuerpo -> bpila','cuerpo',1,'p_cuerpo','sintactico2.py',25),
  ('cuerpo -> bcortes','cuerpo',1,'p_cuerpo','sintactico2.py',26),
  ('cuerpo -> brand','cuerpo',1,'p_cuerpo','sintactico2.py',27),
  ('cuerpo -> escribir','cuerpo',1,'p_cuerpo','sintactico2.py',28),
  ('cuerpo -> btrim','cuerpo',1,'p_cuerpo','sintactico2.py',29),
  ('cuerpo -> otros','cuerpo',1,'p_cuerpo','sintactico2.py',30),
  ('cuerpo -> breturn','cuerpo',1,'p_cuerpo','sintactico2.py',31),
  ('cuerpo -> comment','cuerpo',1,'p_cuerpo','sintactico2.py',32),
  ('cuerpo -> casting','cuerpo',1,'p_cuerpo','sintactico2.py',33),
  ('cuerpo -> bconcat','cuerpo',1,'p_cuerpo','sintactico2.py',34),
  ('cuerpo -> simbolos','cuerpo',1,'p_cuerpo','sintactico2.py',35),
  ('asignacion -> VARIABLE EQUALS valor SEMI','asignacion',4,'p_asignacion','sintactico2.py',41),
  ('asignacion -> VAR asignacion','asignacion',2,'p_asignacion','sintactico2.py',42),
  ('asignacion -> proteccion asignacion','asignacion',2,'p_asignacion','sintactico2.py',43),
  ('asignacion -> VARIABLE EQUALS brand','asignacion',3,'p_asignacion','sintactico2.py',44),
  ('asignacion -> VARIABLE EQUALS escribir','asignacion',3,'p_asignacion','sintactico2.py',45),
  ('asignacion -> VARIABLE EQUALS btrim','asignacion',3,'p_asignacion','sintactico2.py',46),
  ('asignacion -> VARIABLE EQUALS lectura','asignacion',3,'p_asignacion','sintactico2.py',47),
  ('asignacion -> VARIABLE EQUALS bconcat','asignacion',3,'p_asignacion','sintactico2.py',48),
  ('asignacion -> asignacion_array','asignacion',1,'p_asignacion','sintactico2.py',49),
  ('asignacion -> VARIABLE EQUALS operaciones_mat SEMI','asignacion',4,'p_asignacion','sintactico2.py',50),
  ('asignacion -> aumentoCasting','asignacion',1,'p_asignacion','sintactico2.py',51),
  ('asignacion_array -> VARIABLE EQUALS array_def SEMI','asignacion_array',4,'p_asignacion_array','sintactico2.py',57),
  ('constante -> DEFINE LPAREN CADENA COMMA valor RPAREN SEMI','constante',7,'p_constante','sintactico2.py',61),
  ('constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI','constante',7,'p_constante','sintactico2.py',62),
  ('valor -> tipoDato','valor',1,'p_valor','sintactico2.py',67),
  ('valor -> bcolas','valor',1,'p_valor','sintactico2.py',68),
  ('valor -> bpila','valor',1,'p_valor','sintactico2.py',69),
  ('tipoDato -> numero','tipoDato',1,'p_tipoDato','sintactico2.py',75),
  ('tipoDato -> CADENA','tipoDato',1,'p_tipoDato','sintactico2.py',76),
  ('tipoDato -> BOOLEANO','tipoDato',1,'p_tipoDato','sintactico2.py',77),
  ('numero -> ENTERO','numero',1,'p_numero','sintactico2.py',82),
  ('numero -> DECIMAL','numero',1,'p_numero','sintactico2.py',83),
  ('imprimir -> ECHO valor SEMI','imprimir',3,'p_imprimir','sintactico2.py',89),
  ('imprimir -> PRINT valor SEMI','imprimir',3,'p_imprimir','sintactico2.py',90),
  ('imprimir -> PRINT LPAREN valor RPAREN SEMI','imprimir',5,'p_imprimir','sintactico2.py',91),
  ('imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI','imprimir',6,'p_imprimir','sintactico2.py',92),
  ('imprimir -> ECHO bconcat','imprimir',2,'p_imprimir','sintactico2.py',93),
  ('imprimir -> ECHO operaciones_mat SEMI','imprimir',3,'p_imprimir','sintactico2.py',94),
  ('imprimir -> PRINT operaciones_mat SEMI','imprimir',3,'p_imprimir','sintactico2.py',95),
  ('condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_if',7,'p_condicion_if','sintactico2.py',102),
  ('condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_elseif',7,'p_condicion_elseif','sintactico2.py',107),
  ('condicion_else -> ELSE LBRACE cuerpo RBRACE','condicion_else',4,'p_condicion_else','sintactico2.py',112),
  ('condicion_ifelse -> condicion_if','condicion_ifelse',1,'p_condicion_ifelse','sintactico2.py',117),
  ('condicion_ifelse -> condicion_if condicion_else','condicion_ifelse',2,'p_condicion_ifelse','sintactico2.py',118),
  ('condicion_ifelse -> condicion_if condicion_elseif','condicion_ifelse',2,'p_condicion_ifelse','sintactico2.py',119),
  ('condicion_ifelse -> condicion_if condicion_elseif condicion_else','condicion_ifelse',3,'p_condicion_ifelse','sintactico2.py',120),
  ('repiteCondicional -> condicion_ifelse','repiteCondicional',1,'p_repiteCondicional','sintactico2.py',124),
  ('repiteCondicional -> condicion_ifelse repiteCondicional','repiteCondicional',2,'p_repiteCondicional','sintactico2.py',125),
  ('condicion -> VARIABLE operador_logico VARIABLE','condicion',3,'p_condicion','sintactico2.py',129),
  ('condicion -> valor operador_logico valor','condicion',3,'p_condicion','sintactico2.py',130),
  ('condicion -> VARIABLE operador_logico valor','condicion',3,'p_condicion','sintactico2.py',131),
  ('condicion -> VARIABLE condicion_booleana VARIABLE','condicion',3,'p_condicion','sintactico2.py',132),
  ('condicion -> valor condicion_booleana valor','condicion',3,'p_condicion','sintactico2.py',133),
  ('condicion -> VARIABLE condicion_booleana valor','condicion',3,'p_condicion','sintactico2.py',134),
  ('bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def','bfor',8,'p_bfor','sintactico2.py',139),
  ('stc_bloque -> stc_bloque SEMI cuerpo','stc_bloque',3,'p_stc_bloque','sintactico2.py',143),
  ('stc_bloque -> breturn','stc_bloque',1,'p_stc_bloque','sintactico2.py',144),
  ('stc_bloque_def -> LBRACE stc_bloque RBRACE','stc_bloque_def',3,'p_stc_bloque_def','sintactico2.py',149),
  ('for_incr -> VARIABLE SUMA SUMA','for_incr',3,'p_for_incr','sintactico2.py',153),
  ('for_incr -> SUMA SUMA VARIABLE','for_incr',3,'p_for_incr','sintactico2.py',154),
  ('for_incr -> VARIABLE RESTA RESTA','for_incr',3,'p_for_incr','sintactico2.py',155),
  ('for_incr -> RESTA RESTA VARIABLE','for_incr',3,'p_for_incr','sintactico2.py',156),
  ('for_incr -> VARIABLE SUMA EQUALS numero','for_incr',4,'p_for_incr','sintactico2.py',157),
  ('for_incr -> VARIABLE RESTA EQUALS numero','for_incr',4,'p_for_incr','sintactico2.py',158),
  ('bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def','bforeach',7,'p_bforeach','sintactico2.py',162),
  ('bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE','bwhile',7,'p_bwhile','sintactico2.py',167),
  ('bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque','bwhile',6,'p_bwhile','sintactico2.py',168),
  ('bdo -> DO LBRACE cuerpo RBRACE bwhile','bdo',5,'p_bdo','sintactico2.py',173),
  ('bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE','bswitch',8,'p_bswitch','sintactico2.py',179),
  ('bcase -> CASE ENTERO COLON','bcase',3,'p_bcase','sintactico2.py',183),
  ('innerSwitch -> bcase cuerpo BREAK SEMI','innerSwitch',4,'p_innerSwitch','sintactico2.py',187),
  ('innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch','innerSwitch',7,'p_innerSwitch','sintactico2.py',188),
  ('btry -> TRY LBRACE stc_bloque_def RBRACE catches','btry',5,'p_btry','sintactico2.py',194),
  ('catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def','catches',7,'p_catches','sintactico2.py',198),
  ('catches -> empty','catches',1,'p_catches','sintactico2.py',199),
  ('operadores -> SUMA','operadores',1,'p_operadores','sintactico2.py',205),
  ('operadores -> RESTA','operadores',1,'p_operadores','sintactico2.py',206),
  ('operadores -> MULTIPLICACION','operadores',1,'p_operadores','sintactico2.py',207),
  ('operadores -> DIVISION','operadores',1,'p_operadores','sintactico2.py',208),
  ('operadores -> MODULO','operadores',1,'p_operadores','sintactico2.py',209),
  ('operador_logico -> SMALLER','operador_logico',1,'p_operador_logico','sintactico2.py',214),
  ('operador_logico -> GREATER','operador_logico',1,'p_operador_logico','sintactico2.py',215),
  ('operador_logico -> IS_SMALLER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico2.py',216),
  ('operador_logico -> IS_GREATER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico2.py',217),
  ('incrementos_mat -> MINUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',222),
  ('incrementos_mat -> MOD_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',223),
  ('incrementos_mat -> MUL_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',224),
  ('incrementos_mat -> PLUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',225),
  ('incrementos_mat -> DIV_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',226),
  ('condicion_booleana -> AND','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',231),
  ('condicion_booleana -> OR','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',232),
  ('condicion_booleana -> XOR','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',233),
  ('condicion_booleana -> IS_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',234),
  ('condicion_booleana -> IS_NOT_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',235),
  ('condicion_booleana -> IS_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',236),
  ('condicion_booleana -> IS_NOT_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',237),
  ('operaciones_mat -> valor operadores valor','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',242),
  ('operaciones_mat -> valor operadores operaciones_mat','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',243),
  ('operaciones_mat -> VARIABLE operadores VARIABLE','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',244),
  ('operaciones_mat -> operaciones_mat_par','operaciones_mat',1,'p_operaciones_mat','sintactico2.py',245),
  ('operaciones_mat_par -> LPAREN valor operadores valor RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',250),
  ('operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',251),
  ('funciones -> funcion_nparams','funciones',1,'p_funciones','sintactico2.py',256),
  ('funciones -> proteccion funcion_nparams','funciones',2,'p_funciones','sintactico2.py',257),
  ('funciones -> funcion_blank','funciones',1,'p_funciones','sintactico2.py',258),
  ('funciones -> proteccion funcion_blank','funciones',2,'p_funciones','sintactico2.py',259),
  ('funciones -> funcion_void','funciones',1,'p_funciones','sintactico2.py',260),
  ('param -> VARIABLE','param',1,'p_param','sintactico2.py',265),
  ('param -> asignacion','param',1,'p_param','sintactico2.py',266),
  ('funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def','funcion_nparams',6,'p_funcion_nparams','sintactico2.py',271),
  ('params_list -> params_list COMMA param','params_list',3,'p_params_list','sintactico2.py',275),
  ('params_list -> param','params_list',1,'p_params_list','sintactico2.py',276),
  ('funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE','funcion_void',9,'p_funcion_void','sintactico2.py',280),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def','funcion_blank',5,'p_funcion_blank','sintactico2.py',284),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE','funcion_blank',7,'p_funcion_blank','sintactico2.py',285),
  ('brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI','brand',7,'p_brand','sintactico2.py',289),
  ('proteccion -> PUBLIC','proteccion',1,'p_proteccion','sintactico2.py',293),
  ('proteccion -> PRIVATE','proteccion',1,'p_proteccion','sintactico2.py',294),
  ('proteccion -> PROTECTED','proteccion',1,'p_proteccion','sintactico2.py',295),
  ('proteccion -> STATIC','proteccion',1,'p_proteccion','sintactico2.py',296),
  ('breturn -> empty','breturn',1,'p_breturn','sintactico2.py',300),
  ('breturn -> RETURN SEMI','breturn',2,'p_breturn','sintactico2.py',301),
  ('breturn -> RETURN NULL SEMI','breturn',3,'p_breturn','sintactico2.py',302),
  ('breturn -> RETURN VARIABLE SEMI','breturn',3,'p_breturn','sintactico2.py',303),
  ('breturn -> RETURN BOOLEANO SEMI','breturn',3,'p_breturn','sintactico2.py',304),
  ('array_def -> ARRAY LPAREN RPAREN','array_def',3,'p_array_def','sintactico2.py',311),
  ('array_def -> ARRAY LPAREN array_elmnt RPAREN','array_def',4,'p_array_def','sintactico2.py',312),
  ('array_elmnt -> array_elmnt COMMA valor','array_elmnt',3,'p_array_elmnt','sintactico2.py',315),
  ('array_elmnt -> valor','array_elmnt',1,'p_array_elmnt','sintactico2.py',316),
  ('empty -> <empty>','empty',0,'p_empty','sintactico2.py',319),
  ('bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI','bcolas',7,'p_bcolas','sintactico2.py',324),
  ('bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI','bpila',7,'p_bpila','sintactico2.py',329),
  ('lectura -> READLINE LPAREN CADENA RPAREN SEMI','lectura',5,'p_lectura','sintactico2.py',334),
  ('lectura -> READLINE LPAREN RPAREN SEMI','lectura',4,'p_lectura','sintactico2.py',335),
  ('escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI','escribir',7,'p_escribir','sintactico2.py',338),
  ('btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI','btrim',8,'p_btrim','sintactico2.py',342),
  ('comment -> COMENTARIOS','comment',1,'p_comment','sintactico2.py',347),
  ('comment -> DOC_COMENTARIOS','comment',1,'p_comment','sintactico2.py',348),
  ('bgoto -> GOTO NOMBRE SEMI','bgoto',3,'p_bgoto','sintactico2.py',352),
  ('bcortes -> EXIT SEMI','bcortes',2,'p_bcortes','sintactico2.py',356),
  ('bcortes -> BREAK SEMI','bcortes',2,'p_bcortes','sintactico2.py',357),
  ('bcortes -> DEFAULT SEMI','bcortes',2,'p_bcortes','sintactico2.py',358),
  ('bcortes -> CONTINUE SEMI','bcortes',2,'p_bcortes','sintactico2.py',359),
  ('otros -> SMALLER NOMBRE GREATER','otros',3,'p_otros','sintactico2.py',363),
  ('simbolos -> LPAREN RPAREN','simbolos',2,'p_simbolos','sintactico2.py',368),
  ('simbolos -> LPAREN','simbolos',1,'p_simbolos','sintactico2.py',369),
  ('simbolos -> RPAREN','simbolos',1,'p_simbolos','sintactico2.py',370),
  ('simbolos -> LBRACKET RBRACKET','simbolos',2,'p_simbolos','sintactico2.py',371),
  ('simbolos -> LBRACKET','simbolos',1,'p_simbolos','sintactico2.py',372),
  ('simbolos -> RBRACKET','simbolos',1,'p_simbolos','sintactico2.py',373),
  ('simbolos -> LBRACE RBRACE','simbolos',2,'p_simbolos','sintactico2.py',374),
  ('simbolos -> LBRACE','simbolos',1,'p_simbolos','sintactico2.py',375),
  ('simbolos -> RBRACE instrucciones','simbolos',2,'p_simbolos','sintactico2.py',376),
  ('simbolos -> OPEN_TAG CLOSE_TAG','simbolos',2,'p_simbolos','sintactico2.py',377),
  ('simbolos -> OPEN_TAG','simbolos',1,'p_simbolos','sintactico2.py',378),
  ('simbolos -> CLOSE_TAG','simbolos',1,'p_simbolos','sintactico2.py',379),
  ('instrucciones -> condicion_else','instrucciones',1,'p_instrucciones','sintactico2.py',384),
  ('instrucciones -> condicion_elseif','instrucciones',1,'p_instrucciones','sintactico2.py',385),
  ('bconcat -> CADENA CONCAT CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',390),
  ('bconcat -> VARIABLE CONCAT VARIABLE SEMI','bconcat',4,'p_bconcat','sintactico2.py',391),
  ('bconcat -> VARIABLE CONCAT CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',392),
  ('bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',393),
  ('bconcat -> CADENA CONCAT_EQUAL CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',394),
  ('tiposCast -> STRING','tiposCast',1,'p_tiposCast','sintactico2.py',399),
  ('tiposCast -> BOOL','tiposCast',1,'p_tiposCast','sintactico2.py',400),
  ('tiposCast -> BOOLEAN','tiposCast',1,'p_tiposCast','sintactico2.py',401),
  ('tiposCast -> DOUBLE','tiposCast',1,'p_tiposCast','sintactico2.py',402),
  ('tiposCast -> FLOAT','tiposCast',1,'p_tiposCast','sintactico2.py',403),
  ('tiposCast -> ARRAY','tiposCast',1,'p_tiposCast','sintactico2.py',404),
  ('tiposCast -> OBJECT','tiposCast',1,'p_tiposCast','sintactico2.py',405),
  ('tiposCast -> INTEGER','tiposCast',1,'p_tiposCast','sintactico2.py',406),
  ('tiposCast -> INT','tiposCast',1,'p_tiposCast','sintactico2.py',407),
  ('casting -> VARIABLE EQUALS LPAREN tiposCast RPAREN VARIABLE SEMI','casting',7,'p_casting','sintactico2.py',413),
  ('casting -> LPAREN tiposCast RPAREN VARIABLE SEMI','casting',5,'p_casting','sintactico2.py',414),
  ('aumentoCasting -> VARIABLE incrementos_mat tipoDato SEMI','aumentoCasting',4,'p_aumentoCasting','sintactico2.py',418),
  ('aumentoCasting -> VARIABLE EQUALS VARIABLE operadores tipoDato SEMI','aumentoCasting',6,'p_aumentoCasting','sintactico2.py',419),
]
