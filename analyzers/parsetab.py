
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ARRAY_POP ARRAY_PUSH ARRAY_SEARCH ARRAY_VALUES AS BOOL BOOLEAN BOOLEANO BREAK CADENA CASE CATCH CLOSE_TAG COLON COMENTARIOS COMMA CONCAT CONCAT_EQUAL CONTINUE COUNT CURRENT DECIMAL DEFAULT DEFINE DEQUEUE DIVISION DIV_EQUAL DO DOC_COMENTARIOS DOUBLE ECHO ELSE ELSEIF ENQUEUE ENTERO EQUALS EXCEPTION EXIT FLECHA FLOAT FOR FOREACH FUNCTION FWRITE GOTO GREATER IF INT INTEGER IS_EQUAL IS_GREATER_OR_EQUAL IS_IDENTICAL IS_NOT_EQUAL IS_NOT_IDENTICAL IS_SMALLER_OR_EQUAL LBRACE LBRACKET LPAREN MINUS_EQUAL MODULO MOD_EQUAL MULTIPLICACION MUL_EQUAL NEW NEXT NOMBRE NULL OBJECT OPEN_TAG OR PLUS_EQUAL POP PRINT PRINT_R PRIVATE PROTECTED PUBLIC PUSH RAND RBRACE RBRACKET READLINE RESTA RETURN REWIND RPAREN SEMI SMALLER SPLQUEUE SPLSTACK STATIC STRING SUMA SWITCH TRIM TRY VALID VAR VARIABLE VAR_DUMP VOID WHILE XORcuerpo : imprimir\n            | asignacion\n            | funciones\n            | llamada_funcion\n            | constante\n            | lectura\n            | condicion_ifelse\n            | bwhile\n            | bdo\n            | bfor\n            | incrementOp\n            | bforeach\n            | btry\n            | bswitch\n            | bcase\n            | bgoto\n            | bcolas\n            | bpila\n            | bcortes\n            | brand\n            | escribir\n            | btrim\n            | otros\n            | breturn\n            | comment\n            | casting\n            | bconcat\n            | simbolos\n            | funcionesCP_semi\n            | addpila\n            | addcola\n            | minuscola\n            | arraypop\n            | arraypush\n            | poppila\n  asignacion : VARIABLE EQUALS valor SEMI\n                | VAR asignacion\n                | proteccion asignacion\n                | VARIABLE EQUALS brand\n                | VARIABLE EQUALS escribir\n                | VARIABLE EQUALS btrim\n                | VARIABLE EQUALS lectura\n                | VARIABLE EQUALS bconcat\n                | asignacion_array\n                | VARIABLE EQUALS operaciones_mat SEMI\n                | aumentoCasting\n                | VARIABLE EQUALS llamada_funcion\n                | VARIABLE EQUALS arrayvalues SEMI\n                | VARIABLE EQUALS arraysearch SEMI\n  asignacion_array : VARIABLE EQUALS array_def SEMIvalor : tipoDato\n            | bcolas\n            | bpila\n  tipoDato : numero\n            | CADENA\n            | BOOLEANO\n  numero : ENTERO\n          | DECIMAL\n  imprimir : ECHO valor SEMI\n            | PRINT valor SEMI\n            | PRINT LPAREN valor RPAREN SEMI\n            | PRINT bconcat\n            | ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI\n            | ECHO bconcat\n            | ECHO operaciones_mat SEMI\n            | PRINT operaciones_mat SEMI\n            | ECHO VARIABLE SEMI\n            | PRINT VARIABLE SEMI\n            | ECHO funcionesCP_semi\n            | PRINT funcionesCP_semi\n            | ECHO funcionesCP_semi COMMA NOMBRE SEMI\n            | ECHO poppila\n            | VAR_DUMP LPAREN VARIABLE RPAREN SEMI\n            | VAR_DUMP LPAREN arrayvalues RPAREN SEMI\n            | PRINT_R LPAREN arraysearch RPAREN SEMI\n            | PRINT_R LPAREN VARIABLE RPAREN SEMI\n            | PRINT_R LPAREN arrayvalues RPAREN SEMI\n  condicion_if :  IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n                  | IF LPAREN condicion RPAREN llamada_funcion\n  condicion_elseif :  ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_else :  ELSE LBRACE cuerpo RBRACE\n  condicion_ifelse : condicion_if\n                      | condicion_if condicion_else\n                      | condicion_if condicion_elseif\n                      | condicion_if condicion_elseif condicion_else\n   condicion : VARIABLE operador_logico VARIABLE\n            | valor operador_logico valor \n            | VARIABLE operador_logico valor\n            | VARIABLE condicion_booleana VARIABLE\n            | valor condicion_booleana valor\n            | VARIABLE condicion_booleana valor\n            | LPAREN VARIABLE operadores valor RPAREN operador_logico valor\n            | LPAREN VARIABLE operadores valor RPAREN condicion_booleana valor\n            | condicion condicion_booleana condicion\n            | condicion condicion_booleana comprobacion\n            | aumentoCasting\n            | VARIABLE\n            | funcionesCP\n            \n  bfor : FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_defstc_bloque : stc_bloque SEMI cuerpo\n                | breturn\n  stc_bloque_def : LBRACE stc_bloque RBRACE\n                    | LBRACE cuerpo RBRACE\n  for_incr : VARIABLE SUMA SUMA\n          | SUMA SUMA VARIABLE\n          | VARIABLE RESTA RESTA\n          | RESTA RESTA VARIABLE\n          | VARIABLE SUMA EQUALS numero\n          | VARIABLE RESTA EQUALS numero\n  incrementOp : VARIABLE SUMA SUMA SEMI\n              | VARIABLE RESTA RESTA SEMI\n  bforeach :  FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def bwhile : WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE \n  | WHILE LPAREN condicion RPAREN COLON stc_bloque \n  | WHILE LPAREN condicion RPAREN SEMI\n  | \n   bdo : DO LBRACE cuerpo RBRACE bwhile \n   bswitch : SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACEbcase : CASE ENTERO COLON\n          | CASE CADENA COLON  innerSwitch :  bcase cuerpo BREAK SEMI\n                 | bcase cuerpo BREAK SEMI innerSwitch \n  btry : TRY LBRACE stc_bloque_def RBRACE catchescatches : catches CATCH LPAREN EXCEPTION VARIABLE RPAREN stc_bloque_def\n          | emptyoperadores : SUMA \n                  | RESTA\n                  | MULTIPLICACION\n                  | DIVISION\n                  | MODULO\n  operador_logico :  SMALLER\n                        | GREATER\n                        | IS_SMALLER_OR_EQUAL\n                        | IS_GREATER_OR_EQUAL\n  incrementos_mat :  MINUS_EQUAL\n                        | MOD_EQUAL\n                        | MUL_EQUAL\n                        | PLUS_EQUAL\n                        | DIV_EQUAL\n  condicion_booleana :  AND\n                        | OR\n                        | XOR\n                        | IS_EQUAL\n                        | IS_NOT_EQUAL\n                        | IS_IDENTICAL\n                        | IS_NOT_IDENTICAL\n  operaciones_mat :  valor operadores valor\n                        | valor operadores operaciones_mat\n                        | VARIABLE operadores VARIABLE\n                        | operaciones_mat_par\n                       \n  operaciones_mat_par :  LPAREN valor operadores valor RPAREN\n                          |  LPAREN valor operadores operaciones_mat_par RPAREN\n                          | LPAREN VARIABLE operadores VARIABLE RPAREN\n                          | LPAREN VARIABLE operadores valor RPAREN operadores valor\n                          | LPAREN VARIABLE operadores tipoDato RPAREN\n                          | LPAREN VARIABLE operadores tipoDato RPAREN operadores tipoDato\n  funciones : funcion_nparams\n              | proteccion funcion_nparams\n              | funcion_blank\n              | proteccion funcion_blank\n              | funcion_void\n  param : VARIABLE\n          | asignacion\n          funcion_nparams : FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_defparams_list : params_list COMMA param\n                 | param\n                 | empty\n  funcion_void : FUNCTION NOMBRE LPAREN  RPAREN COLON VOID LBRACE empty RBRACE funcion_blank : FUNCTION NOMBRE LPAREN  RPAREN stc_bloque_def\n                    | FUNCTION NOMBRE LPAREN  RPAREN LBRACE empty RBRACE\n  llamada_funcion : NOMBRE LPAREN params_list RPAREN SEMIbrand : RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMIproteccion : PUBLIC\n          | PRIVATE\n          | PROTECTED\n          | STATIC\n  breturn : empty\n        | RETURN SEMI \n        | RETURN NULL SEMI\n        | RETURN VARIABLE SEMI\n        | RETURN BOOLEANO SEMI\n        | breturn RBRACE\n        array_def : ARRAY LPAREN RPAREN\n          | ARRAY LPAREN array_elmnt RPARENarray_elmnt : array_elmnt COMMA valor\n            | valorempty :  bcolas : VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI\n  lectura : READLINE LPAREN CADENA RPAREN SEMI\n          | READLINE LPAREN RPAREN SEMIescribir : FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI\n   btrim : TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI\n   comment : COMENTARIOS\n              | DOC_COMENTARIOS\n   bgoto : GOTO NOMBRE SEMIbcortes : EXIT SEMI\n              | BREAK SEMI\n              | DEFAULT SEMI\n              | CONTINUE SEMI\n   otros : SMALLER NOMBRE GREATER\n            | SMALLER DIVISION NOMBRE GREATER\n            | NOMBRE COLON \n   \n    comprobacion : NOMBRE LPAREN valor RPAREN\n                  | NOMBRE LPAREN VARIABLE RPAREN\n  \n  simbolos : LPAREN RPAREN\n            | LPAREN\n            | RPAREN\n            | LBRACKET RBRACKET\n            | LBRACKET\n            | RBRACKET\n            | LBRACE RBRACE\n            | LBRACE\n            | RBRACE instrucciones\n            | OPEN_TAG CLOSE_TAG\n            | OPEN_TAG\n            | CLOSE_TAG\n  \n    instrucciones : condicion_else\n                  | condicion_elseif\n                  | bwhile\n                  | bfor\n                  | funciones\n                  | bswitch\n                  | bdo\n                  | catches\n  bconcat : CADENA CONCAT CADENA SEMI\n            | VARIABLE CONCAT CADENA SEMI\n            | VARIABLE CONCAT_EQUAL CADENA SEMI\n            | CADENA CONCAT_EQUAL CADENA SEMI\n            | VARIABLE CONCAT VARIABLE SEMI\n            | VARIABLE CONCAT CADENA CONCAT VARIABLE SEMI\n            \n  tiposCast :  STRING\n            | BOOL\n            | BOOLEAN\n            | DOUBLE\n            | FLOAT\n            | ARRAY\n            | OBJECT \n            | INTEGER\n            | INT\n        \n            \n   casting : VARIABLE EQUALS LPAREN tiposCast RPAREN VARIABLE SEMI  \n              | LPAREN tiposCast RPAREN VARIABLE SEMI\n   \n    aumentoCasting : VARIABLE incrementos_mat tipoDato SEMI\n                    | VARIABLE EQUALS VARIABLE operadores tipoDato SEMI\n                    | VARIABLE EQUALS VARIABLE operadores VARIABLE operadores operaciones_mat_par SEMI\n                    | VARIABLE operadores tipoDato condicion_booleana valor\n                    | VARIABLE incrementos_mat VARIABLE SEMI\n                    \n  bpila : VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI\n    addpila : VARIABLE FLECHA PUSH LPAREN valor RPAREN SEMI\n          | VARIABLE FLECHA PUSH LPAREN VARIABLE RPAREN SEMI\n  poppila : VARIABLE FLECHA POP LPAREN RPAREN SEMI\n    funcionesCP : VARIABLE FLECHA REWIND LPAREN RPAREN \n                | VARIABLE FLECHA VALID LPAREN RPAREN \n                | VARIABLE FLECHA COUNT LPAREN RPAREN \n                | VARIABLE FLECHA NEXT LPAREN RPAREN \n                | VARIABLE FLECHA CURRENT LPAREN RPAREN \n                \n  funcionesCP_semi : funcionesCP\n                      | funcionesCP SEMI\n      addcola : VARIABLE FLECHA ENQUEUE LPAREN valor RPAREN SEMI\n            | VARIABLE FLECHA ENQUEUE LPAREN VARIABLE RPAREN SEMI\n   \n      minuscola : VARIABLE FLECHA DEQUEUE LPAREN valor RPAREN SEMI\n             | VARIABLE FLECHA DEQUEUE LPAREN VARIABLE RPAREN SEMI\n   constante : DEFINE LPAREN CADENA COMMA valor RPAREN SEMI\n              | DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMIarraypop : ARRAY_POP LPAREN VARIABLE RPAREN SEMIarraypush : ARRAY_PUSH LPAREN VARIABLE COMMA valor RPAREN SEMI\n             | ARRAY_PUSH LPAREN VARIABLE COMMA VARIABLE RPAREN SEMI\n  arrayvalues : ARRAY_VALUES LPAREN VARIABLE RPARENarraysearch : ARRAY_SEARCH LPAREN valor COMMA VARIABLE RPAREN'
    
_lr_action_items = {'ECHO':([0,175,276,288,291,292,465,477,479,506,521,],[37,37,37,37,-119,-120,37,37,37,37,37,]),'PRINT':([0,175,276,288,291,292,465,477,479,506,521,],[38,38,38,38,-119,-120,38,38,38,38,38,]),'VAR_DUMP':([0,175,276,288,291,292,465,477,479,506,521,],[45,45,45,45,-119,-120,45,45,45,45,45,]),'PRINT_R':([0,175,276,288,291,292,465,477,479,506,521,],[46,46,46,46,-119,-120,46,46,46,46,46,]),'VARIABLE':([0,37,38,47,48,49,50,77,85,86,87,88,94,100,101,102,105,106,107,108,110,126,129,132,135,137,138,139,140,141,142,143,144,145,146,147,149,150,162,175,176,177,179,198,199,201,203,204,205,209,215,221,229,230,231,232,233,235,239,267,276,277,278,286,288,291,292,304,312,313,317,318,319,320,321,322,326,327,328,329,332,333,334,335,336,337,338,345,346,347,348,349,350,351,352,353,354,360,361,363,364,366,371,372,373,374,375,376,377,378,379,380,384,395,409,415,434,443,446,460,462,465,477,479,488,493,495,496,506,511,512,521,531,534,535,557,558,562,563,572,575,576,588,],[44,97,113,148,148,-44,-46,194,-173,-174,-175,-176,-57,-51,-52,-53,214,-54,-56,-58,214,225,227,247,259,-135,-136,-137,-138,-139,-128,-129,-130,262,265,-37,148,-38,280,44,148,287,290,302,303,280,308,-126,-127,310,-55,315,-39,-40,-41,-42,-43,-47,214,227,44,280,369,280,44,-119,-120,225,403,404,225,411,-36,-45,-48,-49,-50,416,403,403,-229,421,-226,-227,422,424,426,-246,-242,403,-140,-141,-142,-143,-144,-145,-146,225,403,-225,-228,-190,280,453,455,457,-131,-132,-133,-134,403,403,463,473,-171,491,-245,-189,403,513,515,44,44,44,-243,537,403,-230,44,551,552,44,403,-188,-247,585,586,-172,-191,-244,403,403,-192,]),'VAR':([0,47,48,85,86,87,88,126,149,175,176,276,288,291,292,304,317,360,465,477,479,506,521,],[47,47,47,-173,-174,-175,-176,47,47,47,47,47,47,-119,-120,47,47,47,47,47,47,47,47,]),'NOMBRE':([0,37,67,75,89,129,153,154,175,188,189,191,212,267,276,288,291,292,348,349,350,351,352,353,354,371,392,398,465,477,479,506,521,],[41,93,182,190,200,241,268,270,41,295,296,298,311,241,41,41,-119,-120,-140,-141,-142,-143,-144,-145,-146,452,471,241,41,41,41,41,41,]),'DEFINE':([0,175,276,288,291,292,465,477,479,506,521,],[54,54,54,54,-119,-120,54,54,54,54,54,]),'READLINE':([0,129,175,267,276,288,291,292,465,477,479,506,521,],[56,56,56,56,56,56,-119,-120,56,56,56,56,56,]),'WHILE':([0,60,175,276,288,291,292,382,465,477,479,506,521,],[58,58,58,58,58,-119,-120,58,58,58,58,58,58,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,42,43,49,50,51,52,53,57,59,60,76,78,79,80,81,82,91,94,95,98,99,100,101,102,106,107,108,111,114,116,127,128,147,150,151,152,158,159,163,164,165,166,167,168,169,170,171,172,174,183,184,185,186,192,196,197,202,207,208,215,216,218,219,229,230,231,232,233,235,275,291,292,293,297,299,300,301,319,320,321,322,326,330,331,332,334,335,345,346,363,364,366,382,388,393,400,407,408,409,429,430,431,432,433,434,435,436,437,438,439,443,444,448,449,461,464,465,466,467,472,476,480,481,488,496,503,509,510,519,527,534,535,536,539,540,541,542,543,544,545,546,549,559,560,562,563,565,566,567,569,572,574,579,580,588,595,],[-116,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-206,-207,-209,-210,-44,-46,-157,-159,-161,-82,-212,-116,-177,-193,-194,-215,-216,-256,-182,-57,-64,-69,-72,-51,-52,-53,-54,-56,-58,-62,-70,-205,-202,-208,-37,-38,-158,-160,-83,-84,-211,-213,-217,-218,-219,-220,-221,-222,-223,-224,-125,-196,-197,-198,-199,-178,-214,-257,-59,-65,-67,-55,-60,-66,-68,-39,-40,-41,-42,-43,-47,-85,-119,-120,-195,-200,-179,-180,-181,-36,-45,-48,-49,-50,-110,-111,-229,-226,-227,-246,-242,-225,-228,-190,-116,-187,-201,-71,-61,-241,-171,-251,-252,-253,-254,-255,-245,-73,-74,-75,-76,-77,-189,-81,-187,-115,-117,-102,-116,-103,-123,-264,-169,-79,-63,-243,-230,-250,-101,-114,-100,-164,-188,-247,-240,-249,-248,-259,-258,-261,-260,-262,-263,-113,-112,-118,-172,-191,-266,-265,-170,-78,-244,-80,-124,-99,-192,-168,]),'DO':([0,60,175,276,288,291,292,465,477,479,506,521,],[61,61,61,61,61,-119,-120,61,61,61,61,61,]),'FOR':([0,60,175,276,288,291,292,465,477,479,506,521,],[62,62,62,62,62,-119,-120,62,62,62,62,62,]),'FOREACH':([0,175,276,288,291,292,465,477,479,506,521,],[63,63,63,63,-119,-120,63,63,63,63,63,]),'TRY':([0,175,276,288,291,292,465,477,479,506,521,],[64,64,64,64,-119,-120,64,64,64,64,64,]),'SWITCH':([0,60,175,276,288,291,292,465,477,479,506,521,],[65,65,65,65,65,-119,-120,65,65,65,65,65,]),'CASE':([0,175,276,288,291,292,465,468,477,479,506,521,594,],[66,66,66,66,-119,-120,66,66,66,66,66,66,66,]),'GOTO':([0,175,276,288,291,292,465,477,479,506,521,],[67,67,67,67,-119,-120,67,67,67,67,67,]),'EXIT':([0,175,276,288,291,292,465,477,479,506,521,],[68,68,68,68,-119,-120,68,68,68,68,68,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,42,43,49,50,51,52,53,57,59,60,76,78,79,80,81,82,91,94,95,98,99,100,101,102,106,107,108,111,114,116,127,128,147,150,151,152,158,159,163,164,165,166,167,168,169,170,171,172,174,175,183,184,185,186,192,196,197,202,207,208,215,216,218,219,229,230,231,232,233,235,275,276,288,291,292,293,297,299,300,301,319,320,321,322,326,330,331,332,334,335,345,346,363,364,366,382,388,393,400,407,408,409,429,430,431,432,433,434,435,436,437,438,439,443,444,448,449,461,464,465,466,467,472,476,477,479,480,481,488,496,503,506,509,510,519,521,527,534,535,536,539,540,541,542,543,544,545,546,549,559,560,561,562,563,565,566,567,569,572,574,579,580,588,595,],[69,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-206,-207,-209,-210,-44,-46,-157,-159,-161,-82,-212,-116,-177,-193,-194,-215,-216,-256,-182,-57,-64,-69,-72,-51,-52,-53,-54,-56,-58,-62,-70,-205,-202,-208,-37,-38,-158,-160,-83,-84,-211,-213,-217,-218,-219,-220,-221,-222,-223,-224,-125,69,-196,-197,-198,-199,-178,-214,-257,-59,-65,-67,-55,-60,-66,-68,-39,-40,-41,-42,-43,-47,-85,69,69,-119,-120,-195,-200,-179,-180,-181,-36,-45,-48,-49,-50,-110,-111,-229,-226,-227,-246,-242,-225,-228,-190,-116,-187,-201,-71,-61,-241,-171,-251,-252,-253,-254,-255,-245,-73,-74,-75,-76,-77,-189,-81,-187,-115,-117,-102,69,-103,-123,-264,-169,69,69,-79,-63,-243,-230,-250,69,-101,-114,-100,69,-164,-188,-247,-240,-249,-248,-259,-258,-261,-260,-262,-263,-113,-112,-118,587,-172,-191,-266,-265,-170,-78,-244,-80,-124,-99,-192,-168,]),'DEFAULT':([0,175,276,288,291,292,465,477,479,506,521,],[70,70,70,70,-119,-120,70,70,70,70,70,]),'CONTINUE':([0,175,276,288,291,292,465,477,479,506,521,],[71,71,71,71,-119,-120,71,71,71,71,71,]),'RAND':([0,129,175,267,276,288,291,292,465,477,479,506,521,],[72,72,72,72,72,72,-119,-120,72,72,72,72,72,]),'FWRITE':([0,129,175,267,276,288,291,292,465,477,479,506,521,],[73,73,73,73,73,73,-119,-120,73,73,73,73,73,]),'TRIM':([0,129,175,267,276,288,291,292,465,477,479,506,521,],[74,74,74,74,74,74,-119,-120,74,74,74,74,74,]),'SMALLER':([0,94,100,101,102,106,107,108,175,215,276,280,281,288,291,292,465,477,479,506,521,534,535,548,],[75,-57,-51,-52,-53,-54,-56,-58,75,-55,75,375,375,75,-119,-120,75,75,75,75,75,-188,-247,375,]),'RETURN':([0,175,276,288,291,292,447,448,465,477,479,506,521,],[77,77,77,77,-119,-120,77,77,77,77,77,77,77,]),'COMENTARIOS':([0,175,276,288,291,292,465,477,479,506,521,],[78,78,78,78,-119,-120,78,78,78,78,78,]),'DOC_COMENTARIOS':([0,175,276,288,291,292,465,477,479,506,521,],[79,79,79,79,-119,-120,79,79,79,79,79,]),'LPAREN':([0,37,38,41,45,46,49,50,54,56,58,62,63,65,72,73,74,83,84,90,94,100,101,102,106,107,108,129,142,143,144,147,150,161,162,175,200,201,203,204,205,215,229,230,231,232,233,235,241,242,243,244,250,251,252,253,254,255,256,257,258,267,268,276,277,284,286,288,291,292,296,312,319,320,321,322,323,324,326,332,334,335,345,346,348,349,350,351,352,353,354,363,364,366,371,409,434,443,452,465,477,479,487,488,496,506,521,534,535,562,563,572,588,],[39,105,110,126,145,146,-44,-46,154,157,162,176,177,179,187,188,189,198,199,201,-57,-51,-52,-53,-54,-56,-58,239,-128,-129,-130,-37,-38,277,278,39,304,278,105,-126,-127,-55,-39,-40,-41,-42,-43,-47,126,327,328,329,336,337,338,339,340,341,342,343,344,105,360,39,278,381,278,39,-119,-120,392,105,-36,-45,-48,-49,413,414,-50,-229,-226,-227,-246,-242,-140,-141,-142,-143,-144,-145,-146,-225,-228,-190,278,-171,-245,-189,511,39,39,39,105,-243,-230,39,39,-188,-247,-172,-191,-244,-192,]),'CADENA':([0,37,38,49,50,66,94,100,101,102,105,106,107,108,110,129,130,131,132,133,135,136,137,138,139,140,141,142,143,144,147,150,154,155,156,157,162,175,201,203,204,205,215,229,230,231,232,233,235,239,267,276,277,286,288,291,292,312,313,318,319,320,321,322,326,328,329,332,334,335,336,337,338,345,346,347,348,349,350,351,352,353,354,361,363,364,366,371,372,373,375,376,377,378,379,380,391,395,409,434,443,446,465,477,479,488,495,496,506,511,512,521,531,532,534,535,562,563,572,575,576,588,],[55,103,103,-44,-46,181,-57,-51,-52,-53,215,-54,-56,-58,215,103,-126,-127,248,249,215,215,-135,-136,-137,-138,-139,-128,-129,-130,-37,-38,269,271,272,273,215,55,215,215,-126,-127,-55,-39,-40,-41,-42,-43,-47,215,103,55,215,215,55,-119,-120,215,215,215,-36,-45,-48,-49,-50,215,215,-229,-226,-227,215,215,215,-246,-242,215,-140,-141,-142,-143,-144,-145,-146,215,-225,-228,-190,215,215,215,-131,-132,-133,-134,215,215,470,215,-171,-245,-189,215,55,55,55,-243,215,-230,55,215,215,55,215,215,-188,-247,-172,-191,-244,215,215,-192,]),'RPAREN':([0,39,49,50,94,100,101,102,106,107,108,115,117,118,119,120,121,122,123,124,125,126,147,150,157,175,215,217,222,223,224,225,226,229,230,231,232,233,235,262,263,264,265,266,273,276,279,280,282,283,288,290,291,292,302,304,305,319,320,321,322,325,326,329,332,334,335,339,340,341,342,343,344,345,346,360,363,364,366,368,396,401,402,404,405,406,409,410,413,414,416,419,420,422,423,424,425,426,427,429,430,431,432,433,434,441,442,443,450,451,453,454,455,456,458,459,463,465,469,470,471,473,474,477,479,482,483,484,486,488,492,496,506,507,513,514,521,524,534,535,537,538,550,551,562,563,570,571,572,573,577,578,581,583,585,586,588,590,591,592,593,],[40,116,-44,-46,-57,-51,-52,-53,-54,-56,-58,221,-231,-232,-233,-234,-235,-236,-237,-238,-239,-187,-37,-38,274,40,-55,314,316,-166,-167,-162,-163,-39,-40,-41,-42,-43,-47,355,356,357,358,359,365,40,370,-97,-96,-98,40,389,-119,-120,394,397,398,-36,-45,-48,-49,415,-50,418,-229,-226,-227,428,429,430,431,432,433,-246,-242,440,-225,-228,-190,445,475,482,483,484,485,486,-171,-165,489,490,492,494,-186,497,498,499,500,501,502,-251,-252,-253,-254,-255,-245,504,505,-189,-94,-95,-86,-88,-89,-91,-87,-90,518,40,522,523,524,525,526,40,40,-151,-152,-153,-155,-243,-267,-230,40,548,553,554,40,564,-188,-247,573,-185,577,578,-172,-191,-154,-156,-244,-268,-203,-204,-104,-106,-105,-107,-192,-92,-93,-108,-109,]),'LBRACKET':([0,93,175,276,288,291,292,465,477,479,506,521,],[42,206,42,42,42,-119,-120,42,42,42,42,42,]),'RBRACKET':([0,42,175,276,288,291,292,309,465,477,479,506,521,],[43,128,43,43,43,-119,-120,399,43,43,43,43,43,]),'LBRACE':([0,61,64,160,175,178,276,288,291,292,370,389,397,398,440,445,465,475,477,479,506,518,521,529,553,554,],[59,175,178,276,59,288,59,59,-119,-120,447,468,477,479,477,506,59,288,59,59,59,288,59,568,288,288,]),'RBRACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,42,43,49,50,51,52,53,57,59,60,76,78,79,80,81,82,91,94,95,98,99,100,101,102,106,107,108,111,114,116,127,128,147,150,151,152,158,159,163,164,165,166,167,168,169,170,171,172,174,175,183,184,185,186,192,196,197,202,207,208,215,216,218,219,229,230,231,232,233,235,275,276,285,288,289,291,292,293,297,299,300,301,319,320,321,322,326,330,331,332,334,335,345,346,363,364,366,367,382,385,386,387,388,393,400,407,408,409,429,430,431,432,433,434,435,436,437,438,439,443,444,447,448,449,461,464,465,466,467,472,476,477,479,480,481,488,496,503,506,508,509,510,519,520,521,527,528,530,534,535,536,539,540,541,542,543,544,545,546,547,549,559,560,562,563,565,566,567,568,569,572,574,579,580,588,589,594,595,596,],[60,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,91,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-206,-207,-209,-210,-44,-46,-157,-159,-161,-82,163,-116,-177,-193,-194,-215,-216,-256,-182,-57,-64,-69,-72,-51,-52,-53,-54,-56,-58,-62,-70,-205,-202,-208,-37,-38,-158,-160,-83,-84,-211,-213,-217,-218,-219,-220,-221,-222,-223,-224,-125,60,-196,-197,-198,-199,-178,-214,-257,-59,-65,-67,-55,-60,-66,-68,-39,-40,-41,-42,-43,-47,-85,60,382,60,388,-119,-120,-195,-200,-179,-180,-181,-36,-45,-48,-49,-50,-110,-111,-229,-226,-227,-246,-242,-225,-228,-190,444,-116,464,466,91,-187,-201,-71,-61,-241,-171,-251,-252,-253,-254,-255,-245,-73,-74,-75,-76,-77,-189,-81,-187,-187,-115,-117,-102,60,-103,-123,-264,-169,60,60,-79,-63,-243,-230,-250,60,549,91,-114,-100,560,60,-164,567,569,-188,-247,-240,-249,-248,-259,-258,-261,-260,-262,-263,574,-113,-112,-118,-172,-191,-266,-265,-170,-187,-78,-244,-80,-124,-99,-192,595,-121,-168,-122,]),'OPEN_TAG':([0,175,276,288,291,292,465,477,479,506,521,],[80,80,80,80,-119,-120,80,80,80,80,80,]),'CLOSE_TAG':([0,80,175,276,288,291,292,465,477,479,506,521,],[81,196,81,81,81,-119,-120,81,81,81,81,81,]),'ARRAY_POP':([0,175,276,288,291,292,465,477,479,506,521,],[83,83,83,83,-119,-120,83,83,83,83,83,]),'ARRAY_PUSH':([0,175,276,288,291,292,465,477,479,506,521,],[84,84,84,84,-119,-120,84,84,84,84,84,]),'PUBLIC':([0,47,48,60,85,86,87,88,126,149,175,176,276,288,291,292,304,317,360,465,477,479,506,521,],[85,85,85,85,-173,-174,-175,-176,85,85,85,85,85,85,-119,-120,85,85,85,85,85,85,85,85,]),'PRIVATE':([0,47,48,60,85,86,87,88,126,149,175,176,276,288,291,292,304,317,360,465,477,479,506,521,],[86,86,86,86,-173,-174,-175,-176,86,86,86,86,86,86,-119,-120,86,86,86,86,86,86,86,86,]),'PROTECTED':([0,47,48,60,85,86,87,88,126,149,175,176,276,288,291,292,304,317,360,465,477,479,506,521,],[87,87,87,87,-173,-174,-175,-176,87,87,87,87,87,87,-119,-120,87,87,87,87,87,87,87,87,]),'STATIC':([0,47,48,60,85,86,87,88,126,149,175,176,276,288,291,292,304,317,360,465,477,479,506,521,],[88,88,88,88,-173,-174,-175,-176,88,88,88,88,88,88,-119,-120,88,88,88,88,88,88,88,88,]),'FUNCTION':([0,48,60,85,86,87,88,173,175,276,288,291,292,465,477,479,506,521,],[89,153,89,-173,-174,-175,-176,153,89,89,89,-119,-120,89,89,89,89,89,]),'IF':([0,175,276,288,291,292,465,477,479,506,521,],[90,90,90,90,-119,-120,90,90,90,90,90,]),'SEMI':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,42,43,49,50,51,52,53,57,59,60,68,69,70,71,76,77,78,79,80,81,82,91,92,94,95,96,97,98,99,100,101,102,103,104,106,107,108,109,111,112,113,114,116,127,128,147,150,151,152,158,159,163,164,165,166,167,168,169,170,171,172,174,182,183,184,185,186,192,193,194,195,196,197,202,207,208,215,216,218,219,228,229,230,231,232,233,234,235,236,237,240,245,246,247,248,249,259,260,271,272,274,275,280,282,283,288,291,292,293,297,299,300,301,306,307,310,311,314,315,316,319,320,321,322,326,330,331,332,334,335,345,346,355,356,357,358,359,363,364,365,366,370,382,383,385,387,388,393,394,399,400,407,408,409,411,412,418,421,428,429,430,431,432,433,434,435,436,437,438,439,443,444,447,448,449,450,451,453,454,455,456,458,459,461,464,465,466,467,472,476,477,480,481,482,483,484,486,488,489,490,491,492,494,496,497,498,499,500,501,502,503,504,505,508,509,510,519,522,523,525,526,527,528,533,534,535,536,539,540,541,542,543,544,545,546,549,559,560,562,563,564,565,566,567,569,570,571,572,573,574,577,578,579,580,587,588,590,591,595,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-206,-207,-209,-210,-44,-46,-157,-159,-161,-82,-212,-116,183,184,185,186,-177,192,-193,-194,-215,-216,197,-182,202,-57,-64,207,208,-69,-72,-51,-52,-53,-55,-150,-54,-56,-58,216,-62,218,219,-70,-205,-202,-208,-37,-38,-158,-160,-83,-84,-211,-213,-217,-218,-219,-220,-221,-222,-223,-224,-125,293,-196,-197,-198,-199,-178,299,300,301,-214,-257,-59,-65,-67,-55,-60,-66,-68,319,-39,-40,-41,-42,-43,320,-47,321,322,326,330,331,332,334,335,345,346,363,364,366,-85,-97,-96,-98,-187,-119,-120,-195,-200,-179,-180,-181,-147,-148,-149,400,407,408,409,-36,-45,-48,-49,-50,-110,-111,-229,-226,-227,-246,-242,435,436,437,438,439,-225,-228,443,-190,449,-116,462,465,-101,-187,-201,472,481,-71,-61,-241,-171,-149,488,-183,496,503,-251,-252,-253,-254,-255,-245,-73,-74,-75,-76,-77,-189,-81,-187,-187,-115,-94,-95,-86,-88,-89,-91,-87,-90,-117,-102,-116,-103,-123,-264,-169,-187,-79,-63,-151,-152,-153,-155,-243,534,535,536,-267,-184,-230,539,540,541,542,543,544,-250,545,546,465,-101,465,-100,562,563,565,566,-164,-177,572,-188,-247,-240,-249,-248,-259,-258,-261,-260,-262,-263,-113,-112,-118,-172,-191,588,-266,-265,-170,-78,-154,-156,-244,-268,-80,-203,-204,-124,-99,594,-192,-92,-93,-168,]),'BOOLEANO':([37,38,49,50,77,94,100,101,102,105,106,107,108,110,129,130,131,135,136,137,138,139,140,141,142,143,144,147,150,162,201,203,204,205,215,229,230,231,232,233,235,239,267,277,286,312,313,318,319,320,321,322,326,328,329,332,334,335,336,337,338,345,346,347,348,349,350,351,352,353,354,361,363,364,366,371,372,373,375,376,377,378,379,380,395,409,434,443,446,488,495,496,511,512,531,532,534,535,562,563,572,575,576,588,],[107,107,-44,-46,195,-57,-51,-52,-53,107,-54,-56,-58,107,107,-126,-127,107,107,-135,-136,-137,-138,-139,-128,-129,-130,-37,-38,107,107,107,-126,-127,-55,-39,-40,-41,-42,-43,-47,107,107,107,107,107,107,107,-36,-45,-48,-49,-50,107,107,-229,-226,-227,107,107,107,-246,-242,107,-140,-141,-142,-143,-144,-145,-146,107,-225,-228,-190,107,107,107,-131,-132,-133,-134,107,107,107,-171,-245,-189,107,-243,107,-230,107,107,107,107,-188,-247,-172,-191,-244,107,107,-192,]),'ENTERO':([37,38,49,50,66,94,100,101,102,105,106,107,108,110,129,130,131,135,136,137,138,139,140,141,142,143,144,147,150,162,187,201,203,204,205,206,215,229,230,231,232,233,235,239,267,277,286,312,313,318,319,320,321,322,326,328,329,332,334,335,336,337,338,345,346,347,348,349,350,351,352,353,354,361,363,364,366,371,372,373,375,376,377,378,379,380,390,395,409,434,443,446,488,495,496,511,512,531,532,534,535,562,563,572,575,576,582,584,588,],[94,94,-44,-46,180,-57,-51,-52,-53,94,-54,-56,-58,94,94,-126,-127,94,94,-135,-136,-137,-138,-139,-128,-129,-130,-37,-38,94,294,94,94,-126,-127,309,-55,-39,-40,-41,-42,-43,-47,94,94,94,94,94,94,94,-36,-45,-48,-49,-50,94,94,-229,-226,-227,94,94,94,-246,-242,94,-140,-141,-142,-143,-144,-145,-146,94,-225,-228,-190,94,94,94,-131,-132,-133,-134,94,94,469,94,-171,-245,-189,94,-243,94,-230,94,94,94,94,-188,-247,-172,-191,-244,94,94,94,94,-192,]),'DECIMAL':([37,38,49,50,94,100,101,102,105,106,107,108,110,129,130,131,135,136,137,138,139,140,141,142,143,144,147,150,162,201,203,204,205,215,229,230,231,232,233,235,239,267,277,286,312,313,318,319,320,321,322,326,328,329,332,334,335,336,337,338,345,346,347,348,349,350,351,352,353,354,361,363,364,366,371,372,373,375,376,377,378,379,380,395,409,434,443,446,488,495,496,511,512,531,532,534,535,562,563,572,575,576,582,584,588,],[108,108,-44,-46,-57,-51,-52,-53,108,-54,-56,-58,108,108,-126,-127,108,108,-135,-136,-137,-138,-139,-128,-129,-130,-37,-38,108,108,108,-126,-127,-55,-39,-40,-41,-42,-43,-47,108,108,108,108,108,108,108,-36,-45,-48,-49,-50,108,108,-229,-226,-227,108,108,108,-246,-242,108,-140,-141,-142,-143,-144,-145,-146,108,-225,-228,-190,108,108,108,-131,-132,-133,-134,108,108,108,-171,-245,-189,108,-243,108,-230,108,108,108,108,-188,-247,-172,-191,-244,108,108,108,108,-192,]),'STRING':([39,239,],[117,117,]),'BOOL':([39,239,],[118,118,]),'BOOLEAN':([39,239,],[119,119,]),'DOUBLE':([39,239,],[120,120,]),'FLOAT':([39,239,],[121,121,]),'ARRAY':([39,129,239,267,362,],[122,244,122,244,442,]),'OBJECT':([39,239,],[123,123,]),'INTEGER':([39,239,],[124,124,]),'INT':([39,239,],[125,125,]),'COLON':([41,180,181,370,397,],[127,291,292,448,478,]),'EQUALS':([44,97,113,148,214,225,227,280,308,403,404,422,424,426,453,455,473,551,555,556,],[129,211,211,267,211,267,211,374,211,211,211,211,211,211,211,211,211,211,582,584,]),'SUMA':([44,92,94,97,100,101,102,103,106,107,108,109,113,130,148,213,214,215,217,225,227,228,280,306,308,369,411,457,462,485,486,515,516,534,535,552,555,],[130,204,-57,204,-51,-52,-53,-55,-54,-56,-58,204,204,245,204,204,204,-55,204,204,204,204,204,204,204,204,204,204,516,204,204,555,557,-188,-247,204,581,]),'RESTA':([44,92,94,97,100,101,102,103,106,107,108,109,113,131,148,213,214,215,217,225,227,228,280,306,308,369,411,457,462,485,486,515,517,534,535,552,556,],[131,205,-57,205,-51,-52,-53,-55,-54,-56,-58,205,205,246,205,205,205,-55,205,205,205,205,205,205,205,205,205,205,517,205,205,556,558,-188,-247,205,583,]),'CONCAT':([44,55,97,103,113,227,248,],[132,155,132,155,132,132,333,]),'CONCAT_EQUAL':([44,55,97,103,113,227,],[133,156,133,156,133,133,]),'FLECHA':([44,97,113,280,],[134,210,220,220,]),'MINUS_EQUAL':([44,148,225,280,],[137,137,137,137,]),'MOD_EQUAL':([44,148,225,280,],[138,138,138,138,]),'MUL_EQUAL':([44,148,225,280,],[139,139,139,139,]),'PLUS_EQUAL':([44,148,225,280,],[140,140,140,140,]),'DIV_EQUAL':([44,148,225,280,],[141,141,141,141,]),'MULTIPLICACION':([44,92,94,97,100,101,102,103,106,107,108,109,113,148,213,214,215,217,225,227,228,280,306,308,369,411,457,485,486,534,535,552,],[142,142,-57,142,-51,-52,-53,-55,-54,-56,-58,142,142,142,142,142,-55,142,142,142,142,142,142,142,142,142,142,142,142,-188,-247,142,]),'DIVISION':([44,75,92,94,97,100,101,102,103,106,107,108,109,113,148,213,214,215,217,225,227,228,280,306,308,369,411,457,485,486,534,535,552,],[143,191,143,-57,143,-51,-52,-53,-55,-54,-56,-58,143,143,143,143,143,-55,143,143,143,143,143,143,143,143,143,143,143,143,-188,-247,143,]),'MODULO':([44,92,94,97,100,101,102,103,106,107,108,109,113,148,213,214,215,217,225,227,228,280,306,308,369,411,457,485,486,534,535,552,],[144,144,-57,144,-51,-52,-53,-55,-54,-56,-58,144,144,144,144,144,-55,144,144,144,144,144,144,144,144,144,144,144,144,-188,-247,144,]),'COMMA':([49,50,82,94,98,100,101,102,106,107,108,126,147,150,197,215,222,223,224,225,226,229,230,231,232,233,235,269,270,294,295,303,304,319,320,321,322,326,332,334,335,345,346,360,363,364,366,396,409,410,417,419,420,429,430,431,432,433,434,443,488,496,534,535,538,562,563,572,588,],[-44,-46,-256,-57,212,-51,-52,-53,-54,-56,-58,-187,-37,-38,-257,-55,317,-166,-167,-162,-163,-39,-40,-41,-42,-43,-47,361,362,390,391,395,-187,-36,-45,-48,-49,-50,-229,-226,-227,-246,-242,-187,-225,-228,-190,317,-171,-165,493,495,-186,-251,-252,-253,-254,-255,-245,-189,-243,-230,-188,-247,-185,-172,-191,-244,-192,]),'ELSE':([57,60,159,409,480,569,574,],[160,160,160,-171,-79,-78,-80,]),'ELSEIF':([57,60,409,480,569,],[161,161,-171,-79,-78,]),'CATCH':([60,172,174,388,464,466,467,579,],[-187,284,-125,-187,-102,-103,284,-124,]),'NULL':([77,],[193,]),'AND':([94,100,101,102,106,107,108,215,261,279,280,281,282,283,305,345,346,368,383,429,430,431,432,433,434,450,451,453,454,455,456,458,459,488,534,535,548,572,577,578,590,591,],[-57,-51,-52,-53,-54,-56,-58,-55,348,348,348,348,-96,-98,348,-246,-242,348,348,-251,-252,-253,-254,-255,-245,348,-95,-86,-88,-89,-91,-87,-90,-243,-188,-247,348,-244,-203,-204,-92,-93,]),'OR':([94,100,101,102,106,107,108,215,261,279,280,281,282,283,305,345,346,368,383,429,430,431,432,433,434,450,451,453,454,455,456,458,459,488,534,535,548,572,577,578,590,591,],[-57,-51,-52,-53,-54,-56,-58,-55,349,349,349,349,-96,-98,349,-246,-242,349,349,-251,-252,-253,-254,-255,-245,349,-95,-86,-88,-89,-91,-87,-90,-243,-188,-247,349,-244,-203,-204,-92,-93,]),'XOR':([94,100,101,102,106,107,108,215,261,279,280,281,282,283,305,345,346,368,383,429,430,431,432,433,434,450,451,453,454,455,456,458,459,488,534,535,548,572,577,578,590,591,],[-57,-51,-52,-53,-54,-56,-58,-55,350,350,350,350,-96,-98,350,-246,-242,350,350,-251,-252,-253,-254,-255,-245,350,-95,-86,-88,-89,-91,-87,-90,-243,-188,-247,350,-244,-203,-204,-92,-93,]),'IS_EQUAL':([94,100,101,102,106,107,108,215,261,279,280,281,282,283,305,345,346,368,383,429,430,431,432,433,434,450,451,453,454,455,456,458,459,488,534,535,548,572,577,578,590,591,],[-57,-51,-52,-53,-54,-56,-58,-55,351,351,351,351,-96,-98,351,-246,-242,351,351,-251,-252,-253,-254,-255,-245,351,-95,-86,-88,-89,-91,-87,-90,-243,-188,-247,351,-244,-203,-204,-92,-93,]),'IS_NOT_EQUAL':([94,100,101,102,106,107,108,215,261,279,280,281,282,283,305,345,346,368,383,429,430,431,432,433,434,450,451,453,454,455,456,458,459,488,534,535,548,572,577,578,590,591,],[-57,-51,-52,-53,-54,-56,-58,-55,352,352,352,352,-96,-98,352,-246,-242,352,352,-251,-252,-253,-254,-255,-245,352,-95,-86,-88,-89,-91,-87,-90,-243,-188,-247,352,-244,-203,-204,-92,-93,]),'IS_IDENTICAL':([94,100,101,102,106,107,108,215,261,279,280,281,282,283,305,345,346,368,383,429,430,431,432,433,434,450,451,453,454,455,456,458,459,488,534,535,548,572,577,578,590,591,],[-57,-51,-52,-53,-54,-56,-58,-55,353,353,353,353,-96,-98,353,-246,-242,353,353,-251,-252,-253,-254,-255,-245,353,-95,-86,-88,-89,-91,-87,-90,-243,-188,-247,353,-244,-203,-204,-92,-93,]),'IS_NOT_IDENTICAL':([94,100,101,102,106,107,108,215,261,279,280,281,282,283,305,345,346,368,383,429,430,431,432,433,434,450,451,453,454,455,456,458,459,488,534,535,548,572,577,578,590,591,],[-57,-51,-52,-53,-54,-56,-58,-55,354,354,354,354,-96,-98,354,-246,-242,354,354,-251,-252,-253,-254,-255,-245,354,-95,-86,-88,-89,-91,-87,-90,-243,-188,-247,354,-244,-203,-204,-92,-93,]),'GREATER':([94,100,101,102,106,107,108,190,215,280,281,298,534,535,548,],[-57,-51,-52,-53,-54,-56,-58,297,-55,376,376,393,-188,-247,376,]),'IS_SMALLER_OR_EQUAL':([94,100,101,102,106,107,108,215,280,281,534,535,548,],[-57,-51,-52,-53,-54,-56,-58,-55,377,377,-188,-247,377,]),'IS_GREATER_OR_EQUAL':([94,100,101,102,106,107,108,215,280,281,534,535,548,],[-57,-51,-52,-53,-54,-56,-58,-55,378,378,-188,-247,378,]),'NEW':([129,211,374,],[238,238,238,]),'ARRAY_VALUES':([129,145,146,267,],[242,242,242,242,]),'ARRAY_SEARCH':([129,146,267,],[243,243,243,]),'PUSH':([134,],[250,]),'ENQUEUE':([134,],[251,]),'DEQUEUE':([134,],[252,]),'POP':([134,210,],[253,253,]),'REWIND':([134,210,220,],[254,254,254,]),'VALID':([134,210,220,],[255,255,255,]),'COUNT':([134,210,220,],[256,256,256,]),'NEXT':([134,210,220,],[257,257,257,]),'CURRENT':([134,210,220,],[258,258,258,]),'SPLQUEUE':([238,],[323,]),'SPLSTACK':([238,],[324,]),'AS':([287,],[384,]),'EXCEPTION':([381,],[460,]),'VOID':([478,],[529,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,175,276,288,465,477,479,506,521,],[1,285,367,386,519,386,530,547,561,]),'imprimir':([0,175,276,288,465,477,479,506,521,],[2,2,2,2,2,2,2,2,2,]),'asignacion':([0,47,48,126,149,175,176,276,288,304,317,360,465,477,479,506,521,],[3,147,150,226,150,3,286,3,3,226,226,226,3,3,3,3,3,]),'funciones':([0,60,175,276,288,465,477,479,506,521,],[4,169,4,4,4,4,4,4,4,4,]),'llamada_funcion':([0,129,175,267,276,288,398,465,477,479,506,521,],[5,235,5,235,5,5,480,5,5,5,5,5,]),'constante':([0,175,276,288,465,477,479,506,521,],[6,6,6,6,6,6,6,6,6,]),'lectura':([0,129,175,267,276,288,465,477,479,506,521,],[7,232,7,232,7,7,7,7,7,7,7,]),'condicion_ifelse':([0,175,276,288,465,477,479,506,521,],[8,8,8,8,8,8,8,8,8,]),'bwhile':([0,60,175,276,288,382,465,477,479,506,521,],[9,167,9,9,9,461,9,9,9,9,9,]),'bdo':([0,60,175,276,288,465,477,479,506,521,],[10,171,10,10,10,10,10,10,10,10,]),'bfor':([0,60,175,276,288,465,477,479,506,521,],[11,168,11,11,11,11,11,11,11,11,]),'incrementOp':([0,175,276,288,465,477,479,506,521,],[12,12,12,12,12,12,12,12,12,]),'bforeach':([0,175,276,288,465,477,479,506,521,],[13,13,13,13,13,13,13,13,13,]),'btry':([0,175,276,288,465,477,479,506,521,],[14,14,14,14,14,14,14,14,14,]),'bswitch':([0,60,175,276,288,465,477,479,506,521,],[15,170,15,15,15,15,15,15,15,15,]),'bcase':([0,175,276,288,465,468,477,479,506,521,594,],[16,16,16,16,16,521,16,16,16,16,521,]),'bgoto':([0,175,276,288,465,477,479,506,521,],[17,17,17,17,17,17,17,17,17,]),'bcolas':([0,37,38,105,110,129,162,175,201,203,239,267,276,277,286,288,312,313,328,329,336,337,338,347,361,371,372,373,379,380,395,446,465,477,479,495,506,511,521,531,575,576,],[18,101,101,101,101,101,101,18,101,101,101,101,18,101,101,18,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,18,18,18,101,18,101,18,101,101,101,]),'bpila':([0,37,38,105,110,129,162,175,201,203,239,267,276,277,286,288,312,313,328,329,336,337,338,347,361,371,372,373,379,380,395,446,465,477,479,495,506,511,521,531,575,576,],[19,102,102,102,102,102,102,19,102,102,102,102,19,102,102,19,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,19,19,19,102,19,102,19,102,102,102,]),'bcortes':([0,175,276,288,465,477,479,506,521,],[20,20,20,20,20,20,20,20,20,]),'brand':([0,129,175,267,276,288,465,477,479,506,521,],[21,229,21,229,21,21,21,21,21,21,21,]),'escribir':([0,129,175,267,276,288,465,477,479,506,521,],[22,230,22,230,22,22,22,22,22,22,22,]),'btrim':([0,129,175,267,276,288,465,477,479,506,521,],[23,231,23,231,23,23,23,23,23,23,23,]),'otros':([0,175,276,288,465,477,479,506,521,],[24,24,24,24,24,24,24,24,24,]),'breturn':([0,175,276,288,447,448,465,477,479,506,521,],[25,25,25,387,509,509,25,387,25,25,25,]),'comment':([0,175,276,288,465,477,479,506,521,],[26,26,26,26,26,26,26,26,26,]),'casting':([0,175,276,288,465,477,479,506,521,],[27,27,27,27,27,27,27,27,27,]),'bconcat':([0,37,38,129,175,267,276,288,465,477,479,506,521,],[28,95,111,233,28,233,28,28,28,28,28,28,28,]),'simbolos':([0,175,276,288,465,477,479,506,521,],[29,29,29,29,29,29,29,29,29,]),'funcionesCP_semi':([0,37,38,175,276,288,465,477,479,506,521,],[30,98,114,30,30,30,30,30,30,30,30,]),'addpila':([0,175,276,288,465,477,479,506,521,],[31,31,31,31,31,31,31,31,31,]),'addcola':([0,175,276,288,465,477,479,506,521,],[32,32,32,32,32,32,32,32,32,]),'minuscola':([0,175,276,288,465,477,479,506,521,],[33,33,33,33,33,33,33,33,33,]),'arraypop':([0,175,276,288,465,477,479,506,521,],[34,34,34,34,34,34,34,34,34,]),'arraypush':([0,175,276,288,465,477,479,506,521,],[35,35,35,35,35,35,35,35,35,]),'poppila':([0,37,175,276,288,465,477,479,506,521,],[36,99,36,36,36,36,36,36,36,36,]),'proteccion':([0,47,48,60,126,149,175,176,276,288,304,317,360,465,477,479,506,521,],[48,149,149,173,149,149,48,149,48,48,149,149,149,48,48,48,48,48,]),'asignacion_array':([0,47,48,126,149,175,176,276,288,304,317,360,465,477,479,506,521,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'aumentoCasting':([0,47,48,126,149,162,175,176,201,276,277,286,288,304,317,360,371,465,477,479,506,521,],[50,50,50,50,50,282,50,50,282,50,282,282,50,50,50,50,282,50,50,50,50,50,]),'funcion_nparams':([0,48,60,173,175,276,288,465,477,479,506,521,],[51,151,51,151,51,51,51,51,51,51,51,51,]),'funcion_blank':([0,48,60,173,175,276,288,465,477,479,506,521,],[52,152,52,152,52,52,52,52,52,52,52,52,]),'funcion_void':([0,60,175,276,288,465,477,479,506,521,],[53,53,53,53,53,53,53,53,53,53,]),'condicion_if':([0,175,276,288,465,477,479,506,521,],[57,57,57,57,57,57,57,57,57,]),'empty':([0,60,126,175,276,288,304,360,388,447,448,465,477,479,506,521,568,],[76,174,224,76,76,76,224,224,174,76,76,76,528,76,76,76,589,]),'funcionesCP':([0,37,38,162,175,201,276,277,286,288,371,465,477,479,506,521,],[82,82,82,283,82,283,82,283,283,82,283,82,82,82,82,82,]),'valor':([37,38,105,110,129,162,201,203,239,267,277,286,312,313,328,329,336,337,338,347,361,371,372,373,379,380,395,446,495,511,531,575,576,],[92,109,213,217,228,281,281,306,213,228,281,281,401,405,417,420,423,425,427,434,441,281,454,456,458,459,474,507,538,550,570,590,591,]),'operaciones_mat':([37,38,129,203,267,],[96,112,234,307,234,]),'tipoDato':([37,38,105,110,129,135,136,162,201,203,239,267,277,286,312,313,318,328,329,336,337,338,347,361,371,372,373,379,380,395,446,495,511,512,531,532,575,576,],[100,100,100,100,100,260,261,100,100,100,100,100,100,100,100,406,412,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,412,100,571,100,100,]),'operaciones_mat_par':([37,38,129,203,267,312,487,],[104,104,104,104,104,402,533,]),'numero':([37,38,105,110,129,135,136,162,201,203,239,267,277,286,312,313,318,328,329,336,337,338,347,361,371,372,373,379,380,395,446,495,511,512,531,532,575,576,582,584,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,592,593,]),'tiposCast':([39,239,],[115,325,]),'incrementos_mat':([44,148,225,280,],[135,135,135,135,]),'operadores':([44,92,97,109,113,148,213,214,217,225,227,228,280,306,308,369,411,457,485,486,552,],[136,203,209,203,209,136,312,313,312,136,318,203,136,203,209,446,487,512,531,532,487,]),'condicion_else':([57,60,159,],[158,165,275,]),'condicion_elseif':([57,60,],[159,166,]),'instrucciones':([60,],[164,]),'catches':([60,388,],[172,467,]),'params_list':([126,304,360,],[222,396,396,]),'param':([126,304,317,360,],[223,223,410,223,]),'arrayvalues':([129,145,146,267,],[236,263,266,236,]),'arraysearch':([129,146,267,],[237,264,237,]),'array_def':([129,267,],[240,240,]),'condicion':([162,201,277,286,371,],[279,305,368,383,450,]),'stc_bloque_def':([178,397,440,475,518,553,554,],[289,476,476,527,559,579,580,]),'condicion_booleana':([261,279,280,281,305,368,383,450,548,],[347,371,373,380,371,371,371,371,576,]),'operador_logico':([280,281,548,],[372,379,575,]),'stc_bloque':([288,447,448,477,],[385,508,510,385,]),'array_elmnt':([329,],[419,]),'comprobacion':([371,],[451,]),'for_incr':([462,],[514,]),'innerSwitch':([468,594,],[520,596,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> imprimir','cuerpo',1,'p_cuerpo','sintactico.py',11),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','sintactico.py',12),
  ('cuerpo -> funciones','cuerpo',1,'p_cuerpo','sintactico.py',13),
  ('cuerpo -> llamada_funcion','cuerpo',1,'p_cuerpo','sintactico.py',14),
  ('cuerpo -> constante','cuerpo',1,'p_cuerpo','sintactico.py',15),
  ('cuerpo -> lectura','cuerpo',1,'p_cuerpo','sintactico.py',16),
  ('cuerpo -> condicion_ifelse','cuerpo',1,'p_cuerpo','sintactico.py',17),
  ('cuerpo -> bwhile','cuerpo',1,'p_cuerpo','sintactico.py',18),
  ('cuerpo -> bdo','cuerpo',1,'p_cuerpo','sintactico.py',19),
  ('cuerpo -> bfor','cuerpo',1,'p_cuerpo','sintactico.py',20),
  ('cuerpo -> incrementOp','cuerpo',1,'p_cuerpo','sintactico.py',21),
  ('cuerpo -> bforeach','cuerpo',1,'p_cuerpo','sintactico.py',22),
  ('cuerpo -> btry','cuerpo',1,'p_cuerpo','sintactico.py',23),
  ('cuerpo -> bswitch','cuerpo',1,'p_cuerpo','sintactico.py',24),
  ('cuerpo -> bcase','cuerpo',1,'p_cuerpo','sintactico.py',25),
  ('cuerpo -> bgoto','cuerpo',1,'p_cuerpo','sintactico.py',26),
  ('cuerpo -> bcolas','cuerpo',1,'p_cuerpo','sintactico.py',27),
  ('cuerpo -> bpila','cuerpo',1,'p_cuerpo','sintactico.py',28),
  ('cuerpo -> bcortes','cuerpo',1,'p_cuerpo','sintactico.py',29),
  ('cuerpo -> brand','cuerpo',1,'p_cuerpo','sintactico.py',30),
  ('cuerpo -> escribir','cuerpo',1,'p_cuerpo','sintactico.py',31),
  ('cuerpo -> btrim','cuerpo',1,'p_cuerpo','sintactico.py',32),
  ('cuerpo -> otros','cuerpo',1,'p_cuerpo','sintactico.py',33),
  ('cuerpo -> breturn','cuerpo',1,'p_cuerpo','sintactico.py',34),
  ('cuerpo -> comment','cuerpo',1,'p_cuerpo','sintactico.py',35),
  ('cuerpo -> casting','cuerpo',1,'p_cuerpo','sintactico.py',36),
  ('cuerpo -> bconcat','cuerpo',1,'p_cuerpo','sintactico.py',37),
  ('cuerpo -> simbolos','cuerpo',1,'p_cuerpo','sintactico.py',38),
  ('cuerpo -> funcionesCP_semi','cuerpo',1,'p_cuerpo','sintactico.py',39),
  ('cuerpo -> addpila','cuerpo',1,'p_cuerpo','sintactico.py',40),
  ('cuerpo -> addcola','cuerpo',1,'p_cuerpo','sintactico.py',41),
  ('cuerpo -> minuscola','cuerpo',1,'p_cuerpo','sintactico.py',42),
  ('cuerpo -> arraypop','cuerpo',1,'p_cuerpo','sintactico.py',43),
  ('cuerpo -> arraypush','cuerpo',1,'p_cuerpo','sintactico.py',44),
  ('cuerpo -> poppila','cuerpo',1,'p_cuerpo','sintactico.py',45),
  ('asignacion -> VARIABLE EQUALS valor SEMI','asignacion',4,'p_asignacion','sintactico.py',52),
  ('asignacion -> VAR asignacion','asignacion',2,'p_asignacion','sintactico.py',53),
  ('asignacion -> proteccion asignacion','asignacion',2,'p_asignacion','sintactico.py',54),
  ('asignacion -> VARIABLE EQUALS brand','asignacion',3,'p_asignacion','sintactico.py',55),
  ('asignacion -> VARIABLE EQUALS escribir','asignacion',3,'p_asignacion','sintactico.py',56),
  ('asignacion -> VARIABLE EQUALS btrim','asignacion',3,'p_asignacion','sintactico.py',57),
  ('asignacion -> VARIABLE EQUALS lectura','asignacion',3,'p_asignacion','sintactico.py',58),
  ('asignacion -> VARIABLE EQUALS bconcat','asignacion',3,'p_asignacion','sintactico.py',59),
  ('asignacion -> asignacion_array','asignacion',1,'p_asignacion','sintactico.py',60),
  ('asignacion -> VARIABLE EQUALS operaciones_mat SEMI','asignacion',4,'p_asignacion','sintactico.py',61),
  ('asignacion -> aumentoCasting','asignacion',1,'p_asignacion','sintactico.py',62),
  ('asignacion -> VARIABLE EQUALS llamada_funcion','asignacion',3,'p_asignacion','sintactico.py',63),
  ('asignacion -> VARIABLE EQUALS arrayvalues SEMI','asignacion',4,'p_asignacion','sintactico.py',64),
  ('asignacion -> VARIABLE EQUALS arraysearch SEMI','asignacion',4,'p_asignacion','sintactico.py',65),
  ('asignacion_array -> VARIABLE EQUALS array_def SEMI','asignacion_array',4,'p_asignacion_array','sintactico.py',73),
  ('valor -> tipoDato','valor',1,'p_valor','sintactico.py',78),
  ('valor -> bcolas','valor',1,'p_valor','sintactico.py',79),
  ('valor -> bpila','valor',1,'p_valor','sintactico.py',80),
  ('tipoDato -> numero','tipoDato',1,'p_tipoDato','sintactico.py',86),
  ('tipoDato -> CADENA','tipoDato',1,'p_tipoDato','sintactico.py',87),
  ('tipoDato -> BOOLEANO','tipoDato',1,'p_tipoDato','sintactico.py',88),
  ('numero -> ENTERO','numero',1,'p_numero','sintactico.py',93),
  ('numero -> DECIMAL','numero',1,'p_numero','sintactico.py',94),
  ('imprimir -> ECHO valor SEMI','imprimir',3,'p_imprimir','sintactico.py',100),
  ('imprimir -> PRINT valor SEMI','imprimir',3,'p_imprimir','sintactico.py',101),
  ('imprimir -> PRINT LPAREN valor RPAREN SEMI','imprimir',5,'p_imprimir','sintactico.py',102),
  ('imprimir -> PRINT bconcat','imprimir',2,'p_imprimir','sintactico.py',103),
  ('imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI','imprimir',6,'p_imprimir','sintactico.py',104),
  ('imprimir -> ECHO bconcat','imprimir',2,'p_imprimir','sintactico.py',105),
  ('imprimir -> ECHO operaciones_mat SEMI','imprimir',3,'p_imprimir','sintactico.py',106),
  ('imprimir -> PRINT operaciones_mat SEMI','imprimir',3,'p_imprimir','sintactico.py',107),
  ('imprimir -> ECHO VARIABLE SEMI','imprimir',3,'p_imprimir','sintactico.py',108),
  ('imprimir -> PRINT VARIABLE SEMI','imprimir',3,'p_imprimir','sintactico.py',109),
  ('imprimir -> ECHO funcionesCP_semi','imprimir',2,'p_imprimir','sintactico.py',110),
  ('imprimir -> PRINT funcionesCP_semi','imprimir',2,'p_imprimir','sintactico.py',111),
  ('imprimir -> ECHO funcionesCP_semi COMMA NOMBRE SEMI','imprimir',5,'p_imprimir','sintactico.py',112),
  ('imprimir -> ECHO poppila','imprimir',2,'p_imprimir','sintactico.py',113),
  ('imprimir -> VAR_DUMP LPAREN VARIABLE RPAREN SEMI','imprimir',5,'p_imprimir','sintactico.py',114),
  ('imprimir -> VAR_DUMP LPAREN arrayvalues RPAREN SEMI','imprimir',5,'p_imprimir','sintactico.py',115),
  ('imprimir -> PRINT_R LPAREN arraysearch RPAREN SEMI','imprimir',5,'p_imprimir','sintactico.py',116),
  ('imprimir -> PRINT_R LPAREN VARIABLE RPAREN SEMI','imprimir',5,'p_imprimir','sintactico.py',117),
  ('imprimir -> PRINT_R LPAREN arrayvalues RPAREN SEMI','imprimir',5,'p_imprimir','sintactico.py',118),
  ('condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_if',7,'p_condicion_if','sintactico.py',125),
  ('condicion_if -> IF LPAREN condicion RPAREN llamada_funcion','condicion_if',5,'p_condicion_if','sintactico.py',126),
  ('condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_elseif',7,'p_condicion_elseif','sintactico.py',132),
  ('condicion_else -> ELSE LBRACE cuerpo RBRACE','condicion_else',4,'p_condicion_else','sintactico.py',138),
  ('condicion_ifelse -> condicion_if','condicion_ifelse',1,'p_condicion_ifelse','sintactico.py',143),
  ('condicion_ifelse -> condicion_if condicion_else','condicion_ifelse',2,'p_condicion_ifelse','sintactico.py',144),
  ('condicion_ifelse -> condicion_if condicion_elseif','condicion_ifelse',2,'p_condicion_ifelse','sintactico.py',145),
  ('condicion_ifelse -> condicion_if condicion_elseif condicion_else','condicion_ifelse',3,'p_condicion_ifelse','sintactico.py',146),
  ('condicion -> VARIABLE operador_logico VARIABLE','condicion',3,'p_condicion','sintactico.py',151),
  ('condicion -> valor operador_logico valor','condicion',3,'p_condicion','sintactico.py',152),
  ('condicion -> VARIABLE operador_logico valor','condicion',3,'p_condicion','sintactico.py',153),
  ('condicion -> VARIABLE condicion_booleana VARIABLE','condicion',3,'p_condicion','sintactico.py',154),
  ('condicion -> valor condicion_booleana valor','condicion',3,'p_condicion','sintactico.py',155),
  ('condicion -> VARIABLE condicion_booleana valor','condicion',3,'p_condicion','sintactico.py',156),
  ('condicion -> LPAREN VARIABLE operadores valor RPAREN operador_logico valor','condicion',7,'p_condicion','sintactico.py',157),
  ('condicion -> LPAREN VARIABLE operadores valor RPAREN condicion_booleana valor','condicion',7,'p_condicion','sintactico.py',158),
  ('condicion -> condicion condicion_booleana condicion','condicion',3,'p_condicion','sintactico.py',159),
  ('condicion -> condicion condicion_booleana comprobacion','condicion',3,'p_condicion','sintactico.py',160),
  ('condicion -> aumentoCasting','condicion',1,'p_condicion','sintactico.py',161),
  ('condicion -> VARIABLE','condicion',1,'p_condicion','sintactico.py',162),
  ('condicion -> funcionesCP','condicion',1,'p_condicion','sintactico.py',163),
  ('bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def','bfor',8,'p_bfor','sintactico.py',170),
  ('stc_bloque -> stc_bloque SEMI cuerpo','stc_bloque',3,'p_stc_bloque','sintactico.py',174),
  ('stc_bloque -> breturn','stc_bloque',1,'p_stc_bloque','sintactico.py',175),
  ('stc_bloque_def -> LBRACE stc_bloque RBRACE','stc_bloque_def',3,'p_stc_bloque_def','sintactico.py',180),
  ('stc_bloque_def -> LBRACE cuerpo RBRACE','stc_bloque_def',3,'p_stc_bloque_def','sintactico.py',181),
  ('for_incr -> VARIABLE SUMA SUMA','for_incr',3,'p_for_incr','sintactico.py',186),
  ('for_incr -> SUMA SUMA VARIABLE','for_incr',3,'p_for_incr','sintactico.py',187),
  ('for_incr -> VARIABLE RESTA RESTA','for_incr',3,'p_for_incr','sintactico.py',188),
  ('for_incr -> RESTA RESTA VARIABLE','for_incr',3,'p_for_incr','sintactico.py',189),
  ('for_incr -> VARIABLE SUMA EQUALS numero','for_incr',4,'p_for_incr','sintactico.py',190),
  ('for_incr -> VARIABLE RESTA EQUALS numero','for_incr',4,'p_for_incr','sintactico.py',191),
  ('incrementOp -> VARIABLE SUMA SUMA SEMI','incrementOp',4,'p_incrementOp','sintactico.py',196),
  ('incrementOp -> VARIABLE RESTA RESTA SEMI','incrementOp',4,'p_incrementOp','sintactico.py',197),
  ('bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def','bforeach',7,'p_bforeach','sintactico.py',202),
  ('bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE','bwhile',7,'p_bwhile','sintactico.py',207),
  ('bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque','bwhile',6,'p_bwhile','sintactico.py',208),
  ('bwhile -> WHILE LPAREN condicion RPAREN SEMI','bwhile',5,'p_bwhile','sintactico.py',209),
  ('bwhile -> <empty>','bwhile',0,'p_bwhile','sintactico.py',210),
  ('bdo -> DO LBRACE cuerpo RBRACE bwhile','bdo',5,'p_bdo','sintactico.py',215),
  ('bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE','bswitch',7,'p_bswitch','sintactico.py',221),
  ('bcase -> CASE ENTERO COLON','bcase',3,'p_bcase','sintactico.py',225),
  ('bcase -> CASE CADENA COLON','bcase',3,'p_bcase','sintactico.py',226),
  ('innerSwitch -> bcase cuerpo BREAK SEMI','innerSwitch',4,'p_innerSwitch','sintactico.py',230),
  ('innerSwitch -> bcase cuerpo BREAK SEMI innerSwitch','innerSwitch',5,'p_innerSwitch','sintactico.py',231),
  ('btry -> TRY LBRACE stc_bloque_def RBRACE catches','btry',5,'p_btry','sintactico.py',237),
  ('catches -> catches CATCH LPAREN EXCEPTION VARIABLE RPAREN stc_bloque_def','catches',7,'p_catches','sintactico.py',241),
  ('catches -> empty','catches',1,'p_catches','sintactico.py',242),
  ('operadores -> SUMA','operadores',1,'p_operadores','sintactico.py',247),
  ('operadores -> RESTA','operadores',1,'p_operadores','sintactico.py',248),
  ('operadores -> MULTIPLICACION','operadores',1,'p_operadores','sintactico.py',249),
  ('operadores -> DIVISION','operadores',1,'p_operadores','sintactico.py',250),
  ('operadores -> MODULO','operadores',1,'p_operadores','sintactico.py',251),
  ('operador_logico -> SMALLER','operador_logico',1,'p_operador_logico','sintactico.py',256),
  ('operador_logico -> GREATER','operador_logico',1,'p_operador_logico','sintactico.py',257),
  ('operador_logico -> IS_SMALLER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico.py',258),
  ('operador_logico -> IS_GREATER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico.py',259),
  ('incrementos_mat -> MINUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',264),
  ('incrementos_mat -> MOD_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',265),
  ('incrementos_mat -> MUL_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',266),
  ('incrementos_mat -> PLUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',267),
  ('incrementos_mat -> DIV_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',268),
  ('condicion_booleana -> AND','condicion_booleana',1,'p_condicion_boolena','sintactico.py',273),
  ('condicion_booleana -> OR','condicion_booleana',1,'p_condicion_boolena','sintactico.py',274),
  ('condicion_booleana -> XOR','condicion_booleana',1,'p_condicion_boolena','sintactico.py',275),
  ('condicion_booleana -> IS_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',276),
  ('condicion_booleana -> IS_NOT_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',277),
  ('condicion_booleana -> IS_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',278),
  ('condicion_booleana -> IS_NOT_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',279),
  ('operaciones_mat -> valor operadores valor','operaciones_mat',3,'p_operaciones_mat','sintactico.py',284),
  ('operaciones_mat -> valor operadores operaciones_mat','operaciones_mat',3,'p_operaciones_mat','sintactico.py',285),
  ('operaciones_mat -> VARIABLE operadores VARIABLE','operaciones_mat',3,'p_operaciones_mat','sintactico.py',286),
  ('operaciones_mat -> operaciones_mat_par','operaciones_mat',1,'p_operaciones_mat','sintactico.py',287),
  ('operaciones_mat_par -> LPAREN valor operadores valor RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico.py',293),
  ('operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico.py',294),
  ('operaciones_mat_par -> LPAREN VARIABLE operadores VARIABLE RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico.py',295),
  ('operaciones_mat_par -> LPAREN VARIABLE operadores valor RPAREN operadores valor','operaciones_mat_par',7,'p_operaciones_mat_par','sintactico.py',296),
  ('operaciones_mat_par -> LPAREN VARIABLE operadores tipoDato RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico.py',297),
  ('operaciones_mat_par -> LPAREN VARIABLE operadores tipoDato RPAREN operadores tipoDato','operaciones_mat_par',7,'p_operaciones_mat_par','sintactico.py',298),
  ('funciones -> funcion_nparams','funciones',1,'p_funciones','sintactico.py',304),
  ('funciones -> proteccion funcion_nparams','funciones',2,'p_funciones','sintactico.py',305),
  ('funciones -> funcion_blank','funciones',1,'p_funciones','sintactico.py',306),
  ('funciones -> proteccion funcion_blank','funciones',2,'p_funciones','sintactico.py',307),
  ('funciones -> funcion_void','funciones',1,'p_funciones','sintactico.py',308),
  ('param -> VARIABLE','param',1,'p_param','sintactico.py',313),
  ('param -> asignacion','param',1,'p_param','sintactico.py',314),
  ('funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def','funcion_nparams',6,'p_funcion_nparams','sintactico.py',319),
  ('params_list -> params_list COMMA param','params_list',3,'p_params_list','sintactico.py',323),
  ('params_list -> param','params_list',1,'p_params_list','sintactico.py',324),
  ('params_list -> empty','params_list',1,'p_params_list','sintactico.py',325),
  ('funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE','funcion_void',9,'p_funcion_void','sintactico.py',330),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def','funcion_blank',5,'p_funcion_blank','sintactico.py',334),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE','funcion_blank',7,'p_funcion_blank','sintactico.py',335),
  ('llamada_funcion -> NOMBRE LPAREN params_list RPAREN SEMI','llamada_funcion',5,'p_llamada_funcion','sintactico.py',340),
  ('brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI','brand',7,'p_brand','sintactico.py',344),
  ('proteccion -> PUBLIC','proteccion',1,'p_proteccion','sintactico.py',348),
  ('proteccion -> PRIVATE','proteccion',1,'p_proteccion','sintactico.py',349),
  ('proteccion -> PROTECTED','proteccion',1,'p_proteccion','sintactico.py',350),
  ('proteccion -> STATIC','proteccion',1,'p_proteccion','sintactico.py',351),
  ('breturn -> empty','breturn',1,'p_breturn','sintactico.py',356),
  ('breturn -> RETURN SEMI','breturn',2,'p_breturn','sintactico.py',357),
  ('breturn -> RETURN NULL SEMI','breturn',3,'p_breturn','sintactico.py',358),
  ('breturn -> RETURN VARIABLE SEMI','breturn',3,'p_breturn','sintactico.py',359),
  ('breturn -> RETURN BOOLEANO SEMI','breturn',3,'p_breturn','sintactico.py',360),
  ('breturn -> breturn RBRACE','breturn',2,'p_breturn','sintactico.py',361),
  ('array_def -> ARRAY LPAREN RPAREN','array_def',3,'p_array_def','sintactico.py',370),
  ('array_def -> ARRAY LPAREN array_elmnt RPAREN','array_def',4,'p_array_def','sintactico.py',371),
  ('array_elmnt -> array_elmnt COMMA valor','array_elmnt',3,'p_array_elmnt','sintactico.py',375),
  ('array_elmnt -> valor','array_elmnt',1,'p_array_elmnt','sintactico.py',376),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',380),
  ('bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI','bcolas',7,'p_bcolas','sintactico.py',385),
  ('lectura -> READLINE LPAREN CADENA RPAREN SEMI','lectura',5,'p_lectura','sintactico.py',390),
  ('lectura -> READLINE LPAREN RPAREN SEMI','lectura',4,'p_lectura','sintactico.py',391),
  ('escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI','escribir',7,'p_escribir','sintactico.py',395),
  ('btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI','btrim',8,'p_btrim','sintactico.py',400),
  ('comment -> COMENTARIOS','comment',1,'p_comment','sintactico.py',406),
  ('comment -> DOC_COMENTARIOS','comment',1,'p_comment','sintactico.py',407),
  ('bgoto -> GOTO NOMBRE SEMI','bgoto',3,'p_bgoto','sintactico.py',412),
  ('bcortes -> EXIT SEMI','bcortes',2,'p_bcortes','sintactico.py',416),
  ('bcortes -> BREAK SEMI','bcortes',2,'p_bcortes','sintactico.py',417),
  ('bcortes -> DEFAULT SEMI','bcortes',2,'p_bcortes','sintactico.py',418),
  ('bcortes -> CONTINUE SEMI','bcortes',2,'p_bcortes','sintactico.py',419),
  ('otros -> SMALLER NOMBRE GREATER','otros',3,'p_otros','sintactico.py',424),
  ('otros -> SMALLER DIVISION NOMBRE GREATER','otros',4,'p_otros','sintactico.py',425),
  ('otros -> NOMBRE COLON','otros',2,'p_otros','sintactico.py',426),
  ('comprobacion -> NOMBRE LPAREN valor RPAREN','comprobacion',4,'p_comprobacion','sintactico.py',435),
  ('comprobacion -> NOMBRE LPAREN VARIABLE RPAREN','comprobacion',4,'p_comprobacion','sintactico.py',436),
  ('simbolos -> LPAREN RPAREN','simbolos',2,'p_simbolos','sintactico.py',442),
  ('simbolos -> LPAREN','simbolos',1,'p_simbolos','sintactico.py',443),
  ('simbolos -> RPAREN','simbolos',1,'p_simbolos','sintactico.py',444),
  ('simbolos -> LBRACKET RBRACKET','simbolos',2,'p_simbolos','sintactico.py',445),
  ('simbolos -> LBRACKET','simbolos',1,'p_simbolos','sintactico.py',446),
  ('simbolos -> RBRACKET','simbolos',1,'p_simbolos','sintactico.py',447),
  ('simbolos -> LBRACE RBRACE','simbolos',2,'p_simbolos','sintactico.py',448),
  ('simbolos -> LBRACE','simbolos',1,'p_simbolos','sintactico.py',449),
  ('simbolos -> RBRACE instrucciones','simbolos',2,'p_simbolos','sintactico.py',450),
  ('simbolos -> OPEN_TAG CLOSE_TAG','simbolos',2,'p_simbolos','sintactico.py',451),
  ('simbolos -> OPEN_TAG','simbolos',1,'p_simbolos','sintactico.py',452),
  ('simbolos -> CLOSE_TAG','simbolos',1,'p_simbolos','sintactico.py',453),
  ('instrucciones -> condicion_else','instrucciones',1,'p_instrucciones','sintactico.py',459),
  ('instrucciones -> condicion_elseif','instrucciones',1,'p_instrucciones','sintactico.py',460),
  ('instrucciones -> bwhile','instrucciones',1,'p_instrucciones','sintactico.py',461),
  ('instrucciones -> bfor','instrucciones',1,'p_instrucciones','sintactico.py',462),
  ('instrucciones -> funciones','instrucciones',1,'p_instrucciones','sintactico.py',463),
  ('instrucciones -> bswitch','instrucciones',1,'p_instrucciones','sintactico.py',464),
  ('instrucciones -> bdo','instrucciones',1,'p_instrucciones','sintactico.py',465),
  ('instrucciones -> catches','instrucciones',1,'p_instrucciones','sintactico.py',466),
  ('bconcat -> CADENA CONCAT CADENA SEMI','bconcat',4,'p_bconcat','sintactico.py',472),
  ('bconcat -> VARIABLE CONCAT CADENA SEMI','bconcat',4,'p_bconcat','sintactico.py',473),
  ('bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI','bconcat',4,'p_bconcat','sintactico.py',474),
  ('bconcat -> CADENA CONCAT_EQUAL CADENA SEMI','bconcat',4,'p_bconcat','sintactico.py',475),
  ('bconcat -> VARIABLE CONCAT VARIABLE SEMI','bconcat',4,'p_bconcat','sintactico.py',476),
  ('bconcat -> VARIABLE CONCAT CADENA CONCAT VARIABLE SEMI','bconcat',6,'p_bconcat','sintactico.py',477),
  ('tiposCast -> STRING','tiposCast',1,'p_tiposCast','sintactico.py',484),
  ('tiposCast -> BOOL','tiposCast',1,'p_tiposCast','sintactico.py',485),
  ('tiposCast -> BOOLEAN','tiposCast',1,'p_tiposCast','sintactico.py',486),
  ('tiposCast -> DOUBLE','tiposCast',1,'p_tiposCast','sintactico.py',487),
  ('tiposCast -> FLOAT','tiposCast',1,'p_tiposCast','sintactico.py',488),
  ('tiposCast -> ARRAY','tiposCast',1,'p_tiposCast','sintactico.py',489),
  ('tiposCast -> OBJECT','tiposCast',1,'p_tiposCast','sintactico.py',490),
  ('tiposCast -> INTEGER','tiposCast',1,'p_tiposCast','sintactico.py',491),
  ('tiposCast -> INT','tiposCast',1,'p_tiposCast','sintactico.py',492),
  ('casting -> VARIABLE EQUALS LPAREN tiposCast RPAREN VARIABLE SEMI','casting',7,'p_casting','sintactico.py',500),
  ('casting -> LPAREN tiposCast RPAREN VARIABLE SEMI','casting',5,'p_casting','sintactico.py',501),
  ('aumentoCasting -> VARIABLE incrementos_mat tipoDato SEMI','aumentoCasting',4,'p_aumentoCasting','sintactico.py',507),
  ('aumentoCasting -> VARIABLE EQUALS VARIABLE operadores tipoDato SEMI','aumentoCasting',6,'p_aumentoCasting','sintactico.py',508),
  ('aumentoCasting -> VARIABLE EQUALS VARIABLE operadores VARIABLE operadores operaciones_mat_par SEMI','aumentoCasting',8,'p_aumentoCasting','sintactico.py',509),
  ('aumentoCasting -> VARIABLE operadores tipoDato condicion_booleana valor','aumentoCasting',5,'p_aumentoCasting','sintactico.py',510),
  ('aumentoCasting -> VARIABLE incrementos_mat VARIABLE SEMI','aumentoCasting',4,'p_aumentoCasting','sintactico.py',511),
  ('bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI','bpila',7,'p_bpila','sintactico.py',518),
  ('addpila -> VARIABLE FLECHA PUSH LPAREN valor RPAREN SEMI','addpila',7,'p_addpila','sintactico.py',523),
  ('addpila -> VARIABLE FLECHA PUSH LPAREN VARIABLE RPAREN SEMI','addpila',7,'p_addpila','sintactico.py',524),
  ('poppila -> VARIABLE FLECHA POP LPAREN RPAREN SEMI','poppila',6,'p_poppila','sintactico.py',528),
  ('funcionesCP -> VARIABLE FLECHA REWIND LPAREN RPAREN','funcionesCP',5,'p_funcionesCP','sintactico.py',532),
  ('funcionesCP -> VARIABLE FLECHA VALID LPAREN RPAREN','funcionesCP',5,'p_funcionesCP','sintactico.py',533),
  ('funcionesCP -> VARIABLE FLECHA COUNT LPAREN RPAREN','funcionesCP',5,'p_funcionesCP','sintactico.py',534),
  ('funcionesCP -> VARIABLE FLECHA NEXT LPAREN RPAREN','funcionesCP',5,'p_funcionesCP','sintactico.py',535),
  ('funcionesCP -> VARIABLE FLECHA CURRENT LPAREN RPAREN','funcionesCP',5,'p_funcionesCP','sintactico.py',536),
  ('funcionesCP_semi -> funcionesCP','funcionesCP_semi',1,'p_funcionesCP_semi','sintactico.py',541),
  ('funcionesCP_semi -> funcionesCP SEMI','funcionesCP_semi',2,'p_funcionesCP_semi','sintactico.py',542),
  ('addcola -> VARIABLE FLECHA ENQUEUE LPAREN valor RPAREN SEMI','addcola',7,'p_addcola','sintactico.py',547),
  ('addcola -> VARIABLE FLECHA ENQUEUE LPAREN VARIABLE RPAREN SEMI','addcola',7,'p_addcola','sintactico.py',548),
  ('minuscola -> VARIABLE FLECHA DEQUEUE LPAREN valor RPAREN SEMI','minuscola',7,'p_minuscola','sintactico.py',552),
  ('minuscola -> VARIABLE FLECHA DEQUEUE LPAREN VARIABLE RPAREN SEMI','minuscola',7,'p_minuscola','sintactico.py',553),
  ('constante -> DEFINE LPAREN CADENA COMMA valor RPAREN SEMI','constante',7,'p_constante','sintactico.py',560),
  ('constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI','constante',7,'p_constante','sintactico.py',561),
  ('arraypop -> ARRAY_POP LPAREN VARIABLE RPAREN SEMI','arraypop',5,'p_arraypop','sintactico.py',565),
  ('arraypush -> ARRAY_PUSH LPAREN VARIABLE COMMA valor RPAREN SEMI','arraypush',7,'p_arraypush','sintactico.py',568),
  ('arraypush -> ARRAY_PUSH LPAREN VARIABLE COMMA VARIABLE RPAREN SEMI','arraypush',7,'p_arraypush','sintactico.py',569),
  ('arrayvalues -> ARRAY_VALUES LPAREN VARIABLE RPAREN','arrayvalues',4,'p_arrayvalues','sintactico.py',573),
  ('arraysearch -> ARRAY_SEARCH LPAREN valor COMMA VARIABLE RPAREN','arraysearch',6,'p_arraysearch','sintactico.py',576),
]
