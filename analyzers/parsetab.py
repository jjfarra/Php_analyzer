
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY AS BOOL BOOLEAN BOOLEANO BREAK CADENA CASE CATCH CLOSE_TAG COLON COMENTARIOS COMMA CONCAT CONCAT_EQUAL CONTINUE DECIMAL DEFAULT DEFINE DIVISION DIV_EQUAL DO DOC_COMENTARIOS DOUBLE ECHO ELSE ELSEIF ENTERO EQUALS EXIT FLOAT FOR FOREACH FUNCTION FWRITE GOTO GREATER IF INT INTEGER IS_EQUAL IS_GREATER_OR_EQUAL IS_IDENTICAL IS_NOT_EQUAL IS_NOT_IDENTICAL IS_SMALLER_OR_EQUAL LBRACE LBRACKET LPAREN MINUS_EQUAL MODULO MOD_EQUAL MULTIPLICACION MUL_EQUAL NEW NOMBRE NULL OBJECT OPEN_TAG OR PLUS_EQUAL PRINT PRIVATE PROTECTED PUBLIC RAND RBRACE RBRACKET READLINE RESTA RETURN RPAREN SEMI SMALLER SPLQUEUE SPLSTACK STATIC STRING SUMA SWITCH TRIM TRY VAR VARIABLE VOID WHILE XORcuerpo : imprimir\n            | asignacion\n            | funciones\n            | constante\n            | lectura\n            | bwhile\n            | bdo\n            | bfor\n            | bforeach\n            | btry\n            | repiteCondicional\n            | bswitch\n            | bcase\n            | bgoto\n            | bcolas\n            | bpila\n            | bcortes\n            | brand\n            | escribir\n            | btrim\n            | otros\n            | breturn\n            | comment\n            | casting\n            | bconcat\n  asignacion : VARIABLE EQUALS valor SEMI\n                | VAR asignacion\n                | proteccion asignacion\n                | VARIABLE EQUALS brand\n                | VARIABLE EQUALS escribir\n                | VARIABLE EQUALS btrim\n                | VARIABLE EQUALS lectura\n                | VARIABLE EQUALS bconcat\n                | asignacion_array\n                | VARIABLE EQUALS operaciones_mat SEMI\n                | aumentoCasting\n  asignacion_array : VARIABLE EQUALS array_def SEMIconstante : DEFINE LPAREN CADENA COMMA valor RPAREN SEMI\n          | DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMIvalor : tipoDato\n            | bcolas\n            | bpila\n  tipoDato : numero\n            | CADENA\n            | BOOLEANO\n  numero : ENTERO\n          | DECIMAL\n  imprimir : ECHO valor SEMI\n            | PRINT valor SEMI\n            | PRINT LPAREN valor RPAREN SEMI\n            | ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI\n            | ECHO bconcat\n            | ECHO operaciones_mat SEMI\n            | PRINT operaciones_mat SEMI\n  condicion_if :  IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE          \n  condicion_elseif :  ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_else :  ELSE LBRACE cuerpo RBRACE\n  condicion_ifelse : condicion_if\n                      | condicion_if condicion_else\n                      | condicion_if condicion_elseif\n                      | condicion_if condicion_elseif condicion_else\n  repiteCondicional : condicion_ifelse\n                        | condicion_ifelse repiteCondicional \n   condicion : VARIABLE operador_logico VARIABLE\n            | valor operador_logico valor \n            | VARIABLE operador_logico valor\n            | VARIABLE condicion_booleana VARIABLE\n            | valor condicion_booleana valor\n            | VARIABLE condicion_booleana valor\n  bfor : FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_defstc_bloque : stc_bloque SEMI cuerpo\n        | breturn\n        stc_bloque_def : LBRACE stc_bloque RBRACEfor_incr : VARIABLE SUMA SUMA\n          | SUMA SUMA VARIABLE\n          | VARIABLE RESTA RESTA\n          | RESTA RESTA VARIABLE\n          | VARIABLE SUMA EQUALS numero\n          | VARIABLE RESTA EQUALS numerobforeach :  FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def bwhile : WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE \n  | WHILE LPAREN condicion RPAREN COLON stc_bloque  \n   bdo : DO LBRACE cuerpo RBRACE bwhile \n   bswitch : SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACEbcase : CASE ENTERO COLON innerSwitch : bcase cuerpo BREAK SEMI\n                 | CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch \n  btry : TRY LBRACE stc_bloque_def RBRACE catchescatches : catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def\n          | emptyoperadores : SUMA \n                  | RESTA\n                  | MULTIPLICACION\n                  | DIVISION\n                  | MODULO\n  operador_logico :  SMALLER\n                        | GREATER\n                        | IS_SMALLER_OR_EQUAL\n                        | IS_GREATER_OR_EQUAL\n  incrementos_mat :  MINUS_EQUAL\n                        | MOD_EQUAL\n                        | MUL_EQUAL\n                        | PLUS_EQUAL\n                        | DIV_EQUAL\n  condicion_booleana :  AND\n                        | OR\n                        | XOR\n                        | IS_EQUAL\n                        | IS_NOT_EQUAL\n                        | IS_IDENTICAL\n                        | IS_NOT_IDENTICAL\n  operaciones_mat :  valor operadores valor\n                        | valor operadores operaciones_mat\n                        | VARIABLE operadores VARIABLE\n                        | operaciones_mat_par\n                       \n  operaciones_mat_par :  LPAREN valor operadores valor RPAREN\n                          |  LPAREN valor operadores operaciones_mat_par RPAREN\n  funciones : funcion_nparams\n              | proteccion funcion_nparams\n              | funcion_blank\n              | proteccion funcion_blank\n              | funcion_void\n  param : VARIABLE\n          | asignacion\n          funcion_nparams : FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_defparams_list : params_list COMMA param\n                      | paramfuncion_void : FUNCTION NOMBRE LPAREN  RPAREN COLON VOID LBRACE empty RBRACE funcion_blank : FUNCTION NOMBRE LPAREN  RPAREN stc_bloque_def\n                    | FUNCTION NOMBRE LPAREN  RPAREN LBRACE empty RBRACE\n  brand : RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMIproteccion : PUBLIC\n          | PRIVATE\n          | PROTECTED\n          | STATIC\n  breturn : empty\n        | RETURN SEMI \n        | RETURN NULL SEMI\n        | RETURN VARIABLE SEMI\n        | RETURN BOOLEANO SEMI\n        array_def : ARRAY LPAREN RPAREN\n          | ARRAY LPAREN array_elmnt RPARENarray_elmnt : array_elmnt COMMA valor\n            | valorempty :  bcolas : VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI\n  bpila : VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMIlectura : READLINE LPAREN CADENA RPAREN SEMI\n          | READLINE LPAREN RPAREN SEMIescribir : FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI\n   btrim : TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI\n   comment : COMENTARIOS\n              | DOC_COMENTARIOS\n   bgoto : GOTO NOMBRE SEMIbcortes : EXIT SEMI\n              | BREAK SEMI\n              | DEFAULT SEMI\n              | CONTINUE SEMI\n   otros : SMALLER NOMBRE GREATER\n   bconcat : CADENA CONCAT CADENA SEMI\n            |  VARIABLE CONCAT VARIABLE SEMI\n            | VARIABLE CONCAT CADENA SEMI\n            | VARIABLE CONCAT_EQUAL CADENA SEMI\n            | CADENA CONCAT_EQUAL CADENA SEMI\n            \n   tiposCast :  STRING\n            | BOOL\n            | BOOLEAN\n            | DOUBLE\n            | FLOAT\n            | ARRAY\n            | OBJECT \n            | INTEGER\n            | INT\n        \n            \n   casting : VARIABLE EQUALS LPAREN tiposCast RPAREN VARIABLE SEMI  \n              | LPAREN tiposCast RPAREN VARIABLE SEMI\n   \n    aumentoCasting : VARIABLE incrementos_mat tipoDato SEMI\n                    | VARIABLE EQUALS VARIABLE operadores tipoDato SEMI\n  '
    
_lr_action_items = {'ECHO':([0,120,207,298,301,312,341,],[27,27,27,27,27,27,27,]),'PRINT':([0,120,207,298,301,312,341,],[28,28,28,28,28,28,28,]),'VARIABLE':([0,27,28,31,32,33,34,59,62,63,64,65,82,85,99,100,108,110,111,119,120,121,122,125,145,147,148,149,150,151,152,155,162,165,166,167,168,169,172,179,191,205,207,208,214,217,218,219,223,224,225,226,227,228,229,230,232,233,235,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,254,278,285,295,298,301,306,312,316,321,341,353,354,358,359,372,374,],[30,78,87,109,109,-34,-36,138,-132,-133,-134,-135,158,158,163,175,-27,109,-28,188,30,109,192,195,188,87,-91,-92,-93,-94,-95,213,216,-29,-30,-31,-32,-33,158,163,188,265,30,188,158,213,-26,-35,-37,158,-161,-162,-163,-176,265,158,-160,-164,-149,288,290,-96,-97,-98,-99,-105,-106,-107,-108,-109,-110,-111,158,158,296,319,-148,327,30,30,265,30,-177,158,30,370,371,-131,-150,379,-151,]),'VAR':([0,31,32,62,63,64,65,110,120,121,205,207,229,298,301,306,312,341,],[31,31,31,-132,-133,-134,-135,31,31,31,31,31,31,31,31,31,31,31,]),'DEFINE':([0,120,207,298,301,312,341,],[38,38,38,38,38,38,38,]),'READLINE':([0,99,120,179,207,298,301,312,341,],[40,40,40,40,40,40,40,40,40,]),'WHILE':([0,120,207,252,298,301,312,341,],[41,41,41,41,41,41,41,41,]),'DO':([0,120,207,298,301,312,341,],[42,42,42,42,42,42,42,]),'FOR':([0,120,207,298,301,312,341,],[43,43,43,43,43,43,43,]),'FOREACH':([0,120,207,298,301,312,341,],[44,44,44,44,44,44,44,]),'TRY':([0,120,207,298,301,312,341,],[45,45,45,45,45,45,45,]),'SWITCH':([0,120,207,298,301,312,341,],[47,47,47,47,47,47,47,]),'CASE':([0,120,207,298,301,312,341,],[48,48,48,48,48,48,48,]),'GOTO':([0,120,207,298,301,312,341,],[49,49,49,49,49,49,49,]),'EXIT':([0,120,207,298,301,312,341,],[50,50,50,50,50,50,50,]),'BREAK':([0,120,207,298,301,312,341,],[51,51,51,51,51,51,51,]),'DEFAULT':([0,120,207,298,301,312,341,],[52,52,52,52,52,52,52,]),'CONTINUE':([0,120,207,298,301,312,341,],[53,53,53,53,53,53,53,]),'RAND':([0,99,120,179,207,298,301,312,341,],[54,54,54,54,54,54,54,54,54,]),'FWRITE':([0,99,120,179,207,298,301,312,341,],[55,55,55,55,55,55,55,55,55,]),'TRIM':([0,99,120,179,207,298,301,312,341,],[56,56,56,56,56,56,56,56,56,]),'SMALLER':([0,71,74,75,76,80,81,83,88,120,188,189,207,298,301,312,341,343,344,],[57,-46,-40,-41,-42,-43,-45,-47,-44,57,239,239,57,57,57,57,57,-146,-147,]),'RETURN':([0,120,193,207,286,287,298,301,308,312,341,],[59,59,59,59,59,59,59,59,59,59,59,]),'COMENTARIOS':([0,120,207,298,301,312,341,],[60,60,60,60,60,60,60,]),'DOC_COMENTARIOS':([0,120,207,298,301,312,341,],[61,61,61,61,61,61,61,]),'LPAREN':([0,27,28,38,40,41,43,44,47,54,55,56,68,99,120,140,144,147,148,149,150,151,152,174,179,180,200,207,214,220,221,298,301,312,332,341,],[29,82,85,115,118,119,121,122,125,132,133,134,145,172,29,205,208,82,-91,-92,-93,-94,-95,224,82,229,261,29,82,276,277,29,29,29,356,29,]),'CADENA':([0,27,28,33,34,82,85,99,100,101,102,103,104,105,106,107,108,111,115,116,117,118,119,120,145,147,148,149,150,151,152,165,166,167,168,169,172,179,191,207,208,214,217,218,219,223,224,225,226,227,228,230,232,233,235,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,260,285,298,301,312,316,321,341,358,359,374,],[39,77,88,-34,-36,88,88,77,176,177,88,-100,-101,-102,-103,-104,-27,-28,181,183,184,185,88,39,88,88,-91,-92,-93,-94,-95,-29,-30,-31,-32,-33,88,77,88,39,88,88,88,-26,-35,-37,88,-161,-162,-163,-176,88,-160,-164,-149,88,88,-96,-97,-98,-99,-105,-106,-107,-108,-109,-110,-111,88,88,303,-148,39,39,39,-177,88,39,-131,-150,-151,]),'PUBLIC':([0,31,32,62,63,64,65,110,120,121,205,207,229,298,301,306,312,341,],[62,62,62,-132,-133,-134,-135,62,62,62,62,62,62,62,62,62,62,62,]),'PRIVATE':([0,31,32,62,63,64,65,110,120,121,205,207,229,298,301,306,312,341,],[63,63,63,-132,-133,-134,-135,63,63,63,63,63,63,63,63,63,63,63,]),'PROTECTED':([0,31,32,62,63,64,65,110,120,121,205,207,229,298,301,306,312,341,],[64,64,64,-132,-133,-134,-135,64,64,64,64,64,64,64,64,64,64,64,]),'STATIC':([0,31,32,62,63,64,65,110,120,121,205,207,229,298,301,306,312,341,],[65,65,65,-132,-133,-134,-135,65,65,65,65,65,65,65,65,65,65,65,]),'FUNCTION':([0,32,62,63,64,65,120,207,298,301,312,341,],[66,114,-132,-133,-134,-135,66,66,66,66,66,66,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,33,34,35,36,37,46,58,60,61,67,72,108,111,112,113,124,128,129,130,131,136,141,142,146,154,159,161,165,166,167,168,169,196,197,201,202,203,204,206,218,219,223,225,226,227,228,232,233,235,256,257,273,274,285,287,294,297,298,299,300,307,310,313,316,325,331,337,343,344,345,347,348,349,355,358,359,361,364,365,373,374,376,380,382,],[-145,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-34,-36,-118,-120,-122,-62,-136,-152,-153,-58,-52,-27,-28,-119,-121,-63,-155,-156,-157,-158,-137,-59,-60,-48,-53,-49,-54,-29,-30,-31,-32,-33,-85,-154,-159,-138,-139,-140,-61,-26,-35,-37,-161,-162,-163,-176,-160,-164,-149,-72,-145,-50,-175,-148,-145,-83,-73,-145,-88,-90,-129,-57,-51,-177,-82,-71,-125,-146,-147,-174,-38,-39,-81,-80,-131,-150,-130,-55,-70,-84,-151,-56,-128,-89,]),'IF':([0,46,67,120,141,142,206,207,298,301,310,312,341,364,376,],[68,68,-58,68,-59,-60,-61,68,68,68,-57,68,68,-55,-56,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,33,34,35,36,37,46,58,60,61,67,72,108,111,112,113,120,124,128,129,130,131,136,141,142,146,154,159,161,165,166,167,168,169,190,193,194,196,197,201,202,203,204,206,207,218,219,223,225,226,227,228,232,233,235,255,256,257,267,273,274,285,286,287,294,297,298,299,300,307,308,310,312,313,316,324,325,331,337,339,341,342,343,344,345,347,348,349,355,357,358,359,361,362,363,364,365,373,374,375,376,380,382,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-34,-36,-118,-120,-122,-62,-136,-152,-153,-58,-52,-27,-28,-119,-121,-145,-63,-155,-156,-157,-158,-137,-59,-60,-48,-53,-49,-54,-29,-30,-31,-32,-33,252,-145,257,-85,-154,-159,-138,-139,-140,-61,-145,-26,-35,-37,-161,-162,-163,-176,-160,-164,-149,297,-72,-145,310,-50,-175,-148,-145,-145,-83,-73,-145,-88,-90,-129,-145,-57,-145,-51,-177,349,-82,-71,-125,361,-145,364,-146,-147,-174,-38,-39,-81,-80,373,-131,-150,-130,-145,376,-55,-70,-84,-151,380,-56,-128,-89,]),'SEMI':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,33,34,35,36,37,46,50,51,52,53,58,59,60,61,67,69,71,72,73,74,75,76,77,79,80,81,83,84,86,88,108,111,112,113,124,127,128,129,130,131,136,137,138,139,141,142,146,154,159,161,164,165,166,167,168,169,170,173,175,176,177,178,183,184,186,193,196,197,201,202,203,204,206,210,211,213,215,216,218,219,223,225,226,227,228,232,233,234,235,253,255,256,257,270,273,274,275,279,285,286,287,288,289,290,291,292,293,294,297,298,299,300,301,307,308,310,313,314,315,316,317,318,319,320,322,323,324,325,331,333,334,335,337,339,343,344,345,347,348,349,355,358,359,360,361,364,365,373,374,376,380,382,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-34,-36,-118,-120,-122,-62,128,129,130,131,-136,136,-152,-153,-58,146,-46,-52,154,-40,-41,-42,-44,-115,-43,-45,-47,159,161,-44,-27,-28,-119,-121,-63,197,-155,-156,-157,-158,-137,202,203,204,-59,-60,-48,-53,-49,-54,218,-29,-30,-31,-32,-33,219,223,225,226,227,228,232,233,235,-145,-85,-154,-159,-138,-139,-140,-61,-112,-113,-114,273,274,-26,-35,-37,-161,-162,-163,-176,-160,-164,285,-149,295,298,-72,-145,313,-50,-175,316,-141,-148,-145,-145,-64,-66,-67,-69,-65,-68,-83,-73,-145,-88,-90,-145,-129,-145,-57,-51,-116,-117,-177,343,344,345,-142,347,348,298,298,-71,357,358,359,-125,-136,-146,-147,-174,-38,-39,-81,-80,-131,-150,374,-130,-55,-70,-84,-151,-56,-128,-89,]),'NOMBRE':([27,49,57,66,114,115,133,134,261,356,],[70,127,135,140,180,182,199,200,304,372,]),'BOOLEANO':([27,28,33,34,59,82,85,99,102,103,104,105,106,107,108,111,119,145,147,148,149,150,151,152,165,166,167,168,169,172,179,191,208,214,217,218,219,223,224,225,226,227,228,230,232,233,235,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,285,316,321,358,359,374,],[81,81,-34,-36,139,81,81,81,81,-100,-101,-102,-103,-104,-27,-28,81,81,81,-91,-92,-93,-94,-95,-29,-30,-31,-32,-33,81,81,81,81,81,81,-26,-35,-37,81,-161,-162,-163,-176,81,-160,-164,-149,81,81,-96,-97,-98,-99,-105,-106,-107,-108,-109,-110,-111,81,81,-148,-177,81,-131,-150,-151,]),'ENTERO':([27,28,33,34,48,82,85,99,102,103,104,105,106,107,108,111,119,132,145,147,148,149,150,151,152,153,165,166,167,168,169,172,179,191,208,214,217,218,219,223,224,225,226,227,228,230,232,233,235,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,259,285,316,321,358,359,367,369,374,],[71,71,-34,-36,126,71,71,71,71,-100,-101,-102,-103,-104,-27,-28,71,198,71,71,-91,-92,-93,-94,-95,212,-29,-30,-31,-32,-33,71,71,71,71,71,71,-26,-35,-37,71,-161,-162,-163,-176,71,-160,-164,-149,71,71,-96,-97,-98,-99,-105,-106,-107,-108,-109,-110,-111,71,71,302,-148,-177,71,-131,-150,71,71,-151,]),'DECIMAL':([27,28,33,34,82,85,99,102,103,104,105,106,107,108,111,119,145,147,148,149,150,151,152,165,166,167,168,169,172,179,191,208,214,217,218,219,223,224,225,226,227,228,230,232,233,235,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,285,316,321,358,359,367,369,374,],[83,83,-34,-36,83,83,83,83,-100,-101,-102,-103,-104,-27,-28,83,83,83,-91,-92,-93,-94,-95,-29,-30,-31,-32,-33,83,83,83,83,83,83,-26,-35,-37,83,-161,-162,-163,-176,83,-160,-164,-149,83,83,-96,-97,-98,-99,-105,-106,-107,-108,-109,-110,-111,83,83,-148,-177,83,-131,-150,83,83,-151,]),'STRING':([29,172,],[90,90,]),'BOOL':([29,172,],[91,91,]),'BOOLEAN':([29,172,],[92,92,]),'DOUBLE':([29,172,],[93,93,]),'FLOAT':([29,172,],[94,94,]),'ARRAY':([29,99,172,179,231,],[95,174,95,174,284,]),'OBJECT':([29,172,],[96,96,]),'INTEGER':([29,172,],[97,97,]),'INT':([29,172,],[98,98,]),'EQUALS':([30,78,87,109,158,163,188,265,288,290,351,352,],[99,156,156,179,156,156,156,179,156,156,367,369,]),'CONCAT':([30,39,77,78,163,],[100,116,116,100,100,]),'CONCAT_EQUAL':([30,39,77,78,163,],[101,117,117,101,101,]),'MINUS_EQUAL':([30,109,265,],[103,103,103,]),'MOD_EQUAL':([30,109,265,],[104,104,104,]),'MUL_EQUAL':([30,109,265,],[105,105,105,]),'PLUS_EQUAL':([30,109,265,],[106,106,106,]),'DIV_EQUAL':([30,109,265,],[107,107,107,]),'RPAREN':([33,34,71,74,75,76,80,81,83,88,89,90,91,92,93,94,95,96,97,98,108,111,118,160,165,166,167,168,169,185,187,195,205,209,218,219,222,223,224,225,226,227,228,229,232,233,235,262,264,265,266,268,271,272,276,277,280,281,283,284,285,288,289,290,291,292,293,296,302,303,304,314,315,316,326,336,338,343,344,346,358,359,366,368,370,371,374,377,378,379,],[-34,-36,-46,-40,-41,-42,-43,-45,-47,-44,162,-165,-166,-167,-168,-169,-170,-171,-172,-173,-27,-28,186,215,-29,-30,-31,-32,-33,234,236,258,263,269,-26,-35,278,-37,279,-161,-162,-163,-176,282,-160,-164,-149,305,-127,-123,-124,311,314,315,317,318,320,-144,322,323,-148,-64,-66,-67,-69,-65,-68,330,334,335,336,-116,-117,-177,350,360,-126,-146,-147,-143,-131,-150,-74,-76,-75,-77,-151,-78,-79,381,]),'COMMA':([33,34,71,74,75,76,80,81,83,88,108,111,165,166,167,168,169,181,182,198,199,218,219,223,225,226,227,228,232,233,235,262,264,265,266,280,281,285,316,338,343,344,346,358,359,374,],[-34,-36,-46,-40,-41,-42,-43,-45,-47,-44,-27,-28,-29,-30,-31,-32,-33,230,231,259,260,-26,-35,-37,-161,-162,-163,-176,-160,-164,-149,306,-127,-123,-124,321,-144,-148,-177,-126,-146,-147,-143,-131,-150,-151,]),'LBRACE':([42,45,123,143,236,258,263,269,282,305,311,330,340,350,381,],[120,123,193,207,286,301,308,312,308,193,341,193,362,193,193,]),'NULL':([59,],[137,]),'ELSE':([67,142,364,376,],[143,143,-55,-56,]),'ELSEIF':([67,364,],[144,-55,]),'SUMA':([69,71,74,75,76,77,78,80,81,83,84,87,88,157,160,163,164,210,295,327,328,343,344,351,],[148,-46,-40,-41,-42,-44,148,-43,-45,-47,148,148,-44,148,148,148,148,148,328,351,353,-146,-147,366,]),'RESTA':([69,71,74,75,76,77,78,80,81,83,84,87,88,157,160,163,164,210,295,327,329,343,344,352,],[149,-46,-40,-41,-42,-44,149,-43,-45,-47,149,149,-44,149,149,149,149,149,329,352,354,-146,-147,368,]),'MULTIPLICACION':([69,71,74,75,76,77,78,80,81,83,84,87,88,157,160,163,164,210,343,344,],[150,-46,-40,-41,-42,-44,150,-43,-45,-47,150,150,-44,150,150,150,150,150,-146,-147,]),'DIVISION':([69,71,74,75,76,77,78,80,81,83,84,87,88,157,160,163,164,210,343,344,],[151,-46,-40,-41,-42,-44,151,-43,-45,-47,151,151,-44,151,151,151,151,151,-146,-147,]),'MODULO':([69,71,74,75,76,77,78,80,81,83,84,87,88,157,160,163,164,210,343,344,],[152,-46,-40,-41,-42,-44,152,-43,-45,-47,152,152,-44,152,152,152,152,152,-146,-147,]),'LBRACKET':([70,],[153,]),'GREATER':([71,74,75,76,80,81,83,88,135,188,189,343,344,],[-46,-40,-41,-42,-43,-45,-47,-44,201,240,240,-146,-147,]),'IS_SMALLER_OR_EQUAL':([71,74,75,76,80,81,83,88,188,189,343,344,],[-46,-40,-41,-42,-43,-45,-47,-44,241,241,-146,-147,]),'IS_GREATER_OR_EQUAL':([71,74,75,76,80,81,83,88,188,189,343,344,],[-46,-40,-41,-42,-43,-45,-47,-44,242,242,-146,-147,]),'AND':([71,74,75,76,80,81,83,88,188,189,343,344,],[-46,-40,-41,-42,-43,-45,-47,-44,243,243,-146,-147,]),'OR':([71,74,75,76,80,81,83,88,188,189,343,344,],[-46,-40,-41,-42,-43,-45,-47,-44,244,244,-146,-147,]),'XOR':([71,74,75,76,80,81,83,88,188,189,343,344,],[-46,-40,-41,-42,-43,-45,-47,-44,245,245,-146,-147,]),'IS_EQUAL':([71,74,75,76,80,81,83,88,188,189,343,344,],[-46,-40,-41,-42,-43,-45,-47,-44,246,246,-146,-147,]),'IS_NOT_EQUAL':([71,74,75,76,80,81,83,88,188,189,343,344,],[-46,-40,-41,-42,-43,-45,-47,-44,247,247,-146,-147,]),'IS_IDENTICAL':([71,74,75,76,80,81,83,88,188,189,343,344,],[-46,-40,-41,-42,-43,-45,-47,-44,248,248,-146,-147,]),'IS_NOT_IDENTICAL':([71,74,75,76,80,81,83,88,188,189,343,344,],[-46,-40,-41,-42,-43,-45,-47,-44,249,249,-146,-147,]),'NEW':([99,156,],[171,171,]),'COLON':([126,236,263,],[196,287,309,]),'SPLQUEUE':([171,],[220,]),'SPLSTACK':([171,],[221,]),'AS':([192,],[254,]),'RBRACKET':([212,],[270,]),'CATCH':([257,297,299,300,382,],[-145,-73,332,-90,-89,]),'VOID':([309,],[340,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,120,207,298,301,312,341,],[1,190,267,331,333,342,363,]),'imprimir':([0,120,207,298,301,312,341,],[2,2,2,2,2,2,2,]),'asignacion':([0,31,32,110,120,121,205,207,229,298,301,306,312,341,],[3,108,111,111,3,191,266,3,266,3,3,266,3,3,]),'funciones':([0,120,207,298,301,312,341,],[4,4,4,4,4,4,4,]),'constante':([0,120,207,298,301,312,341,],[5,5,5,5,5,5,5,]),'lectura':([0,99,120,179,207,298,301,312,341,],[6,168,6,168,6,6,6,6,6,]),'bwhile':([0,120,207,252,298,301,312,341,],[7,7,7,294,7,7,7,7,]),'bdo':([0,120,207,298,301,312,341,],[8,8,8,8,8,8,8,]),'bfor':([0,120,207,298,301,312,341,],[9,9,9,9,9,9,9,]),'bforeach':([0,120,207,298,301,312,341,],[10,10,10,10,10,10,10,]),'btry':([0,120,207,298,301,312,341,],[11,11,11,11,11,11,11,]),'repiteCondicional':([0,46,120,207,298,301,312,341,],[12,124,12,12,12,12,12,12,]),'bswitch':([0,120,207,298,301,312,341,],[13,13,13,13,13,13,13,]),'bcase':([0,120,207,298,301,312,341,],[14,14,14,14,14,14,14,]),'bgoto':([0,120,207,298,301,312,341,],[15,15,15,15,15,15,15,]),'bcolas':([0,27,28,82,85,99,119,120,145,147,172,179,191,207,208,214,224,230,237,238,250,251,298,301,312,321,341,],[16,75,75,75,75,75,75,16,75,75,75,75,75,16,75,75,75,75,75,75,75,75,16,16,16,75,16,]),'bpila':([0,27,28,82,85,99,119,120,145,147,172,179,191,207,208,214,224,230,237,238,250,251,298,301,312,321,341,],[17,76,76,76,76,76,76,17,76,76,76,76,76,17,76,76,76,76,76,76,76,76,17,17,17,76,17,]),'bcortes':([0,120,207,298,301,312,341,],[18,18,18,18,18,18,18,]),'brand':([0,99,120,179,207,298,301,312,341,],[19,165,19,165,19,19,19,19,19,]),'escribir':([0,99,120,179,207,298,301,312,341,],[20,166,20,166,20,20,20,20,20,]),'btrim':([0,99,120,179,207,298,301,312,341,],[21,167,21,167,21,21,21,21,21,]),'otros':([0,120,207,298,301,312,341,],[22,22,22,22,22,22,22,]),'breturn':([0,120,193,207,286,287,298,301,308,312,341,],[23,23,256,23,256,256,23,23,256,23,23,]),'comment':([0,120,207,298,301,312,341,],[24,24,24,24,24,24,24,]),'casting':([0,120,207,298,301,312,341,],[25,25,25,25,25,25,25,]),'bconcat':([0,27,99,120,179,207,298,301,312,341,],[26,72,169,26,169,26,26,26,26,26,]),'proteccion':([0,31,32,110,120,121,205,207,229,298,301,306,312,341,],[32,110,110,110,32,110,110,32,110,32,32,110,32,32,]),'asignacion_array':([0,31,32,110,120,121,205,207,229,298,301,306,312,341,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'aumentoCasting':([0,31,32,110,120,121,205,207,229,298,301,306,312,341,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'funcion_nparams':([0,32,120,207,298,301,312,341,],[35,112,35,35,35,35,35,35,]),'funcion_blank':([0,32,120,207,298,301,312,341,],[36,113,36,36,36,36,36,36,]),'funcion_void':([0,120,207,298,301,312,341,],[37,37,37,37,37,37,37,]),'condicion_ifelse':([0,46,120,207,298,301,312,341,],[46,46,46,46,46,46,46,46,]),'empty':([0,120,193,207,257,286,287,298,301,308,312,341,362,],[58,58,58,58,300,58,58,58,58,339,58,58,375,]),'condicion_if':([0,46,120,207,298,301,312,341,],[67,67,67,67,67,67,67,67,]),'valor':([27,28,82,85,99,119,145,147,172,179,191,208,214,224,230,237,238,250,251,321,],[69,84,157,160,164,189,189,210,157,164,189,189,271,281,283,289,291,292,293,346,]),'operaciones_mat':([27,28,99,147,179,],[73,86,170,211,170,]),'tipoDato':([27,28,82,85,99,102,119,145,147,172,179,191,208,214,217,224,230,237,238,250,251,321,],[74,74,74,74,74,178,74,74,74,74,74,74,74,74,275,74,74,74,74,74,74,74,]),'operaciones_mat_par':([27,28,99,147,179,214,],[79,79,79,79,79,272,]),'numero':([27,28,82,85,99,102,119,145,147,172,179,191,208,214,217,224,230,237,238,250,251,321,367,369,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,377,378,]),'tiposCast':([29,172,],[89,222,]),'incrementos_mat':([30,109,265,],[102,102,102,]),'condicion_else':([67,142,],[141,206,]),'condicion_elseif':([67,],[142,]),'operadores':([69,78,84,87,157,160,163,164,210,],[147,155,147,155,214,214,217,147,147,]),'array_def':([99,179,],[173,173,]),'condicion':([119,145,191,208,],[187,209,253,268,]),'stc_bloque_def':([123,263,282,305,330,350,381,],[194,307,307,337,355,365,382,]),'operador_logico':([188,189,],[237,250,]),'condicion_booleana':([188,189,],[238,251,]),'stc_bloque':([193,286,287,308,],[255,324,325,255,]),'params_list':([205,229,],[262,262,]),'param':([205,229,306,],[264,264,338,]),'array_elmnt':([224,],[280,]),'catches':([257,],[299,]),'for_incr':([295,],[326,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> imprimir','cuerpo',1,'p_cuerpo','sintactico2.py',10),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','sintactico2.py',11),
  ('cuerpo -> funciones','cuerpo',1,'p_cuerpo','sintactico2.py',12),
  ('cuerpo -> constante','cuerpo',1,'p_cuerpo','sintactico2.py',13),
  ('cuerpo -> lectura','cuerpo',1,'p_cuerpo','sintactico2.py',14),
  ('cuerpo -> bwhile','cuerpo',1,'p_cuerpo','sintactico2.py',15),
  ('cuerpo -> bdo','cuerpo',1,'p_cuerpo','sintactico2.py',16),
  ('cuerpo -> bfor','cuerpo',1,'p_cuerpo','sintactico2.py',17),
  ('cuerpo -> bforeach','cuerpo',1,'p_cuerpo','sintactico2.py',18),
  ('cuerpo -> btry','cuerpo',1,'p_cuerpo','sintactico2.py',19),
  ('cuerpo -> repiteCondicional','cuerpo',1,'p_cuerpo','sintactico2.py',20),
  ('cuerpo -> bswitch','cuerpo',1,'p_cuerpo','sintactico2.py',21),
  ('cuerpo -> bcase','cuerpo',1,'p_cuerpo','sintactico2.py',22),
  ('cuerpo -> bgoto','cuerpo',1,'p_cuerpo','sintactico2.py',23),
  ('cuerpo -> bcolas','cuerpo',1,'p_cuerpo','sintactico2.py',24),
  ('cuerpo -> bpila','cuerpo',1,'p_cuerpo','sintactico2.py',25),
  ('cuerpo -> bcortes','cuerpo',1,'p_cuerpo','sintactico2.py',26),
  ('cuerpo -> brand','cuerpo',1,'p_cuerpo','sintactico2.py',27),
  ('cuerpo -> escribir','cuerpo',1,'p_cuerpo','sintactico2.py',28),
  ('cuerpo -> btrim','cuerpo',1,'p_cuerpo','sintactico2.py',29),
  ('cuerpo -> otros','cuerpo',1,'p_cuerpo','sintactico2.py',30),
  ('cuerpo -> breturn','cuerpo',1,'p_cuerpo','sintactico2.py',31),
  ('cuerpo -> comment','cuerpo',1,'p_cuerpo','sintactico2.py',32),
  ('cuerpo -> casting','cuerpo',1,'p_cuerpo','sintactico2.py',33),
  ('cuerpo -> bconcat','cuerpo',1,'p_cuerpo','sintactico2.py',34),
  ('asignacion -> VARIABLE EQUALS valor SEMI','asignacion',4,'p_asignacion','sintactico2.py',40),
  ('asignacion -> VAR asignacion','asignacion',2,'p_asignacion','sintactico2.py',41),
  ('asignacion -> proteccion asignacion','asignacion',2,'p_asignacion','sintactico2.py',42),
  ('asignacion -> VARIABLE EQUALS brand','asignacion',3,'p_asignacion','sintactico2.py',43),
  ('asignacion -> VARIABLE EQUALS escribir','asignacion',3,'p_asignacion','sintactico2.py',44),
  ('asignacion -> VARIABLE EQUALS btrim','asignacion',3,'p_asignacion','sintactico2.py',45),
  ('asignacion -> VARIABLE EQUALS lectura','asignacion',3,'p_asignacion','sintactico2.py',46),
  ('asignacion -> VARIABLE EQUALS bconcat','asignacion',3,'p_asignacion','sintactico2.py',47),
  ('asignacion -> asignacion_array','asignacion',1,'p_asignacion','sintactico2.py',48),
  ('asignacion -> VARIABLE EQUALS operaciones_mat SEMI','asignacion',4,'p_asignacion','sintactico2.py',49),
  ('asignacion -> aumentoCasting','asignacion',1,'p_asignacion','sintactico2.py',50),
  ('asignacion_array -> VARIABLE EQUALS array_def SEMI','asignacion_array',4,'p_asignacion_array','sintactico2.py',56),
  ('constante -> DEFINE LPAREN CADENA COMMA valor RPAREN SEMI','constante',7,'p_constante','sintactico2.py',60),
  ('constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI','constante',7,'p_constante','sintactico2.py',61),
  ('valor -> tipoDato','valor',1,'p_valor','sintactico2.py',66),
  ('valor -> bcolas','valor',1,'p_valor','sintactico2.py',67),
  ('valor -> bpila','valor',1,'p_valor','sintactico2.py',68),
  ('tipoDato -> numero','tipoDato',1,'p_tipoDato','sintactico2.py',74),
  ('tipoDato -> CADENA','tipoDato',1,'p_tipoDato','sintactico2.py',75),
  ('tipoDato -> BOOLEANO','tipoDato',1,'p_tipoDato','sintactico2.py',76),
  ('numero -> ENTERO','numero',1,'p_numero','sintactico2.py',81),
  ('numero -> DECIMAL','numero',1,'p_numero','sintactico2.py',82),
  ('imprimir -> ECHO valor SEMI','imprimir',3,'p_imprimir','sintactico2.py',88),
  ('imprimir -> PRINT valor SEMI','imprimir',3,'p_imprimir','sintactico2.py',89),
  ('imprimir -> PRINT LPAREN valor RPAREN SEMI','imprimir',5,'p_imprimir','sintactico2.py',90),
  ('imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI','imprimir',6,'p_imprimir','sintactico2.py',91),
  ('imprimir -> ECHO bconcat','imprimir',2,'p_imprimir','sintactico2.py',92),
  ('imprimir -> ECHO operaciones_mat SEMI','imprimir',3,'p_imprimir','sintactico2.py',93),
  ('imprimir -> PRINT operaciones_mat SEMI','imprimir',3,'p_imprimir','sintactico2.py',94),
  ('condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_if',7,'p_condicion_if','sintactico2.py',101),
  ('condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_elseif',7,'p_condicion_elseif','sintactico2.py',106),
  ('condicion_else -> ELSE LBRACE cuerpo RBRACE','condicion_else',4,'p_condicion_else','sintactico2.py',111),
  ('condicion_ifelse -> condicion_if','condicion_ifelse',1,'p_condicion_ifelse','sintactico2.py',116),
  ('condicion_ifelse -> condicion_if condicion_else','condicion_ifelse',2,'p_condicion_ifelse','sintactico2.py',117),
  ('condicion_ifelse -> condicion_if condicion_elseif','condicion_ifelse',2,'p_condicion_ifelse','sintactico2.py',118),
  ('condicion_ifelse -> condicion_if condicion_elseif condicion_else','condicion_ifelse',3,'p_condicion_ifelse','sintactico2.py',119),
  ('repiteCondicional -> condicion_ifelse','repiteCondicional',1,'p_repiteCondicional','sintactico2.py',123),
  ('repiteCondicional -> condicion_ifelse repiteCondicional','repiteCondicional',2,'p_repiteCondicional','sintactico2.py',124),
  ('condicion -> VARIABLE operador_logico VARIABLE','condicion',3,'p_condicion','sintactico2.py',128),
  ('condicion -> valor operador_logico valor','condicion',3,'p_condicion','sintactico2.py',129),
  ('condicion -> VARIABLE operador_logico valor','condicion',3,'p_condicion','sintactico2.py',130),
  ('condicion -> VARIABLE condicion_booleana VARIABLE','condicion',3,'p_condicion','sintactico2.py',131),
  ('condicion -> valor condicion_booleana valor','condicion',3,'p_condicion','sintactico2.py',132),
  ('condicion -> VARIABLE condicion_booleana valor','condicion',3,'p_condicion','sintactico2.py',133),
  ('bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def','bfor',8,'p_bfor','sintactico2.py',138),
  ('stc_bloque -> stc_bloque SEMI cuerpo','stc_bloque',3,'p_stc_bloque','sintactico2.py',142),
  ('stc_bloque -> breturn','stc_bloque',1,'p_stc_bloque','sintactico2.py',143),
  ('stc_bloque_def -> LBRACE stc_bloque RBRACE','stc_bloque_def',3,'p_stc_bloque_def','sintactico2.py',148),
  ('for_incr -> VARIABLE SUMA SUMA','for_incr',3,'p_for_incr','sintactico2.py',152),
  ('for_incr -> SUMA SUMA VARIABLE','for_incr',3,'p_for_incr','sintactico2.py',153),
  ('for_incr -> VARIABLE RESTA RESTA','for_incr',3,'p_for_incr','sintactico2.py',154),
  ('for_incr -> RESTA RESTA VARIABLE','for_incr',3,'p_for_incr','sintactico2.py',155),
  ('for_incr -> VARIABLE SUMA EQUALS numero','for_incr',4,'p_for_incr','sintactico2.py',156),
  ('for_incr -> VARIABLE RESTA EQUALS numero','for_incr',4,'p_for_incr','sintactico2.py',157),
  ('bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def','bforeach',7,'p_bforeach','sintactico2.py',161),
  ('bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE','bwhile',7,'p_bwhile','sintactico2.py',166),
  ('bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque','bwhile',6,'p_bwhile','sintactico2.py',167),
  ('bdo -> DO LBRACE cuerpo RBRACE bwhile','bdo',5,'p_bdo','sintactico2.py',172),
  ('bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE','bswitch',8,'p_bswitch','sintactico2.py',178),
  ('bcase -> CASE ENTERO COLON','bcase',3,'p_bcase','sintactico2.py',182),
  ('innerSwitch -> bcase cuerpo BREAK SEMI','innerSwitch',4,'p_innerSwitch','sintactico2.py',186),
  ('innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch','innerSwitch',7,'p_innerSwitch','sintactico2.py',187),
  ('btry -> TRY LBRACE stc_bloque_def RBRACE catches','btry',5,'p_btry','sintactico2.py',193),
  ('catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def','catches',7,'p_catches','sintactico2.py',197),
  ('catches -> empty','catches',1,'p_catches','sintactico2.py',198),
  ('operadores -> SUMA','operadores',1,'p_operadores','sintactico2.py',204),
  ('operadores -> RESTA','operadores',1,'p_operadores','sintactico2.py',205),
  ('operadores -> MULTIPLICACION','operadores',1,'p_operadores','sintactico2.py',206),
  ('operadores -> DIVISION','operadores',1,'p_operadores','sintactico2.py',207),
  ('operadores -> MODULO','operadores',1,'p_operadores','sintactico2.py',208),
  ('operador_logico -> SMALLER','operador_logico',1,'p_operador_logico','sintactico2.py',213),
  ('operador_logico -> GREATER','operador_logico',1,'p_operador_logico','sintactico2.py',214),
  ('operador_logico -> IS_SMALLER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico2.py',215),
  ('operador_logico -> IS_GREATER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico2.py',216),
  ('incrementos_mat -> MINUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',221),
  ('incrementos_mat -> MOD_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',222),
  ('incrementos_mat -> MUL_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',223),
  ('incrementos_mat -> PLUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',224),
  ('incrementos_mat -> DIV_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',225),
  ('condicion_booleana -> AND','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',230),
  ('condicion_booleana -> OR','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',231),
  ('condicion_booleana -> XOR','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',232),
  ('condicion_booleana -> IS_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',233),
  ('condicion_booleana -> IS_NOT_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',234),
  ('condicion_booleana -> IS_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',235),
  ('condicion_booleana -> IS_NOT_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',236),
  ('operaciones_mat -> valor operadores valor','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',241),
  ('operaciones_mat -> valor operadores operaciones_mat','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',242),
  ('operaciones_mat -> VARIABLE operadores VARIABLE','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',243),
  ('operaciones_mat -> operaciones_mat_par','operaciones_mat',1,'p_operaciones_mat','sintactico2.py',244),
  ('operaciones_mat_par -> LPAREN valor operadores valor RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',249),
  ('operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',250),
  ('funciones -> funcion_nparams','funciones',1,'p_funciones','sintactico2.py',255),
  ('funciones -> proteccion funcion_nparams','funciones',2,'p_funciones','sintactico2.py',256),
  ('funciones -> funcion_blank','funciones',1,'p_funciones','sintactico2.py',257),
  ('funciones -> proteccion funcion_blank','funciones',2,'p_funciones','sintactico2.py',258),
  ('funciones -> funcion_void','funciones',1,'p_funciones','sintactico2.py',259),
  ('param -> VARIABLE','param',1,'p_param','sintactico2.py',264),
  ('param -> asignacion','param',1,'p_param','sintactico2.py',265),
  ('funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def','funcion_nparams',6,'p_funcion_nparams','sintactico2.py',270),
  ('params_list -> params_list COMMA param','params_list',3,'p_params_list','sintactico2.py',274),
  ('params_list -> param','params_list',1,'p_params_list','sintactico2.py',275),
  ('funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE','funcion_void',9,'p_funcion_void','sintactico2.py',279),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def','funcion_blank',5,'p_funcion_blank','sintactico2.py',283),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE','funcion_blank',7,'p_funcion_blank','sintactico2.py',284),
  ('brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI','brand',7,'p_brand','sintactico2.py',288),
  ('proteccion -> PUBLIC','proteccion',1,'p_proteccion','sintactico2.py',292),
  ('proteccion -> PRIVATE','proteccion',1,'p_proteccion','sintactico2.py',293),
  ('proteccion -> PROTECTED','proteccion',1,'p_proteccion','sintactico2.py',294),
  ('proteccion -> STATIC','proteccion',1,'p_proteccion','sintactico2.py',295),
  ('breturn -> empty','breturn',1,'p_breturn','sintactico2.py',299),
  ('breturn -> RETURN SEMI','breturn',2,'p_breturn','sintactico2.py',300),
  ('breturn -> RETURN NULL SEMI','breturn',3,'p_breturn','sintactico2.py',301),
  ('breturn -> RETURN VARIABLE SEMI','breturn',3,'p_breturn','sintactico2.py',302),
  ('breturn -> RETURN BOOLEANO SEMI','breturn',3,'p_breturn','sintactico2.py',303),
  ('array_def -> ARRAY LPAREN RPAREN','array_def',3,'p_array_def','sintactico2.py',310),
  ('array_def -> ARRAY LPAREN array_elmnt RPAREN','array_def',4,'p_array_def','sintactico2.py',311),
  ('array_elmnt -> array_elmnt COMMA valor','array_elmnt',3,'p_array_elmnt','sintactico2.py',314),
  ('array_elmnt -> valor','array_elmnt',1,'p_array_elmnt','sintactico2.py',315),
  ('empty -> <empty>','empty',0,'p_empty','sintactico2.py',318),
  ('bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI','bcolas',7,'p_bcolas','sintactico2.py',323),
  ('bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI','bpila',7,'p_bpila','sintactico2.py',328),
  ('lectura -> READLINE LPAREN CADENA RPAREN SEMI','lectura',5,'p_lectura','sintactico2.py',333),
  ('lectura -> READLINE LPAREN RPAREN SEMI','lectura',4,'p_lectura','sintactico2.py',334),
  ('escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI','escribir',7,'p_escribir','sintactico2.py',337),
  ('btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI','btrim',8,'p_btrim','sintactico2.py',341),
  ('comment -> COMENTARIOS','comment',1,'p_comment','sintactico2.py',346),
  ('comment -> DOC_COMENTARIOS','comment',1,'p_comment','sintactico2.py',347),
  ('bgoto -> GOTO NOMBRE SEMI','bgoto',3,'p_bgoto','sintactico2.py',351),
  ('bcortes -> EXIT SEMI','bcortes',2,'p_bcortes','sintactico2.py',355),
  ('bcortes -> BREAK SEMI','bcortes',2,'p_bcortes','sintactico2.py',356),
  ('bcortes -> DEFAULT SEMI','bcortes',2,'p_bcortes','sintactico2.py',357),
  ('bcortes -> CONTINUE SEMI','bcortes',2,'p_bcortes','sintactico2.py',358),
  ('otros -> SMALLER NOMBRE GREATER','otros',3,'p_otros','sintactico2.py',362),
  ('bconcat -> CADENA CONCAT CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',368),
  ('bconcat -> VARIABLE CONCAT VARIABLE SEMI','bconcat',4,'p_bconcat','sintactico2.py',369),
  ('bconcat -> VARIABLE CONCAT CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',370),
  ('bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',371),
  ('bconcat -> CADENA CONCAT_EQUAL CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',372),
  ('tiposCast -> STRING','tiposCast',1,'p_tiposCast','sintactico2.py',377),
  ('tiposCast -> BOOL','tiposCast',1,'p_tiposCast','sintactico2.py',378),
  ('tiposCast -> BOOLEAN','tiposCast',1,'p_tiposCast','sintactico2.py',379),
  ('tiposCast -> DOUBLE','tiposCast',1,'p_tiposCast','sintactico2.py',380),
  ('tiposCast -> FLOAT','tiposCast',1,'p_tiposCast','sintactico2.py',381),
  ('tiposCast -> ARRAY','tiposCast',1,'p_tiposCast','sintactico2.py',382),
  ('tiposCast -> OBJECT','tiposCast',1,'p_tiposCast','sintactico2.py',383),
  ('tiposCast -> INTEGER','tiposCast',1,'p_tiposCast','sintactico2.py',384),
  ('tiposCast -> INT','tiposCast',1,'p_tiposCast','sintactico2.py',385),
  ('casting -> VARIABLE EQUALS LPAREN tiposCast RPAREN VARIABLE SEMI','casting',7,'p_casting','sintactico2.py',391),
  ('casting -> LPAREN tiposCast RPAREN VARIABLE SEMI','casting',5,'p_casting','sintactico2.py',392),
  ('aumentoCasting -> VARIABLE incrementos_mat tipoDato SEMI','aumentoCasting',4,'p_aumentoCasting','sintactico2.py',396),
  ('aumentoCasting -> VARIABLE EQUALS VARIABLE operadores tipoDato SEMI','aumentoCasting',6,'p_aumentoCasting','sintactico2.py',397),
]
