
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ARRAY_POP ARRAY_PUSH ARRAY_VALUES AS BOOL BOOLEAN BOOLEANO BREAK CADENA CASE CATCH CLOSE_TAG COLON COMENTARIOS COMMA CONCAT CONCAT_EQUAL CONTINUE COUNT CURRENT DECIMAL DEFAULT DEFINE DEQUEUE DIVISION DIV_EQUAL DO DOC_COMENTARIOS DOUBLE ECHO ELSE ELSEIF ENQUEUE ENTERO EQUALS EXIT FLECHA FLOAT FOR FOREACH FUNCTION FWRITE GOTO GREATER IF INT INTEGER IS_EQUAL IS_GREATER_OR_EQUAL IS_IDENTICAL IS_NOT_EQUAL IS_NOT_IDENTICAL IS_SMALLER_OR_EQUAL LBRACE LBRACKET LPAREN MINUS_EQUAL MODULO MOD_EQUAL MULTIPLICACION MUL_EQUAL NEW NEXT NOMBRE NULL OBJECT OPEN_TAG OR PLUS_EQUAL POP PRINT PRINT_R PRIVATE PROTECTED PUBLIC PUSH RAND RBRACE RBRACKET READLINE RESTA RETURN REWIND RPAREN SEMI SMALLER SPLQUEUE SPLSTACK STATIC STRING SUMA SWITCH TRIM TRY VALID VAR VARIABLE VAR_DUMP VOID WHILE XORcuerpo : imprimir\n            | asignacion\n            | funciones\n            | llamada_funcion\n            | constante\n            | lectura\n            | condicion_ifelse\n            | bwhile\n            | bdo\n            | bfor\n            | incrementOp\n            | bforeach\n            | btry\n            | bswitch\n            | bcase\n            | bgoto\n            | bcolas\n            | bpila\n            | bcortes\n            | brand\n            | escribir\n            | btrim\n            | otros\n            | breturn\n            | comment\n            | casting\n            | bconcat\n            | simbolos\n            | funcionesCP_semi\n            | addpila\n            | addcola\n            | minuscola\n            | arraypop\n            | arraypush\n            | poppila\n  asignacion : VARIABLE EQUALS valor SEMI\n                | VAR asignacion\n                | proteccion asignacion\n                | VARIABLE EQUALS brand\n                | VARIABLE EQUALS escribir\n                | VARIABLE EQUALS btrim\n                | VARIABLE EQUALS lectura\n                | VARIABLE EQUALS bconcat\n                | asignacion_array\n                | VARIABLE EQUALS operaciones_mat SEMI\n                | aumentoCasting\n                | VARIABLE EQUALS llamada_funcion\n                | VARIABLE EQUALS arrayvalues SEMI\n  asignacion_array : VARIABLE EQUALS array_def SEMIvalor : tipoDato\n            | bcolas\n            | bpila\n  tipoDato : numero\n            | CADENA\n            | BOOLEANO\n  numero : ENTERO\n          | DECIMAL\n  imprimir : ECHO valor SEMI\n            | PRINT valor SEMI\n            | PRINT LPAREN valor RPAREN SEMI\n            | PRINT bconcat\n            | ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI\n            | ECHO bconcat\n            | ECHO operaciones_mat SEMI\n            | PRINT operaciones_mat SEMI\n            | ECHO VARIABLE SEMI\n            | PRINT VARIABLE SEMI\n            | ECHO funcionesCP_semi\n            | PRINT funcionesCP_semi\n            | ECHO funcionesCP_semi COMMA NOMBRE SEMI\n            | ECHO poppila\n            | VAR_DUMP LPAREN VARIABLE RPAREN SEMI\n            | PRINT_R LPAREN VARIABLE RPAREN SEMI\n            | PRINT_R LPAREN arrayvalues RPAREN SEMI\n  condicion_if :  IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n                  | IF LPAREN condicion RPAREN llamada_funcion\n  condicion_elseif :  ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_else :  ELSE LBRACE cuerpo RBRACE\n  condicion_ifelse : condicion_if\n                      | condicion_if condicion_else\n                      | condicion_if condicion_elseif\n                      | condicion_if condicion_elseif condicion_else\n   condicion : VARIABLE operador_logico VARIABLE\n            | valor operador_logico valor \n            | VARIABLE operador_logico valor\n            | VARIABLE condicion_booleana VARIABLE\n            | valor condicion_booleana valor\n            | VARIABLE condicion_booleana valor\n            | LPAREN VARIABLE operadores valor RPAREN operador_logico valor\n            | LPAREN VARIABLE operadores valor RPAREN condicion_booleana valor\n            | condicion condicion_booleana condicion\n            | condicion condicion_booleana comprobacion\n            | aumentoCasting\n            | VARIABLE\n            | funcionesCP\n            \n  bfor : FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_defstc_bloque : stc_bloque SEMI cuerpo\n                | breturn\n  stc_bloque_def : LBRACE stc_bloque RBRACE\n                    | LBRACE cuerpo RBRACE\n  for_incr : VARIABLE SUMA SUMA\n          | SUMA SUMA VARIABLE\n          | VARIABLE RESTA RESTA\n          | RESTA RESTA VARIABLE\n          | VARIABLE SUMA EQUALS numero\n          | VARIABLE RESTA EQUALS numero\n  incrementOp : VARIABLE SUMA SUMA SEMI\n              | VARIABLE RESTA RESTA SEMI\n  bforeach :  FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def bwhile : WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE \n  | WHILE LPAREN condicion RPAREN COLON stc_bloque \n  | WHILE LPAREN condicion RPAREN SEMI\n  | \n   bdo : DO LBRACE cuerpo RBRACE bwhile \n   bswitch : SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACEbcase : CASE ENTERO COLON\n          | CASE CADENA COLON  innerSwitch :  bcase cuerpo BREAK SEMI\n                 | bcase cuerpo BREAK SEMI innerSwitch \n  btry : TRY LBRACE stc_bloque_def RBRACE catchescatches : catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def\n          | emptyoperadores : SUMA \n                  | RESTA\n                  | MULTIPLICACION\n                  | DIVISION\n                  | MODULO\n  operador_logico :  SMALLER\n                        | GREATER\n                        | IS_SMALLER_OR_EQUAL\n                        | IS_GREATER_OR_EQUAL\n  incrementos_mat :  MINUS_EQUAL\n                        | MOD_EQUAL\n                        | MUL_EQUAL\n                        | PLUS_EQUAL\n                        | DIV_EQUAL\n  condicion_booleana :  AND\n                        | OR\n                        | XOR\n                        | IS_EQUAL\n                        | IS_NOT_EQUAL\n                        | IS_IDENTICAL\n                        | IS_NOT_IDENTICAL\n  operaciones_mat :  valor operadores valor\n                        | valor operadores operaciones_mat\n                        | VARIABLE operadores VARIABLE\n                        | operaciones_mat_par\n                       \n  operaciones_mat_par :  LPAREN valor operadores valor RPAREN\n                          |  LPAREN valor operadores operaciones_mat_par RPAREN\n                          | LPAREN VARIABLE operadores VARIABLE RPAREN\n                          | LPAREN VARIABLE operadores valor RPAREN operadores valor\n                          | LPAREN VARIABLE operadores tipoDato RPAREN\n                          | LPAREN VARIABLE operadores tipoDato RPAREN operadores tipoDato\n  funciones : funcion_nparams\n              | proteccion funcion_nparams\n              | funcion_blank\n              | proteccion funcion_blank\n              | funcion_void\n  param : VARIABLE\n          | asignacion\n          funcion_nparams : FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_defparams_list : params_list COMMA param\n                 | param\n                 | empty\n  funcion_void : FUNCTION NOMBRE LPAREN  RPAREN COLON VOID LBRACE empty RBRACE funcion_blank : FUNCTION NOMBRE LPAREN  RPAREN stc_bloque_def\n                    | FUNCTION NOMBRE LPAREN  RPAREN LBRACE empty RBRACE\n  llamada_funcion : NOMBRE LPAREN params_list RPAREN SEMIbrand : RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMIproteccion : PUBLIC\n          | PRIVATE\n          | PROTECTED\n          | STATIC\n  breturn : empty\n        | RETURN SEMI \n        | RETURN NULL SEMI\n        | RETURN VARIABLE SEMI\n        | RETURN BOOLEANO SEMI\n        | breturn RBRACE\n        array_def : ARRAY LPAREN RPAREN\n          | ARRAY LPAREN array_elmnt RPARENarray_elmnt : array_elmnt COMMA valor\n            | valorempty :  bcolas : VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI\n  lectura : READLINE LPAREN CADENA RPAREN SEMI\n          | READLINE LPAREN RPAREN SEMIescribir : FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI\n   btrim : TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI\n   comment : COMENTARIOS\n              | DOC_COMENTARIOS\n   bgoto : GOTO NOMBRE SEMIbcortes : EXIT SEMI\n              | BREAK SEMI\n              | DEFAULT SEMI\n              | CONTINUE SEMI\n   otros : SMALLER NOMBRE GREATER\n            | SMALLER DIVISION NOMBRE GREATER\n            | NOMBRE COLON \n   \n    comprobacion : NOMBRE LPAREN valor RPAREN\n                  | NOMBRE LPAREN VARIABLE RPAREN\n  \n  simbolos : LPAREN RPAREN\n            | LPAREN\n            | RPAREN\n            | LBRACKET RBRACKET\n            | LBRACKET\n            | RBRACKET\n            | LBRACE RBRACE\n            | LBRACE\n            | RBRACE instrucciones\n            | OPEN_TAG CLOSE_TAG\n            | OPEN_TAG\n            | CLOSE_TAG\n  \n    instrucciones : condicion_else\n                  | condicion_elseif\n                  | bwhile\n                  | bfor\n                  | funciones\n                  | bswitch\n                  | bdo\n  bconcat : CADENA CONCAT CADENA SEMI\n            | VARIABLE CONCAT CADENA SEMI\n            | VARIABLE CONCAT_EQUAL CADENA SEMI\n            | CADENA CONCAT_EQUAL CADENA SEMI\n            | VARIABLE CONCAT VARIABLE SEMI\n            | VARIABLE CONCAT CADENA CONCAT VARIABLE SEMI\n            \n  tiposCast :  STRING\n            | BOOL\n            | BOOLEAN\n            | DOUBLE\n            | FLOAT\n            | ARRAY\n            | OBJECT \n            | INTEGER\n            | INT\n        \n            \n   casting : VARIABLE EQUALS LPAREN tiposCast RPAREN VARIABLE SEMI  \n              | LPAREN tiposCast RPAREN VARIABLE SEMI\n   \n    aumentoCasting : VARIABLE incrementos_mat tipoDato SEMI\n                    | VARIABLE EQUALS VARIABLE operadores tipoDato SEMI\n                    | VARIABLE EQUALS VARIABLE operadores VARIABLE operadores operaciones_mat_par SEMI\n                    | VARIABLE operadores tipoDato condicion_booleana valor\n                    | VARIABLE incrementos_mat VARIABLE SEMI\n                    \n  bpila : VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI\n    addpila : VARIABLE FLECHA PUSH LPAREN valor RPAREN SEMI\n  poppila : VARIABLE FLECHA POP LPAREN RPAREN SEMI\n    funcionesCP : VARIABLE FLECHA REWIND LPAREN RPAREN \n                | VARIABLE FLECHA VALID LPAREN RPAREN \n                | VARIABLE FLECHA COUNT LPAREN RPAREN \n                | VARIABLE FLECHA NEXT LPAREN RPAREN \n                | VARIABLE FLECHA CURRENT LPAREN RPAREN \n                \n  funcionesCP_semi : funcionesCP\n                      | funcionesCP SEMI\n      addcola : VARIABLE FLECHA ENQUEUE LPAREN valor RPAREN SEMI\n             \n   \n      minuscola : VARIABLE FLECHA DEQUEUE LPAREN valor RPAREN SEMI\n             \n   constante : DEFINE LPAREN CADENA COMMA valor RPAREN SEMI\n              | DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMIarraypop : ARRAY_POP LPAREN VARIABLE RPAREN SEMIarraypush : ARRAY_PUSH LPAREN VARIABLE COMMA valor RPAREN SEMIarrayvalues : ARRAY_VALUES LPAREN VARIABLE RPAREN'
    
_lr_action_items = {'ECHO':([0,173,270,281,284,285,446,458,460,483,498,],[37,37,37,37,-116,-117,37,37,37,37,37,]),'PRINT':([0,173,270,281,284,285,446,458,460,483,498,],[38,38,38,38,-116,-117,38,38,38,38,38,]),'VAR_DUMP':([0,173,270,281,284,285,446,458,460,483,498,],[45,45,45,45,-116,-117,45,45,45,45,45,]),'PRINT_R':([0,173,270,281,284,285,446,458,460,483,498,],[46,46,46,46,-116,-117,46,46,46,46,46,]),'VARIABLE':([0,37,38,47,48,49,50,77,85,86,87,88,94,100,101,102,105,106,107,108,110,126,129,132,135,137,138,139,140,141,142,143,144,145,146,147,149,150,162,173,174,175,177,196,197,199,201,202,203,207,213,219,227,228,229,230,231,233,236,261,270,271,272,279,281,284,285,297,305,306,310,311,312,313,314,318,319,320,323,324,325,326,327,328,329,336,337,338,339,340,341,342,343,344,345,349,350,352,353,355,360,361,362,363,364,365,366,367,368,369,372,383,397,403,418,425,428,443,446,458,460,469,475,476,483,488,489,498,507,510,511,528,529,534,535,543,545,546,556,558,],[44,97,113,148,148,-44,-46,192,-170,-171,-172,-173,-56,-50,-51,-52,212,-53,-55,-57,212,223,225,243,255,-132,-133,-134,-135,-136,-125,-126,-127,258,259,-37,148,-38,274,44,148,280,283,295,296,274,301,-123,-124,303,-54,308,-39,-40,-41,-42,-43,-47,212,225,44,274,358,274,44,-116,-117,223,391,392,223,399,-36,-45,-48,-49,404,391,-225,408,-222,-223,391,391,391,-242,-238,391,-137,-138,-139,-140,-141,-142,-143,223,391,-221,-224,-187,274,435,437,439,-128,-129,-130,-131,391,391,444,391,-168,472,-241,-186,391,491,44,44,44,-239,391,-226,44,523,524,44,391,-185,-243,554,555,-169,-188,-240,391,391,564,-189,]),'VAR':([0,47,48,85,86,87,88,126,149,173,174,270,281,284,285,297,310,349,446,458,460,483,498,],[47,47,47,-170,-171,-172,-173,47,47,47,47,47,47,-116,-117,47,47,47,47,47,47,47,47,]),'NOMBRE':([0,37,67,75,89,129,153,154,173,186,187,189,210,261,270,281,284,285,339,340,341,342,343,344,345,360,380,386,446,458,460,483,498,531,],[41,93,180,188,198,238,262,264,41,288,289,291,304,238,41,41,-116,-117,-137,-138,-139,-140,-141,-142,-143,434,453,238,41,41,41,41,41,556,]),'DEFINE':([0,173,270,281,284,285,446,458,460,483,498,],[54,54,54,54,-116,-117,54,54,54,54,54,]),'READLINE':([0,129,173,261,270,281,284,285,446,458,460,483,498,],[56,56,56,56,56,56,-116,-117,56,56,56,56,56,]),'WHILE':([0,60,173,270,281,284,285,370,446,458,460,483,498,],[58,58,58,58,58,-116,-117,58,58,58,58,58,58,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,42,43,49,50,51,52,53,57,59,60,76,78,79,80,81,82,91,94,95,98,99,100,101,102,106,107,108,111,114,116,127,128,147,150,151,152,158,159,163,164,165,166,167,168,169,170,171,181,182,183,184,190,194,195,200,205,206,213,214,216,217,227,228,229,230,231,233,269,284,285,286,290,292,293,294,312,313,314,318,321,322,323,325,326,336,337,352,353,355,370,376,381,388,395,396,397,413,414,415,416,417,418,419,420,421,425,426,430,431,442,445,446,447,448,449,454,457,461,462,469,476,480,486,487,495,503,510,511,512,514,515,516,517,518,521,530,532,534,535,537,538,540,543,544,549,558,566,569,],[-113,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-203,-204,-206,-207,-44,-46,-154,-156,-158,-79,-209,-113,-174,-190,-191,-212,-213,-251,-179,-56,-63,-68,-71,-50,-51,-52,-53,-55,-57,-61,-69,-202,-199,-205,-37,-38,-155,-157,-80,-81,-208,-210,-214,-215,-216,-217,-218,-219,-220,-193,-194,-195,-196,-175,-211,-252,-58,-64,-66,-54,-59,-65,-67,-39,-40,-41,-42,-43,-47,-82,-116,-117,-192,-197,-176,-177,-178,-36,-45,-48,-49,-107,-108,-225,-222,-223,-242,-238,-221,-224,-187,-113,-184,-198,-70,-60,-237,-168,-246,-247,-248,-249,-250,-241,-72,-73,-74,-186,-78,-184,-112,-114,-99,-113,-100,-120,-122,-257,-166,-76,-62,-239,-226,-245,-98,-111,-97,-161,-185,-243,-236,-244,-253,-254,-255,-256,-110,-109,-115,-169,-188,-258,-167,-75,-240,-77,-96,-189,-165,-121,]),'DO':([0,60,173,270,281,284,285,446,458,460,483,498,],[61,61,61,61,61,-116,-117,61,61,61,61,61,]),'FOR':([0,60,173,270,281,284,285,446,458,460,483,498,],[62,62,62,62,62,-116,-117,62,62,62,62,62,]),'FOREACH':([0,173,270,281,284,285,446,458,460,483,498,],[63,63,63,63,-116,-117,63,63,63,63,63,]),'TRY':([0,173,270,281,284,285,446,458,460,483,498,],[64,64,64,64,-116,-117,64,64,64,64,64,]),'SWITCH':([0,60,173,270,281,284,285,446,458,460,483,498,],[65,65,65,65,65,-116,-117,65,65,65,65,65,]),'CASE':([0,173,270,281,284,285,446,450,458,460,483,498,565,],[66,66,66,66,-116,-117,66,66,66,66,66,66,66,]),'GOTO':([0,173,270,281,284,285,446,458,460,483,498,],[67,67,67,67,-116,-117,67,67,67,67,67,]),'EXIT':([0,173,270,281,284,285,446,458,460,483,498,],[68,68,68,68,-116,-117,68,68,68,68,68,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,42,43,49,50,51,52,53,57,59,60,76,78,79,80,81,82,91,94,95,98,99,100,101,102,106,107,108,111,114,116,127,128,147,150,151,152,158,159,163,164,165,166,167,168,169,170,171,173,181,182,183,184,190,194,195,200,205,206,213,214,216,217,227,228,229,230,231,233,269,270,281,284,285,286,290,292,293,294,312,313,314,318,321,322,323,325,326,336,337,352,353,355,370,376,381,388,395,396,397,413,414,415,416,417,418,419,420,421,425,426,430,431,442,445,446,447,448,449,454,457,458,460,461,462,469,476,480,483,486,487,495,498,503,510,511,512,514,515,516,517,518,521,530,532,533,534,535,537,538,540,543,544,549,558,566,569,],[69,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-203,-204,-206,-207,-44,-46,-154,-156,-158,-79,-209,-113,-174,-190,-191,-212,-213,-251,-179,-56,-63,-68,-71,-50,-51,-52,-53,-55,-57,-61,-69,-202,-199,-205,-37,-38,-155,-157,-80,-81,-208,-210,-214,-215,-216,-217,-218,-219,-220,69,-193,-194,-195,-196,-175,-211,-252,-58,-64,-66,-54,-59,-65,-67,-39,-40,-41,-42,-43,-47,-82,69,69,-116,-117,-192,-197,-176,-177,-178,-36,-45,-48,-49,-107,-108,-225,-222,-223,-242,-238,-221,-224,-187,-113,-184,-198,-70,-60,-237,-168,-246,-247,-248,-249,-250,-241,-72,-73,-74,-186,-78,-184,-112,-114,-99,69,-100,-120,-122,-257,-166,69,69,-76,-62,-239,-226,-245,69,-98,-111,-97,69,-161,-185,-243,-236,-244,-253,-254,-255,-256,-110,-109,-115,557,-169,-188,-258,-167,-75,-240,-77,-96,-189,-165,-121,]),'DEFAULT':([0,173,270,281,284,285,446,458,460,483,498,],[70,70,70,70,-116,-117,70,70,70,70,70,]),'CONTINUE':([0,173,270,281,284,285,446,458,460,483,498,],[71,71,71,71,-116,-117,71,71,71,71,71,]),'RAND':([0,129,173,261,270,281,284,285,446,458,460,483,498,],[72,72,72,72,72,72,-116,-117,72,72,72,72,72,]),'FWRITE':([0,129,173,261,270,281,284,285,446,458,460,483,498,],[73,73,73,73,73,73,-116,-117,73,73,73,73,73,]),'TRIM':([0,129,173,261,270,281,284,285,446,458,460,483,498,],[74,74,74,74,74,74,-116,-117,74,74,74,74,74,]),'SMALLER':([0,94,100,101,102,106,107,108,173,213,270,274,275,281,284,285,446,458,460,483,498,510,511,520,],[75,-56,-50,-51,-52,-53,-55,-57,75,-54,75,364,364,75,-116,-117,75,75,75,75,75,-185,-243,364,]),'RETURN':([0,173,270,281,284,285,429,430,446,458,460,483,498,],[77,77,77,77,-116,-117,77,77,77,77,77,77,77,]),'COMENTARIOS':([0,173,270,281,284,285,446,458,460,483,498,],[78,78,78,78,-116,-117,78,78,78,78,78,]),'DOC_COMENTARIOS':([0,173,270,281,284,285,446,458,460,483,498,],[79,79,79,79,-116,-117,79,79,79,79,79,]),'LPAREN':([0,37,38,41,45,46,49,50,54,56,58,62,63,65,72,73,74,83,84,90,94,100,101,102,106,107,108,129,142,143,144,147,150,161,162,173,198,199,201,202,203,213,227,228,229,230,231,233,238,239,240,246,247,248,249,250,251,252,253,254,261,262,270,271,279,281,284,285,289,305,312,313,314,315,316,318,323,325,326,336,337,339,340,341,342,343,344,345,352,353,355,360,397,418,425,434,446,458,460,468,469,476,483,496,498,510,511,534,535,543,558,],[39,105,110,126,145,146,-44,-46,154,157,162,174,175,177,185,186,187,196,197,199,-56,-50,-51,-52,-53,-55,-57,236,-125,-126,-127,-37,-38,271,272,39,297,272,105,-123,-124,-54,-39,-40,-41,-42,-43,-47,126,319,320,327,328,329,330,331,332,333,334,335,105,349,39,272,272,39,-116,-117,380,105,-36,-45,-48,401,402,-49,-225,-222,-223,-242,-238,-137,-138,-139,-140,-141,-142,-143,-221,-224,-187,272,-168,-241,-186,488,39,39,39,105,-239,-226,39,531,39,-185,-243,-169,-188,-240,-189,]),'CADENA':([0,37,38,49,50,66,94,100,101,102,105,106,107,108,110,129,130,131,132,133,135,136,137,138,139,140,141,142,143,144,147,150,154,155,156,157,162,173,199,201,202,203,213,227,228,229,230,231,233,236,261,270,271,279,281,284,285,305,306,311,312,313,314,318,320,323,325,326,327,328,329,336,337,338,339,340,341,342,343,344,345,350,352,353,355,360,361,362,364,365,366,367,368,369,379,383,397,418,425,428,446,458,460,469,475,476,483,488,489,498,507,508,510,511,534,535,543,545,546,558,],[55,103,103,-44,-46,179,-56,-50,-51,-52,213,-53,-55,-57,213,103,-123,-124,244,245,213,213,-132,-133,-134,-135,-136,-125,-126,-127,-37,-38,263,265,266,267,213,55,213,213,-123,-124,-54,-39,-40,-41,-42,-43,-47,213,103,55,213,213,55,-116,-117,213,213,213,-36,-45,-48,-49,213,-225,-222,-223,213,213,213,-242,-238,213,-137,-138,-139,-140,-141,-142,-143,213,-221,-224,-187,213,213,213,-128,-129,-130,-131,213,213,452,213,-168,-241,-186,213,55,55,55,-239,213,-226,55,213,213,55,213,213,-185,-243,-169,-188,-240,213,213,-189,]),'RPAREN':([0,39,49,50,94,100,101,102,106,107,108,115,117,118,119,120,121,122,123,124,125,126,147,150,157,173,213,215,220,221,222,223,224,227,228,229,230,231,233,258,259,260,267,270,273,274,276,277,281,283,284,285,295,297,298,312,313,314,317,318,320,323,325,326,330,331,332,333,334,335,336,337,349,352,353,355,357,384,389,390,392,393,394,397,398,401,402,404,406,407,409,410,411,413,414,415,416,417,418,423,424,425,432,433,435,436,437,438,440,441,444,446,451,452,453,455,458,460,463,464,465,467,469,473,476,483,484,490,498,501,510,511,513,522,523,534,535,541,542,543,547,548,550,552,554,555,558,560,561,562,563,564,],[40,116,-44,-46,-56,-50,-51,-52,-53,-55,-57,219,-227,-228,-229,-230,-231,-232,-233,-234,-235,-184,-37,-38,268,40,-54,307,309,-163,-164,-159,-160,-39,-40,-41,-42,-43,-47,346,347,348,354,40,359,-94,-93,-95,40,377,-116,-117,382,385,386,-36,-45,-48,403,-49,405,-225,-222,-223,412,413,414,415,416,417,-242,-238,422,-221,-224,-187,427,456,463,464,465,466,467,-168,-162,470,471,473,474,-183,477,478,479,-246,-247,-248,-249,-250,-241,481,482,-186,-91,-92,-83,-85,-86,-88,-84,-87,494,40,499,500,501,502,40,40,-148,-149,-150,-152,-239,-259,-226,40,520,525,40,536,-185,-243,-182,547,548,-169,-188,-151,-153,-240,-200,-201,-101,-103,-102,-104,-189,-89,-90,-105,-106,567,]),'LBRACKET':([0,93,173,270,281,284,285,446,458,460,483,498,],[42,204,42,42,42,-116,-117,42,42,42,42,42,]),'RBRACKET':([0,42,173,270,281,284,285,302,446,458,460,483,498,],[43,128,43,43,43,-116,-117,387,43,43,43,43,43,]),'LBRACE':([0,61,64,160,173,176,270,281,284,285,359,377,385,386,422,427,446,456,458,460,483,494,498,505,525,567,],[59,173,176,270,59,281,59,59,-116,-117,429,450,458,460,458,483,59,281,59,59,59,281,59,539,281,281,]),'RBRACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,42,43,49,50,51,52,53,57,59,60,76,78,79,80,81,82,91,94,95,98,99,100,101,102,106,107,108,111,114,116,127,128,147,150,151,152,158,159,163,164,165,166,167,168,169,170,171,173,181,182,183,184,190,194,195,200,205,206,213,214,216,217,227,228,229,230,231,233,269,270,278,281,282,284,285,286,290,292,293,294,312,313,314,318,321,322,323,325,326,336,337,352,353,355,356,370,373,374,375,376,381,388,395,396,397,413,414,415,416,417,418,419,420,421,425,426,429,430,431,442,445,446,447,448,449,454,457,458,460,461,462,469,476,480,483,485,486,487,495,497,498,503,504,506,510,511,512,514,515,516,517,518,519,521,530,532,534,535,537,538,539,540,543,544,549,558,559,565,566,568,569,],[60,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,91,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-203,-204,-206,-207,-44,-46,-154,-156,-158,-79,163,-113,-174,-190,-191,-212,-213,-251,-179,-56,-63,-68,-71,-50,-51,-52,-53,-55,-57,-61,-69,-202,-199,-205,-37,-38,-155,-157,-80,-81,-208,-210,-214,-215,-216,-217,-218,-219,-220,60,-193,-194,-195,-196,-175,-211,-252,-58,-64,-66,-54,-59,-65,-67,-39,-40,-41,-42,-43,-47,-82,60,370,60,376,-116,-117,-192,-197,-176,-177,-178,-36,-45,-48,-49,-107,-108,-225,-222,-223,-242,-238,-221,-224,-187,426,-113,445,447,91,-184,-198,-70,-60,-237,-168,-246,-247,-248,-249,-250,-241,-72,-73,-74,-186,-78,-184,-184,-112,-114,-99,60,-100,-120,-122,-257,-166,60,60,-76,-62,-239,-226,-245,60,521,91,-111,-97,532,60,-161,538,540,-185,-243,-236,-244,-253,-254,-255,-256,544,-110,-109,-115,-169,-188,-258,-167,-184,-75,-240,-77,-96,-189,566,-118,-165,-119,-121,]),'OPEN_TAG':([0,173,270,281,284,285,446,458,460,483,498,],[80,80,80,80,-116,-117,80,80,80,80,80,]),'CLOSE_TAG':([0,80,173,270,281,284,285,446,458,460,483,498,],[81,194,81,81,81,-116,-117,81,81,81,81,81,]),'ARRAY_POP':([0,173,270,281,284,285,446,458,460,483,498,],[83,83,83,83,-116,-117,83,83,83,83,83,]),'ARRAY_PUSH':([0,173,270,281,284,285,446,458,460,483,498,],[84,84,84,84,-116,-117,84,84,84,84,84,]),'PUBLIC':([0,47,48,60,85,86,87,88,126,149,173,174,270,281,284,285,297,310,349,446,458,460,483,498,],[85,85,85,85,-170,-171,-172,-173,85,85,85,85,85,85,-116,-117,85,85,85,85,85,85,85,85,]),'PRIVATE':([0,47,48,60,85,86,87,88,126,149,173,174,270,281,284,285,297,310,349,446,458,460,483,498,],[86,86,86,86,-170,-171,-172,-173,86,86,86,86,86,86,-116,-117,86,86,86,86,86,86,86,86,]),'PROTECTED':([0,47,48,60,85,86,87,88,126,149,173,174,270,281,284,285,297,310,349,446,458,460,483,498,],[87,87,87,87,-170,-171,-172,-173,87,87,87,87,87,87,-116,-117,87,87,87,87,87,87,87,87,]),'STATIC':([0,47,48,60,85,86,87,88,126,149,173,174,270,281,284,285,297,310,349,446,458,460,483,498,],[88,88,88,88,-170,-171,-172,-173,88,88,88,88,88,88,-116,-117,88,88,88,88,88,88,88,88,]),'FUNCTION':([0,48,60,85,86,87,88,172,173,270,281,284,285,446,458,460,483,498,],[89,153,89,-170,-171,-172,-173,153,89,89,89,-116,-117,89,89,89,89,89,]),'IF':([0,173,270,281,284,285,446,458,460,483,498,],[90,90,90,90,-116,-117,90,90,90,90,90,]),'SEMI':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,42,43,49,50,51,52,53,57,59,60,68,69,70,71,76,77,78,79,80,81,82,91,92,94,95,96,97,98,99,100,101,102,103,104,106,107,108,109,111,112,113,114,116,127,128,147,150,151,152,158,159,163,164,165,166,167,168,169,170,171,180,181,182,183,184,190,191,192,193,194,195,200,205,206,213,214,216,217,226,227,228,229,230,231,232,233,234,237,241,242,243,244,245,255,256,265,266,268,269,274,276,277,281,284,285,286,290,292,293,294,299,300,303,304,307,308,309,312,313,314,318,321,322,323,325,326,336,337,346,347,348,352,353,354,355,359,370,371,373,375,376,381,382,387,388,395,396,397,399,400,405,408,412,413,414,415,416,417,418,419,420,421,425,426,429,430,431,432,433,435,436,437,438,440,441,442,445,446,447,448,449,454,457,458,461,462,463,464,465,467,469,470,471,472,473,474,476,477,478,479,480,481,482,485,486,487,495,499,500,502,503,504,509,510,511,512,514,515,516,517,518,521,530,532,534,535,536,537,538,540,541,542,543,544,547,548,549,557,558,560,561,566,569,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-203,-204,-206,-207,-44,-46,-154,-156,-158,-79,-209,-113,181,182,183,184,-174,190,-190,-191,-212,-213,195,-179,200,-56,-63,205,206,-68,-71,-50,-51,-52,-54,-147,-53,-55,-57,214,-61,216,217,-69,-202,-199,-205,-37,-38,-155,-157,-80,-81,-208,-210,-214,-215,-216,-217,-218,-219,-220,286,-193,-194,-195,-196,-175,292,293,294,-211,-252,-58,-64,-66,-54,-59,-65,-67,312,-39,-40,-41,-42,-43,313,-47,314,318,321,322,323,325,326,336,337,352,353,355,-82,-94,-93,-95,-184,-116,-117,-192,-197,-176,-177,-178,-144,-145,-146,388,395,396,397,-36,-45,-48,-49,-107,-108,-225,-222,-223,-242,-238,419,420,421,-221,-224,425,-187,431,-113,443,446,-98,-184,-198,454,462,-70,-60,-237,-168,-146,469,-180,476,480,-246,-247,-248,-249,-250,-241,-72,-73,-74,-186,-78,-184,-184,-112,-91,-92,-83,-85,-86,-88,-84,-87,-114,-99,-113,-100,-120,-122,-257,-166,-184,-76,-62,-148,-149,-150,-152,-239,510,511,512,-259,-181,-226,514,515,516,-245,517,518,446,-98,446,-97,534,535,537,-161,-174,543,-185,-243,-236,-244,-253,-254,-255,-256,-110,-109,-115,-169,-188,558,-258,-167,-75,-151,-153,-240,-77,-200,-201,-96,565,-189,-89,-90,-165,-121,]),'BOOLEANO':([37,38,49,50,77,94,100,101,102,105,106,107,108,110,129,130,131,135,136,137,138,139,140,141,142,143,144,147,150,162,199,201,202,203,213,227,228,229,230,231,233,236,261,271,279,305,306,311,312,313,314,318,320,323,325,326,327,328,329,336,337,338,339,340,341,342,343,344,345,350,352,353,355,360,361,362,364,365,366,367,368,369,383,397,418,425,428,469,475,476,488,489,507,508,510,511,534,535,543,545,546,558,],[107,107,-44,-46,193,-56,-50,-51,-52,107,-53,-55,-57,107,107,-123,-124,107,107,-132,-133,-134,-135,-136,-125,-126,-127,-37,-38,107,107,107,-123,-124,-54,-39,-40,-41,-42,-43,-47,107,107,107,107,107,107,107,-36,-45,-48,-49,107,-225,-222,-223,107,107,107,-242,-238,107,-137,-138,-139,-140,-141,-142,-143,107,-221,-224,-187,107,107,107,-128,-129,-130,-131,107,107,107,-168,-241,-186,107,-239,107,-226,107,107,107,107,-185,-243,-169,-188,-240,107,107,-189,]),'ENTERO':([37,38,49,50,66,94,100,101,102,105,106,107,108,110,129,130,131,135,136,137,138,139,140,141,142,143,144,147,150,162,185,199,201,202,203,204,213,227,228,229,230,231,233,236,261,271,279,305,306,311,312,313,314,318,320,323,325,326,327,328,329,336,337,338,339,340,341,342,343,344,345,350,352,353,355,360,361,362,364,365,366,367,368,369,378,383,397,418,425,428,469,475,476,488,489,507,508,510,511,534,535,543,545,546,551,553,558,],[94,94,-44,-46,178,-56,-50,-51,-52,94,-53,-55,-57,94,94,-123,-124,94,94,-132,-133,-134,-135,-136,-125,-126,-127,-37,-38,94,287,94,94,-123,-124,302,-54,-39,-40,-41,-42,-43,-47,94,94,94,94,94,94,94,-36,-45,-48,-49,94,-225,-222,-223,94,94,94,-242,-238,94,-137,-138,-139,-140,-141,-142,-143,94,-221,-224,-187,94,94,94,-128,-129,-130,-131,94,94,451,94,-168,-241,-186,94,-239,94,-226,94,94,94,94,-185,-243,-169,-188,-240,94,94,94,94,-189,]),'DECIMAL':([37,38,49,50,94,100,101,102,105,106,107,108,110,129,130,131,135,136,137,138,139,140,141,142,143,144,147,150,162,199,201,202,203,213,227,228,229,230,231,233,236,261,271,279,305,306,311,312,313,314,318,320,323,325,326,327,328,329,336,337,338,339,340,341,342,343,344,345,350,352,353,355,360,361,362,364,365,366,367,368,369,383,397,418,425,428,469,475,476,488,489,507,508,510,511,534,535,543,545,546,551,553,558,],[108,108,-44,-46,-56,-50,-51,-52,108,-53,-55,-57,108,108,-123,-124,108,108,-132,-133,-134,-135,-136,-125,-126,-127,-37,-38,108,108,108,-123,-124,-54,-39,-40,-41,-42,-43,-47,108,108,108,108,108,108,108,-36,-45,-48,-49,108,-225,-222,-223,108,108,108,-242,-238,108,-137,-138,-139,-140,-141,-142,-143,108,-221,-224,-187,108,108,108,-128,-129,-130,-131,108,108,108,-168,-241,-186,108,-239,108,-226,108,108,108,108,-185,-243,-169,-188,-240,108,108,108,108,-189,]),'STRING':([39,236,],[117,117,]),'BOOL':([39,236,],[118,118,]),'BOOLEAN':([39,236,],[119,119,]),'DOUBLE':([39,236,],[120,120,]),'FLOAT':([39,236,],[121,121,]),'ARRAY':([39,129,236,261,351,],[122,240,122,240,424,]),'OBJECT':([39,236,],[123,123,]),'INTEGER':([39,236,],[124,124,]),'INT':([39,236,],[125,125,]),'COLON':([41,178,179,359,385,],[127,284,285,430,459,]),'EQUALS':([44,97,113,148,212,223,225,274,301,391,392,435,437,523,526,527,],[129,209,209,261,209,261,209,363,209,209,209,209,209,209,551,553,]),'SUMA':([44,92,94,97,100,101,102,103,106,107,108,109,113,130,148,211,212,213,215,223,225,226,274,299,301,358,399,439,443,466,467,491,492,510,511,524,526,],[130,202,-56,202,-50,-51,-52,-54,-53,-55,-57,202,202,241,202,202,202,-54,202,202,202,202,202,202,202,202,202,202,492,202,202,526,528,-185,-243,202,550,]),'RESTA':([44,92,94,97,100,101,102,103,106,107,108,109,113,131,148,211,212,213,215,223,225,226,274,299,301,358,399,439,443,466,467,491,493,510,511,524,527,],[131,203,-56,203,-50,-51,-52,-54,-53,-55,-57,203,203,242,203,203,203,-54,203,203,203,203,203,203,203,203,203,203,493,203,203,527,529,-185,-243,203,552,]),'CONCAT':([44,55,97,103,113,225,244,],[132,155,132,155,132,132,324,]),'CONCAT_EQUAL':([44,55,97,103,113,225,],[133,156,133,156,133,133,]),'FLECHA':([44,97,113,274,],[134,208,218,218,]),'MINUS_EQUAL':([44,148,223,274,],[137,137,137,137,]),'MOD_EQUAL':([44,148,223,274,],[138,138,138,138,]),'MUL_EQUAL':([44,148,223,274,],[139,139,139,139,]),'PLUS_EQUAL':([44,148,223,274,],[140,140,140,140,]),'DIV_EQUAL':([44,148,223,274,],[141,141,141,141,]),'MULTIPLICACION':([44,92,94,97,100,101,102,103,106,107,108,109,113,148,211,212,213,215,223,225,226,274,299,301,358,399,439,466,467,510,511,524,],[142,142,-56,142,-50,-51,-52,-54,-53,-55,-57,142,142,142,142,142,-54,142,142,142,142,142,142,142,142,142,142,142,142,-185,-243,142,]),'DIVISION':([44,75,92,94,97,100,101,102,103,106,107,108,109,113,148,211,212,213,215,223,225,226,274,299,301,358,399,439,466,467,510,511,524,],[143,189,143,-56,143,-50,-51,-52,-54,-53,-55,-57,143,143,143,143,143,-54,143,143,143,143,143,143,143,143,143,143,143,143,-185,-243,143,]),'MODULO':([44,92,94,97,100,101,102,103,106,107,108,109,113,148,211,212,213,215,223,225,226,274,299,301,358,399,439,466,467,510,511,524,],[144,144,-56,144,-50,-51,-52,-54,-53,-55,-57,144,144,144,144,144,-54,144,144,144,144,144,144,144,144,144,144,144,144,-185,-243,144,]),'COMMA':([49,50,82,94,98,100,101,102,106,107,108,126,147,150,195,213,220,221,222,223,224,227,228,229,230,231,233,263,264,287,288,296,297,312,313,314,318,323,325,326,336,337,349,352,353,355,384,397,398,406,407,413,414,415,416,417,418,425,469,476,510,511,513,534,535,543,558,],[-44,-46,-251,-56,210,-50,-51,-52,-53,-55,-57,-184,-37,-38,-252,-54,310,-163,-164,-159,-160,-39,-40,-41,-42,-43,-47,350,351,378,379,383,-184,-36,-45,-48,-49,-225,-222,-223,-242,-238,-184,-221,-224,-187,310,-168,-162,475,-183,-246,-247,-248,-249,-250,-241,-186,-239,-226,-185,-243,-182,-169,-188,-240,-189,]),'ELSE':([57,60,159,397,461,540,544,],[160,160,160,-168,-76,-75,-77,]),'ELSEIF':([57,60,397,461,540,],[161,161,-168,-76,-75,]),'NULL':([77,],[191,]),'AND':([94,100,101,102,106,107,108,213,257,273,274,275,276,277,298,336,337,357,371,413,414,415,416,417,418,432,433,435,436,437,438,440,441,469,510,511,520,543,547,548,560,561,],[-56,-50,-51,-52,-53,-55,-57,-54,339,339,339,339,-93,-95,339,-242,-238,339,339,-246,-247,-248,-249,-250,-241,339,-92,-83,-85,-86,-88,-84,-87,-239,-185,-243,339,-240,-200,-201,-89,-90,]),'OR':([94,100,101,102,106,107,108,213,257,273,274,275,276,277,298,336,337,357,371,413,414,415,416,417,418,432,433,435,436,437,438,440,441,469,510,511,520,543,547,548,560,561,],[-56,-50,-51,-52,-53,-55,-57,-54,340,340,340,340,-93,-95,340,-242,-238,340,340,-246,-247,-248,-249,-250,-241,340,-92,-83,-85,-86,-88,-84,-87,-239,-185,-243,340,-240,-200,-201,-89,-90,]),'XOR':([94,100,101,102,106,107,108,213,257,273,274,275,276,277,298,336,337,357,371,413,414,415,416,417,418,432,433,435,436,437,438,440,441,469,510,511,520,543,547,548,560,561,],[-56,-50,-51,-52,-53,-55,-57,-54,341,341,341,341,-93,-95,341,-242,-238,341,341,-246,-247,-248,-249,-250,-241,341,-92,-83,-85,-86,-88,-84,-87,-239,-185,-243,341,-240,-200,-201,-89,-90,]),'IS_EQUAL':([94,100,101,102,106,107,108,213,257,273,274,275,276,277,298,336,337,357,371,413,414,415,416,417,418,432,433,435,436,437,438,440,441,469,510,511,520,543,547,548,560,561,],[-56,-50,-51,-52,-53,-55,-57,-54,342,342,342,342,-93,-95,342,-242,-238,342,342,-246,-247,-248,-249,-250,-241,342,-92,-83,-85,-86,-88,-84,-87,-239,-185,-243,342,-240,-200,-201,-89,-90,]),'IS_NOT_EQUAL':([94,100,101,102,106,107,108,213,257,273,274,275,276,277,298,336,337,357,371,413,414,415,416,417,418,432,433,435,436,437,438,440,441,469,510,511,520,543,547,548,560,561,],[-56,-50,-51,-52,-53,-55,-57,-54,343,343,343,343,-93,-95,343,-242,-238,343,343,-246,-247,-248,-249,-250,-241,343,-92,-83,-85,-86,-88,-84,-87,-239,-185,-243,343,-240,-200,-201,-89,-90,]),'IS_IDENTICAL':([94,100,101,102,106,107,108,213,257,273,274,275,276,277,298,336,337,357,371,413,414,415,416,417,418,432,433,435,436,437,438,440,441,469,510,511,520,543,547,548,560,561,],[-56,-50,-51,-52,-53,-55,-57,-54,344,344,344,344,-93,-95,344,-242,-238,344,344,-246,-247,-248,-249,-250,-241,344,-92,-83,-85,-86,-88,-84,-87,-239,-185,-243,344,-240,-200,-201,-89,-90,]),'IS_NOT_IDENTICAL':([94,100,101,102,106,107,108,213,257,273,274,275,276,277,298,336,337,357,371,413,414,415,416,417,418,432,433,435,436,437,438,440,441,469,510,511,520,543,547,548,560,561,],[-56,-50,-51,-52,-53,-55,-57,-54,345,345,345,345,-93,-95,345,-242,-238,345,345,-246,-247,-248,-249,-250,-241,345,-92,-83,-85,-86,-88,-84,-87,-239,-185,-243,345,-240,-200,-201,-89,-90,]),'GREATER':([94,100,101,102,106,107,108,188,213,274,275,291,510,511,520,],[-56,-50,-51,-52,-53,-55,-57,290,-54,365,365,381,-185,-243,365,]),'IS_SMALLER_OR_EQUAL':([94,100,101,102,106,107,108,213,274,275,510,511,520,],[-56,-50,-51,-52,-53,-55,-57,-54,366,366,-185,-243,366,]),'IS_GREATER_OR_EQUAL':([94,100,101,102,106,107,108,213,274,275,510,511,520,],[-56,-50,-51,-52,-53,-55,-57,-54,367,367,-185,-243,367,]),'NEW':([129,209,363,],[235,235,235,]),'ARRAY_VALUES':([129,146,261,],[239,239,239,]),'PUSH':([134,],[246,]),'ENQUEUE':([134,],[247,]),'DEQUEUE':([134,],[248,]),'POP':([134,208,],[249,249,]),'REWIND':([134,208,218,],[250,250,250,]),'VALID':([134,208,218,],[251,251,251,]),'COUNT':([134,208,218,],[252,252,252,]),'NEXT':([134,208,218,],[253,253,253,]),'CURRENT':([134,208,218,],[254,254,254,]),'SPLQUEUE':([235,],[315,]),'SPLSTACK':([235,],[316,]),'AS':([280,],[372,]),'CATCH':([376,445,447,448,449,569,],[-184,-99,-100,496,-122,-121,]),'VOID':([459,],[505,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,173,270,281,446,458,460,483,498,],[1,278,356,374,495,374,506,519,533,]),'imprimir':([0,173,270,281,446,458,460,483,498,],[2,2,2,2,2,2,2,2,2,]),'asignacion':([0,47,48,126,149,173,174,270,281,297,310,349,446,458,460,483,498,],[3,147,150,224,150,3,279,3,3,224,224,224,3,3,3,3,3,]),'funciones':([0,60,173,270,281,446,458,460,483,498,],[4,169,4,4,4,4,4,4,4,4,]),'llamada_funcion':([0,129,173,261,270,281,386,446,458,460,483,498,],[5,233,5,233,5,5,461,5,5,5,5,5,]),'constante':([0,173,270,281,446,458,460,483,498,],[6,6,6,6,6,6,6,6,6,]),'lectura':([0,129,173,261,270,281,446,458,460,483,498,],[7,230,7,230,7,7,7,7,7,7,7,]),'condicion_ifelse':([0,173,270,281,446,458,460,483,498,],[8,8,8,8,8,8,8,8,8,]),'bwhile':([0,60,173,270,281,370,446,458,460,483,498,],[9,167,9,9,9,442,9,9,9,9,9,]),'bdo':([0,60,173,270,281,446,458,460,483,498,],[10,171,10,10,10,10,10,10,10,10,]),'bfor':([0,60,173,270,281,446,458,460,483,498,],[11,168,11,11,11,11,11,11,11,11,]),'incrementOp':([0,173,270,281,446,458,460,483,498,],[12,12,12,12,12,12,12,12,12,]),'bforeach':([0,173,270,281,446,458,460,483,498,],[13,13,13,13,13,13,13,13,13,]),'btry':([0,173,270,281,446,458,460,483,498,],[14,14,14,14,14,14,14,14,14,]),'bswitch':([0,60,173,270,281,446,458,460,483,498,],[15,170,15,15,15,15,15,15,15,15,]),'bcase':([0,173,270,281,446,450,458,460,483,498,565,],[16,16,16,16,16,498,16,16,16,16,498,]),'bgoto':([0,173,270,281,446,458,460,483,498,],[17,17,17,17,17,17,17,17,17,]),'bcolas':([0,37,38,105,110,129,162,173,199,201,236,261,270,271,279,281,305,306,320,327,328,329,338,350,360,361,362,368,369,383,428,446,458,460,475,483,488,498,507,545,546,],[18,101,101,101,101,101,101,18,101,101,101,101,18,101,101,18,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,18,18,18,101,18,101,18,101,101,101,]),'bpila':([0,37,38,105,110,129,162,173,199,201,236,261,270,271,279,281,305,306,320,327,328,329,338,350,360,361,362,368,369,383,428,446,458,460,475,483,488,498,507,545,546,],[19,102,102,102,102,102,102,19,102,102,102,102,19,102,102,19,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,19,19,19,102,19,102,19,102,102,102,]),'bcortes':([0,173,270,281,446,458,460,483,498,],[20,20,20,20,20,20,20,20,20,]),'brand':([0,129,173,261,270,281,446,458,460,483,498,],[21,227,21,227,21,21,21,21,21,21,21,]),'escribir':([0,129,173,261,270,281,446,458,460,483,498,],[22,228,22,228,22,22,22,22,22,22,22,]),'btrim':([0,129,173,261,270,281,446,458,460,483,498,],[23,229,23,229,23,23,23,23,23,23,23,]),'otros':([0,173,270,281,446,458,460,483,498,],[24,24,24,24,24,24,24,24,24,]),'breturn':([0,173,270,281,429,430,446,458,460,483,498,],[25,25,25,375,486,486,25,375,25,25,25,]),'comment':([0,173,270,281,446,458,460,483,498,],[26,26,26,26,26,26,26,26,26,]),'casting':([0,173,270,281,446,458,460,483,498,],[27,27,27,27,27,27,27,27,27,]),'bconcat':([0,37,38,129,173,261,270,281,446,458,460,483,498,],[28,95,111,231,28,231,28,28,28,28,28,28,28,]),'simbolos':([0,173,270,281,446,458,460,483,498,],[29,29,29,29,29,29,29,29,29,]),'funcionesCP_semi':([0,37,38,173,270,281,446,458,460,483,498,],[30,98,114,30,30,30,30,30,30,30,30,]),'addpila':([0,173,270,281,446,458,460,483,498,],[31,31,31,31,31,31,31,31,31,]),'addcola':([0,173,270,281,446,458,460,483,498,],[32,32,32,32,32,32,32,32,32,]),'minuscola':([0,173,270,281,446,458,460,483,498,],[33,33,33,33,33,33,33,33,33,]),'arraypop':([0,173,270,281,446,458,460,483,498,],[34,34,34,34,34,34,34,34,34,]),'arraypush':([0,173,270,281,446,458,460,483,498,],[35,35,35,35,35,35,35,35,35,]),'poppila':([0,37,173,270,281,446,458,460,483,498,],[36,99,36,36,36,36,36,36,36,36,]),'proteccion':([0,47,48,60,126,149,173,174,270,281,297,310,349,446,458,460,483,498,],[48,149,149,172,149,149,48,149,48,48,149,149,149,48,48,48,48,48,]),'asignacion_array':([0,47,48,126,149,173,174,270,281,297,310,349,446,458,460,483,498,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'aumentoCasting':([0,47,48,126,149,162,173,174,199,270,271,279,281,297,310,349,360,446,458,460,483,498,],[50,50,50,50,50,276,50,50,276,50,276,276,50,50,50,50,276,50,50,50,50,50,]),'funcion_nparams':([0,48,60,172,173,270,281,446,458,460,483,498,],[51,151,51,151,51,51,51,51,51,51,51,51,]),'funcion_blank':([0,48,60,172,173,270,281,446,458,460,483,498,],[52,152,52,152,52,52,52,52,52,52,52,52,]),'funcion_void':([0,60,173,270,281,446,458,460,483,498,],[53,53,53,53,53,53,53,53,53,53,]),'condicion_if':([0,173,270,281,446,458,460,483,498,],[57,57,57,57,57,57,57,57,57,]),'empty':([0,126,173,270,281,297,349,376,429,430,446,458,460,483,498,539,],[76,222,76,76,76,222,222,449,76,76,76,504,76,76,76,559,]),'funcionesCP':([0,37,38,162,173,199,270,271,279,281,360,446,458,460,483,498,],[82,82,82,277,82,277,82,277,277,82,277,82,82,82,82,82,]),'valor':([37,38,105,110,129,162,199,201,236,261,271,279,305,306,320,327,328,329,338,350,360,361,362,368,369,383,428,475,488,507,545,546,],[92,109,211,215,226,275,275,299,211,226,275,275,389,393,407,409,410,411,418,423,275,436,438,440,441,455,484,513,522,541,560,561,]),'operaciones_mat':([37,38,129,201,261,],[96,112,232,300,232,]),'tipoDato':([37,38,105,110,129,135,136,162,199,201,236,261,271,279,305,306,311,320,327,328,329,338,350,360,361,362,368,369,383,428,475,488,489,507,508,545,546,],[100,100,100,100,100,256,257,100,100,100,100,100,100,100,100,394,400,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,400,100,542,100,100,]),'operaciones_mat_par':([37,38,129,201,261,305,468,],[104,104,104,104,104,390,509,]),'numero':([37,38,105,110,129,135,136,162,199,201,236,261,271,279,305,306,311,320,327,328,329,338,350,360,361,362,368,369,383,428,475,488,489,507,508,545,546,551,553,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,562,563,]),'tiposCast':([39,236,],[115,317,]),'incrementos_mat':([44,148,223,274,],[135,135,135,135,]),'operadores':([44,92,97,109,113,148,211,212,215,223,225,226,274,299,301,358,399,439,466,467,524,],[136,201,207,201,207,136,305,306,305,136,311,201,136,201,207,428,468,489,507,508,468,]),'condicion_else':([57,60,159,],[158,165,269,]),'condicion_elseif':([57,60,],[159,166,]),'instrucciones':([60,],[164,]),'params_list':([126,297,349,],[220,384,384,]),'param':([126,297,310,349,],[221,221,398,221,]),'arrayvalues':([129,146,261,],[234,260,234,]),'array_def':([129,261,],[237,237,]),'condicion':([162,199,271,279,360,],[273,298,357,371,432,]),'stc_bloque_def':([176,385,422,456,494,525,567,],[282,457,457,503,530,549,569,]),'condicion_booleana':([257,273,274,275,298,357,371,432,520,],[338,360,362,369,360,360,360,360,546,]),'operador_logico':([274,275,520,],[361,368,545,]),'stc_bloque':([281,429,430,458,],[373,485,487,373,]),'array_elmnt':([320,],[406,]),'comprobacion':([360,],[433,]),'catches':([376,],[448,]),'for_incr':([443,],[490,]),'innerSwitch':([450,565,],[497,568,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> imprimir','cuerpo',1,'p_cuerpo','sintactico2.py',11),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','sintactico2.py',12),
  ('cuerpo -> funciones','cuerpo',1,'p_cuerpo','sintactico2.py',13),
  ('cuerpo -> llamada_funcion','cuerpo',1,'p_cuerpo','sintactico2.py',14),
  ('cuerpo -> constante','cuerpo',1,'p_cuerpo','sintactico2.py',15),
  ('cuerpo -> lectura','cuerpo',1,'p_cuerpo','sintactico2.py',16),
  ('cuerpo -> condicion_ifelse','cuerpo',1,'p_cuerpo','sintactico2.py',17),
  ('cuerpo -> bwhile','cuerpo',1,'p_cuerpo','sintactico2.py',18),
  ('cuerpo -> bdo','cuerpo',1,'p_cuerpo','sintactico2.py',19),
  ('cuerpo -> bfor','cuerpo',1,'p_cuerpo','sintactico2.py',20),
  ('cuerpo -> incrementOp','cuerpo',1,'p_cuerpo','sintactico2.py',21),
  ('cuerpo -> bforeach','cuerpo',1,'p_cuerpo','sintactico2.py',22),
  ('cuerpo -> btry','cuerpo',1,'p_cuerpo','sintactico2.py',23),
  ('cuerpo -> bswitch','cuerpo',1,'p_cuerpo','sintactico2.py',24),
  ('cuerpo -> bcase','cuerpo',1,'p_cuerpo','sintactico2.py',25),
  ('cuerpo -> bgoto','cuerpo',1,'p_cuerpo','sintactico2.py',26),
  ('cuerpo -> bcolas','cuerpo',1,'p_cuerpo','sintactico2.py',27),
  ('cuerpo -> bpila','cuerpo',1,'p_cuerpo','sintactico2.py',28),
  ('cuerpo -> bcortes','cuerpo',1,'p_cuerpo','sintactico2.py',29),
  ('cuerpo -> brand','cuerpo',1,'p_cuerpo','sintactico2.py',30),
  ('cuerpo -> escribir','cuerpo',1,'p_cuerpo','sintactico2.py',31),
  ('cuerpo -> btrim','cuerpo',1,'p_cuerpo','sintactico2.py',32),
  ('cuerpo -> otros','cuerpo',1,'p_cuerpo','sintactico2.py',33),
  ('cuerpo -> breturn','cuerpo',1,'p_cuerpo','sintactico2.py',34),
  ('cuerpo -> comment','cuerpo',1,'p_cuerpo','sintactico2.py',35),
  ('cuerpo -> casting','cuerpo',1,'p_cuerpo','sintactico2.py',36),
  ('cuerpo -> bconcat','cuerpo',1,'p_cuerpo','sintactico2.py',37),
  ('cuerpo -> simbolos','cuerpo',1,'p_cuerpo','sintactico2.py',38),
  ('cuerpo -> funcionesCP_semi','cuerpo',1,'p_cuerpo','sintactico2.py',39),
  ('cuerpo -> addpila','cuerpo',1,'p_cuerpo','sintactico2.py',40),
  ('cuerpo -> addcola','cuerpo',1,'p_cuerpo','sintactico2.py',41),
  ('cuerpo -> minuscola','cuerpo',1,'p_cuerpo','sintactico2.py',42),
  ('cuerpo -> arraypop','cuerpo',1,'p_cuerpo','sintactico2.py',43),
  ('cuerpo -> arraypush','cuerpo',1,'p_cuerpo','sintactico2.py',44),
  ('cuerpo -> poppila','cuerpo',1,'p_cuerpo','sintactico2.py',45),
  ('asignacion -> VARIABLE EQUALS valor SEMI','asignacion',4,'p_asignacion','sintactico2.py',52),
  ('asignacion -> VAR asignacion','asignacion',2,'p_asignacion','sintactico2.py',53),
  ('asignacion -> proteccion asignacion','asignacion',2,'p_asignacion','sintactico2.py',54),
  ('asignacion -> VARIABLE EQUALS brand','asignacion',3,'p_asignacion','sintactico2.py',55),
  ('asignacion -> VARIABLE EQUALS escribir','asignacion',3,'p_asignacion','sintactico2.py',56),
  ('asignacion -> VARIABLE EQUALS btrim','asignacion',3,'p_asignacion','sintactico2.py',57),
  ('asignacion -> VARIABLE EQUALS lectura','asignacion',3,'p_asignacion','sintactico2.py',58),
  ('asignacion -> VARIABLE EQUALS bconcat','asignacion',3,'p_asignacion','sintactico2.py',59),
  ('asignacion -> asignacion_array','asignacion',1,'p_asignacion','sintactico2.py',60),
  ('asignacion -> VARIABLE EQUALS operaciones_mat SEMI','asignacion',4,'p_asignacion','sintactico2.py',61),
  ('asignacion -> aumentoCasting','asignacion',1,'p_asignacion','sintactico2.py',62),
  ('asignacion -> VARIABLE EQUALS llamada_funcion','asignacion',3,'p_asignacion','sintactico2.py',63),
  ('asignacion -> VARIABLE EQUALS arrayvalues SEMI','asignacion',4,'p_asignacion','sintactico2.py',64),
  ('asignacion_array -> VARIABLE EQUALS array_def SEMI','asignacion_array',4,'p_asignacion_array','sintactico2.py',72),
  ('valor -> tipoDato','valor',1,'p_valor','sintactico2.py',77),
  ('valor -> bcolas','valor',1,'p_valor','sintactico2.py',78),
  ('valor -> bpila','valor',1,'p_valor','sintactico2.py',79),
  ('tipoDato -> numero','tipoDato',1,'p_tipoDato','sintactico2.py',85),
  ('tipoDato -> CADENA','tipoDato',1,'p_tipoDato','sintactico2.py',86),
  ('tipoDato -> BOOLEANO','tipoDato',1,'p_tipoDato','sintactico2.py',87),
  ('numero -> ENTERO','numero',1,'p_numero','sintactico2.py',92),
  ('numero -> DECIMAL','numero',1,'p_numero','sintactico2.py',93),
  ('imprimir -> ECHO valor SEMI','imprimir',3,'p_imprimir','sintactico2.py',99),
  ('imprimir -> PRINT valor SEMI','imprimir',3,'p_imprimir','sintactico2.py',100),
  ('imprimir -> PRINT LPAREN valor RPAREN SEMI','imprimir',5,'p_imprimir','sintactico2.py',101),
  ('imprimir -> PRINT bconcat','imprimir',2,'p_imprimir','sintactico2.py',102),
  ('imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI','imprimir',6,'p_imprimir','sintactico2.py',103),
  ('imprimir -> ECHO bconcat','imprimir',2,'p_imprimir','sintactico2.py',104),
  ('imprimir -> ECHO operaciones_mat SEMI','imprimir',3,'p_imprimir','sintactico2.py',105),
  ('imprimir -> PRINT operaciones_mat SEMI','imprimir',3,'p_imprimir','sintactico2.py',106),
  ('imprimir -> ECHO VARIABLE SEMI','imprimir',3,'p_imprimir','sintactico2.py',107),
  ('imprimir -> PRINT VARIABLE SEMI','imprimir',3,'p_imprimir','sintactico2.py',108),
  ('imprimir -> ECHO funcionesCP_semi','imprimir',2,'p_imprimir','sintactico2.py',109),
  ('imprimir -> PRINT funcionesCP_semi','imprimir',2,'p_imprimir','sintactico2.py',110),
  ('imprimir -> ECHO funcionesCP_semi COMMA NOMBRE SEMI','imprimir',5,'p_imprimir','sintactico2.py',111),
  ('imprimir -> ECHO poppila','imprimir',2,'p_imprimir','sintactico2.py',112),
  ('imprimir -> VAR_DUMP LPAREN VARIABLE RPAREN SEMI','imprimir',5,'p_imprimir','sintactico2.py',113),
  ('imprimir -> PRINT_R LPAREN VARIABLE RPAREN SEMI','imprimir',5,'p_imprimir','sintactico2.py',114),
  ('imprimir -> PRINT_R LPAREN arrayvalues RPAREN SEMI','imprimir',5,'p_imprimir','sintactico2.py',115),
  ('condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_if',7,'p_condicion_if','sintactico2.py',122),
  ('condicion_if -> IF LPAREN condicion RPAREN llamada_funcion','condicion_if',5,'p_condicion_if','sintactico2.py',123),
  ('condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_elseif',7,'p_condicion_elseif','sintactico2.py',129),
  ('condicion_else -> ELSE LBRACE cuerpo RBRACE','condicion_else',4,'p_condicion_else','sintactico2.py',135),
  ('condicion_ifelse -> condicion_if','condicion_ifelse',1,'p_condicion_ifelse','sintactico2.py',140),
  ('condicion_ifelse -> condicion_if condicion_else','condicion_ifelse',2,'p_condicion_ifelse','sintactico2.py',141),
  ('condicion_ifelse -> condicion_if condicion_elseif','condicion_ifelse',2,'p_condicion_ifelse','sintactico2.py',142),
  ('condicion_ifelse -> condicion_if condicion_elseif condicion_else','condicion_ifelse',3,'p_condicion_ifelse','sintactico2.py',143),
  ('condicion -> VARIABLE operador_logico VARIABLE','condicion',3,'p_condicion','sintactico2.py',148),
  ('condicion -> valor operador_logico valor','condicion',3,'p_condicion','sintactico2.py',149),
  ('condicion -> VARIABLE operador_logico valor','condicion',3,'p_condicion','sintactico2.py',150),
  ('condicion -> VARIABLE condicion_booleana VARIABLE','condicion',3,'p_condicion','sintactico2.py',151),
  ('condicion -> valor condicion_booleana valor','condicion',3,'p_condicion','sintactico2.py',152),
  ('condicion -> VARIABLE condicion_booleana valor','condicion',3,'p_condicion','sintactico2.py',153),
  ('condicion -> LPAREN VARIABLE operadores valor RPAREN operador_logico valor','condicion',7,'p_condicion','sintactico2.py',154),
  ('condicion -> LPAREN VARIABLE operadores valor RPAREN condicion_booleana valor','condicion',7,'p_condicion','sintactico2.py',155),
  ('condicion -> condicion condicion_booleana condicion','condicion',3,'p_condicion','sintactico2.py',156),
  ('condicion -> condicion condicion_booleana comprobacion','condicion',3,'p_condicion','sintactico2.py',157),
  ('condicion -> aumentoCasting','condicion',1,'p_condicion','sintactico2.py',158),
  ('condicion -> VARIABLE','condicion',1,'p_condicion','sintactico2.py',159),
  ('condicion -> funcionesCP','condicion',1,'p_condicion','sintactico2.py',160),
  ('bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def','bfor',8,'p_bfor','sintactico2.py',167),
  ('stc_bloque -> stc_bloque SEMI cuerpo','stc_bloque',3,'p_stc_bloque','sintactico2.py',171),
  ('stc_bloque -> breturn','stc_bloque',1,'p_stc_bloque','sintactico2.py',172),
  ('stc_bloque_def -> LBRACE stc_bloque RBRACE','stc_bloque_def',3,'p_stc_bloque_def','sintactico2.py',177),
  ('stc_bloque_def -> LBRACE cuerpo RBRACE','stc_bloque_def',3,'p_stc_bloque_def','sintactico2.py',178),
  ('for_incr -> VARIABLE SUMA SUMA','for_incr',3,'p_for_incr','sintactico2.py',183),
  ('for_incr -> SUMA SUMA VARIABLE','for_incr',3,'p_for_incr','sintactico2.py',184),
  ('for_incr -> VARIABLE RESTA RESTA','for_incr',3,'p_for_incr','sintactico2.py',185),
  ('for_incr -> RESTA RESTA VARIABLE','for_incr',3,'p_for_incr','sintactico2.py',186),
  ('for_incr -> VARIABLE SUMA EQUALS numero','for_incr',4,'p_for_incr','sintactico2.py',187),
  ('for_incr -> VARIABLE RESTA EQUALS numero','for_incr',4,'p_for_incr','sintactico2.py',188),
  ('incrementOp -> VARIABLE SUMA SUMA SEMI','incrementOp',4,'p_incrementOp','sintactico2.py',193),
  ('incrementOp -> VARIABLE RESTA RESTA SEMI','incrementOp',4,'p_incrementOp','sintactico2.py',194),
  ('bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def','bforeach',7,'p_bforeach','sintactico2.py',199),
  ('bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE','bwhile',7,'p_bwhile','sintactico2.py',204),
  ('bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque','bwhile',6,'p_bwhile','sintactico2.py',205),
  ('bwhile -> WHILE LPAREN condicion RPAREN SEMI','bwhile',5,'p_bwhile','sintactico2.py',206),
  ('bwhile -> <empty>','bwhile',0,'p_bwhile','sintactico2.py',207),
  ('bdo -> DO LBRACE cuerpo RBRACE bwhile','bdo',5,'p_bdo','sintactico2.py',212),
  ('bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE','bswitch',7,'p_bswitch','sintactico2.py',218),
  ('bcase -> CASE ENTERO COLON','bcase',3,'p_bcase','sintactico2.py',222),
  ('bcase -> CASE CADENA COLON','bcase',3,'p_bcase','sintactico2.py',223),
  ('innerSwitch -> bcase cuerpo BREAK SEMI','innerSwitch',4,'p_innerSwitch','sintactico2.py',227),
  ('innerSwitch -> bcase cuerpo BREAK SEMI innerSwitch','innerSwitch',5,'p_innerSwitch','sintactico2.py',228),
  ('btry -> TRY LBRACE stc_bloque_def RBRACE catches','btry',5,'p_btry','sintactico2.py',234),
  ('catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def','catches',7,'p_catches','sintactico2.py',238),
  ('catches -> empty','catches',1,'p_catches','sintactico2.py',239),
  ('operadores -> SUMA','operadores',1,'p_operadores','sintactico2.py',244),
  ('operadores -> RESTA','operadores',1,'p_operadores','sintactico2.py',245),
  ('operadores -> MULTIPLICACION','operadores',1,'p_operadores','sintactico2.py',246),
  ('operadores -> DIVISION','operadores',1,'p_operadores','sintactico2.py',247),
  ('operadores -> MODULO','operadores',1,'p_operadores','sintactico2.py',248),
  ('operador_logico -> SMALLER','operador_logico',1,'p_operador_logico','sintactico2.py',253),
  ('operador_logico -> GREATER','operador_logico',1,'p_operador_logico','sintactico2.py',254),
  ('operador_logico -> IS_SMALLER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico2.py',255),
  ('operador_logico -> IS_GREATER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico2.py',256),
  ('incrementos_mat -> MINUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',261),
  ('incrementos_mat -> MOD_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',262),
  ('incrementos_mat -> MUL_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',263),
  ('incrementos_mat -> PLUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',264),
  ('incrementos_mat -> DIV_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',265),
  ('condicion_booleana -> AND','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',270),
  ('condicion_booleana -> OR','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',271),
  ('condicion_booleana -> XOR','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',272),
  ('condicion_booleana -> IS_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',273),
  ('condicion_booleana -> IS_NOT_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',274),
  ('condicion_booleana -> IS_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',275),
  ('condicion_booleana -> IS_NOT_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',276),
  ('operaciones_mat -> valor operadores valor','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',281),
  ('operaciones_mat -> valor operadores operaciones_mat','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',282),
  ('operaciones_mat -> VARIABLE operadores VARIABLE','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',283),
  ('operaciones_mat -> operaciones_mat_par','operaciones_mat',1,'p_operaciones_mat','sintactico2.py',284),
  ('operaciones_mat_par -> LPAREN valor operadores valor RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',290),
  ('operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',291),
  ('operaciones_mat_par -> LPAREN VARIABLE operadores VARIABLE RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',292),
  ('operaciones_mat_par -> LPAREN VARIABLE operadores valor RPAREN operadores valor','operaciones_mat_par',7,'p_operaciones_mat_par','sintactico2.py',293),
  ('operaciones_mat_par -> LPAREN VARIABLE operadores tipoDato RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',294),
  ('operaciones_mat_par -> LPAREN VARIABLE operadores tipoDato RPAREN operadores tipoDato','operaciones_mat_par',7,'p_operaciones_mat_par','sintactico2.py',295),
  ('funciones -> funcion_nparams','funciones',1,'p_funciones','sintactico2.py',301),
  ('funciones -> proteccion funcion_nparams','funciones',2,'p_funciones','sintactico2.py',302),
  ('funciones -> funcion_blank','funciones',1,'p_funciones','sintactico2.py',303),
  ('funciones -> proteccion funcion_blank','funciones',2,'p_funciones','sintactico2.py',304),
  ('funciones -> funcion_void','funciones',1,'p_funciones','sintactico2.py',305),
  ('param -> VARIABLE','param',1,'p_param','sintactico2.py',310),
  ('param -> asignacion','param',1,'p_param','sintactico2.py',311),
  ('funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def','funcion_nparams',6,'p_funcion_nparams','sintactico2.py',316),
  ('params_list -> params_list COMMA param','params_list',3,'p_params_list','sintactico2.py',320),
  ('params_list -> param','params_list',1,'p_params_list','sintactico2.py',321),
  ('params_list -> empty','params_list',1,'p_params_list','sintactico2.py',322),
  ('funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE','funcion_void',9,'p_funcion_void','sintactico2.py',327),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def','funcion_blank',5,'p_funcion_blank','sintactico2.py',331),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE','funcion_blank',7,'p_funcion_blank','sintactico2.py',332),
  ('llamada_funcion -> NOMBRE LPAREN params_list RPAREN SEMI','llamada_funcion',5,'p_llamada_funcion','sintactico2.py',337),
  ('brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI','brand',7,'p_brand','sintactico2.py',341),
  ('proteccion -> PUBLIC','proteccion',1,'p_proteccion','sintactico2.py',345),
  ('proteccion -> PRIVATE','proteccion',1,'p_proteccion','sintactico2.py',346),
  ('proteccion -> PROTECTED','proteccion',1,'p_proteccion','sintactico2.py',347),
  ('proteccion -> STATIC','proteccion',1,'p_proteccion','sintactico2.py',348),
  ('breturn -> empty','breturn',1,'p_breturn','sintactico2.py',353),
  ('breturn -> RETURN SEMI','breturn',2,'p_breturn','sintactico2.py',354),
  ('breturn -> RETURN NULL SEMI','breturn',3,'p_breturn','sintactico2.py',355),
  ('breturn -> RETURN VARIABLE SEMI','breturn',3,'p_breturn','sintactico2.py',356),
  ('breturn -> RETURN BOOLEANO SEMI','breturn',3,'p_breturn','sintactico2.py',357),
  ('breturn -> breturn RBRACE','breturn',2,'p_breturn','sintactico2.py',358),
  ('array_def -> ARRAY LPAREN RPAREN','array_def',3,'p_array_def','sintactico2.py',367),
  ('array_def -> ARRAY LPAREN array_elmnt RPAREN','array_def',4,'p_array_def','sintactico2.py',368),
  ('array_elmnt -> array_elmnt COMMA valor','array_elmnt',3,'p_array_elmnt','sintactico2.py',372),
  ('array_elmnt -> valor','array_elmnt',1,'p_array_elmnt','sintactico2.py',373),
  ('empty -> <empty>','empty',0,'p_empty','sintactico2.py',377),
  ('bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI','bcolas',7,'p_bcolas','sintactico2.py',382),
  ('lectura -> READLINE LPAREN CADENA RPAREN SEMI','lectura',5,'p_lectura','sintactico2.py',387),
  ('lectura -> READLINE LPAREN RPAREN SEMI','lectura',4,'p_lectura','sintactico2.py',388),
  ('escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI','escribir',7,'p_escribir','sintactico2.py',392),
  ('btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI','btrim',8,'p_btrim','sintactico2.py',397),
  ('comment -> COMENTARIOS','comment',1,'p_comment','sintactico2.py',403),
  ('comment -> DOC_COMENTARIOS','comment',1,'p_comment','sintactico2.py',404),
  ('bgoto -> GOTO NOMBRE SEMI','bgoto',3,'p_bgoto','sintactico2.py',409),
  ('bcortes -> EXIT SEMI','bcortes',2,'p_bcortes','sintactico2.py',413),
  ('bcortes -> BREAK SEMI','bcortes',2,'p_bcortes','sintactico2.py',414),
  ('bcortes -> DEFAULT SEMI','bcortes',2,'p_bcortes','sintactico2.py',415),
  ('bcortes -> CONTINUE SEMI','bcortes',2,'p_bcortes','sintactico2.py',416),
  ('otros -> SMALLER NOMBRE GREATER','otros',3,'p_otros','sintactico2.py',421),
  ('otros -> SMALLER DIVISION NOMBRE GREATER','otros',4,'p_otros','sintactico2.py',422),
  ('otros -> NOMBRE COLON','otros',2,'p_otros','sintactico2.py',423),
  ('comprobacion -> NOMBRE LPAREN valor RPAREN','comprobacion',4,'p_comprobacion','sintactico2.py',432),
  ('comprobacion -> NOMBRE LPAREN VARIABLE RPAREN','comprobacion',4,'p_comprobacion','sintactico2.py',433),
  ('simbolos -> LPAREN RPAREN','simbolos',2,'p_simbolos','sintactico2.py',439),
  ('simbolos -> LPAREN','simbolos',1,'p_simbolos','sintactico2.py',440),
  ('simbolos -> RPAREN','simbolos',1,'p_simbolos','sintactico2.py',441),
  ('simbolos -> LBRACKET RBRACKET','simbolos',2,'p_simbolos','sintactico2.py',442),
  ('simbolos -> LBRACKET','simbolos',1,'p_simbolos','sintactico2.py',443),
  ('simbolos -> RBRACKET','simbolos',1,'p_simbolos','sintactico2.py',444),
  ('simbolos -> LBRACE RBRACE','simbolos',2,'p_simbolos','sintactico2.py',445),
  ('simbolos -> LBRACE','simbolos',1,'p_simbolos','sintactico2.py',446),
  ('simbolos -> RBRACE instrucciones','simbolos',2,'p_simbolos','sintactico2.py',447),
  ('simbolos -> OPEN_TAG CLOSE_TAG','simbolos',2,'p_simbolos','sintactico2.py',448),
  ('simbolos -> OPEN_TAG','simbolos',1,'p_simbolos','sintactico2.py',449),
  ('simbolos -> CLOSE_TAG','simbolos',1,'p_simbolos','sintactico2.py',450),
  ('instrucciones -> condicion_else','instrucciones',1,'p_instrucciones','sintactico2.py',456),
  ('instrucciones -> condicion_elseif','instrucciones',1,'p_instrucciones','sintactico2.py',457),
  ('instrucciones -> bwhile','instrucciones',1,'p_instrucciones','sintactico2.py',458),
  ('instrucciones -> bfor','instrucciones',1,'p_instrucciones','sintactico2.py',459),
  ('instrucciones -> funciones','instrucciones',1,'p_instrucciones','sintactico2.py',460),
  ('instrucciones -> bswitch','instrucciones',1,'p_instrucciones','sintactico2.py',461),
  ('instrucciones -> bdo','instrucciones',1,'p_instrucciones','sintactico2.py',462),
  ('bconcat -> CADENA CONCAT CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',468),
  ('bconcat -> VARIABLE CONCAT CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',469),
  ('bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',470),
  ('bconcat -> CADENA CONCAT_EQUAL CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',471),
  ('bconcat -> VARIABLE CONCAT VARIABLE SEMI','bconcat',4,'p_bconcat','sintactico2.py',472),
  ('bconcat -> VARIABLE CONCAT CADENA CONCAT VARIABLE SEMI','bconcat',6,'p_bconcat','sintactico2.py',473),
  ('tiposCast -> STRING','tiposCast',1,'p_tiposCast','sintactico2.py',480),
  ('tiposCast -> BOOL','tiposCast',1,'p_tiposCast','sintactico2.py',481),
  ('tiposCast -> BOOLEAN','tiposCast',1,'p_tiposCast','sintactico2.py',482),
  ('tiposCast -> DOUBLE','tiposCast',1,'p_tiposCast','sintactico2.py',483),
  ('tiposCast -> FLOAT','tiposCast',1,'p_tiposCast','sintactico2.py',484),
  ('tiposCast -> ARRAY','tiposCast',1,'p_tiposCast','sintactico2.py',485),
  ('tiposCast -> OBJECT','tiposCast',1,'p_tiposCast','sintactico2.py',486),
  ('tiposCast -> INTEGER','tiposCast',1,'p_tiposCast','sintactico2.py',487),
  ('tiposCast -> INT','tiposCast',1,'p_tiposCast','sintactico2.py',488),
  ('casting -> VARIABLE EQUALS LPAREN tiposCast RPAREN VARIABLE SEMI','casting',7,'p_casting','sintactico2.py',496),
  ('casting -> LPAREN tiposCast RPAREN VARIABLE SEMI','casting',5,'p_casting','sintactico2.py',497),
  ('aumentoCasting -> VARIABLE incrementos_mat tipoDato SEMI','aumentoCasting',4,'p_aumentoCasting','sintactico2.py',503),
  ('aumentoCasting -> VARIABLE EQUALS VARIABLE operadores tipoDato SEMI','aumentoCasting',6,'p_aumentoCasting','sintactico2.py',504),
  ('aumentoCasting -> VARIABLE EQUALS VARIABLE operadores VARIABLE operadores operaciones_mat_par SEMI','aumentoCasting',8,'p_aumentoCasting','sintactico2.py',505),
  ('aumentoCasting -> VARIABLE operadores tipoDato condicion_booleana valor','aumentoCasting',5,'p_aumentoCasting','sintactico2.py',506),
  ('aumentoCasting -> VARIABLE incrementos_mat VARIABLE SEMI','aumentoCasting',4,'p_aumentoCasting','sintactico2.py',507),
  ('bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI','bpila',7,'p_bpila','sintactico2.py',514),
  ('addpila -> VARIABLE FLECHA PUSH LPAREN valor RPAREN SEMI','addpila',7,'p_addpila','sintactico2.py',519),
  ('poppila -> VARIABLE FLECHA POP LPAREN RPAREN SEMI','poppila',6,'p_poppila','sintactico2.py',523),
  ('funcionesCP -> VARIABLE FLECHA REWIND LPAREN RPAREN','funcionesCP',5,'p_funcionesCP','sintactico2.py',527),
  ('funcionesCP -> VARIABLE FLECHA VALID LPAREN RPAREN','funcionesCP',5,'p_funcionesCP','sintactico2.py',528),
  ('funcionesCP -> VARIABLE FLECHA COUNT LPAREN RPAREN','funcionesCP',5,'p_funcionesCP','sintactico2.py',529),
  ('funcionesCP -> VARIABLE FLECHA NEXT LPAREN RPAREN','funcionesCP',5,'p_funcionesCP','sintactico2.py',530),
  ('funcionesCP -> VARIABLE FLECHA CURRENT LPAREN RPAREN','funcionesCP',5,'p_funcionesCP','sintactico2.py',531),
  ('funcionesCP_semi -> funcionesCP','funcionesCP_semi',1,'p_funcionesCP_semi','sintactico2.py',536),
  ('funcionesCP_semi -> funcionesCP SEMI','funcionesCP_semi',2,'p_funcionesCP_semi','sintactico2.py',537),
  ('addcola -> VARIABLE FLECHA ENQUEUE LPAREN valor RPAREN SEMI','addcola',7,'p_addcola','sintactico2.py',542),
  ('minuscola -> VARIABLE FLECHA DEQUEUE LPAREN valor RPAREN SEMI','minuscola',7,'p_minuscola','sintactico2.py',547),
  ('constante -> DEFINE LPAREN CADENA COMMA valor RPAREN SEMI','constante',7,'p_constante','sintactico2.py',555),
  ('constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI','constante',7,'p_constante','sintactico2.py',556),
  ('arraypop -> ARRAY_POP LPAREN VARIABLE RPAREN SEMI','arraypop',5,'p_arraypop','sintactico2.py',560),
  ('arraypush -> ARRAY_PUSH LPAREN VARIABLE COMMA valor RPAREN SEMI','arraypush',7,'p_arraypush','sintactico2.py',563),
  ('arrayvalues -> ARRAY_VALUES LPAREN VARIABLE RPAREN','arrayvalues',4,'p_arrayvalues','sintactico2.py',566),
]
