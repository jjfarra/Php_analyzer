
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY AS BOOL BOOLEAN BOOLEANO BREAK CADENA CASE CATCH CLOSE_TAG COLON COMENTARIOS COMMA CONCAT CONCAT_EQUAL CONTINUE DECIMAL DEFAULT DEFINE DIVISION DIV_EQUAL DO DOC_COMENTARIOS DOUBLE ECHO ELSE ELSEIF ENTERO EQUALS EXIT FLOAT FOR FOREACH FUNCTION FWRITE GOTO GREATER IF INT INTEGER IS_EQUAL IS_GREATER_OR_EQUAL IS_IDENTICAL IS_NOT_EQUAL IS_NOT_IDENTICAL IS_SMALLER_OR_EQUAL LBRACE LBRACKET LPAREN MINUS_EQUAL MODULO MOD_EQUAL MULTIPLICACION MUL_EQUAL NEW NOMBRE NULL OBJECT OPEN_TAG OR PLUS_EQUAL PRINT PRIVATE PROTECTED PUBLIC RAND RBRACE RBRACKET READLINE RESTA RETURN RPAREN SEMI SMALLER SPLQUEUE SPLSTACK STATIC STRING SUMA SWITCH TRIM TRY VAR VARIABLE VOID WHILE XORcuerpo : imprimir\n            | asignacion\n            | funciones\n            | llamada_funcion\n            | constante\n            | lectura\n            | bwhile\n            | bdo\n            | bfor\n            | incrementOp\n            | bforeach\n            | btry\n            | condicion_ifelse\n            | condicion_else\n            | condicion_elseif\n            | bswitch\n            | bcase\n            | bgoto\n            | bcolas\n            | bpila\n            | bcortes\n            | brand\n            | escribir\n            | btrim\n            | otros\n            | breturn\n            | comment\n            | casting\n            | bconcat\n            | simbolos\n  asignacion : VARIABLE EQUALS valor SEMI\n                | VAR asignacion\n                | proteccion asignacion\n                | VARIABLE EQUALS brand\n                | VARIABLE EQUALS escribir\n                | VARIABLE EQUALS btrim\n                | VARIABLE EQUALS lectura\n                | VARIABLE EQUALS bconcat\n                | asignacion_array\n                | VARIABLE EQUALS operaciones_mat SEMI\n                | aumentoCasting\n  asignacion_array : VARIABLE EQUALS array_def SEMIconstante : DEFINE LPAREN CADENA COMMA valor RPAREN SEMI\n          | DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMIvalor : tipoDato\n            | bcolas\n            | bpila\n  tipoDato : numero\n            | CADENA\n            | BOOLEANO\n  numero : ENTERO\n          | DECIMAL\n  imprimir : ECHO valor SEMI\n            | PRINT valor SEMI\n            | PRINT LPAREN valor RPAREN SEMI\n            | PRINT bconcat\n            | ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI\n            | ECHO bconcat\n            | ECHO operaciones_mat SEMI\n            | PRINT operaciones_mat SEMI\n  condicion_if :  IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_elseif :  ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_else :  ELSE LBRACE cuerpo RBRACE\n  condicion_ifelse : condicion_if\n                      | condicion_if condicion_else\n                      | condicion_if condicion_elseif\n                      | condicion_if condicion_elseif condicion_else\n   condicion : VARIABLE operador_logico VARIABLE\n            | valor operador_logico valor \n            | VARIABLE operador_logico valor\n            | VARIABLE condicion_booleana VARIABLE\n            | valor condicion_booleana valor\n            | VARIABLE condicion_booleana valor\n            | LPAREN VARIABLE operadores valor RPAREN operador_logico valor\n            | LPAREN VARIABLE operadores valor RPAREN condicion_booleana valor\n            | condicion condicion_booleana condicion\n            | condicion condicion_booleana comprobacion\n            \n  bfor : FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_defstc_bloque : stc_bloque SEMI cuerpo\n        | breturn\n        stc_bloque_def : LBRACE stc_bloque RBRACEfor_incr : VARIABLE SUMA SUMA\n          | SUMA SUMA VARIABLE\n          | VARIABLE RESTA RESTA\n          | RESTA RESTA VARIABLE\n          | VARIABLE SUMA EQUALS numero\n          | VARIABLE RESTA EQUALS numero\n  incrementOp : VARIABLE SUMA SUMA SEMI\n              | VARIABLE RESTA RESTA SEMI\n  bforeach :  FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def bwhile : WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE \n  | WHILE LPAREN condicion RPAREN COLON stc_bloque  \n   bdo : DO LBRACE cuerpo RBRACE bwhile \n   bswitch : SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACEbcase : CASE ENTERO COLON\n          | CASE CADENA COLON  innerSwitch :  bcase cuerpo BREAK SEMI\n                 | bcase cuerpo BREAK SEMI innerSwitch \n  btry : TRY LBRACE stc_bloque_def RBRACE catchescatches : catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def\n          | emptyoperadores : SUMA \n                  | RESTA\n                  | MULTIPLICACION\n                  | DIVISION\n                  | MODULO\n  operador_logico :  SMALLER\n                        | GREATER\n                        | IS_SMALLER_OR_EQUAL\n                        | IS_GREATER_OR_EQUAL\n  incrementos_mat :  MINUS_EQUAL\n                        | MOD_EQUAL\n                        | MUL_EQUAL\n                        | PLUS_EQUAL\n                        | DIV_EQUAL\n  condicion_booleana :  AND\n                        | OR\n                        | XOR\n                        | IS_EQUAL\n                        | IS_NOT_EQUAL\n                        | IS_IDENTICAL\n                        | IS_NOT_IDENTICAL\n  operaciones_mat :  valor operadores valor\n                        | valor operadores operaciones_mat\n                        | VARIABLE operadores VARIABLE\n                        | operaciones_mat_par\n                       \n  operaciones_mat_par :  LPAREN valor operadores valor RPAREN\n                          |  LPAREN valor operadores operaciones_mat_par RPAREN\n                          | LPAREN VARIABLE operadores VARIABLE RPAREN\n                          | LPAREN VARIABLE operadores valor RPAREN operadores valor\n  funciones : funcion_nparams\n              | proteccion funcion_nparams\n              | funcion_blank\n              | proteccion funcion_blank\n              | funcion_void\n  param : VARIABLE\n          | asignacion\n          funcion_nparams : FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_defparams_list : params_list COMMA param\n                 | param\n  funcion_void : FUNCTION NOMBRE LPAREN  RPAREN COLON VOID LBRACE empty RBRACE funcion_blank : FUNCTION NOMBRE LPAREN  RPAREN stc_bloque_def\n                    | FUNCTION NOMBRE LPAREN  RPAREN LBRACE empty RBRACE\n  llamada_funcion : NOMBRE LPAREN params_list RPAREN SEMIbrand : RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMIproteccion : PUBLIC\n          | PRIVATE\n          | PROTECTED\n          | STATIC\n  breturn : empty\n        | RETURN SEMI \n        | RETURN NULL SEMI\n        | RETURN VARIABLE SEMI\n        | RETURN BOOLEANO SEMI\n        array_def : ARRAY LPAREN RPAREN\n          | ARRAY LPAREN array_elmnt RPARENarray_elmnt : array_elmnt COMMA valor\n            | valorempty :  bcolas : VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI\n  bpila : VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMIlectura : READLINE LPAREN CADENA RPAREN SEMI\n          | READLINE LPAREN RPAREN SEMIescribir : FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI\n   btrim : TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI\n   comment : COMENTARIOS\n              | DOC_COMENTARIOS\n   bgoto : GOTO NOMBRE SEMIbcortes : EXIT SEMI\n              | BREAK SEMI\n              | DEFAULT SEMI\n              | CONTINUE SEMI\n   otros : SMALLER NOMBRE GREATER\n            | NOMBRE COLON \n   \n    comprobacion : NOMBRE LPAREN valor RPAREN\n                  | NOMBRE LPAREN VARIABLE RPAREN\n  \n  simbolos : LPAREN RPAREN\n            | LPAREN\n            | RPAREN\n            | LBRACKET RBRACKET\n            | LBRACKET\n            | RBRACKET\n            | LBRACE RBRACE\n            | LBRACE\n            | RBRACE instrucciones\n            | OPEN_TAG CLOSE_TAG\n            | OPEN_TAG\n            | CLOSE_TAG\n  \n    instrucciones : condicion_else\n                  | condicion_elseif\n                  | bwhile\n                  | bfor\n  bconcat : CADENA CONCAT CADENA SEMI\n            |  VARIABLE CONCAT VARIABLE SEMI\n            | VARIABLE CONCAT CADENA SEMI\n            | VARIABLE CONCAT_EQUAL CADENA SEMI\n            | CADENA CONCAT_EQUAL CADENA SEMI\n            \n   tiposCast :  STRING\n            | BOOL\n            | BOOLEAN\n            | DOUBLE\n            | FLOAT\n            | ARRAY\n            | OBJECT \n            | INTEGER\n            | INT\n        \n            \n   casting : VARIABLE EQUALS LPAREN tiposCast RPAREN VARIABLE SEMI  \n              | LPAREN tiposCast RPAREN VARIABLE SEMI\n   \n    aumentoCasting : VARIABLE incrementos_mat tipoDato SEMI\n                    | VARIABLE EQUALS VARIABLE operadores tipoDato SEMI\n  '
    
_lr_action_items = {'ECHO':([0,145,151,233,234,347,350,359,386,],[32,32,32,-95,-96,32,32,32,32,]),'PRINT':([0,145,151,233,234,347,350,359,386,],[33,33,33,-95,-96,33,33,33,33,]),'VARIABLE':([0,32,33,40,41,42,43,72,77,78,79,80,96,99,113,116,119,127,129,130,138,145,146,147,151,152,153,171,173,174,175,176,177,178,181,189,196,197,198,199,200,203,212,220,225,233,234,243,250,251,255,256,257,258,262,263,266,267,268,269,270,271,273,274,276,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,297,323,330,331,344,347,350,359,365,370,376,386,394,408,409,415,416,422,423,433,435,],[39,92,92,128,128,-39,-41,167,-146,-147,-148,-149,184,184,192,194,208,-32,128,-33,222,39,128,226,39,222,232,222,247,-102,-103,-104,-105,-106,249,253,-34,-35,-36,-37,-38,184,194,277,222,-95,-96,192,313,314,192,249,-31,-40,-42,313,-194,-195,-196,-209,192,313,-193,-197,-163,222,-116,-117,-118,-119,-120,-121,-122,337,339,-107,-108,-109,-110,313,313,345,368,-162,313,378,39,39,39,-210,313,404,39,313,431,432,-145,-164,313,313,441,-165,]),'VAR':([0,40,41,77,78,79,80,113,129,145,146,151,233,234,243,255,270,347,350,359,386,],[40,40,40,-146,-147,-148,-149,40,40,40,40,40,-95,-96,40,40,40,40,40,40,40,]),'NOMBRE':([0,32,62,70,81,133,134,145,151,162,163,233,234,279,280,281,282,283,284,285,286,306,347,350,359,386,411,],[36,84,156,164,170,213,215,36,36,237,238,-95,-96,336,-116,-117,-118,-119,-120,-121,-122,354,36,36,36,36,433,]),'DEFINE':([0,145,151,233,234,347,350,359,386,],[47,47,47,-95,-96,47,47,47,47,]),'READLINE':([0,116,145,151,212,233,234,347,350,359,386,],[49,49,49,49,49,-95,-96,49,49,49,49,]),'WHILE':([0,52,145,151,233,234,295,347,350,359,386,],[50,50,50,50,-95,-96,50,50,50,50,50,]),'DO':([0,145,151,233,234,347,350,359,386,],[53,53,53,-95,-96,53,53,53,53,]),'FOR':([0,52,145,151,233,234,347,350,359,386,],[54,54,54,54,-95,-96,54,54,54,54,]),'FOREACH':([0,145,151,233,234,347,350,359,386,],[55,55,55,-95,-96,55,55,55,55,]),'TRY':([0,145,151,233,234,347,350,359,386,],[56,56,56,-95,-96,56,56,56,56,]),'ELSE':([0,52,57,145,150,151,233,234,347,350,359,386,412,420,],[58,58,58,58,58,58,-95,-96,58,58,58,58,-62,-61,]),'ELSEIF':([0,52,57,145,151,233,234,347,350,359,386,420,],[59,59,59,59,59,-95,-96,59,59,59,59,-61,]),'SWITCH':([0,145,151,233,234,347,350,359,386,],[60,60,60,-95,-96,60,60,60,60,]),'CASE':([0,145,151,233,234,347,350,351,359,386,442,],[61,61,61,-95,-96,61,61,61,61,61,61,]),'GOTO':([0,145,151,233,234,347,350,359,386,],[62,62,62,-95,-96,62,62,62,62,]),'EXIT':([0,145,151,233,234,347,350,359,386,],[63,63,63,-95,-96,63,63,63,63,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,35,37,38,42,43,44,45,46,51,57,71,73,74,75,76,86,100,103,114,115,127,130,131,132,139,140,141,142,143,144,145,149,150,151,157,158,159,160,165,169,172,180,186,188,196,197,198,199,200,229,233,234,235,239,240,241,242,257,258,262,264,265,266,267,268,269,273,274,276,299,300,301,316,317,318,330,333,343,346,347,348,349,350,356,359,360,365,375,382,386,390,395,396,397,399,400,402,410,412,413,414,415,416,418,420,426,435,443,446,],[64,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-178,-179,-181,-182,-39,-41,-131,-133,-135,-184,-64,-150,-166,-167,-187,-188,-58,-56,-177,-174,-180,-32,-33,-132,-134,-183,-185,-189,-190,-191,-192,64,-65,-66,64,-169,-170,-171,-172,-151,-186,-53,-59,-54,-60,-34,-35,-36,-37,-38,-67,-95,-96,-168,-173,-152,-153,-154,-31,-40,-42,-88,-89,-194,-195,-196,-209,-193,-197,-163,-80,-159,-63,-55,-208,-144,-162,-159,-93,-81,64,-99,-101,64,-142,64,-57,-210,-92,-79,64,-138,-160,-161,-207,-43,-44,-91,-90,-62,-94,434,-145,-164,-143,-61,-78,-165,-141,-100,]),'DEFAULT':([0,145,151,233,234,347,350,359,386,],[65,65,65,-95,-96,65,65,65,65,]),'CONTINUE':([0,145,151,233,234,347,350,359,386,],[66,66,66,-95,-96,66,66,66,66,]),'RAND':([0,116,145,151,212,233,234,347,350,359,386,],[67,67,67,67,67,-95,-96,67,67,67,67,]),'FWRITE':([0,116,145,151,212,233,234,347,350,359,386,],[68,68,68,68,68,-95,-96,68,68,68,68,]),'TRIM':([0,116,145,151,212,233,234,347,350,359,386,],[69,69,69,69,69,-95,-96,69,69,69,69,]),'SMALLER':([0,85,88,89,90,94,95,97,145,151,185,222,223,233,234,347,350,359,386,395,396,401,],[70,-51,-45,-46,-47,-48,-50,-52,70,70,-49,289,289,-95,-96,70,70,70,70,-160,-161,289,]),'RETURN':([0,145,151,227,233,234,332,333,347,350,357,359,386,],[72,72,72,72,-95,-96,72,72,72,72,72,72,72,]),'COMENTARIOS':([0,145,151,233,234,347,350,359,386,],[73,73,73,-95,-96,73,73,73,73,]),'DOC_COMENTARIOS':([0,145,151,233,234,347,350,359,386,],[74,74,74,-95,-96,74,74,74,74,]),'LPAREN':([0,32,33,36,42,43,47,49,50,54,55,59,60,67,68,69,82,116,127,130,138,145,151,152,170,171,173,174,175,176,177,178,196,197,198,199,200,205,212,213,225,233,234,238,250,257,258,259,260,262,266,267,268,269,273,274,276,279,280,281,282,283,284,285,286,330,336,347,350,359,365,383,386,415,416,435,],[34,96,99,113,-39,-41,134,137,138,146,147,152,153,161,162,163,171,203,-32,-33,220,34,34,220,243,220,96,-102,-103,-104,-105,-106,-34,-35,-36,-37,-38,263,96,270,220,-95,-96,306,96,-31,-40,321,322,-42,-194,-195,-196,-209,-193,-197,-163,220,-116,-117,-118,-119,-120,-121,-122,-162,376,34,34,34,-210,411,34,-145,-164,-165,]),'CADENA':([0,32,33,42,43,61,96,99,116,119,120,121,122,123,124,125,126,127,130,134,135,136,137,138,145,151,152,171,173,174,175,176,177,178,196,197,198,199,200,203,212,225,233,234,250,251,256,257,258,262,263,266,267,268,269,271,273,274,276,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,305,330,331,347,350,359,365,370,376,386,394,415,416,422,423,435,],[48,91,91,-39,-41,155,185,185,91,209,210,185,-111,-112,-113,-114,-115,-32,-33,214,216,217,218,185,48,48,185,185,185,-102,-103,-104,-105,-106,-34,-35,-36,-37,-38,185,91,185,-95,-96,185,185,185,-31,-40,-42,185,-194,-195,-196,-209,185,-193,-197,-163,185,-116,-117,-118,-119,-120,-121,-122,185,185,-107,-108,-109,-110,185,185,353,-162,185,48,48,48,-210,185,185,48,185,-145,-164,185,185,-165,]),'RPAREN':([0,34,42,43,85,88,89,90,94,95,97,102,104,105,106,107,108,109,110,111,112,127,130,137,145,151,185,187,190,191,192,193,196,197,198,199,200,218,221,231,232,233,234,243,244,257,258,261,262,263,266,267,268,269,270,273,274,276,307,311,312,314,315,319,321,322,325,326,328,329,330,334,335,337,338,339,340,341,342,345,347,350,352,353,354,359,361,362,363,365,373,377,386,389,395,396,398,403,404,415,416,421,424,425,427,429,431,432,435,437,438,439,440,441,],[35,103,-39,-41,-51,-45,-46,-47,-48,-50,-52,189,-198,-199,-200,-201,-202,-203,-204,-205,-206,-32,-33,219,35,35,-49,252,254,-140,-136,-137,-34,-35,-36,-37,-38,275,278,302,303,-95,-96,308,309,-31,-40,323,-42,324,-194,-195,-196,-209,327,-193,-197,-163,355,361,362,363,364,-139,366,367,369,-158,371,372,-162,-76,-77,-68,-70,-71,-73,-69,-72,381,35,35,387,388,389,35,-127,-128,-129,-210,401,405,35,417,-160,-161,-157,424,425,-145,-164,-130,-175,-176,-82,-84,-83,-85,-165,-74,-75,-86,-87,444,]),'LBRACKET':([0,84,145,151,233,234,347,350,359,386,],[37,179,37,37,-95,-96,37,37,37,37,]),'RBRACKET':([0,37,145,151,233,234,248,347,350,359,386,],[38,115,38,38,-95,-96,310,38,38,38,38,]),'LBRACE':([0,53,56,58,145,148,151,233,234,278,302,303,308,309,327,347,350,355,359,381,386,392,405,444,],[51,145,148,151,51,227,51,-95,-96,332,350,351,357,359,357,51,51,227,51,227,51,419,227,227,]),'RBRACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,35,37,38,42,43,44,45,46,51,57,71,73,74,75,76,86,100,103,114,115,127,130,131,132,139,140,141,142,143,144,145,149,150,151,157,158,159,160,165,169,172,180,186,188,196,197,198,199,200,224,227,228,229,230,233,234,235,239,240,241,242,257,258,262,264,265,266,267,268,269,273,274,276,298,299,300,301,316,317,318,330,332,333,343,346,347,348,349,350,356,357,359,360,365,374,375,382,384,385,386,390,391,393,395,396,397,399,400,402,410,412,413,415,416,418,419,420,426,435,436,442,443,445,446,],[52,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-178,-179,-181,-182,-39,-41,-131,-133,-135,139,-64,-150,-166,-167,-187,-188,-58,-56,-177,-174,-180,-32,-33,-132,-134,-183,-185,-189,-190,-191,-192,52,-65,-66,52,-169,-170,-171,-172,-151,-186,-53,-59,-54,-60,-34,-35,-36,-37,-38,295,-159,300,-67,301,-95,-96,-168,-173,-152,-153,-154,-31,-40,-42,-88,-89,-194,-195,-196,-209,-193,-197,-163,346,-80,-159,-63,-55,-208,-144,-162,-159,-159,-93,-81,52,-99,-101,52,-142,-159,52,-57,-210,402,-92,-79,412,413,52,-138,418,420,-160,-161,-207,-43,-44,-91,-90,-62,-94,-145,-164,-143,-159,-61,-78,-165,443,-97,-141,-98,-100,]),'OPEN_TAG':([0,145,151,233,234,347,350,359,386,],[75,75,75,-95,-96,75,75,75,75,]),'CLOSE_TAG':([0,75,145,151,233,234,347,350,359,386,],[76,169,76,76,-95,-96,76,76,76,76,]),'PUBLIC':([0,40,41,77,78,79,80,113,129,145,146,151,233,234,243,255,270,347,350,359,386,],[77,77,77,-146,-147,-148,-149,77,77,77,77,77,-95,-96,77,77,77,77,77,77,77,]),'PRIVATE':([0,40,41,77,78,79,80,113,129,145,146,151,233,234,243,255,270,347,350,359,386,],[78,78,78,-146,-147,-148,-149,78,78,78,78,78,-95,-96,78,78,78,78,78,78,78,]),'PROTECTED':([0,40,41,77,78,79,80,113,129,145,146,151,233,234,243,255,270,347,350,359,386,],[79,79,79,-146,-147,-148,-149,79,79,79,79,79,-95,-96,79,79,79,79,79,79,79,]),'STATIC':([0,40,41,77,78,79,80,113,129,145,146,151,233,234,243,255,270,347,350,359,386,],[80,80,80,-146,-147,-148,-149,80,80,80,80,80,-95,-96,80,80,80,80,80,80,80,]),'FUNCTION':([0,41,77,78,79,80,145,151,233,234,347,350,359,386,],[81,133,-146,-147,-148,-149,81,81,-95,-96,81,81,81,81,]),'IF':([0,145,151,233,234,347,350,359,386,],[82,82,82,-95,-96,82,82,82,82,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,35,37,38,42,43,44,45,46,51,57,71,73,74,75,76,86,100,103,114,115,127,130,131,132,139,140,141,142,143,144,149,150,157,158,159,160,165,169,172,180,186,188,196,197,198,199,200,229,233,234,235,239,240,241,242,257,258,262,264,265,266,267,268,269,273,274,276,299,300,301,316,317,318,330,333,343,346,347,348,349,356,360,365,375,382,390,395,396,397,399,400,402,410,412,413,415,416,418,420,426,435,443,446,],[-159,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-178,-179,-181,-182,-39,-41,-131,-133,-135,-184,-64,-150,-166,-167,-187,-188,-58,-56,-177,-174,-180,-32,-33,-132,-134,-183,-185,-189,-190,-191,-192,-65,-66,-169,-170,-171,-172,-151,-186,-53,-59,-54,-60,-34,-35,-36,-37,-38,-67,-95,-96,-168,-173,-152,-153,-154,-31,-40,-42,-88,-89,-194,-195,-196,-209,-193,-197,-163,-80,-159,-63,-55,-208,-144,-162,-159,-93,-81,-159,-99,-101,-142,-57,-210,-92,-79,-138,-160,-161,-207,-43,-44,-91,-90,-62,-94,-145,-164,-143,-61,-78,-165,-141,-100,]),'SEMI':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,35,37,38,42,43,44,45,46,51,57,63,64,65,66,71,72,73,74,75,76,83,85,86,87,88,89,90,91,93,94,95,97,98,100,101,103,114,115,127,130,131,132,139,140,141,142,143,144,149,150,156,157,158,159,160,165,166,167,168,169,172,180,185,186,188,195,196,197,198,199,200,201,204,206,207,208,209,210,211,216,217,219,227,229,233,234,235,239,240,241,242,245,246,249,252,253,254,257,258,262,264,265,266,267,268,269,273,274,275,276,296,298,299,300,301,310,316,317,318,320,324,330,332,333,334,335,337,338,339,340,341,342,343,346,347,348,349,356,357,360,361,362,363,365,366,367,368,369,371,372,374,375,382,387,388,390,391,395,396,397,399,400,402,410,412,413,415,416,417,418,420,421,424,425,426,434,435,437,438,443,446,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-178,-179,-181,-182,-39,-41,-131,-133,-135,-184,-64,157,158,159,160,-150,165,-166,-167,-187,-188,172,-51,-58,180,-45,-46,-47,-49,-126,-48,-50,-52,186,-56,188,-177,-174,-180,-32,-33,-132,-134,-183,-185,-189,-190,-191,-192,-65,-66,235,-169,-170,-171,-172,-151,240,241,242,-186,-53,-59,-49,-54,-60,257,-34,-35,-36,-37,-38,258,262,264,265,266,267,268,269,273,274,276,-159,-67,-95,-96,-168,-173,-152,-153,-154,-123,-124,-125,316,317,318,-31,-40,-42,-88,-89,-194,-195,-196,-209,-193,-197,330,-163,344,347,-80,-159,-63,360,-55,-208,-144,365,-155,-162,-159,-159,-76,-77,-68,-70,-71,-73,-69,-72,-93,-81,-159,-99,-101,-142,-159,-57,-127,-128,-129,-210,395,396,397,-156,399,400,347,347,-79,415,416,-138,-150,-160,-161,-207,-43,-44,-91,-90,-62,-94,-145,-164,435,-143,-61,-130,-175,-176,-78,442,-165,-74,-75,-141,-100,]),'BOOLEANO':([32,33,42,43,72,96,99,116,121,122,123,124,125,126,127,130,138,152,171,173,174,175,176,177,178,196,197,198,199,200,203,212,225,250,251,256,257,258,262,263,266,267,268,269,271,273,274,276,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,330,331,365,370,376,394,415,416,422,423,435,],[95,95,-39,-41,168,95,95,95,95,-111,-112,-113,-114,-115,-32,-33,95,95,95,95,-102,-103,-104,-105,-106,-34,-35,-36,-37,-38,95,95,95,95,95,95,-31,-40,-42,95,-194,-195,-196,-209,95,-193,-197,-163,95,-116,-117,-118,-119,-120,-121,-122,95,95,-107,-108,-109,-110,95,95,-162,95,-210,95,95,95,-145,-164,95,95,-165,]),'ENTERO':([32,33,42,43,61,96,99,116,121,122,123,124,125,126,127,130,138,152,161,171,173,174,175,176,177,178,179,196,197,198,199,200,203,212,225,250,251,256,257,258,262,263,266,267,268,269,271,273,274,276,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,304,330,331,365,370,376,394,415,416,422,423,428,430,435,],[85,85,-39,-41,154,85,85,85,85,-111,-112,-113,-114,-115,-32,-33,85,85,236,85,85,-102,-103,-104,-105,-106,248,-34,-35,-36,-37,-38,85,85,85,85,85,85,-31,-40,-42,85,-194,-195,-196,-209,85,-193,-197,-163,85,-116,-117,-118,-119,-120,-121,-122,85,85,-107,-108,-109,-110,85,85,352,-162,85,-210,85,85,85,-145,-164,85,85,85,85,-165,]),'DECIMAL':([32,33,42,43,96,99,116,121,122,123,124,125,126,127,130,138,152,171,173,174,175,176,177,178,196,197,198,199,200,203,212,225,250,251,256,257,258,262,263,266,267,268,269,271,273,274,276,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,330,331,365,370,376,394,415,416,422,423,428,430,435,],[97,97,-39,-41,97,97,97,97,-111,-112,-113,-114,-115,-32,-33,97,97,97,97,-102,-103,-104,-105,-106,-34,-35,-36,-37,-38,97,97,97,97,97,97,-31,-40,-42,97,-194,-195,-196,-209,97,-193,-197,-163,97,-116,-117,-118,-119,-120,-121,-122,97,97,-107,-108,-109,-110,97,97,-162,97,-210,97,97,97,-145,-164,97,97,97,97,-165,]),'STRING':([34,203,],[104,104,]),'BOOL':([34,203,],[105,105,]),'BOOLEAN':([34,203,],[106,106,]),'DOUBLE':([34,203,],[107,107,]),'FLOAT':([34,203,],[108,108,]),'ARRAY':([34,116,203,212,272,],[109,205,109,205,329,]),'OBJECT':([34,203,],[110,110,]),'INTEGER':([34,203,],[111,111,]),'INT':([34,203,],[112,112,]),'COLON':([36,154,155,278,308,],[114,233,234,333,358,]),'EQUALS':([39,92,128,184,192,194,222,247,313,314,337,339,404,406,407,],[116,182,212,182,212,182,182,182,182,182,182,182,182,428,430,]),'SUMA':([39,83,85,88,89,90,91,92,94,95,97,98,117,183,184,185,187,194,195,245,247,277,344,364,378,379,395,396,406,],[117,174,-51,-45,-46,-47,-49,174,-48,-50,-52,174,206,174,174,-49,174,174,174,174,174,174,379,174,406,408,-160,-161,427,]),'RESTA':([39,83,85,88,89,90,91,92,94,95,97,98,118,183,184,185,187,194,195,245,247,277,344,364,378,380,395,396,407,],[118,175,-51,-45,-46,-47,-49,175,-48,-50,-52,175,207,175,175,-49,175,175,175,175,175,175,380,175,407,409,-160,-161,429,]),'CONCAT':([39,48,91,92,194,],[119,135,135,119,119,]),'CONCAT_EQUAL':([39,48,91,92,194,],[120,136,136,120,120,]),'MINUS_EQUAL':([39,128,192,],[122,122,122,]),'MOD_EQUAL':([39,128,192,],[123,123,123,]),'MUL_EQUAL':([39,128,192,],[124,124,124,]),'PLUS_EQUAL':([39,128,192,],[125,125,125,]),'DIV_EQUAL':([39,128,192,],[126,126,126,]),'COMMA':([42,43,85,88,89,90,94,95,97,127,130,185,190,191,192,193,196,197,198,199,200,214,215,236,237,257,258,262,266,267,268,269,273,274,276,307,319,325,326,330,365,395,396,398,415,416,435,],[-39,-41,-51,-45,-46,-47,-48,-50,-52,-32,-33,-49,255,-140,-136,-137,-34,-35,-36,-37,-38,271,272,304,305,-31,-40,-42,-194,-195,-196,-209,-193,-197,-163,255,-139,370,-158,-162,-210,-160,-161,-157,-145,-164,-165,]),'NULL':([72,],[166,]),'MULTIPLICACION':([83,85,88,89,90,91,92,94,95,97,98,183,184,185,187,194,195,245,247,277,364,395,396,],[176,-51,-45,-46,-47,-49,176,-48,-50,-52,176,176,176,-49,176,176,176,176,176,176,176,-160,-161,]),'DIVISION':([83,85,88,89,90,91,92,94,95,97,98,183,184,185,187,194,195,245,247,277,364,395,396,],[177,-51,-45,-46,-47,-49,177,-48,-50,-52,177,177,177,-49,177,177,177,177,177,177,177,-160,-161,]),'MODULO':([83,85,88,89,90,91,92,94,95,97,98,183,184,185,187,194,195,245,247,277,364,395,396,],[178,-51,-45,-46,-47,-49,178,-48,-50,-52,178,178,178,-49,178,178,178,178,178,178,178,-160,-161,]),'GREATER':([85,88,89,90,94,95,97,164,185,222,223,395,396,401,],[-51,-45,-46,-47,-48,-50,-52,239,-49,290,290,-160,-161,290,]),'IS_SMALLER_OR_EQUAL':([85,88,89,90,94,95,97,185,222,223,395,396,401,],[-51,-45,-46,-47,-48,-50,-52,-49,291,291,-160,-161,291,]),'IS_GREATER_OR_EQUAL':([85,88,89,90,94,95,97,185,222,223,395,396,401,],[-51,-45,-46,-47,-48,-50,-52,-49,292,292,-160,-161,292,]),'AND':([85,88,89,90,94,95,97,185,221,222,223,231,244,296,334,335,337,338,339,340,341,342,395,396,401,424,425,437,438,],[-51,-45,-46,-47,-48,-50,-52,-49,280,280,280,280,280,280,280,-77,-68,-70,-71,-73,-69,-72,-160,-161,280,-175,-176,-74,-75,]),'OR':([85,88,89,90,94,95,97,185,221,222,223,231,244,296,334,335,337,338,339,340,341,342,395,396,401,424,425,437,438,],[-51,-45,-46,-47,-48,-50,-52,-49,281,281,281,281,281,281,281,-77,-68,-70,-71,-73,-69,-72,-160,-161,281,-175,-176,-74,-75,]),'XOR':([85,88,89,90,94,95,97,185,221,222,223,231,244,296,334,335,337,338,339,340,341,342,395,396,401,424,425,437,438,],[-51,-45,-46,-47,-48,-50,-52,-49,282,282,282,282,282,282,282,-77,-68,-70,-71,-73,-69,-72,-160,-161,282,-175,-176,-74,-75,]),'IS_EQUAL':([85,88,89,90,94,95,97,185,221,222,223,231,244,296,334,335,337,338,339,340,341,342,395,396,401,424,425,437,438,],[-51,-45,-46,-47,-48,-50,-52,-49,283,283,283,283,283,283,283,-77,-68,-70,-71,-73,-69,-72,-160,-161,283,-175,-176,-74,-75,]),'IS_NOT_EQUAL':([85,88,89,90,94,95,97,185,221,222,223,231,244,296,334,335,337,338,339,340,341,342,395,396,401,424,425,437,438,],[-51,-45,-46,-47,-48,-50,-52,-49,284,284,284,284,284,284,284,-77,-68,-70,-71,-73,-69,-72,-160,-161,284,-175,-176,-74,-75,]),'IS_IDENTICAL':([85,88,89,90,94,95,97,185,221,222,223,231,244,296,334,335,337,338,339,340,341,342,395,396,401,424,425,437,438,],[-51,-45,-46,-47,-48,-50,-52,-49,285,285,285,285,285,285,285,-77,-68,-70,-71,-73,-69,-72,-160,-161,285,-175,-176,-74,-75,]),'IS_NOT_IDENTICAL':([85,88,89,90,94,95,97,185,221,222,223,231,244,296,334,335,337,338,339,340,341,342,395,396,401,424,425,437,438,],[-51,-45,-46,-47,-48,-50,-52,-49,286,286,286,286,286,286,286,-77,-68,-70,-71,-73,-69,-72,-160,-161,286,-175,-176,-74,-75,]),'NEW':([116,182,],[202,202,]),'SPLQUEUE':([202,],[259,]),'SPLSTACK':([202,],[260,]),'AS':([226,],[297,]),'CATCH':([300,346,348,349,446,],[-159,-81,383,-101,-100,]),'VOID':([358,],[392,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,145,151,347,350,359,386,],[1,224,230,382,384,393,414,]),'imprimir':([0,145,151,347,350,359,386,],[2,2,2,2,2,2,2,]),'asignacion':([0,40,41,113,129,145,146,151,243,255,270,347,350,359,386,],[3,127,130,193,130,3,225,3,193,193,193,3,3,3,3,]),'funciones':([0,145,151,347,350,359,386,],[4,4,4,4,4,4,4,]),'llamada_funcion':([0,145,151,347,350,359,386,],[5,5,5,5,5,5,5,]),'constante':([0,145,151,347,350,359,386,],[6,6,6,6,6,6,6,]),'lectura':([0,116,145,151,212,347,350,359,386,],[7,199,7,7,199,7,7,7,7,]),'bwhile':([0,52,145,151,295,347,350,359,386,],[8,143,8,8,343,8,8,8,8,]),'bdo':([0,145,151,347,350,359,386,],[9,9,9,9,9,9,9,]),'bfor':([0,52,145,151,347,350,359,386,],[10,144,10,10,10,10,10,10,]),'incrementOp':([0,145,151,347,350,359,386,],[11,11,11,11,11,11,11,]),'bforeach':([0,145,151,347,350,359,386,],[12,12,12,12,12,12,12,]),'btry':([0,145,151,347,350,359,386,],[13,13,13,13,13,13,13,]),'condicion_ifelse':([0,145,151,347,350,359,386,],[14,14,14,14,14,14,14,]),'condicion_else':([0,52,57,145,150,151,347,350,359,386,],[15,141,149,15,229,15,15,15,15,15,]),'condicion_elseif':([0,52,57,145,151,347,350,359,386,],[16,142,150,16,16,16,16,16,16,]),'bswitch':([0,145,151,347,350,359,386,],[17,17,17,17,17,17,17,]),'bcase':([0,145,151,347,350,351,359,386,442,],[18,18,18,18,18,386,18,18,386,]),'bgoto':([0,145,151,347,350,359,386,],[19,19,19,19,19,19,19,]),'bcolas':([0,32,33,96,99,116,138,145,151,152,171,173,203,212,225,250,251,263,271,279,287,288,293,294,331,347,350,359,370,376,386,394,422,423,],[20,89,89,89,89,89,89,20,20,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,20,20,20,89,89,20,89,89,89,]),'bpila':([0,32,33,96,99,116,138,145,151,152,171,173,203,212,225,250,251,263,271,279,287,288,293,294,331,347,350,359,370,376,386,394,422,423,],[21,90,90,90,90,90,90,21,21,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,21,21,21,90,90,21,90,90,90,]),'bcortes':([0,145,151,347,350,359,386,],[22,22,22,22,22,22,22,]),'brand':([0,116,145,151,212,347,350,359,386,],[23,196,23,23,196,23,23,23,23,]),'escribir':([0,116,145,151,212,347,350,359,386,],[24,197,24,24,197,24,24,24,24,]),'btrim':([0,116,145,151,212,347,350,359,386,],[25,198,25,25,198,25,25,25,25,]),'otros':([0,145,151,347,350,359,386,],[26,26,26,26,26,26,26,]),'breturn':([0,145,151,227,332,333,347,350,357,359,386,],[27,27,27,299,299,299,27,27,299,27,27,]),'comment':([0,145,151,347,350,359,386,],[28,28,28,28,28,28,28,]),'casting':([0,145,151,347,350,359,386,],[29,29,29,29,29,29,29,]),'bconcat':([0,32,33,116,145,151,212,347,350,359,386,],[30,86,100,200,30,30,200,30,30,30,30,]),'simbolos':([0,145,151,347,350,359,386,],[31,31,31,31,31,31,31,]),'proteccion':([0,40,41,113,129,145,146,151,243,255,270,347,350,359,386,],[41,129,129,129,129,41,129,41,129,129,129,41,41,41,41,]),'asignacion_array':([0,40,41,113,129,145,146,151,243,255,270,347,350,359,386,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'aumentoCasting':([0,40,41,113,129,145,146,151,243,255,270,347,350,359,386,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'funcion_nparams':([0,41,145,151,347,350,359,386,],[44,131,44,44,44,44,44,44,]),'funcion_blank':([0,41,145,151,347,350,359,386,],[45,132,45,45,45,45,45,45,]),'funcion_void':([0,145,151,347,350,359,386,],[46,46,46,46,46,46,46,]),'condicion_if':([0,145,151,347,350,359,386,],[57,57,57,57,57,57,57,]),'empty':([0,145,151,227,300,332,333,347,350,357,359,386,419,],[71,71,71,71,349,71,71,71,71,391,71,71,436,]),'valor':([32,33,96,99,116,138,152,171,173,203,212,225,250,251,263,271,279,287,288,293,294,331,370,376,394,422,423,],[83,98,183,187,195,223,223,223,245,183,195,223,311,315,326,328,223,338,340,341,342,373,398,403,421,437,438,]),'operaciones_mat':([32,33,116,173,212,],[87,101,201,246,201,]),'tipoDato':([32,33,96,99,116,121,138,152,171,173,203,212,225,250,251,256,263,271,279,287,288,293,294,331,370,376,394,422,423,],[88,88,88,88,88,211,88,88,88,88,88,88,88,88,88,320,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'operaciones_mat_par':([32,33,116,173,212,250,],[93,93,93,93,93,312,]),'numero':([32,33,96,99,116,121,138,152,171,173,203,212,225,250,251,256,263,271,279,287,288,293,294,331,370,376,394,422,423,428,430,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,439,440,]),'tiposCast':([34,203,],[102,261,]),'incrementos_mat':([39,128,192,],[121,121,121,]),'instrucciones':([52,],[140,]),'operadores':([83,92,98,183,184,187,194,195,245,247,277,364,],[173,181,173,250,251,250,256,173,173,181,331,394,]),'params_list':([113,243,270,],[190,307,307,]),'param':([113,243,255,270,],[191,191,319,191,]),'array_def':([116,212,],[204,204,]),'condicion':([138,152,171,225,279,],[221,231,244,296,334,]),'stc_bloque_def':([148,308,327,355,381,405,444,],[228,356,356,390,410,426,446,]),'condicion_booleana':([221,222,223,231,244,296,334,401,],[279,288,294,279,279,279,279,423,]),'operador_logico':([222,223,401,],[287,293,422,]),'stc_bloque':([227,332,333,357,],[298,374,375,298,]),'array_elmnt':([263,],[325,]),'comprobacion':([279,],[335,]),'catches':([300,],[348,]),'for_incr':([344,],[377,]),'innerSwitch':([351,442,],[385,445,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> imprimir','cuerpo',1,'p_cuerpo','sintactico2.py',10),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','sintactico2.py',11),
  ('cuerpo -> funciones','cuerpo',1,'p_cuerpo','sintactico2.py',12),
  ('cuerpo -> llamada_funcion','cuerpo',1,'p_cuerpo','sintactico2.py',13),
  ('cuerpo -> constante','cuerpo',1,'p_cuerpo','sintactico2.py',14),
  ('cuerpo -> lectura','cuerpo',1,'p_cuerpo','sintactico2.py',15),
  ('cuerpo -> bwhile','cuerpo',1,'p_cuerpo','sintactico2.py',16),
  ('cuerpo -> bdo','cuerpo',1,'p_cuerpo','sintactico2.py',17),
  ('cuerpo -> bfor','cuerpo',1,'p_cuerpo','sintactico2.py',18),
  ('cuerpo -> incrementOp','cuerpo',1,'p_cuerpo','sintactico2.py',19),
  ('cuerpo -> bforeach','cuerpo',1,'p_cuerpo','sintactico2.py',20),
  ('cuerpo -> btry','cuerpo',1,'p_cuerpo','sintactico2.py',21),
  ('cuerpo -> condicion_ifelse','cuerpo',1,'p_cuerpo','sintactico2.py',22),
  ('cuerpo -> condicion_else','cuerpo',1,'p_cuerpo','sintactico2.py',23),
  ('cuerpo -> condicion_elseif','cuerpo',1,'p_cuerpo','sintactico2.py',24),
  ('cuerpo -> bswitch','cuerpo',1,'p_cuerpo','sintactico2.py',25),
  ('cuerpo -> bcase','cuerpo',1,'p_cuerpo','sintactico2.py',26),
  ('cuerpo -> bgoto','cuerpo',1,'p_cuerpo','sintactico2.py',27),
  ('cuerpo -> bcolas','cuerpo',1,'p_cuerpo','sintactico2.py',28),
  ('cuerpo -> bpila','cuerpo',1,'p_cuerpo','sintactico2.py',29),
  ('cuerpo -> bcortes','cuerpo',1,'p_cuerpo','sintactico2.py',30),
  ('cuerpo -> brand','cuerpo',1,'p_cuerpo','sintactico2.py',31),
  ('cuerpo -> escribir','cuerpo',1,'p_cuerpo','sintactico2.py',32),
  ('cuerpo -> btrim','cuerpo',1,'p_cuerpo','sintactico2.py',33),
  ('cuerpo -> otros','cuerpo',1,'p_cuerpo','sintactico2.py',34),
  ('cuerpo -> breturn','cuerpo',1,'p_cuerpo','sintactico2.py',35),
  ('cuerpo -> comment','cuerpo',1,'p_cuerpo','sintactico2.py',36),
  ('cuerpo -> casting','cuerpo',1,'p_cuerpo','sintactico2.py',37),
  ('cuerpo -> bconcat','cuerpo',1,'p_cuerpo','sintactico2.py',38),
  ('cuerpo -> simbolos','cuerpo',1,'p_cuerpo','sintactico2.py',39),
  ('asignacion -> VARIABLE EQUALS valor SEMI','asignacion',4,'p_asignacion','sintactico2.py',45),
  ('asignacion -> VAR asignacion','asignacion',2,'p_asignacion','sintactico2.py',46),
  ('asignacion -> proteccion asignacion','asignacion',2,'p_asignacion','sintactico2.py',47),
  ('asignacion -> VARIABLE EQUALS brand','asignacion',3,'p_asignacion','sintactico2.py',48),
  ('asignacion -> VARIABLE EQUALS escribir','asignacion',3,'p_asignacion','sintactico2.py',49),
  ('asignacion -> VARIABLE EQUALS btrim','asignacion',3,'p_asignacion','sintactico2.py',50),
  ('asignacion -> VARIABLE EQUALS lectura','asignacion',3,'p_asignacion','sintactico2.py',51),
  ('asignacion -> VARIABLE EQUALS bconcat','asignacion',3,'p_asignacion','sintactico2.py',52),
  ('asignacion -> asignacion_array','asignacion',1,'p_asignacion','sintactico2.py',53),
  ('asignacion -> VARIABLE EQUALS operaciones_mat SEMI','asignacion',4,'p_asignacion','sintactico2.py',54),
  ('asignacion -> aumentoCasting','asignacion',1,'p_asignacion','sintactico2.py',55),
  ('asignacion_array -> VARIABLE EQUALS array_def SEMI','asignacion_array',4,'p_asignacion_array','sintactico2.py',61),
  ('constante -> DEFINE LPAREN CADENA COMMA valor RPAREN SEMI','constante',7,'p_constante','sintactico2.py',65),
  ('constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI','constante',7,'p_constante','sintactico2.py',66),
  ('valor -> tipoDato','valor',1,'p_valor','sintactico2.py',71),
  ('valor -> bcolas','valor',1,'p_valor','sintactico2.py',72),
  ('valor -> bpila','valor',1,'p_valor','sintactico2.py',73),
  ('tipoDato -> numero','tipoDato',1,'p_tipoDato','sintactico2.py',79),
  ('tipoDato -> CADENA','tipoDato',1,'p_tipoDato','sintactico2.py',80),
  ('tipoDato -> BOOLEANO','tipoDato',1,'p_tipoDato','sintactico2.py',81),
  ('numero -> ENTERO','numero',1,'p_numero','sintactico2.py',86),
  ('numero -> DECIMAL','numero',1,'p_numero','sintactico2.py',87),
  ('imprimir -> ECHO valor SEMI','imprimir',3,'p_imprimir','sintactico2.py',93),
  ('imprimir -> PRINT valor SEMI','imprimir',3,'p_imprimir','sintactico2.py',94),
  ('imprimir -> PRINT LPAREN valor RPAREN SEMI','imprimir',5,'p_imprimir','sintactico2.py',95),
  ('imprimir -> PRINT bconcat','imprimir',2,'p_imprimir','sintactico2.py',96),
  ('imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI','imprimir',6,'p_imprimir','sintactico2.py',97),
  ('imprimir -> ECHO bconcat','imprimir',2,'p_imprimir','sintactico2.py',98),
  ('imprimir -> ECHO operaciones_mat SEMI','imprimir',3,'p_imprimir','sintactico2.py',99),
  ('imprimir -> PRINT operaciones_mat SEMI','imprimir',3,'p_imprimir','sintactico2.py',100),
  ('condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_if',7,'p_condicion_if','sintactico2.py',107),
  ('condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_elseif',7,'p_condicion_elseif','sintactico2.py',112),
  ('condicion_else -> ELSE LBRACE cuerpo RBRACE','condicion_else',4,'p_condicion_else','sintactico2.py',117),
  ('condicion_ifelse -> condicion_if','condicion_ifelse',1,'p_condicion_ifelse','sintactico2.py',122),
  ('condicion_ifelse -> condicion_if condicion_else','condicion_ifelse',2,'p_condicion_ifelse','sintactico2.py',123),
  ('condicion_ifelse -> condicion_if condicion_elseif','condicion_ifelse',2,'p_condicion_ifelse','sintactico2.py',124),
  ('condicion_ifelse -> condicion_if condicion_elseif condicion_else','condicion_ifelse',3,'p_condicion_ifelse','sintactico2.py',125),
  ('condicion -> VARIABLE operador_logico VARIABLE','condicion',3,'p_condicion','sintactico2.py',130),
  ('condicion -> valor operador_logico valor','condicion',3,'p_condicion','sintactico2.py',131),
  ('condicion -> VARIABLE operador_logico valor','condicion',3,'p_condicion','sintactico2.py',132),
  ('condicion -> VARIABLE condicion_booleana VARIABLE','condicion',3,'p_condicion','sintactico2.py',133),
  ('condicion -> valor condicion_booleana valor','condicion',3,'p_condicion','sintactico2.py',134),
  ('condicion -> VARIABLE condicion_booleana valor','condicion',3,'p_condicion','sintactico2.py',135),
  ('condicion -> LPAREN VARIABLE operadores valor RPAREN operador_logico valor','condicion',7,'p_condicion','sintactico2.py',136),
  ('condicion -> LPAREN VARIABLE operadores valor RPAREN condicion_booleana valor','condicion',7,'p_condicion','sintactico2.py',137),
  ('condicion -> condicion condicion_booleana condicion','condicion',3,'p_condicion','sintactico2.py',138),
  ('condicion -> condicion condicion_booleana comprobacion','condicion',3,'p_condicion','sintactico2.py',139),
  ('bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def','bfor',8,'p_bfor','sintactico2.py',145),
  ('stc_bloque -> stc_bloque SEMI cuerpo','stc_bloque',3,'p_stc_bloque','sintactico2.py',149),
  ('stc_bloque -> breturn','stc_bloque',1,'p_stc_bloque','sintactico2.py',150),
  ('stc_bloque_def -> LBRACE stc_bloque RBRACE','stc_bloque_def',3,'p_stc_bloque_def','sintactico2.py',155),
  ('for_incr -> VARIABLE SUMA SUMA','for_incr',3,'p_for_incr','sintactico2.py',159),
  ('for_incr -> SUMA SUMA VARIABLE','for_incr',3,'p_for_incr','sintactico2.py',160),
  ('for_incr -> VARIABLE RESTA RESTA','for_incr',3,'p_for_incr','sintactico2.py',161),
  ('for_incr -> RESTA RESTA VARIABLE','for_incr',3,'p_for_incr','sintactico2.py',162),
  ('for_incr -> VARIABLE SUMA EQUALS numero','for_incr',4,'p_for_incr','sintactico2.py',163),
  ('for_incr -> VARIABLE RESTA EQUALS numero','for_incr',4,'p_for_incr','sintactico2.py',164),
  ('incrementOp -> VARIABLE SUMA SUMA SEMI','incrementOp',4,'p_incrementOp','sintactico2.py',168),
  ('incrementOp -> VARIABLE RESTA RESTA SEMI','incrementOp',4,'p_incrementOp','sintactico2.py',169),
  ('bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def','bforeach',7,'p_bforeach','sintactico2.py',173),
  ('bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE','bwhile',7,'p_bwhile','sintactico2.py',178),
  ('bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque','bwhile',6,'p_bwhile','sintactico2.py',179),
  ('bdo -> DO LBRACE cuerpo RBRACE bwhile','bdo',5,'p_bdo','sintactico2.py',184),
  ('bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE','bswitch',7,'p_bswitch','sintactico2.py',190),
  ('bcase -> CASE ENTERO COLON','bcase',3,'p_bcase','sintactico2.py',194),
  ('bcase -> CASE CADENA COLON','bcase',3,'p_bcase','sintactico2.py',195),
  ('innerSwitch -> bcase cuerpo BREAK SEMI','innerSwitch',4,'p_innerSwitch','sintactico2.py',198),
  ('innerSwitch -> bcase cuerpo BREAK SEMI innerSwitch','innerSwitch',5,'p_innerSwitch','sintactico2.py',199),
  ('btry -> TRY LBRACE stc_bloque_def RBRACE catches','btry',5,'p_btry','sintactico2.py',205),
  ('catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def','catches',7,'p_catches','sintactico2.py',209),
  ('catches -> empty','catches',1,'p_catches','sintactico2.py',210),
  ('operadores -> SUMA','operadores',1,'p_operadores','sintactico2.py',216),
  ('operadores -> RESTA','operadores',1,'p_operadores','sintactico2.py',217),
  ('operadores -> MULTIPLICACION','operadores',1,'p_operadores','sintactico2.py',218),
  ('operadores -> DIVISION','operadores',1,'p_operadores','sintactico2.py',219),
  ('operadores -> MODULO','operadores',1,'p_operadores','sintactico2.py',220),
  ('operador_logico -> SMALLER','operador_logico',1,'p_operador_logico','sintactico2.py',225),
  ('operador_logico -> GREATER','operador_logico',1,'p_operador_logico','sintactico2.py',226),
  ('operador_logico -> IS_SMALLER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico2.py',227),
  ('operador_logico -> IS_GREATER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico2.py',228),
  ('incrementos_mat -> MINUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',233),
  ('incrementos_mat -> MOD_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',234),
  ('incrementos_mat -> MUL_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',235),
  ('incrementos_mat -> PLUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',236),
  ('incrementos_mat -> DIV_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',237),
  ('condicion_booleana -> AND','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',242),
  ('condicion_booleana -> OR','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',243),
  ('condicion_booleana -> XOR','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',244),
  ('condicion_booleana -> IS_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',245),
  ('condicion_booleana -> IS_NOT_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',246),
  ('condicion_booleana -> IS_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',247),
  ('condicion_booleana -> IS_NOT_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',248),
  ('operaciones_mat -> valor operadores valor','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',253),
  ('operaciones_mat -> valor operadores operaciones_mat','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',254),
  ('operaciones_mat -> VARIABLE operadores VARIABLE','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',255),
  ('operaciones_mat -> operaciones_mat_par','operaciones_mat',1,'p_operaciones_mat','sintactico2.py',256),
  ('operaciones_mat_par -> LPAREN valor operadores valor RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',261),
  ('operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',262),
  ('operaciones_mat_par -> LPAREN VARIABLE operadores VARIABLE RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',263),
  ('operaciones_mat_par -> LPAREN VARIABLE operadores valor RPAREN operadores valor','operaciones_mat_par',7,'p_operaciones_mat_par','sintactico2.py',264),
  ('funciones -> funcion_nparams','funciones',1,'p_funciones','sintactico2.py',269),
  ('funciones -> proteccion funcion_nparams','funciones',2,'p_funciones','sintactico2.py',270),
  ('funciones -> funcion_blank','funciones',1,'p_funciones','sintactico2.py',271),
  ('funciones -> proteccion funcion_blank','funciones',2,'p_funciones','sintactico2.py',272),
  ('funciones -> funcion_void','funciones',1,'p_funciones','sintactico2.py',273),
  ('param -> VARIABLE','param',1,'p_param','sintactico2.py',278),
  ('param -> asignacion','param',1,'p_param','sintactico2.py',279),
  ('funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def','funcion_nparams',6,'p_funcion_nparams','sintactico2.py',284),
  ('params_list -> params_list COMMA param','params_list',3,'p_params_list','sintactico2.py',288),
  ('params_list -> param','params_list',1,'p_params_list','sintactico2.py',289),
  ('funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE','funcion_void',9,'p_funcion_void','sintactico2.py',293),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def','funcion_blank',5,'p_funcion_blank','sintactico2.py',297),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE','funcion_blank',7,'p_funcion_blank','sintactico2.py',298),
  ('llamada_funcion -> NOMBRE LPAREN params_list RPAREN SEMI','llamada_funcion',5,'p_llamada_funcion','sintactico2.py',302),
  ('brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI','brand',7,'p_brand','sintactico2.py',305),
  ('proteccion -> PUBLIC','proteccion',1,'p_proteccion','sintactico2.py',309),
  ('proteccion -> PRIVATE','proteccion',1,'p_proteccion','sintactico2.py',310),
  ('proteccion -> PROTECTED','proteccion',1,'p_proteccion','sintactico2.py',311),
  ('proteccion -> STATIC','proteccion',1,'p_proteccion','sintactico2.py',312),
  ('breturn -> empty','breturn',1,'p_breturn','sintactico2.py',316),
  ('breturn -> RETURN SEMI','breturn',2,'p_breturn','sintactico2.py',317),
  ('breturn -> RETURN NULL SEMI','breturn',3,'p_breturn','sintactico2.py',318),
  ('breturn -> RETURN VARIABLE SEMI','breturn',3,'p_breturn','sintactico2.py',319),
  ('breturn -> RETURN BOOLEANO SEMI','breturn',3,'p_breturn','sintactico2.py',320),
  ('array_def -> ARRAY LPAREN RPAREN','array_def',3,'p_array_def','sintactico2.py',327),
  ('array_def -> ARRAY LPAREN array_elmnt RPAREN','array_def',4,'p_array_def','sintactico2.py',328),
  ('array_elmnt -> array_elmnt COMMA valor','array_elmnt',3,'p_array_elmnt','sintactico2.py',331),
  ('array_elmnt -> valor','array_elmnt',1,'p_array_elmnt','sintactico2.py',332),
  ('empty -> <empty>','empty',0,'p_empty','sintactico2.py',335),
  ('bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI','bcolas',7,'p_bcolas','sintactico2.py',340),
  ('bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI','bpila',7,'p_bpila','sintactico2.py',345),
  ('lectura -> READLINE LPAREN CADENA RPAREN SEMI','lectura',5,'p_lectura','sintactico2.py',350),
  ('lectura -> READLINE LPAREN RPAREN SEMI','lectura',4,'p_lectura','sintactico2.py',351),
  ('escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI','escribir',7,'p_escribir','sintactico2.py',354),
  ('btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI','btrim',8,'p_btrim','sintactico2.py',358),
  ('comment -> COMENTARIOS','comment',1,'p_comment','sintactico2.py',363),
  ('comment -> DOC_COMENTARIOS','comment',1,'p_comment','sintactico2.py',364),
  ('bgoto -> GOTO NOMBRE SEMI','bgoto',3,'p_bgoto','sintactico2.py',368),
  ('bcortes -> EXIT SEMI','bcortes',2,'p_bcortes','sintactico2.py',372),
  ('bcortes -> BREAK SEMI','bcortes',2,'p_bcortes','sintactico2.py',373),
  ('bcortes -> DEFAULT SEMI','bcortes',2,'p_bcortes','sintactico2.py',374),
  ('bcortes -> CONTINUE SEMI','bcortes',2,'p_bcortes','sintactico2.py',375),
  ('otros -> SMALLER NOMBRE GREATER','otros',3,'p_otros','sintactico2.py',379),
  ('otros -> NOMBRE COLON','otros',2,'p_otros','sintactico2.py',380),
  ('comprobacion -> NOMBRE LPAREN valor RPAREN','comprobacion',4,'p_comprobacion','sintactico2.py',387),
  ('comprobacion -> NOMBRE LPAREN VARIABLE RPAREN','comprobacion',4,'p_comprobacion','sintactico2.py',388),
  ('simbolos -> LPAREN RPAREN','simbolos',2,'p_simbolos','sintactico2.py',392),
  ('simbolos -> LPAREN','simbolos',1,'p_simbolos','sintactico2.py',393),
  ('simbolos -> RPAREN','simbolos',1,'p_simbolos','sintactico2.py',394),
  ('simbolos -> LBRACKET RBRACKET','simbolos',2,'p_simbolos','sintactico2.py',395),
  ('simbolos -> LBRACKET','simbolos',1,'p_simbolos','sintactico2.py',396),
  ('simbolos -> RBRACKET','simbolos',1,'p_simbolos','sintactico2.py',397),
  ('simbolos -> LBRACE RBRACE','simbolos',2,'p_simbolos','sintactico2.py',398),
  ('simbolos -> LBRACE','simbolos',1,'p_simbolos','sintactico2.py',399),
  ('simbolos -> RBRACE instrucciones','simbolos',2,'p_simbolos','sintactico2.py',400),
  ('simbolos -> OPEN_TAG CLOSE_TAG','simbolos',2,'p_simbolos','sintactico2.py',401),
  ('simbolos -> OPEN_TAG','simbolos',1,'p_simbolos','sintactico2.py',402),
  ('simbolos -> CLOSE_TAG','simbolos',1,'p_simbolos','sintactico2.py',403),
  ('instrucciones -> condicion_else','instrucciones',1,'p_instrucciones','sintactico2.py',408),
  ('instrucciones -> condicion_elseif','instrucciones',1,'p_instrucciones','sintactico2.py',409),
  ('instrucciones -> bwhile','instrucciones',1,'p_instrucciones','sintactico2.py',410),
  ('instrucciones -> bfor','instrucciones',1,'p_instrucciones','sintactico2.py',411),
  ('bconcat -> CADENA CONCAT CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',416),
  ('bconcat -> VARIABLE CONCAT VARIABLE SEMI','bconcat',4,'p_bconcat','sintactico2.py',417),
  ('bconcat -> VARIABLE CONCAT CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',418),
  ('bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',419),
  ('bconcat -> CADENA CONCAT_EQUAL CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',420),
  ('tiposCast -> STRING','tiposCast',1,'p_tiposCast','sintactico2.py',425),
  ('tiposCast -> BOOL','tiposCast',1,'p_tiposCast','sintactico2.py',426),
  ('tiposCast -> BOOLEAN','tiposCast',1,'p_tiposCast','sintactico2.py',427),
  ('tiposCast -> DOUBLE','tiposCast',1,'p_tiposCast','sintactico2.py',428),
  ('tiposCast -> FLOAT','tiposCast',1,'p_tiposCast','sintactico2.py',429),
  ('tiposCast -> ARRAY','tiposCast',1,'p_tiposCast','sintactico2.py',430),
  ('tiposCast -> OBJECT','tiposCast',1,'p_tiposCast','sintactico2.py',431),
  ('tiposCast -> INTEGER','tiposCast',1,'p_tiposCast','sintactico2.py',432),
  ('tiposCast -> INT','tiposCast',1,'p_tiposCast','sintactico2.py',433),
  ('casting -> VARIABLE EQUALS LPAREN tiposCast RPAREN VARIABLE SEMI','casting',7,'p_casting','sintactico2.py',439),
  ('casting -> LPAREN tiposCast RPAREN VARIABLE SEMI','casting',5,'p_casting','sintactico2.py',440),
  ('aumentoCasting -> VARIABLE incrementos_mat tipoDato SEMI','aumentoCasting',4,'p_aumentoCasting','sintactico2.py',444),
  ('aumentoCasting -> VARIABLE EQUALS VARIABLE operadores tipoDato SEMI','aumentoCasting',6,'p_aumentoCasting','sintactico2.py',445),
]
