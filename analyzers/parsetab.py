
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY AS AT BOOL BOOLEAN_NOT BREAK CASE CATCH CLOSE_TAG COLON COMENTARIOS COMMA CONCAT CONTINUE DECIMAL DEFAULT DEFINE DIVISION DIV_EQUAL DO DOC_COMENTARIOS DOUBLE ECHO ELSE ELSEIF ENTERO EQUALS EXIT FALSE FLOAT FOR FOREACH FUNCTION FWRITE GOTO GREATER IF INT IS_EQUAL IS_GREATER_OR_EQUAL IS_IDENTICAL IS_NOT_EQUAL IS_NOT_IDENTICAL IS_SMALLER_OR_EQUAL LBRACE LBRACKET LPAREN MINUS_EQUAL MODULO MOD_EQUAL MULTIPLICACION MUL_EQUAL NEW NOMBRE NOT NULL OPEN_TAG OR PLUS_EQUAL PRINT PRIVATE PROTECTED PUBLIC RAND RBRACE RBRACKET READLINE RESTA RETURN RPAREN SEMI SMALLER SPLQUEUE SPLSTACK STATIC STRING SUMA SWITCH TRIM TRUE TRY VAR VARIABLE VOID WHILE XORcuerpo : imprimir\n            | asignacion\n            | asignacion_array\n            | funciones\n            | constante\n            | lectura\n            | operadores\n            | operador_logico\n            | condicion_booleana\n            | bwhile\n            | bdo\n            | bfor\n            | bforeach\n            | btry\n            | operaciones_mat\n            | condicion_ifelse \n            | condicion_elseif\n            | condicion_else\n            | bswitch\n            | bcase\n            | bgoto\n            | bcolas\n            | bpila\n            | incrementos_mat\n            | bcortes\n            | brand\n            | bconcat\n            | escribir\n            | btrim\n            | leer\n            | boolean_answer\n            | otros\n            | breturn\n  imprimir : ECHO valor SEMI\n            | PRINT valor SEMI\n            | PRINT LPAREN valor RPAREN SEMI\n            | ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI\n            | ECHO bconcat\n  valor : numero\n            | VARIABLE\n            | STRING\n            | NOMBRE\n            | boolean_answer\n  numero : ENTERO\n          | DECIMAL\n  operadores : SUMA \n                  | RESTA\n                  | MULTIPLICACION\n                  | DIVISION\n                  | MODULO\n  operador_logico :  SMALLER\n                        | GREATER\n                        | IS_SMALLER_OR_EQUAL\n                        | IS_GREATER_OR_EQUAL\n  incrementos_mat :  MINUS_EQUAL\n                        | MOD_EQUAL\n                        | MUL_EQUAL\n                        | PLUS_EQUAL\n  boolean_answer :  TRUE\n                      | FALSE\n  condicion_if :  IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_elseif :  ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_else :  ELSE LBRACE cuerpo RBRACE\n  condicion_ifelse : condicion_if\n                      | condicion_if condicion_else\n                      | condicion_if condicion_elseif\n                      | condicion_if condicion_elseif condicion_else\n  condicion_booleana :  AND\n                        | OR\n                        | XOR\n                        | IS_EQUAL\n                        | IS_NOT_EQUAL\n                        | IS_IDENTICAL\n                        | IS_NOT_IDENTICAL\n                        | BOOLEAN_NOT\n  operaciones_mat :  valor operadores valor\n                        | valor operadores operaciones_mat\n                        | operaciones_mat_par\n                       \n  operaciones_mat_par :  LPAREN valor operadores valor RPAREN\n                          |  LPAREN valor operadores operaciones_mat_par RPAREN\n                          |  valor operadores operaciones_mat_par \n  asignacion : VARIABLE EQUALS valor SEMI\n                | VAR asignacion\n                | proteccion asignacion\n                | VARIABLE EQUALS brand\n                | VARIABLE EQUALS escribir\n                | VARIABLE EQUALS btrim\n                | VARIABLE EQUALS leer\n  asignacion_array : VARIABLE EQUALS array_def SEMIconstante : DEFINE LPAREN STRING COMMA valor RPAREN SEMI\n          | DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMIlectura : READLINE LPAREN STRING RPAREN SEMI\n          | READLINE LPAREN RPAREN SEMIbrand : RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMIproteccion : PUBLIC\n          | PRIVATE\n          | PROTECTED\n          | STATIC\n  funciones : funcion_nparams\n              | proteccion funcion_nparams\n              | funcion_blank\n              | proteccion funcion_blank\n              | funcion_void\n  param : VARIABLE\n          | asignacion\n          funcion_nparams : FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_defparams_list : params_list COMMA param\n                      | paramfuncion_void : FUNCTION NOMBRE LPAREN  RPAREN COLON VOID LBRACE empty RBRACE funcion_blank : FUNCTION NOMBRE LPAREN  RPAREN stc_bloque_def\n                    | FUNCTION NOMBRE LPAREN  RPAREN LBRACE empty RBRACE\n   condicion : VARIABLE operador_logico VARIABLE\n            | valor operador_logico valor \n            | VARIABLE operador_logico valor\n   bwhile : WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE \n  | WHILE LPAREN condicion RPAREN COLON stc_bloque  \n   bdo : DO LBRACE cuerpo RBRACE bwhile \n   bswitch : SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACEbcase : CASE ENTERO COLON bcolas : VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI\n  bfor : FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_defstc_bloque : stc_bloque SEMI cuerpo\n        | breturn\n        breturn : empty\n        | RETURN SEMI \n        | RETURN NULL SEMI\n        | RETURN VARIABLE SEMI\n        | RETURN NOMBRE SEMI\n        | RETURN boolean_answer SEMI\n        stc_bloque_def : LBRACE stc_bloque RBRACEfor_incr : VARIABLE SUMA SUMA\n          | SUMA SUMA VARIABLE\n          | VARIABLE RESTA RESTA\n          | RESTA RESTA VARIABLE\n          | VARIABLE SUMA EQUALS numero\n          | VARIABLE RESTA EQUALS numerobforeach :  FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_defarray_def : ARRAY LPAREN RPAREN\n          | ARRAY LPAREN array_elmnt RPARENarray_elmnt : array_elmnt COMMA valor\n            | valorbtry : TRY LBRACE stc_bloque_def RBRACE catchescatches : catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def\n          | emptyempty : bgoto : GOTO NOMBRE SEMIbpila : VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMIbcortes : EXIT SEMI\n              | BREAK SEMI\n              | DEFAULT SEMI\n              | CONTINUE SEMI\n   bconcat : STRING CONCAT STRING SEMI\n            | VARIABLE EQUALS VARIABLE CONCAT VARIABLE SEMI\n   escribir : FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI\n   btrim : TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI\n   leer : READLINE LPAREN STRING RPAREN SEMI\n   otros : SMALLER NOMBRE GREATER\n   '
    
_lr_action_items = {'ECHO':([0,127,134,267,270,271,280,],[35,35,35,35,35,35,35,]),'PRINT':([0,127,134,267,270,271,280,],[37,37,37,37,37,37,37,]),'VARIABLE':([0,35,37,38,42,43,50,51,52,53,54,56,57,58,93,94,95,96,97,108,110,114,115,117,118,126,127,128,129,133,134,135,151,154,160,163,164,165,166,171,183,200,207,208,213,214,215,221,222,223,226,244,264,267,270,271,276,280,289,313,321,322,327,328,340,342,],[41,105,111,111,116,116,-46,-47,-48,-49,-50,-52,-53,-54,147,-95,-96,-97,-98,111,111,161,-83,116,-84,180,41,116,184,180,41,190,180,203,111,-85,-86,-87,-88,111,180,239,247,-82,111,239,111,260,-51,111,265,111,295,41,41,41,239,41,111,-156,338,339,-94,-154,346,-155,]),'VAR':([0,42,43,94,95,96,97,117,127,128,134,200,214,267,270,271,276,280,],[42,42,42,-95,-96,-97,-98,42,42,42,42,42,42,42,42,42,42,42,]),'DEFINE':([0,127,134,267,270,271,280,],[47,47,47,47,47,47,47,]),'READLINE':([0,114,127,134,171,267,270,271,280,],[49,169,49,49,169,49,49,49,49,]),'SUMA':([0,32,36,39,40,41,48,90,91,99,101,107,111,112,113,127,134,155,205,264,267,270,271,280,282,295,296,319,],[50,-43,50,-42,-44,-40,-41,-59,-60,-39,-45,-43,-40,-41,50,50,50,50,50,296,50,50,50,50,50,319,321,334,]),'RESTA':([0,32,36,39,40,41,48,90,91,99,101,107,111,112,113,127,134,155,205,264,267,270,271,280,282,295,297,320,],[51,-43,51,-42,-44,-40,-41,-59,-60,-39,-45,-43,-40,-41,51,51,51,51,51,297,51,51,51,51,51,320,322,336,]),'MULTIPLICACION':([0,32,36,39,40,41,48,90,91,99,101,107,111,112,113,127,134,155,205,267,270,271,280,282,],[52,-43,52,-42,-44,-40,-41,-59,-60,-39,-45,-43,-40,-41,52,52,52,52,52,52,52,52,52,52,]),'DIVISION':([0,32,36,39,40,41,48,90,91,99,101,107,111,112,113,127,134,155,205,267,270,271,280,282,],[53,-43,53,-42,-44,-40,-41,-59,-60,-39,-45,-43,-40,-41,53,53,53,53,53,53,53,53,53,53,]),'MODULO':([0,32,36,39,40,41,48,90,91,99,101,107,111,112,113,127,134,155,205,267,270,271,280,282,],[54,-43,54,-42,-44,-40,-41,-59,-60,-39,-45,-43,-40,-41,54,54,54,54,54,54,54,54,54,54,]),'SMALLER':([0,39,40,90,91,99,101,107,112,127,134,180,181,267,270,271,280,],[55,-42,-44,-59,-60,-39,-45,-43,-41,55,55,222,222,55,55,55,55,]),'GREATER':([0,39,40,90,91,99,101,107,112,125,127,134,180,181,267,270,271,280,],[56,-42,-44,-59,-60,-39,-45,-43,-41,178,56,56,56,56,56,56,56,56,]),'IS_SMALLER_OR_EQUAL':([0,39,40,90,91,99,101,107,112,127,134,180,181,267,270,271,280,],[57,-42,-44,-59,-60,-39,-45,-43,-41,57,57,57,57,57,57,57,57,]),'IS_GREATER_OR_EQUAL':([0,39,40,90,91,99,101,107,112,127,134,180,181,267,270,271,280,],[58,-42,-44,-59,-60,-39,-45,-43,-41,58,58,58,58,58,58,58,58,]),'AND':([0,127,134,267,270,271,280,],[59,59,59,59,59,59,59,]),'OR':([0,127,134,267,270,271,280,],[60,60,60,60,60,60,60,]),'XOR':([0,127,134,267,270,271,280,],[61,61,61,61,61,61,61,]),'IS_EQUAL':([0,127,134,267,270,271,280,],[62,62,62,62,62,62,62,]),'IS_NOT_EQUAL':([0,127,134,267,270,271,280,],[63,63,63,63,63,63,63,]),'IS_IDENTICAL':([0,127,134,267,270,271,280,],[64,64,64,64,64,64,64,]),'IS_NOT_IDENTICAL':([0,127,134,267,270,271,280,],[65,65,65,65,65,65,65,]),'BOOLEAN_NOT':([0,127,134,267,270,271,280,],[66,66,66,66,66,66,66,]),'WHILE':([0,127,134,224,267,270,271,280,],[67,67,67,67,67,67,67,67,]),'DO':([0,127,134,267,270,271,280,],[68,68,68,68,68,68,68,]),'FOR':([0,127,134,267,270,271,280,],[69,69,69,69,69,69,69,]),'FOREACH':([0,127,134,267,270,271,280,],[70,70,70,70,70,70,70,]),'TRY':([0,127,134,267,270,271,280,],[71,71,71,71,71,71,71,]),'ELSEIF':([0,73,127,134,267,270,271,280,332,],[74,74,74,74,74,74,74,74,-61,]),'ELSE':([0,73,127,132,134,267,270,271,280,325,332,],[75,75,75,75,75,75,75,75,75,-62,-61,]),'SWITCH':([0,127,134,267,270,271,280,],[76,76,76,76,76,76,76,]),'CASE':([0,127,134,267,270,271,280,],[77,77,77,77,77,77,77,]),'GOTO':([0,127,134,267,270,271,280,],[78,78,78,78,78,78,78,]),'MINUS_EQUAL':([0,127,134,267,270,271,280,],[79,79,79,79,79,79,79,]),'MOD_EQUAL':([0,127,134,267,270,271,280,],[80,80,80,80,80,80,80,]),'MUL_EQUAL':([0,127,134,267,270,271,280,],[81,81,81,81,81,81,81,]),'PLUS_EQUAL':([0,127,134,267,270,271,280,],[82,82,82,82,82,82,82,]),'EXIT':([0,127,134,267,270,271,280,],[83,83,83,83,83,83,83,]),'BREAK':([0,127,134,267,270,271,280,],[84,84,84,84,84,84,84,]),'DEFAULT':([0,127,134,267,270,271,280,],[85,85,85,85,85,85,85,]),'CONTINUE':([0,127,134,267,270,271,280,],[86,86,86,86,86,86,86,]),'RAND':([0,114,127,134,171,267,270,271,280,],[87,87,87,87,87,87,87,87,87,]),'STRING':([0,35,37,38,50,51,52,53,54,56,57,58,108,110,114,115,118,122,123,124,126,127,133,134,151,160,163,164,165,166,171,183,208,212,213,215,221,222,223,234,244,267,270,271,280,289,313,327,328,342,],[48,106,112,112,-46,-47,-48,-49,-50,-52,-53,-54,112,112,112,-83,-84,173,175,176,112,48,112,48,112,112,-85,-86,-87,-88,112,112,-82,250,112,112,112,-51,112,273,112,48,48,48,48,112,-156,-94,-154,-155,]),'FWRITE':([0,114,127,134,171,267,270,271,280,],[88,88,88,88,88,88,88,88,88,]),'TRIM':([0,114,127,134,171,267,270,271,280,],[89,89,89,89,89,89,89,89,89,]),'TRUE':([0,35,37,38,50,51,52,53,54,56,57,58,93,108,110,114,115,118,126,127,133,134,151,160,163,164,165,166,171,183,208,213,215,221,222,223,244,267,270,271,280,289,313,327,328,342,],[90,90,90,90,-46,-47,-48,-49,-50,-52,-53,-54,90,90,90,90,-83,-84,90,90,90,90,90,90,-85,-86,-87,-88,90,90,-82,90,90,90,-51,90,90,90,90,90,90,90,-156,-94,-154,-155,]),'FALSE':([0,35,37,38,50,51,52,53,54,56,57,58,93,108,110,114,115,118,126,127,133,134,151,160,163,164,165,166,171,183,208,213,215,221,222,223,244,267,270,271,280,289,313,327,328,342,],[91,91,91,91,-46,-47,-48,-49,-50,-52,-53,-54,91,91,91,91,-83,-84,91,91,91,91,91,91,-85,-86,-87,-88,91,91,-82,91,91,91,-51,91,91,91,91,91,91,91,-156,-94,-154,-155,]),'RETURN':([0,127,134,185,258,259,267,270,271,278,280,],[93,93,93,93,93,93,93,93,93,93,93,]),'PUBLIC':([0,42,43,94,95,96,97,117,127,128,134,200,214,267,270,271,276,280,],[94,94,94,-95,-96,-97,-98,94,94,94,94,94,94,94,94,94,94,94,]),'PRIVATE':([0,42,43,94,95,96,97,117,127,128,134,200,214,267,270,271,276,280,],[95,95,95,-95,-96,-97,-98,95,95,95,95,95,95,95,95,95,95,95,]),'PROTECTED':([0,42,43,94,95,96,97,117,127,128,134,200,214,267,270,271,276,280,],[96,96,96,-95,-96,-97,-98,96,96,96,96,96,96,96,96,96,96,96,]),'STATIC':([0,42,43,94,95,96,97,117,127,128,134,200,214,267,270,271,276,280,],[97,97,97,-95,-96,-97,-98,97,97,97,97,97,97,97,97,97,97,97,]),'FUNCTION':([0,43,94,95,96,97,127,134,267,270,271,280,],[98,121,-95,-96,-97,-98,98,98,98,98,98,98,]),'NOMBRE':([0,35,37,38,50,51,52,53,54,55,56,57,58,78,93,98,108,110,114,115,118,121,122,126,127,133,134,143,144,151,160,163,164,165,166,171,183,208,213,215,221,222,223,235,244,267,270,271,280,289,313,324,327,328,342,],[39,103,39,39,-46,-47,-48,-49,-50,125,-52,-53,-54,137,148,150,39,39,39,-83,-84,172,174,39,39,39,39,194,195,39,39,-85,-86,-87,-88,39,39,-82,39,39,39,-51,39,274,39,39,39,39,39,39,-156,340,-94,-154,-155,]),'LPAREN':([0,37,47,49,50,51,52,53,54,67,69,70,74,76,87,88,89,100,108,127,134,150,160,169,170,172,195,210,211,244,267,270,271,280,300,],[38,110,122,124,-46,-47,-48,-49,-50,126,128,129,133,135,142,143,144,151,38,38,38,200,38,212,213,214,235,248,249,38,38,38,38,38,324,]),'IF':([0,127,134,267,270,271,280,],[100,100,100,100,100,100,100,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,39,40,44,45,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,73,79,80,81,82,90,91,92,99,101,104,107,111,112,115,118,119,120,131,132,138,139,140,141,145,152,155,156,157,158,163,164,165,166,178,187,191,192,196,197,198,199,208,209,217,219,228,229,231,243,245,246,257,259,263,266,267,268,269,277,281,284,293,299,306,311,312,313,315,316,317,323,325,327,328,330,332,333,341,342,347,349,],[-145,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-42,-44,-99,-101,-103,-46,-47,-48,-49,-50,-51,-52,-53,-54,-68,-69,-70,-71,-72,-73,-74,-75,-78,-64,-55,-56,-57,-58,-59,-60,-124,-39,-45,-38,-43,-40,-41,-83,-84,-100,-102,-65,-66,-148,-149,-150,-151,-125,-34,-76,-77,-78,-35,-85,-86,-87,-88,-157,-67,-119,-146,-126,-127,-128,-129,-82,-89,-152,-93,-123,-145,-63,-36,-79,-80,-92,-145,-117,-130,-145,-142,-144,-110,-37,-153,-116,-122,-106,-120,-147,-156,-90,-91,-115,-137,-62,-94,-154,-111,-61,-121,-118,-155,-109,-143,]),'ENTERO':([0,35,37,38,50,51,52,53,54,56,57,58,77,108,110,114,115,118,126,127,133,134,142,151,153,160,163,164,165,166,171,183,208,213,215,221,222,223,233,244,267,270,271,280,289,313,327,328,335,337,342,],[40,40,40,40,-46,-47,-48,-49,-50,-52,-53,-54,136,40,40,40,-83,-84,40,40,40,40,193,40,202,40,-85,-86,-87,-88,40,40,-82,40,40,40,-51,40,272,40,40,40,40,40,40,-156,-94,-154,40,40,-155,]),'DECIMAL':([0,35,37,38,50,51,52,53,54,56,57,58,108,110,114,115,118,126,127,133,134,151,160,163,164,165,166,171,183,208,213,215,221,222,223,244,267,270,271,280,289,313,327,328,335,337,342,],[101,101,101,101,-46,-47,-48,-49,-50,-52,-53,-54,101,101,101,-83,-84,101,101,101,101,101,101,-85,-86,-87,-88,101,101,-82,101,101,101,-51,101,101,101,101,101,101,101,-156,-94,-154,101,101,-155,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,39,40,44,45,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,73,79,80,81,82,90,91,92,99,101,104,107,111,112,115,118,119,120,127,131,132,134,138,139,140,141,145,152,155,156,157,158,163,164,165,166,178,182,185,186,187,189,191,192,196,197,198,199,208,209,217,219,227,228,229,231,243,245,246,257,258,259,263,266,267,268,269,270,277,278,280,281,284,292,293,299,301,306,308,310,311,312,313,315,316,317,323,325,326,327,328,330,331,332,333,341,342,343,347,349,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-42,-44,-99,-101,-103,-46,-47,-48,-49,-50,-51,-52,-53,-54,-68,-69,-70,-71,-72,-73,-74,-75,-78,-64,-55,-56,-57,-58,-59,-60,-124,-39,-45,-38,-43,-40,-41,-83,-84,-100,-102,-145,-65,-66,-145,-148,-149,-150,-151,-125,-34,-76,-77,-78,-35,-85,-86,-87,-88,-157,224,-145,229,-67,231,-119,-146,-126,-127,-128,-129,-82,-89,-152,-93,266,-123,-145,-63,-36,-79,-80,-92,-145,-145,-117,-130,-145,-142,-144,-145,-110,-145,-145,-37,-153,317,-116,-122,325,-106,330,332,-120,-147,-156,-90,-91,-115,-137,-62,341,-94,-154,-111,-145,-61,-121,-118,-155,347,-109,-143,]),'SEMI':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,39,40,44,45,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,73,79,80,81,82,83,84,85,86,90,91,92,93,99,101,102,103,104,105,106,107,109,111,112,115,118,119,120,131,132,137,138,139,140,141,145,146,147,148,149,152,155,156,157,158,161,162,163,164,165,166,167,175,177,178,185,187,191,192,196,197,198,199,204,208,209,217,218,219,225,227,228,229,231,242,243,245,246,247,251,257,258,259,260,261,262,263,266,267,268,269,271,277,278,281,284,285,286,287,288,290,291,292,293,299,302,303,304,306,308,311,312,313,315,316,317,323,325,327,328,329,330,332,333,341,342,347,349,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-42,-44,-99,-101,-103,-46,-47,-48,-49,-50,-51,-52,-53,-54,-68,-69,-70,-71,-72,-73,-74,-75,-78,-64,-55,-56,-57,-58,138,139,140,141,-59,-60,-124,145,-39,-45,152,-42,-38,-40,-41,-43,158,-40,-41,-83,-84,-100,-102,-65,-66,192,-148,-149,-150,-151,-125,196,197,198,199,-34,-76,-77,-78,-35,-40,208,-85,-86,-87,-88,209,217,219,-157,-145,-67,-119,-146,-126,-127,-128,-129,243,-82,-89,-152,257,-93,264,267,-123,-145,-63,281,-36,-79,-80,284,-138,-92,-145,-145,-40,-114,-113,-117,-130,-145,-142,-144,-145,-110,-145,-37,-153,311,312,313,-139,315,316,267,267,-122,326,327,328,-106,-124,-120,-147,-156,-90,-91,-115,-137,-62,-94,-154,342,-111,-61,-121,-118,-155,-109,-143,]),'RPAREN':([39,40,90,91,99,101,107,111,112,115,118,124,159,163,164,165,166,176,179,188,190,200,201,205,206,208,213,214,236,238,239,240,245,246,248,249,250,252,253,255,256,260,261,262,265,272,273,274,283,294,305,307,313,314,327,328,334,336,338,339,342,344,345,346,],[-42,-44,-59,-60,-39,-45,-43,-40,-41,-83,-84,177,204,-85,-86,-87,-88,218,220,230,232,237,241,245,246,-82,251,254,275,-108,-104,-105,-79,-80,285,286,287,288,-141,290,291,-40,-114,-113,298,303,304,305,-81,318,329,-107,-156,-140,-94,-154,-131,-133,-132,-134,-155,-135,-136,348,]),'COMMA':([39,40,90,91,99,101,107,111,112,115,118,163,164,165,166,173,174,193,194,208,236,238,239,240,252,253,307,313,314,327,328,342,],[-42,-44,-59,-60,-39,-45,-43,-40,-41,-83,-84,-85,-86,-87,-88,215,216,233,234,-82,276,-108,-104,-105,289,-141,-107,-156,-140,-94,-154,-155,]),'EQUALS':([41,105,116,239,319,320,],[114,154,171,171,335,337,]),'CONCAT':([48,106,161,203,],[123,123,207,207,]),'LBRACE':([68,71,75,130,220,230,232,237,241,254,275,298,309,318,348,],[127,130,134,185,258,270,271,278,280,278,185,185,331,185,185,]),'NULL':([93,],[146,]),'LBRACKET':([103,],[153,]),'NEW':([114,],[168,]),'ARRAY':([114,216,],[170,256,]),'COLON':([136,220,237,],[191,259,279,]),'SPLQUEUE':([168,],[210,]),'SPLSTACK':([168,],[211,]),'AS':([184,],[226,]),'RBRACKET':([202,],[242,]),'CATCH':([229,266,268,269,349,],[-145,-130,300,-144,-143,]),'VOID':([279,],[309,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,127,134,267,270,271,280,],[1,182,189,299,301,302,310,]),'imprimir':([0,127,134,267,270,271,280,],[2,2,2,2,2,2,2,]),'asignacion':([0,42,43,117,127,128,134,200,214,267,270,271,276,280,],[3,115,118,118,3,183,3,240,240,3,3,3,240,3,]),'asignacion_array':([0,127,134,267,270,271,280,],[4,4,4,4,4,4,4,]),'funciones':([0,127,134,267,270,271,280,],[5,5,5,5,5,5,5,]),'constante':([0,127,134,267,270,271,280,],[6,6,6,6,6,6,6,]),'lectura':([0,127,134,267,270,271,280,],[7,7,7,7,7,7,7,]),'operadores':([0,36,113,127,134,155,205,267,270,271,280,282,],[8,108,160,8,8,108,244,8,8,8,8,244,]),'operador_logico':([0,127,134,180,181,267,270,271,280,],[9,9,9,221,223,9,9,9,9,]),'condicion_booleana':([0,127,134,267,270,271,280,],[10,10,10,10,10,10,10,]),'bwhile':([0,127,134,224,267,270,271,280,],[11,11,11,263,11,11,11,11,]),'bdo':([0,127,134,267,270,271,280,],[12,12,12,12,12,12,12,]),'bfor':([0,127,134,267,270,271,280,],[13,13,13,13,13,13,13,]),'bforeach':([0,127,134,267,270,271,280,],[14,14,14,14,14,14,14,]),'btry':([0,127,134,267,270,271,280,],[15,15,15,15,15,15,15,]),'operaciones_mat':([0,108,127,134,267,270,271,280,],[16,156,16,16,16,16,16,16,]),'condicion_ifelse':([0,127,134,267,270,271,280,],[17,17,17,17,17,17,17,]),'condicion_elseif':([0,73,127,134,267,270,271,280,],[18,132,18,18,18,18,18,18,]),'condicion_else':([0,73,127,132,134,267,270,271,280,],[19,131,19,187,19,19,19,19,19,]),'bswitch':([0,127,134,267,270,271,280,],[20,20,20,20,20,20,20,]),'bcase':([0,127,134,267,270,271,280,],[21,21,21,21,21,21,21,]),'bgoto':([0,127,134,267,270,271,280,],[22,22,22,22,22,22,22,]),'bcolas':([0,127,134,267,270,271,280,],[23,23,23,23,23,23,23,]),'bpila':([0,127,134,267,270,271,280,],[24,24,24,24,24,24,24,]),'incrementos_mat':([0,127,134,267,270,271,280,],[25,25,25,25,25,25,25,]),'bcortes':([0,127,134,267,270,271,280,],[26,26,26,26,26,26,26,]),'brand':([0,114,127,134,171,267,270,271,280,],[27,163,27,27,163,27,27,27,27,]),'bconcat':([0,35,127,134,267,270,271,280,],[28,104,28,28,28,28,28,28,]),'escribir':([0,114,127,134,171,267,270,271,280,],[29,164,29,29,164,29,29,29,29,]),'btrim':([0,114,127,134,171,267,270,271,280,],[30,165,30,30,165,30,30,30,30,]),'leer':([0,114,127,134,171,267,270,271,280,],[31,166,31,31,166,31,31,31,31,]),'boolean_answer':([0,35,37,38,93,108,110,114,126,127,133,134,151,160,171,183,213,215,221,223,244,267,270,271,280,289,],[32,107,107,107,149,107,107,107,107,32,107,32,107,107,107,107,107,107,107,107,107,32,32,32,32,107,]),'otros':([0,127,134,267,270,271,280,],[33,33,33,33,33,33,33,]),'breturn':([0,127,134,185,258,259,267,270,271,278,280,],[34,34,34,228,228,228,34,34,34,228,34,]),'valor':([0,35,37,38,108,110,114,126,127,133,134,151,160,171,183,213,215,221,223,244,267,270,271,280,289,],[36,102,109,113,155,159,162,181,36,181,36,181,205,162,181,253,255,261,262,282,36,36,36,36,314,]),'proteccion':([0,42,43,117,127,128,134,200,214,267,270,271,276,280,],[43,117,117,117,43,117,43,117,117,43,43,43,117,43,]),'funcion_nparams':([0,43,127,134,267,270,271,280,],[44,119,44,44,44,44,44,44,]),'funcion_blank':([0,43,127,134,267,270,271,280,],[45,120,45,45,45,45,45,45,]),'funcion_void':([0,127,134,267,270,271,280,],[46,46,46,46,46,46,46,]),'operaciones_mat_par':([0,108,127,134,160,244,267,270,271,280,],[72,157,72,72,206,283,72,72,72,72,]),'condicion_if':([0,127,134,267,270,271,280,],[73,73,73,73,73,73,73,]),'empty':([0,127,134,185,229,258,259,267,270,271,278,280,331,],[92,92,92,92,269,92,92,92,92,92,308,92,343,]),'numero':([0,35,37,38,108,110,114,126,127,133,134,151,160,171,183,213,215,221,223,244,267,270,271,280,289,335,337,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,344,345,]),'array_def':([114,],[167,]),'condicion':([126,133,151,183,],[179,188,201,225,]),'stc_bloque_def':([130,237,254,275,298,318,348,],[186,277,277,306,323,333,349,]),'stc_bloque':([185,258,259,278,],[227,292,293,227,]),'params_list':([200,214,],[236,236,]),'param':([200,214,276,],[238,238,307,]),'array_elmnt':([213,],[252,]),'catches':([229,],[268,]),'for_incr':([264,],[294,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> imprimir','cuerpo',1,'p_cuerpo','sintactico.py',7),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','sintactico.py',8),
  ('cuerpo -> asignacion_array','cuerpo',1,'p_cuerpo','sintactico.py',9),
  ('cuerpo -> funciones','cuerpo',1,'p_cuerpo','sintactico.py',10),
  ('cuerpo -> constante','cuerpo',1,'p_cuerpo','sintactico.py',11),
  ('cuerpo -> lectura','cuerpo',1,'p_cuerpo','sintactico.py',12),
  ('cuerpo -> operadores','cuerpo',1,'p_cuerpo','sintactico.py',13),
  ('cuerpo -> operador_logico','cuerpo',1,'p_cuerpo','sintactico.py',14),
  ('cuerpo -> condicion_booleana','cuerpo',1,'p_cuerpo','sintactico.py',15),
  ('cuerpo -> bwhile','cuerpo',1,'p_cuerpo','sintactico.py',16),
  ('cuerpo -> bdo','cuerpo',1,'p_cuerpo','sintactico.py',17),
  ('cuerpo -> bfor','cuerpo',1,'p_cuerpo','sintactico.py',18),
  ('cuerpo -> bforeach','cuerpo',1,'p_cuerpo','sintactico.py',19),
  ('cuerpo -> btry','cuerpo',1,'p_cuerpo','sintactico.py',20),
  ('cuerpo -> operaciones_mat','cuerpo',1,'p_cuerpo','sintactico.py',21),
  ('cuerpo -> condicion_ifelse','cuerpo',1,'p_cuerpo','sintactico.py',22),
  ('cuerpo -> condicion_elseif','cuerpo',1,'p_cuerpo','sintactico.py',23),
  ('cuerpo -> condicion_else','cuerpo',1,'p_cuerpo','sintactico.py',24),
  ('cuerpo -> bswitch','cuerpo',1,'p_cuerpo','sintactico.py',25),
  ('cuerpo -> bcase','cuerpo',1,'p_cuerpo','sintactico.py',26),
  ('cuerpo -> bgoto','cuerpo',1,'p_cuerpo','sintactico.py',27),
  ('cuerpo -> bcolas','cuerpo',1,'p_cuerpo','sintactico.py',28),
  ('cuerpo -> bpila','cuerpo',1,'p_cuerpo','sintactico.py',29),
  ('cuerpo -> incrementos_mat','cuerpo',1,'p_cuerpo','sintactico.py',30),
  ('cuerpo -> bcortes','cuerpo',1,'p_cuerpo','sintactico.py',31),
  ('cuerpo -> brand','cuerpo',1,'p_cuerpo','sintactico.py',32),
  ('cuerpo -> bconcat','cuerpo',1,'p_cuerpo','sintactico.py',33),
  ('cuerpo -> escribir','cuerpo',1,'p_cuerpo','sintactico.py',34),
  ('cuerpo -> btrim','cuerpo',1,'p_cuerpo','sintactico.py',35),
  ('cuerpo -> leer','cuerpo',1,'p_cuerpo','sintactico.py',36),
  ('cuerpo -> boolean_answer','cuerpo',1,'p_cuerpo','sintactico.py',37),
  ('cuerpo -> otros','cuerpo',1,'p_cuerpo','sintactico.py',38),
  ('cuerpo -> breturn','cuerpo',1,'p_cuerpo','sintactico.py',39),
  ('imprimir -> ECHO valor SEMI','imprimir',3,'p_imprimir','sintactico.py',44),
  ('imprimir -> PRINT valor SEMI','imprimir',3,'p_imprimir','sintactico.py',45),
  ('imprimir -> PRINT LPAREN valor RPAREN SEMI','imprimir',5,'p_imprimir','sintactico.py',46),
  ('imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI','imprimir',6,'p_imprimir','sintactico.py',47),
  ('imprimir -> ECHO bconcat','imprimir',2,'p_imprimir','sintactico.py',48),
  ('valor -> numero','valor',1,'p_valor','sintactico.py',53),
  ('valor -> VARIABLE','valor',1,'p_valor','sintactico.py',54),
  ('valor -> STRING','valor',1,'p_valor','sintactico.py',55),
  ('valor -> NOMBRE','valor',1,'p_valor','sintactico.py',56),
  ('valor -> boolean_answer','valor',1,'p_valor','sintactico.py',57),
  ('numero -> ENTERO','numero',1,'p_numero','sintactico.py',62),
  ('numero -> DECIMAL','numero',1,'p_numero','sintactico.py',63),
  ('operadores -> SUMA','operadores',1,'p_operadores','sintactico.py',68),
  ('operadores -> RESTA','operadores',1,'p_operadores','sintactico.py',69),
  ('operadores -> MULTIPLICACION','operadores',1,'p_operadores','sintactico.py',70),
  ('operadores -> DIVISION','operadores',1,'p_operadores','sintactico.py',71),
  ('operadores -> MODULO','operadores',1,'p_operadores','sintactico.py',72),
  ('operador_logico -> SMALLER','operador_logico',1,'p_operador_logico','sintactico.py',77),
  ('operador_logico -> GREATER','operador_logico',1,'p_operador_logico','sintactico.py',78),
  ('operador_logico -> IS_SMALLER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico.py',79),
  ('operador_logico -> IS_GREATER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico.py',80),
  ('incrementos_mat -> MINUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',86),
  ('incrementos_mat -> MOD_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',87),
  ('incrementos_mat -> MUL_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',88),
  ('incrementos_mat -> PLUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',89),
  ('boolean_answer -> TRUE','boolean_answer',1,'p_boolean_answer','sintactico.py',93),
  ('boolean_answer -> FALSE','boolean_answer',1,'p_boolean_answer','sintactico.py',94),
  ('condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_if',7,'p_condicion_if','sintactico.py',97),
  ('condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_elseif',7,'p_condicion_elseif','sintactico.py',101),
  ('condicion_else -> ELSE LBRACE cuerpo RBRACE','condicion_else',4,'p_condicion_else','sintactico.py',106),
  ('condicion_ifelse -> condicion_if','condicion_ifelse',1,'p_condicion_ifelse','sintactico.py',111),
  ('condicion_ifelse -> condicion_if condicion_else','condicion_ifelse',2,'p_condicion_ifelse','sintactico.py',112),
  ('condicion_ifelse -> condicion_if condicion_elseif','condicion_ifelse',2,'p_condicion_ifelse','sintactico.py',113),
  ('condicion_ifelse -> condicion_if condicion_elseif condicion_else','condicion_ifelse',3,'p_condicion_ifelse','sintactico.py',114),
  ('condicion_booleana -> AND','condicion_booleana',1,'p_condicion_boolena','sintactico.py',119),
  ('condicion_booleana -> OR','condicion_booleana',1,'p_condicion_boolena','sintactico.py',120),
  ('condicion_booleana -> XOR','condicion_booleana',1,'p_condicion_boolena','sintactico.py',121),
  ('condicion_booleana -> IS_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',122),
  ('condicion_booleana -> IS_NOT_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',123),
  ('condicion_booleana -> IS_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',124),
  ('condicion_booleana -> IS_NOT_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',125),
  ('condicion_booleana -> BOOLEAN_NOT','condicion_booleana',1,'p_condicion_boolena','sintactico.py',126),
  ('operaciones_mat -> valor operadores valor','operaciones_mat',3,'p_operaciones_mat','sintactico.py',131),
  ('operaciones_mat -> valor operadores operaciones_mat','operaciones_mat',3,'p_operaciones_mat','sintactico.py',132),
  ('operaciones_mat -> operaciones_mat_par','operaciones_mat',1,'p_operaciones_mat','sintactico.py',133),
  ('operaciones_mat_par -> LPAREN valor operadores valor RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico.py',139),
  ('operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico.py',140),
  ('operaciones_mat_par -> valor operadores operaciones_mat_par','operaciones_mat_par',3,'p_operaciones_mat_par','sintactico.py',141),
  ('asignacion -> VARIABLE EQUALS valor SEMI','asignacion',4,'p_asignacion','sintactico.py',146),
  ('asignacion -> VAR asignacion','asignacion',2,'p_asignacion','sintactico.py',147),
  ('asignacion -> proteccion asignacion','asignacion',2,'p_asignacion','sintactico.py',148),
  ('asignacion -> VARIABLE EQUALS brand','asignacion',3,'p_asignacion','sintactico.py',149),
  ('asignacion -> VARIABLE EQUALS escribir','asignacion',3,'p_asignacion','sintactico.py',150),
  ('asignacion -> VARIABLE EQUALS btrim','asignacion',3,'p_asignacion','sintactico.py',151),
  ('asignacion -> VARIABLE EQUALS leer','asignacion',3,'p_asignacion','sintactico.py',152),
  ('asignacion_array -> VARIABLE EQUALS array_def SEMI','asignacion_array',4,'p_asignacion_array','sintactico.py',157),
  ('constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI','constante',7,'p_constante','sintactico.py',161),
  ('constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI','constante',7,'p_constante','sintactico.py',162),
  ('lectura -> READLINE LPAREN STRING RPAREN SEMI','lectura',5,'p_lectura','sintactico.py',166),
  ('lectura -> READLINE LPAREN RPAREN SEMI','lectura',4,'p_lectura','sintactico.py',167),
  ('brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI','brand',7,'p_brand','sintactico.py',171),
  ('proteccion -> PUBLIC','proteccion',1,'p_proteccion','sintactico.py',175),
  ('proteccion -> PRIVATE','proteccion',1,'p_proteccion','sintactico.py',176),
  ('proteccion -> PROTECTED','proteccion',1,'p_proteccion','sintactico.py',177),
  ('proteccion -> STATIC','proteccion',1,'p_proteccion','sintactico.py',178),
  ('funciones -> funcion_nparams','funciones',1,'p_funciones','sintactico.py',183),
  ('funciones -> proteccion funcion_nparams','funciones',2,'p_funciones','sintactico.py',184),
  ('funciones -> funcion_blank','funciones',1,'p_funciones','sintactico.py',185),
  ('funciones -> proteccion funcion_blank','funciones',2,'p_funciones','sintactico.py',186),
  ('funciones -> funcion_void','funciones',1,'p_funciones','sintactico.py',187),
  ('param -> VARIABLE','param',1,'p_param','sintactico.py',192),
  ('param -> asignacion','param',1,'p_param','sintactico.py',193),
  ('funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def','funcion_nparams',6,'p_funcion_nparams','sintactico.py',198),
  ('params_list -> params_list COMMA param','params_list',3,'p_params_list','sintactico.py',202),
  ('params_list -> param','params_list',1,'p_params_list','sintactico.py',203),
  ('funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE','funcion_void',9,'p_funcion_void','sintactico.py',207),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def','funcion_blank',5,'p_funcion_blank','sintactico.py',211),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE','funcion_blank',7,'p_funcion_blank','sintactico.py',212),
  ('condicion -> VARIABLE operador_logico VARIABLE','condicion',3,'p_condicion','sintactico.py',217),
  ('condicion -> valor operador_logico valor','condicion',3,'p_condicion','sintactico.py',218),
  ('condicion -> VARIABLE operador_logico valor','condicion',3,'p_condicion','sintactico.py',219),
  ('bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE','bwhile',7,'p_bwhile','sintactico.py',224),
  ('bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque','bwhile',6,'p_bwhile','sintactico.py',225),
  ('bdo -> DO LBRACE cuerpo RBRACE bwhile','bdo',5,'p_bdo','sintactico.py',230),
  ('bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE','bswitch',8,'p_bswitch','sintactico.py',235),
  ('bcase -> CASE ENTERO COLON','bcase',3,'p_bcase','sintactico.py',238),
  ('bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI','bcolas',7,'p_bcolas','sintactico.py',247),
  ('bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def','bfor',8,'p_bfor','sintactico.py',252),
  ('stc_bloque -> stc_bloque SEMI cuerpo','stc_bloque',3,'p_stc_bloque','sintactico.py',256),
  ('stc_bloque -> breturn','stc_bloque',1,'p_stc_bloque','sintactico.py',257),
  ('breturn -> empty','breturn',1,'p_breturn','sintactico.py',260),
  ('breturn -> RETURN SEMI','breturn',2,'p_breturn','sintactico.py',261),
  ('breturn -> RETURN NULL SEMI','breturn',3,'p_breturn','sintactico.py',262),
  ('breturn -> RETURN VARIABLE SEMI','breturn',3,'p_breturn','sintactico.py',263),
  ('breturn -> RETURN NOMBRE SEMI','breturn',3,'p_breturn','sintactico.py',264),
  ('breturn -> RETURN boolean_answer SEMI','breturn',3,'p_breturn','sintactico.py',265),
  ('stc_bloque_def -> LBRACE stc_bloque RBRACE','stc_bloque_def',3,'p_stc_bloque_def','sintactico.py',269),
  ('for_incr -> VARIABLE SUMA SUMA','for_incr',3,'p_for_incr','sintactico.py',273),
  ('for_incr -> SUMA SUMA VARIABLE','for_incr',3,'p_for_incr','sintactico.py',274),
  ('for_incr -> VARIABLE RESTA RESTA','for_incr',3,'p_for_incr','sintactico.py',275),
  ('for_incr -> RESTA RESTA VARIABLE','for_incr',3,'p_for_incr','sintactico.py',276),
  ('for_incr -> VARIABLE SUMA EQUALS numero','for_incr',4,'p_for_incr','sintactico.py',277),
  ('for_incr -> VARIABLE RESTA EQUALS numero','for_incr',4,'p_for_incr','sintactico.py',278),
  ('bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def','bforeach',7,'p_bforeach','sintactico.py',282),
  ('array_def -> ARRAY LPAREN RPAREN','array_def',3,'p_array_def','sintactico.py',286),
  ('array_def -> ARRAY LPAREN array_elmnt RPAREN','array_def',4,'p_array_def','sintactico.py',287),
  ('array_elmnt -> array_elmnt COMMA valor','array_elmnt',3,'p_array_elmnt','sintactico.py',291),
  ('array_elmnt -> valor','array_elmnt',1,'p_array_elmnt','sintactico.py',292),
  ('btry -> TRY LBRACE stc_bloque_def RBRACE catches','btry',5,'p_btry','sintactico.py',296),
  ('catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def','catches',7,'p_catches','sintactico.py',300),
  ('catches -> empty','catches',1,'p_catches','sintactico.py',301),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',305),
  ('bgoto -> GOTO NOMBRE SEMI','bgoto',3,'p_bgoto','sintactico.py',309),
  ('bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI','bpila',7,'p_bpila','sintactico.py',313),
  ('bcortes -> EXIT SEMI','bcortes',2,'p_bcortes','sintactico.py',317),
  ('bcortes -> BREAK SEMI','bcortes',2,'p_bcortes','sintactico.py',318),
  ('bcortes -> DEFAULT SEMI','bcortes',2,'p_bcortes','sintactico.py',319),
  ('bcortes -> CONTINUE SEMI','bcortes',2,'p_bcortes','sintactico.py',320),
  ('bconcat -> STRING CONCAT STRING SEMI','bconcat',4,'p_bconcat','sintactico.py',324),
  ('bconcat -> VARIABLE EQUALS VARIABLE CONCAT VARIABLE SEMI','bconcat',6,'p_bconcat','sintactico.py',325),
  ('escribir -> FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI','escribir',7,'p_escribir','sintactico.py',329),
  ('btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI','btrim',8,'p_btrim','sintactico.py',333),
  ('leer -> READLINE LPAREN STRING RPAREN SEMI','leer',5,'p_leer','sintactico.py',337),
  ('otros -> SMALLER NOMBRE GREATER','otros',3,'p_otros','sintactico.py',340),
]
