
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY AS BOOL BOOLEAN BOOLEANO BREAK CADENA CASE CATCH CLOSE_TAG COLON COMENTARIOS COMMA CONCAT CONCAT_EQUAL CONTINUE DECIMAL DEFAULT DEFINE DIVISION DIV_EQUAL DO DOC_COMENTARIOS DOUBLE ECHO ELSE ELSEIF ENTERO EQUALS EXIT FLOAT FOR FOREACH FUNCTION FWRITE GOTO GREATER IF INT INTEGER IS_EQUAL IS_GREATER_OR_EQUAL IS_IDENTICAL IS_NOT_EQUAL IS_NOT_IDENTICAL IS_SMALLER_OR_EQUAL LBRACE LBRACKET LPAREN MINUS_EQUAL MODULO MOD_EQUAL MULTIPLICACION MUL_EQUAL NEW NOMBRE NULL OBJECT OPEN_TAG OR PLUS_EQUAL PRINT PRIVATE PROTECTED PUBLIC RAND RBRACE RBRACKET READLINE RESTA RETURN RPAREN SEMI SMALLER SPLQUEUE SPLSTACK STATIC STRING SUMA SWITCH TRIM TRY VAR VARIABLE VOID WHILE XORcuerpo : imprimir\n            | asignacion\n            | funciones\n            | llamada_funcion\n            | constante\n            | lectura\n            | condicion_ifelse\n            | bwhile\n            | bdo\n            | bfor\n            | incrementOp\n            | bforeach\n            | btry\n            | bswitch\n            | bcase\n            | bgoto\n            | bcolas\n            | bpila\n            | bcortes\n            | brand\n            | escribir\n            | btrim\n            | otros\n            | breturn\n            | comment\n            | casting\n            | bconcat\n            | simbolos\n  asignacion : VARIABLE EQUALS valor SEMI\n                | VAR asignacion\n                | proteccion asignacion\n                | VARIABLE EQUALS brand\n                | VARIABLE EQUALS escribir\n                | VARIABLE EQUALS btrim\n                | VARIABLE EQUALS lectura\n                | VARIABLE EQUALS bconcat\n                | asignacion_array\n                | VARIABLE EQUALS operaciones_mat \n                | aumentoCasting\n                | VARIABLE EQUALS llamada_funcion\n  asignacion_array : VARIABLE EQUALS array_def SEMIconstante : DEFINE LPAREN CADENA COMMA valor RPAREN SEMI\n          | DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMIvalor : tipoDato\n            | bcolas\n            | bpila\n  tipoDato : numero\n            | CADENA\n            | BOOLEANO\n  numero : ENTERO\n          | DECIMAL\n  imprimir : ECHO valor SEMI\n            | PRINT valor SEMI\n            | PRINT LPAREN valor RPAREN SEMI\n            | PRINT bconcat\n            | ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI\n            | ECHO bconcat\n            | ECHO operaciones_mat SEMI\n            | PRINT operaciones_mat SEMI\n            | ECHO VARIABLE SEMI\n            | PRINT VARIABLE SEMI\n  condicion_if :  IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n                  | IF LPAREN condicion RPAREN llamada_funcion\n  condicion_elseif :  ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_else :  ELSE LBRACE cuerpo RBRACE\n  condicion_ifelse : condicion_if\n                      | condicion_if condicion_else\n                      | condicion_if condicion_elseif\n                      | condicion_if condicion_elseif condicion_else\n   condicion : VARIABLE operador_logico VARIABLE\n            | valor operador_logico valor \n            | VARIABLE operador_logico valor\n            | VARIABLE condicion_booleana VARIABLE\n            | valor condicion_booleana valor\n            | VARIABLE condicion_booleana valor\n            | LPAREN VARIABLE operadores valor RPAREN operador_logico valor\n            | LPAREN VARIABLE operadores valor RPAREN condicion_booleana valor\n            | condicion condicion_booleana condicion\n            | condicion condicion_booleana comprobacion\n            | aumentoCasting\n            | VARIABLE\n            \n  bfor : FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_defstc_bloque : stc_bloque SEMI cuerpo\n                | breturn\n  stc_bloque_def : LBRACE stc_bloque RBRACE\n                    | LBRACE cuerpo RBRACE\n  for_incr : VARIABLE SUMA SUMA\n          | SUMA SUMA VARIABLE\n          | VARIABLE RESTA RESTA\n          | RESTA RESTA VARIABLE\n          | VARIABLE SUMA EQUALS numero\n          | VARIABLE RESTA EQUALS numero\n  incrementOp : VARIABLE SUMA SUMA SEMI\n              | VARIABLE RESTA RESTA SEMI\n  bforeach :  FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def bwhile : WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE \n  | WHILE LPAREN condicion RPAREN COLON stc_bloque \n  | WHILE LPAREN condicion RPAREN SEMI\n  | \n   bdo : DO LBRACE cuerpo RBRACE bwhile \n   bswitch : SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACEbcase : CASE ENTERO COLON\n          | CASE CADENA COLON  innerSwitch :  bcase cuerpo BREAK SEMI\n                 | bcase cuerpo BREAK SEMI innerSwitch \n  btry : TRY LBRACE stc_bloque_def RBRACE catchescatches : catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def\n          | emptyoperadores : SUMA \n                  | RESTA\n                  | MULTIPLICACION\n                  | DIVISION\n                  | MODULO\n  operador_logico :  SMALLER\n                        | GREATER\n                        | IS_SMALLER_OR_EQUAL\n                        | IS_GREATER_OR_EQUAL\n  incrementos_mat :  MINUS_EQUAL\n                        | MOD_EQUAL\n                        | MUL_EQUAL\n                        | PLUS_EQUAL\n                        | DIV_EQUAL\n  condicion_booleana :  AND\n                        | OR\n                        | XOR\n                        | IS_EQUAL\n                        | IS_NOT_EQUAL\n                        | IS_IDENTICAL\n                        | IS_NOT_IDENTICAL\n  operaciones_mat :  valor operadores valor\n                        | valor operadores operaciones_mat\n                        | VARIABLE operadores VARIABLE\n                        | operaciones_mat_par\n                       \n  operaciones_mat_par :  LPAREN valor operadores valor RPAREN\n                          |  LPAREN valor operadores operaciones_mat_par RPAREN\n                          | LPAREN VARIABLE operadores VARIABLE RPAREN\n                          | LPAREN VARIABLE operadores valor RPAREN operadores valor\n                          | LPAREN VARIABLE operadores tipoDato RPAREN\n  funciones : funcion_nparams\n              | proteccion funcion_nparams\n              | funcion_blank\n              | proteccion funcion_blank\n              | funcion_void\n  param : VARIABLE\n          | asignacion\n          funcion_nparams : FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_defparams_list : params_list COMMA param\n                 | param\n                 | empty\n  funcion_void : FUNCTION NOMBRE LPAREN  RPAREN COLON VOID LBRACE empty RBRACE funcion_blank : FUNCTION NOMBRE LPAREN  RPAREN stc_bloque_def\n                    | FUNCTION NOMBRE LPAREN  RPAREN LBRACE empty RBRACE\n  llamada_funcion : NOMBRE LPAREN params_list RPAREN SEMIbrand : RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMIproteccion : PUBLIC\n          | PRIVATE\n          | PROTECTED\n          | STATIC\n  breturn : empty\n        | RETURN SEMI \n        | RETURN NULL SEMI\n        | RETURN VARIABLE SEMI\n        | RETURN BOOLEANO SEMI\n        | breturn RBRACE\n        array_def : ARRAY LPAREN RPAREN\n          | ARRAY LPAREN array_elmnt RPARENarray_elmnt : array_elmnt COMMA valor\n            | valorempty :  bcolas : VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI\n  bpila : VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMIlectura : READLINE LPAREN CADENA RPAREN SEMI\n          | READLINE LPAREN RPAREN SEMIescribir : FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI\n   btrim : TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI\n   comment : COMENTARIOS\n              | DOC_COMENTARIOS\n   bgoto : GOTO NOMBRE SEMIbcortes : EXIT SEMI\n              | BREAK SEMI\n              | DEFAULT SEMI\n              | CONTINUE SEMI\n   otros : SMALLER NOMBRE GREATER\n            | SMALLER DIVISION NOMBRE GREATER\n            | NOMBRE COLON \n   \n    comprobacion : NOMBRE LPAREN valor RPAREN\n                  | NOMBRE LPAREN VARIABLE RPAREN\n  \n  simbolos : LPAREN RPAREN\n            | LPAREN\n            | RPAREN\n            | LBRACKET RBRACKET\n            | LBRACKET\n            | RBRACKET\n            | LBRACE RBRACE\n            | LBRACE\n            | RBRACE instrucciones\n            | OPEN_TAG CLOSE_TAG\n            | OPEN_TAG\n            | CLOSE_TAG\n  \n    instrucciones : condicion_else\n                  | condicion_elseif\n                  | bwhile\n                  | bfor\n                  | funciones\n                  | bswitch\n                  | bdo\n  bconcat : CADENA CONCAT CADENA SEMI\n            | VARIABLE CONCAT CADENA SEMI\n            | VARIABLE CONCAT_EQUAL CADENA SEMI\n            | CADENA CONCAT_EQUAL CADENA SEMI\n            | VARIABLE CONCAT VARIABLE SEMI\n            | VARIABLE CONCAT CADENA CONCAT VARIABLE SEMI\n            \n  tiposCast :  STRING\n            | BOOL\n            | BOOLEAN\n            | DOUBLE\n            | FLOAT\n            | ARRAY\n            | OBJECT \n            | INTEGER\n            | INT\n        \n            \n   casting : VARIABLE EQUALS LPAREN tiposCast RPAREN VARIABLE SEMI  \n              | LPAREN tiposCast RPAREN VARIABLE SEMI\n   \n    aumentoCasting : VARIABLE incrementos_mat tipoDato SEMI\n                    | VARIABLE EQUALS VARIABLE operadores tipoDato SEMI\n                    | VARIABLE EQUALS VARIABLE operadores VARIABLE operadores operaciones_mat_par SEMI\n                    | VARIABLE operadores tipoDato condicion_booleana valor\n                    | VARIABLE incrementos_mat VARIABLE SEMI\n  '
    
_lr_action_items = {'ECHO':([0,155,232,242,245,246,373,383,385,403,418,],[30,30,30,30,-102,-103,30,30,30,30,30,]),'PRINT':([0,155,232,242,245,246,373,383,385,403,418,],[31,31,31,31,-102,-103,31,31,31,31,31,]),'VARIABLE':([0,30,31,38,39,40,41,68,73,74,75,76,82,86,87,88,90,91,92,93,94,96,111,114,117,119,121,122,123,124,125,126,127,128,129,131,132,144,155,156,157,159,178,180,181,182,186,190,195,203,204,205,206,207,208,209,211,223,232,233,234,240,242,245,246,256,258,259,262,263,264,268,269,270,274,275,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,295,296,298,303,304,305,306,307,308,309,310,311,312,315,337,339,343,348,352,355,370,373,383,385,388,389,390,392,394,399,400,403,408,409,418,426,428,429,443,444,449,450,455,456,458,459,469,471,],[37,85,99,130,130,-37,-39,174,-155,-156,-157,-158,-50,-44,-45,-46,-133,-47,-49,189,-51,189,199,201,217,220,-118,-119,-120,-121,-122,-111,-112,-113,-30,130,-31,236,37,130,241,244,236,260,-109,-110,262,-48,266,-32,-33,-34,-35,-36,-38,-40,189,201,37,236,301,236,37,-102,-103,199,-130,-131,-132,331,332,199,339,-29,-41,331,-211,347,-208,-209,-228,-224,331,-123,-124,-125,-126,-127,-128,-129,199,331,-207,-210,-173,236,362,364,366,-114,-115,-116,-117,331,331,371,-153,-132,397,-227,-172,331,411,37,37,37,-134,-135,-136,-138,-225,331,-212,37,438,439,37,331,-170,-171,467,468,-154,-174,-137,-226,331,331,477,-175,]),'VAR':([0,38,39,73,74,75,76,111,131,155,156,232,242,245,246,256,268,292,373,383,385,403,418,],[38,38,38,-155,-156,-157,-158,38,38,38,38,38,38,-102,-103,38,38,38,38,38,38,38,38,]),'NOMBRE':([0,30,58,66,77,114,135,136,155,168,169,171,223,232,242,245,246,285,286,287,288,289,290,291,303,323,327,373,383,385,403,418,446,],[34,81,162,170,177,213,224,226,34,249,250,252,213,34,34,-102,-103,-123,-124,-125,-126,-127,-128,-129,361,380,213,34,34,34,34,34,469,]),'DEFINE':([0,155,232,242,245,246,373,383,385,403,418,],[45,45,45,45,-102,-103,45,45,45,45,45,]),'READLINE':([0,114,155,223,232,242,245,246,373,383,385,403,418,],[47,47,47,47,47,47,-102,-103,47,47,47,47,47,]),'WHILE':([0,51,155,232,242,245,246,313,373,383,385,403,418,],[49,49,49,49,49,-102,-103,49,49,49,49,49,49,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,32,33,35,36,40,41,42,43,44,48,50,51,67,69,70,71,72,79,82,83,86,87,88,90,91,92,94,97,101,112,113,129,132,133,134,140,141,145,146,147,148,149,150,151,152,153,163,164,165,166,172,176,179,184,185,190,191,193,194,203,204,205,206,207,208,209,231,245,246,247,251,253,254,255,258,259,262,270,274,276,277,278,280,281,282,283,295,296,298,313,319,324,335,336,337,339,348,352,353,357,358,369,372,373,374,375,376,382,386,387,388,389,390,392,394,400,406,407,415,422,428,429,430,432,433,436,445,447,449,450,452,454,455,456,457,462,471,479,482,],[-99,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-189,-190,-192,-193,-37,-39,-139,-141,-143,-66,-195,-99,-159,-176,-177,-198,-199,-164,-50,-57,-44,-45,-46,-133,-47,-49,-51,-55,-188,-185,-191,-30,-31,-140,-142,-67,-68,-194,-196,-200,-201,-202,-203,-204,-205,-206,-179,-180,-181,-182,-160,-197,-52,-58,-60,-48,-53,-59,-61,-32,-33,-34,-35,-36,-38,-40,-69,-102,-103,-178,-183,-161,-162,-163,-130,-131,-132,-29,-41,-93,-94,-211,-208,-209,-228,-224,-207,-210,-173,-99,-169,-184,-54,-223,-153,-132,-227,-172,-65,-169,-98,-100,-85,-99,-86,-106,-108,-151,-63,-56,-134,-135,-136,-138,-225,-212,-84,-97,-83,-146,-170,-171,-222,-42,-43,-96,-95,-101,-154,-174,-152,-62,-137,-226,-64,-82,-175,-150,-107,]),'DO':([0,51,155,232,242,245,246,373,383,385,403,418,],[52,52,52,52,52,-102,-103,52,52,52,52,52,]),'FOR':([0,51,155,232,242,245,246,373,383,385,403,418,],[53,53,53,53,53,-102,-103,53,53,53,53,53,]),'FOREACH':([0,155,232,242,245,246,373,383,385,403,418,],[54,54,54,54,-102,-103,54,54,54,54,54,]),'TRY':([0,155,232,242,245,246,373,383,385,403,418,],[55,55,55,55,-102,-103,55,55,55,55,55,]),'SWITCH':([0,51,155,232,242,245,246,373,383,385,403,418,],[56,56,56,56,56,-102,-103,56,56,56,56,56,]),'CASE':([0,155,232,242,245,246,373,377,383,385,403,418,478,],[57,57,57,57,-102,-103,57,57,57,57,57,57,57,]),'GOTO':([0,155,232,242,245,246,373,383,385,403,418,],[58,58,58,58,-102,-103,58,58,58,58,58,]),'EXIT':([0,155,232,242,245,246,373,383,385,403,418,],[59,59,59,59,-102,-103,59,59,59,59,59,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,32,33,35,36,40,41,42,43,44,48,50,51,67,69,70,71,72,79,82,83,86,87,88,90,91,92,94,97,101,112,113,129,132,133,134,140,141,145,146,147,148,149,150,151,152,153,155,163,164,165,166,172,176,179,184,185,190,191,193,194,203,204,205,206,207,208,209,231,232,242,245,246,247,251,253,254,255,258,259,262,270,274,276,277,278,280,281,282,283,295,296,298,313,319,324,335,336,337,339,348,352,353,357,358,369,372,373,374,375,376,382,383,385,386,387,388,389,390,392,394,400,403,406,407,415,418,422,428,429,430,432,433,436,445,447,448,449,450,452,454,455,456,457,462,471,479,482,],[60,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-189,-190,-192,-193,-37,-39,-139,-141,-143,-66,-195,-99,-159,-176,-177,-198,-199,-164,-50,-57,-44,-45,-46,-133,-47,-49,-51,-55,-188,-185,-191,-30,-31,-140,-142,-67,-68,-194,-196,-200,-201,-202,-203,-204,-205,-206,60,-179,-180,-181,-182,-160,-197,-52,-58,-60,-48,-53,-59,-61,-32,-33,-34,-35,-36,-38,-40,-69,60,60,-102,-103,-178,-183,-161,-162,-163,-130,-131,-132,-29,-41,-93,-94,-211,-208,-209,-228,-224,-207,-210,-173,-99,-169,-184,-54,-223,-153,-132,-227,-172,-65,-169,-98,-100,-85,60,-86,-106,-108,-151,60,60,-63,-56,-134,-135,-136,-138,-225,-212,60,-84,-97,-83,60,-146,-170,-171,-222,-42,-43,-96,-95,-101,470,-154,-174,-152,-62,-137,-226,-64,-82,-175,-150,-107,]),'DEFAULT':([0,155,232,242,245,246,373,383,385,403,418,],[61,61,61,61,-102,-103,61,61,61,61,61,]),'CONTINUE':([0,155,232,242,245,246,373,383,385,403,418,],[62,62,62,62,-102,-103,62,62,62,62,62,]),'RAND':([0,114,155,223,232,242,245,246,373,383,385,403,418,],[63,63,63,63,63,63,-102,-103,63,63,63,63,63,]),'FWRITE':([0,114,155,223,232,242,245,246,373,383,385,403,418,],[64,64,64,64,64,64,-102,-103,64,64,64,64,64,]),'TRIM':([0,114,155,223,232,242,245,246,373,383,385,403,418,],[65,65,65,65,65,65,-102,-103,65,65,65,65,65,]),'SMALLER':([0,82,86,87,88,91,92,94,155,190,232,236,237,242,245,246,373,383,385,403,418,428,429,435,],[66,-50,-44,-45,-46,-47,-49,-51,66,-48,66,307,307,66,-102,-103,66,66,66,66,66,-170,-171,307,]),'RETURN':([0,155,232,242,245,246,356,357,373,383,385,403,418,],[68,68,68,68,-102,-103,68,68,68,68,68,68,68,]),'COMENTARIOS':([0,155,232,242,245,246,373,383,385,403,418,],[69,69,69,69,-102,-103,69,69,69,69,69,]),'DOC_COMENTARIOS':([0,155,232,242,245,246,373,383,385,403,418,],[70,70,70,70,-102,-103,70,70,70,70,70,]),'LPAREN':([0,30,31,34,40,41,45,47,49,53,54,56,63,64,65,78,82,86,87,88,90,91,92,94,114,126,127,128,129,132,143,144,155,177,178,180,181,182,190,203,204,205,206,207,208,209,213,214,223,224,232,233,240,242,245,246,250,258,259,262,263,270,271,272,274,278,280,281,282,283,285,286,287,288,289,290,291,295,296,298,303,337,339,348,352,361,373,383,385,388,389,390,392,393,394,400,403,416,418,428,429,449,450,455,456,471,],[32,93,96,111,-37,-39,136,139,144,156,157,159,167,168,169,178,-50,-44,-45,-46,-133,-47,-49,-51,211,-111,-112,-113,-30,-31,233,234,32,256,234,93,-109,-110,-48,-32,-33,-34,-35,-36,-38,-40,111,275,93,292,32,234,234,32,-102,-103,323,-130,-131,-132,93,-29,341,342,-41,-211,-208,-209,-228,-224,-123,-124,-125,-126,-127,-128,-129,-207,-210,-173,234,-153,-132,-227,-172,408,32,32,32,-134,-135,-136,-138,93,-225,-212,32,446,32,-170,-171,-154,-174,-137,-226,-175,]),'CADENA':([0,30,31,40,41,57,82,86,87,88,90,91,92,93,94,96,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,136,137,138,139,144,155,178,180,181,182,190,203,204,205,206,207,208,209,211,223,232,233,240,242,245,246,258,259,262,263,264,269,270,274,275,278,280,281,282,283,284,285,286,287,288,289,290,291,293,295,296,298,303,304,305,307,308,309,310,311,312,322,337,339,348,352,355,373,383,385,388,389,390,392,394,399,400,403,408,409,418,426,428,429,449,450,455,456,458,459,471,],[46,89,89,-37,-39,161,-50,-44,-45,-46,-133,-47,-49,190,-51,190,89,-109,-110,218,219,190,190,-118,-119,-120,-121,-122,-111,-112,-113,-30,-31,225,227,228,229,190,46,190,190,-109,-110,-48,-32,-33,-34,-35,-36,-38,-40,190,89,46,190,190,46,-102,-103,-130,-131,-132,190,190,190,-29,-41,190,-211,-208,-209,-228,-224,190,-123,-124,-125,-126,-127,-128,-129,190,-207,-210,-173,190,190,190,-114,-115,-116,-117,190,190,379,-153,-132,-227,-172,190,46,46,46,-134,-135,-136,-138,-225,190,-212,46,190,190,46,190,-170,-171,-154,-174,-137,-226,190,190,-175,]),'RPAREN':([0,32,40,41,82,86,87,88,90,91,92,94,100,102,103,104,105,106,107,108,109,110,111,129,132,139,155,190,192,196,197,198,199,200,203,204,205,206,207,208,209,229,232,235,236,238,242,244,245,246,256,257,258,259,262,270,273,274,275,278,280,281,282,283,292,295,296,298,300,325,329,330,332,333,334,337,338,339,341,342,345,346,348,350,351,352,359,360,362,363,364,365,367,368,371,373,378,379,380,383,385,388,389,390,392,394,400,403,404,410,418,421,428,429,431,437,438,449,450,455,456,460,461,463,465,467,468,471,473,474,475,476,477,],[33,101,-37,-39,-50,-44,-45,-46,-133,-47,-49,-51,195,-213,-214,-215,-216,-217,-218,-219,-220,-221,-169,-30,-31,230,33,-48,265,267,-148,-149,-144,-145,-32,-33,-34,-35,-36,-38,-40,297,33,302,-81,-80,33,320,-102,-103,326,327,-130,-131,-132,-29,343,-41,344,-211,-208,-209,-228,-224,349,-207,-210,-173,354,381,388,389,390,391,392,-153,-147,-132,395,396,398,-168,-227,401,402,-172,-78,-79,-70,-72,-73,-75,-71,-74,414,33,419,420,421,33,33,-134,-135,-136,-138,-225,-212,33,435,440,33,451,-170,-171,-167,460,461,-154,-174,-137,-226,-186,-187,-87,-89,-88,-90,-175,-76,-77,-91,-92,480,]),'LBRACKET':([0,81,155,232,242,245,246,373,383,385,403,418,],[35,183,35,35,35,-102,-103,35,35,35,35,35,]),'RBRACKET':([0,35,155,232,242,245,246,261,373,383,385,403,418,],[36,113,36,36,36,-102,-103,328,36,36,36,36,36,]),'LBRACE':([0,52,55,142,155,158,232,242,245,246,302,320,326,327,349,354,373,381,383,385,403,414,418,424,440,480,],[50,155,158,232,50,242,50,50,-102,-103,356,377,383,385,383,403,50,242,50,50,50,242,50,453,242,242,]),'RBRACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,32,33,35,36,40,41,42,43,44,48,50,51,67,69,70,71,72,79,82,83,86,87,88,90,91,92,94,97,101,112,113,129,132,133,134,140,141,145,146,147,148,149,150,151,152,153,155,163,164,165,166,172,176,179,184,185,190,191,193,194,203,204,205,206,207,208,209,231,232,239,242,243,245,246,247,251,253,254,255,258,259,262,270,274,276,277,278,280,281,282,283,295,296,298,299,313,316,317,318,319,324,335,336,337,339,348,352,353,356,357,358,369,372,373,374,375,376,382,383,385,386,387,388,389,390,392,394,400,403,405,406,407,415,417,418,422,423,425,428,429,430,432,433,434,436,445,447,449,450,452,453,454,455,456,457,462,471,472,478,479,481,482,],[51,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,79,-25,-26,-27,-28,-189,-190,-192,-193,-37,-39,-139,-141,-143,-66,145,-99,-159,-176,-177,-198,-199,-164,-50,-57,-44,-45,-46,-133,-47,-49,-51,-55,-188,-185,-191,-30,-31,-140,-142,-67,-68,-194,-196,-200,-201,-202,-203,-204,-205,-206,51,-179,-180,-181,-182,-160,-197,-52,-58,-60,-48,-53,-59,-61,-32,-33,-34,-35,-36,-38,-40,-69,51,313,51,319,-102,-103,-178,-183,-161,-162,-163,-130,-131,-132,-29,-41,-93,-94,-211,-208,-209,-228,-224,-207,-210,-173,353,-99,372,374,79,-169,-184,-54,-223,-153,-132,-227,-172,-65,-169,-169,-98,-100,-85,51,-86,-106,-108,-151,51,51,-63,-56,-134,-135,-136,-138,-225,-212,51,436,79,-97,-83,447,51,-146,452,454,-170,-171,-222,-42,-43,457,-96,-95,-101,-154,-174,-152,-169,-62,-137,-226,-64,-82,-175,479,-104,-150,-105,-107,]),'OPEN_TAG':([0,155,232,242,245,246,373,383,385,403,418,],[71,71,71,71,-102,-103,71,71,71,71,71,]),'CLOSE_TAG':([0,71,155,232,242,245,246,373,383,385,403,418,],[72,176,72,72,72,-102,-103,72,72,72,72,72,]),'PUBLIC':([0,38,39,51,73,74,75,76,111,131,155,156,232,242,245,246,256,268,292,373,383,385,403,418,],[73,73,73,73,-155,-156,-157,-158,73,73,73,73,73,73,-102,-103,73,73,73,73,73,73,73,73,]),'PRIVATE':([0,38,39,51,73,74,75,76,111,131,155,156,232,242,245,246,256,268,292,373,383,385,403,418,],[74,74,74,74,-155,-156,-157,-158,74,74,74,74,74,74,-102,-103,74,74,74,74,74,74,74,74,]),'PROTECTED':([0,38,39,51,73,74,75,76,111,131,155,156,232,242,245,246,256,268,292,373,383,385,403,418,],[75,75,75,75,-155,-156,-157,-158,75,75,75,75,75,75,-102,-103,75,75,75,75,75,75,75,75,]),'STATIC':([0,38,39,51,73,74,75,76,111,131,155,156,232,242,245,246,256,268,292,373,383,385,403,418,],[76,76,76,76,-155,-156,-157,-158,76,76,76,76,76,76,-102,-103,76,76,76,76,76,76,76,76,]),'FUNCTION':([0,39,51,73,74,75,76,154,155,232,242,245,246,373,383,385,403,418,],[77,135,77,-155,-156,-157,-158,135,77,77,77,-102,-103,77,77,77,77,77,]),'IF':([0,155,232,242,245,246,373,383,385,403,418,],[78,78,78,78,-102,-103,78,78,78,78,78,]),'SEMI':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,32,33,35,36,40,41,42,43,44,48,50,51,59,60,61,62,67,68,69,70,71,72,79,80,82,83,84,85,86,87,88,89,90,91,92,94,95,97,98,99,101,112,113,129,132,133,134,140,141,145,146,147,148,149,150,151,152,153,162,163,164,165,166,172,173,174,175,176,179,184,185,190,191,193,194,202,203,204,205,206,207,208,209,212,215,216,217,218,219,220,221,227,228,230,231,236,238,242,245,246,247,251,253,254,255,258,259,262,265,266,267,270,274,276,277,278,280,281,282,283,295,296,297,298,302,313,314,316,318,319,324,328,335,336,337,339,340,344,347,348,352,353,356,357,358,359,360,362,363,364,365,367,368,369,372,373,374,375,376,382,383,386,387,388,389,390,392,394,395,396,397,398,400,401,402,405,406,407,415,419,420,422,423,427,428,429,430,432,433,436,445,447,449,450,451,452,454,455,456,457,460,461,462,470,471,473,474,479,482,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-189,-190,-192,-193,-37,-39,-139,-141,-143,-66,-195,-99,163,164,165,166,-159,172,-176,-177,-198,-199,-164,179,-50,-57,184,185,-44,-45,-46,-48,-133,-47,-49,-51,191,-55,193,194,-188,-185,-191,-30,-31,-140,-142,-67,-68,-194,-196,-200,-201,-202,-203,-204,-205,-206,247,-179,-180,-181,-182,-160,253,254,255,-197,-52,-58,-60,-48,-53,-59,-61,270,-32,-33,-34,-35,-36,-38,-40,274,276,277,278,280,281,282,283,295,296,298,-69,-81,-80,-169,-102,-103,-178,-183,-161,-162,-163,-130,-131,-132,335,336,337,-29,-41,-93,-94,-211,-208,-209,-228,-224,-207,-210,352,-173,358,-99,370,373,-84,-169,-184,387,-54,-223,-153,-132,394,-165,400,-227,-172,-65,-169,-169,-98,-78,-79,-70,-72,-73,-75,-71,-74,-100,-85,-99,-86,-106,-108,-151,-169,-63,-56,-134,-135,-136,-138,-225,428,429,430,-166,-212,432,433,373,-84,373,-83,449,450,-146,-159,456,-170,-171,-222,-42,-43,-96,-95,-101,-154,-174,471,-152,-62,-137,-226,-64,-186,-187,-82,478,-175,-76,-77,-150,-107,]),'BOOLEANO':([30,31,40,41,68,82,86,87,88,90,91,92,93,94,96,114,115,116,119,120,121,122,123,124,125,126,127,128,129,132,144,178,180,181,182,190,203,204,205,206,207,208,209,211,223,233,240,258,259,262,263,264,269,270,274,275,278,280,281,282,283,284,285,286,287,288,289,290,291,293,295,296,298,303,304,305,307,308,309,310,311,312,337,339,348,352,355,388,389,390,392,394,399,400,408,409,426,428,429,449,450,455,456,458,459,471,],[92,92,-37,-39,175,-50,-44,-45,-46,-133,-47,-49,92,-51,92,92,-109,-110,92,92,-118,-119,-120,-121,-122,-111,-112,-113,-30,-31,92,92,92,-109,-110,-48,-32,-33,-34,-35,-36,-38,-40,92,92,92,92,-130,-131,-132,92,92,92,-29,-41,92,-211,-208,-209,-228,-224,92,-123,-124,-125,-126,-127,-128,-129,92,-207,-210,-173,92,92,92,-114,-115,-116,-117,92,92,-153,-132,-227,-172,92,-134,-135,-136,-138,-225,92,-212,92,92,92,-170,-171,-154,-174,-137,-226,92,92,-175,]),'ENTERO':([30,31,40,41,57,82,86,87,88,90,91,92,93,94,96,114,115,116,119,120,121,122,123,124,125,126,127,128,129,132,144,167,178,180,181,182,183,190,203,204,205,206,207,208,209,211,223,233,240,258,259,262,263,264,269,270,274,275,278,280,281,282,283,284,285,286,287,288,289,290,291,293,295,296,298,303,304,305,307,308,309,310,311,312,321,337,339,348,352,355,388,389,390,392,394,399,400,408,409,426,428,429,449,450,455,456,458,459,464,466,471,],[82,82,-37,-39,160,-50,-44,-45,-46,-133,-47,-49,82,-51,82,82,-109,-110,82,82,-118,-119,-120,-121,-122,-111,-112,-113,-30,-31,82,248,82,82,-109,-110,261,-48,-32,-33,-34,-35,-36,-38,-40,82,82,82,82,-130,-131,-132,82,82,82,-29,-41,82,-211,-208,-209,-228,-224,82,-123,-124,-125,-126,-127,-128,-129,82,-207,-210,-173,82,82,82,-114,-115,-116,-117,82,82,378,-153,-132,-227,-172,82,-134,-135,-136,-138,-225,82,-212,82,82,82,-170,-171,-154,-174,-137,-226,82,82,82,82,-175,]),'DECIMAL':([30,31,40,41,82,86,87,88,90,91,92,93,94,96,114,115,116,119,120,121,122,123,124,125,126,127,128,129,132,144,178,180,181,182,190,203,204,205,206,207,208,209,211,223,233,240,258,259,262,263,264,269,270,274,275,278,280,281,282,283,284,285,286,287,288,289,290,291,293,295,296,298,303,304,305,307,308,309,310,311,312,337,339,348,352,355,388,389,390,392,394,399,400,408,409,426,428,429,449,450,455,456,458,459,464,466,471,],[94,94,-37,-39,-50,-44,-45,-46,-133,-47,-49,94,-51,94,94,-109,-110,94,94,-118,-119,-120,-121,-122,-111,-112,-113,-30,-31,94,94,94,-109,-110,-48,-32,-33,-34,-35,-36,-38,-40,94,94,94,94,-130,-131,-132,94,94,94,-29,-41,94,-211,-208,-209,-228,-224,94,-123,-124,-125,-126,-127,-128,-129,94,-207,-210,-173,94,94,94,-114,-115,-116,-117,94,94,-153,-132,-227,-172,94,-134,-135,-136,-138,-225,94,-212,94,94,94,-170,-171,-154,-174,-137,-226,94,94,94,94,-175,]),'STRING':([32,211,],[102,102,]),'BOOL':([32,211,],[103,103,]),'BOOLEAN':([32,211,],[104,104,]),'DOUBLE':([32,211,],[105,105,]),'FLOAT':([32,211,],[106,106,]),'ARRAY':([32,114,211,223,294,],[107,214,107,214,351,]),'OBJECT':([32,211,],[108,108,]),'INTEGER':([32,211,],[109,109,]),'INT':([32,211,],[110,110,]),'COLON':([34,160,161,302,326,],[112,245,246,357,384,]),'EQUALS':([37,85,99,130,189,199,201,236,260,331,332,362,364,438,441,442,],[114,187,187,223,187,223,187,306,187,187,187,187,187,187,464,466,]),'SUMA':([37,80,82,85,86,87,88,89,91,92,94,95,99,115,130,188,189,190,192,199,201,202,236,258,260,301,339,366,370,391,411,412,428,429,439,441,],[115,181,-50,181,-44,-45,-46,-48,-47,-49,-51,181,181,215,181,181,181,-48,181,181,181,181,181,181,181,181,181,181,412,181,441,443,-170,-171,181,463,]),'RESTA':([37,80,82,85,86,87,88,89,91,92,94,95,99,116,130,188,189,190,192,199,201,202,236,258,260,301,339,366,370,391,411,413,428,429,439,442,],[116,182,-50,182,-44,-45,-46,-48,-47,-49,-51,182,182,216,182,182,182,-48,182,182,182,182,182,182,182,182,182,182,413,182,442,444,-170,-171,182,465,]),'CONCAT':([37,46,85,89,99,201,218,],[117,137,117,137,117,117,279,]),'CONCAT_EQUAL':([37,46,85,89,99,201,],[118,138,118,138,118,118,]),'MINUS_EQUAL':([37,130,199,236,],[121,121,121,121,]),'MOD_EQUAL':([37,130,199,236,],[122,122,122,122,]),'MUL_EQUAL':([37,130,199,236,],[123,123,123,123,]),'PLUS_EQUAL':([37,130,199,236,],[124,124,124,124,]),'DIV_EQUAL':([37,130,199,236,],[125,125,125,125,]),'MULTIPLICACION':([37,80,82,85,86,87,88,89,91,92,94,95,99,130,188,189,190,192,199,201,202,236,258,260,301,339,366,391,428,429,439,],[126,126,-50,126,-44,-45,-46,-48,-47,-49,-51,126,126,126,126,126,-48,126,126,126,126,126,126,126,126,126,126,126,-170,-171,126,]),'DIVISION':([37,66,80,82,85,86,87,88,89,91,92,94,95,99,130,188,189,190,192,199,201,202,236,258,260,301,339,366,391,428,429,439,],[127,171,127,-50,127,-44,-45,-46,-48,-47,-49,-51,127,127,127,127,127,-48,127,127,127,127,127,127,127,127,127,127,127,-170,-171,127,]),'MODULO':([37,80,82,85,86,87,88,89,91,92,94,95,99,130,188,189,190,192,199,201,202,236,258,260,301,339,366,391,428,429,439,],[128,128,-50,128,-44,-45,-46,-48,-47,-49,-51,128,128,128,128,128,-48,128,128,128,128,128,128,128,128,128,128,128,-170,-171,128,]),'COMMA':([40,41,82,86,87,88,90,91,92,94,111,129,132,190,196,197,198,199,200,203,204,205,206,207,208,209,225,226,248,249,256,258,259,262,270,274,278,280,281,282,283,292,295,296,298,325,337,338,339,345,346,348,352,388,389,390,392,394,400,428,429,431,449,450,455,456,471,],[-37,-39,-50,-44,-45,-46,-133,-47,-49,-51,-169,-30,-31,-48,268,-148,-149,-144,-145,-32,-33,-34,-35,-36,-38,-40,293,294,321,322,-169,-130,-131,-132,-29,-41,-211,-208,-209,-228,-224,-169,-207,-210,-173,268,-153,-147,-132,399,-168,-227,-172,-134,-135,-136,-138,-225,-212,-170,-171,-167,-154,-174,-137,-226,-175,]),'ELSE':([48,51,141,337,386,454,457,],[142,142,142,-153,-63,-62,-64,]),'ELSEIF':([48,51,337,386,454,],[143,143,-153,-63,-62,]),'NULL':([68,],[173,]),'AND':([82,86,87,88,91,92,94,190,222,235,236,237,238,257,282,283,300,314,348,359,360,362,363,364,365,367,368,394,428,429,435,456,460,461,473,474,],[-50,-44,-45,-46,-47,-49,-51,-48,285,285,285,285,-80,285,-228,-224,285,285,-227,285,-79,-70,-72,-73,-75,-71,-74,-225,-170,-171,285,-226,-186,-187,-76,-77,]),'OR':([82,86,87,88,91,92,94,190,222,235,236,237,238,257,282,283,300,314,348,359,360,362,363,364,365,367,368,394,428,429,435,456,460,461,473,474,],[-50,-44,-45,-46,-47,-49,-51,-48,286,286,286,286,-80,286,-228,-224,286,286,-227,286,-79,-70,-72,-73,-75,-71,-74,-225,-170,-171,286,-226,-186,-187,-76,-77,]),'XOR':([82,86,87,88,91,92,94,190,222,235,236,237,238,257,282,283,300,314,348,359,360,362,363,364,365,367,368,394,428,429,435,456,460,461,473,474,],[-50,-44,-45,-46,-47,-49,-51,-48,287,287,287,287,-80,287,-228,-224,287,287,-227,287,-79,-70,-72,-73,-75,-71,-74,-225,-170,-171,287,-226,-186,-187,-76,-77,]),'IS_EQUAL':([82,86,87,88,91,92,94,190,222,235,236,237,238,257,282,283,300,314,348,359,360,362,363,364,365,367,368,394,428,429,435,456,460,461,473,474,],[-50,-44,-45,-46,-47,-49,-51,-48,288,288,288,288,-80,288,-228,-224,288,288,-227,288,-79,-70,-72,-73,-75,-71,-74,-225,-170,-171,288,-226,-186,-187,-76,-77,]),'IS_NOT_EQUAL':([82,86,87,88,91,92,94,190,222,235,236,237,238,257,282,283,300,314,348,359,360,362,363,364,365,367,368,394,428,429,435,456,460,461,473,474,],[-50,-44,-45,-46,-47,-49,-51,-48,289,289,289,289,-80,289,-228,-224,289,289,-227,289,-79,-70,-72,-73,-75,-71,-74,-225,-170,-171,289,-226,-186,-187,-76,-77,]),'IS_IDENTICAL':([82,86,87,88,91,92,94,190,222,235,236,237,238,257,282,283,300,314,348,359,360,362,363,364,365,367,368,394,428,429,435,456,460,461,473,474,],[-50,-44,-45,-46,-47,-49,-51,-48,290,290,290,290,-80,290,-228,-224,290,290,-227,290,-79,-70,-72,-73,-75,-71,-74,-225,-170,-171,290,-226,-186,-187,-76,-77,]),'IS_NOT_IDENTICAL':([82,86,87,88,91,92,94,190,222,235,236,237,238,257,282,283,300,314,348,359,360,362,363,364,365,367,368,394,428,429,435,456,460,461,473,474,],[-50,-44,-45,-46,-47,-49,-51,-48,291,291,291,291,-80,291,-228,-224,291,291,-227,291,-79,-70,-72,-73,-75,-71,-74,-225,-170,-171,291,-226,-186,-187,-76,-77,]),'GREATER':([82,86,87,88,91,92,94,170,190,236,237,252,428,429,435,],[-50,-44,-45,-46,-47,-49,-51,251,-48,308,308,324,-170,-171,308,]),'IS_SMALLER_OR_EQUAL':([82,86,87,88,91,92,94,190,236,237,428,429,435,],[-50,-44,-45,-46,-47,-49,-51,-48,309,309,-170,-171,309,]),'IS_GREATER_OR_EQUAL':([82,86,87,88,91,92,94,190,236,237,428,429,435,],[-50,-44,-45,-46,-47,-49,-51,-48,310,310,-170,-171,310,]),'NEW':([114,187,306,],[210,210,210,]),'SPLQUEUE':([210,],[271,]),'SPLSTACK':([210,],[272,]),'AS':([241,],[315,]),'CATCH':([319,372,374,375,376,482,],[-169,-85,-86,416,-108,-107,]),'VOID':([384,],[424,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,155,232,242,373,383,385,403,418,],[1,239,299,317,415,317,425,434,448,]),'imprimir':([0,155,232,242,373,383,385,403,418,],[2,2,2,2,2,2,2,2,2,]),'asignacion':([0,38,39,111,131,155,156,232,242,256,268,292,373,383,385,403,418,],[3,129,132,200,132,3,240,3,3,200,200,200,3,3,3,3,3,]),'funciones':([0,51,155,232,242,373,383,385,403,418,],[4,151,4,4,4,4,4,4,4,4,]),'llamada_funcion':([0,114,155,223,232,242,327,373,383,385,403,418,],[5,209,5,209,5,5,386,5,5,5,5,5,]),'constante':([0,155,232,242,373,383,385,403,418,],[6,6,6,6,6,6,6,6,6,]),'lectura':([0,114,155,223,232,242,373,383,385,403,418,],[7,206,7,206,7,7,7,7,7,7,7,]),'condicion_ifelse':([0,155,232,242,373,383,385,403,418,],[8,8,8,8,8,8,8,8,8,]),'bwhile':([0,51,155,232,242,313,373,383,385,403,418,],[9,149,9,9,9,369,9,9,9,9,9,]),'bdo':([0,51,155,232,242,373,383,385,403,418,],[10,153,10,10,10,10,10,10,10,10,]),'bfor':([0,51,155,232,242,373,383,385,403,418,],[11,150,11,11,11,11,11,11,11,11,]),'incrementOp':([0,155,232,242,373,383,385,403,418,],[12,12,12,12,12,12,12,12,12,]),'bforeach':([0,155,232,242,373,383,385,403,418,],[13,13,13,13,13,13,13,13,13,]),'btry':([0,155,232,242,373,383,385,403,418,],[14,14,14,14,14,14,14,14,14,]),'bswitch':([0,51,155,232,242,373,383,385,403,418,],[15,152,15,15,15,15,15,15,15,15,]),'bcase':([0,155,232,242,373,377,383,385,403,418,478,],[16,16,16,16,16,418,16,16,16,16,418,]),'bgoto':([0,155,232,242,373,383,385,403,418,],[17,17,17,17,17,17,17,17,17,]),'bcolas':([0,30,31,93,96,114,144,155,178,180,211,223,232,233,240,242,263,264,275,284,293,303,304,305,311,312,355,373,383,385,399,403,408,418,426,458,459,],[18,87,87,87,87,87,87,18,87,87,87,87,18,87,87,18,87,87,87,87,87,87,87,87,87,87,87,18,18,18,87,18,87,18,87,87,87,]),'bpila':([0,30,31,93,96,114,144,155,178,180,211,223,232,233,240,242,263,264,275,284,293,303,304,305,311,312,355,373,383,385,399,403,408,418,426,458,459,],[19,88,88,88,88,88,88,19,88,88,88,88,19,88,88,19,88,88,88,88,88,88,88,88,88,88,88,19,19,19,88,19,88,19,88,88,88,]),'bcortes':([0,155,232,242,373,383,385,403,418,],[20,20,20,20,20,20,20,20,20,]),'brand':([0,114,155,223,232,242,373,383,385,403,418,],[21,203,21,203,21,21,21,21,21,21,21,]),'escribir':([0,114,155,223,232,242,373,383,385,403,418,],[22,204,22,204,22,22,22,22,22,22,22,]),'btrim':([0,114,155,223,232,242,373,383,385,403,418,],[23,205,23,205,23,23,23,23,23,23,23,]),'otros':([0,155,232,242,373,383,385,403,418,],[24,24,24,24,24,24,24,24,24,]),'breturn':([0,155,232,242,356,357,373,383,385,403,418,],[25,25,25,318,406,406,25,318,25,25,25,]),'comment':([0,155,232,242,373,383,385,403,418,],[26,26,26,26,26,26,26,26,26,]),'casting':([0,155,232,242,373,383,385,403,418,],[27,27,27,27,27,27,27,27,27,]),'bconcat':([0,30,31,114,155,223,232,242,373,383,385,403,418,],[28,83,97,207,28,207,28,28,28,28,28,28,28,]),'simbolos':([0,155,232,242,373,383,385,403,418,],[29,29,29,29,29,29,29,29,29,]),'proteccion':([0,38,39,51,111,131,155,156,232,242,256,268,292,373,383,385,403,418,],[39,131,131,154,131,131,39,131,39,39,131,131,131,39,39,39,39,39,]),'asignacion_array':([0,38,39,111,131,155,156,232,242,256,268,292,373,383,385,403,418,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'aumentoCasting':([0,38,39,111,131,144,155,156,178,232,233,240,242,256,268,292,303,373,383,385,403,418,],[41,41,41,41,41,238,41,41,238,41,238,238,41,41,41,41,238,41,41,41,41,41,]),'funcion_nparams':([0,39,51,154,155,232,242,373,383,385,403,418,],[42,133,42,133,42,42,42,42,42,42,42,42,]),'funcion_blank':([0,39,51,154,155,232,242,373,383,385,403,418,],[43,134,43,134,43,43,43,43,43,43,43,43,]),'funcion_void':([0,51,155,232,242,373,383,385,403,418,],[44,44,44,44,44,44,44,44,44,44,]),'condicion_if':([0,155,232,242,373,383,385,403,418,],[48,48,48,48,48,48,48,48,48,]),'empty':([0,111,155,232,242,256,292,319,356,357,373,383,385,403,418,453,],[67,198,67,67,67,198,198,376,67,67,67,423,67,67,67,472,]),'valor':([30,31,93,96,114,144,178,180,211,223,233,240,263,264,275,284,293,303,304,305,311,312,355,399,408,426,458,459,],[80,95,188,192,202,237,237,258,188,202,237,237,329,333,346,348,350,237,363,365,367,368,404,431,437,455,473,474,]),'operaciones_mat':([30,31,114,180,223,],[84,98,208,259,208,]),'tipoDato':([30,31,93,96,114,119,120,144,178,180,211,223,233,240,263,264,269,275,284,293,303,304,305,311,312,355,399,408,409,426,458,459,],[86,86,86,86,86,221,222,86,86,86,86,86,86,86,86,334,340,86,86,86,86,86,86,86,86,86,86,86,340,86,86,86,]),'operaciones_mat_par':([30,31,114,180,223,263,393,],[90,90,90,90,90,330,427,]),'numero':([30,31,93,96,114,119,120,144,178,180,211,223,233,240,263,264,269,275,284,293,303,304,305,311,312,355,399,408,409,426,458,459,464,466,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,475,476,]),'tiposCast':([32,211,],[100,273,]),'incrementos_mat':([37,130,199,236,],[119,119,119,119,]),'operadores':([37,80,85,95,99,130,188,189,192,199,201,202,236,258,260,301,339,366,391,439,],[120,180,186,180,186,120,263,264,263,120,269,180,120,180,186,355,393,409,426,393,]),'condicion_else':([48,51,141,],[140,147,231,]),'condicion_elseif':([48,51,],[141,148,]),'instrucciones':([51,],[146,]),'params_list':([111,256,292,],[196,325,325,]),'param':([111,256,268,292,],[197,197,338,197,]),'array_def':([114,223,],[212,212,]),'condicion':([144,178,233,240,303,],[235,257,300,314,359,]),'stc_bloque_def':([158,326,349,381,414,440,480,],[243,382,382,422,445,462,482,]),'condicion_booleana':([222,235,236,237,257,300,314,359,435,],[284,303,305,312,303,303,303,303,459,]),'operador_logico':([236,237,435,],[304,311,458,]),'stc_bloque':([242,356,357,383,],[316,405,407,316,]),'array_elmnt':([275,],[345,]),'comprobacion':([303,],[360,]),'catches':([319,],[375,]),'for_incr':([370,],[410,]),'innerSwitch':([377,478,],[417,481,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> imprimir','cuerpo',1,'p_cuerpo','sintactico2.py',10),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','sintactico2.py',11),
  ('cuerpo -> funciones','cuerpo',1,'p_cuerpo','sintactico2.py',12),
  ('cuerpo -> llamada_funcion','cuerpo',1,'p_cuerpo','sintactico2.py',13),
  ('cuerpo -> constante','cuerpo',1,'p_cuerpo','sintactico2.py',14),
  ('cuerpo -> lectura','cuerpo',1,'p_cuerpo','sintactico2.py',15),
  ('cuerpo -> condicion_ifelse','cuerpo',1,'p_cuerpo','sintactico2.py',16),
  ('cuerpo -> bwhile','cuerpo',1,'p_cuerpo','sintactico2.py',17),
  ('cuerpo -> bdo','cuerpo',1,'p_cuerpo','sintactico2.py',18),
  ('cuerpo -> bfor','cuerpo',1,'p_cuerpo','sintactico2.py',19),
  ('cuerpo -> incrementOp','cuerpo',1,'p_cuerpo','sintactico2.py',20),
  ('cuerpo -> bforeach','cuerpo',1,'p_cuerpo','sintactico2.py',21),
  ('cuerpo -> btry','cuerpo',1,'p_cuerpo','sintactico2.py',22),
  ('cuerpo -> bswitch','cuerpo',1,'p_cuerpo','sintactico2.py',23),
  ('cuerpo -> bcase','cuerpo',1,'p_cuerpo','sintactico2.py',24),
  ('cuerpo -> bgoto','cuerpo',1,'p_cuerpo','sintactico2.py',25),
  ('cuerpo -> bcolas','cuerpo',1,'p_cuerpo','sintactico2.py',26),
  ('cuerpo -> bpila','cuerpo',1,'p_cuerpo','sintactico2.py',27),
  ('cuerpo -> bcortes','cuerpo',1,'p_cuerpo','sintactico2.py',28),
  ('cuerpo -> brand','cuerpo',1,'p_cuerpo','sintactico2.py',29),
  ('cuerpo -> escribir','cuerpo',1,'p_cuerpo','sintactico2.py',30),
  ('cuerpo -> btrim','cuerpo',1,'p_cuerpo','sintactico2.py',31),
  ('cuerpo -> otros','cuerpo',1,'p_cuerpo','sintactico2.py',32),
  ('cuerpo -> breturn','cuerpo',1,'p_cuerpo','sintactico2.py',33),
  ('cuerpo -> comment','cuerpo',1,'p_cuerpo','sintactico2.py',34),
  ('cuerpo -> casting','cuerpo',1,'p_cuerpo','sintactico2.py',35),
  ('cuerpo -> bconcat','cuerpo',1,'p_cuerpo','sintactico2.py',36),
  ('cuerpo -> simbolos','cuerpo',1,'p_cuerpo','sintactico2.py',37),
  ('asignacion -> VARIABLE EQUALS valor SEMI','asignacion',4,'p_asignacion','sintactico2.py',43),
  ('asignacion -> VAR asignacion','asignacion',2,'p_asignacion','sintactico2.py',44),
  ('asignacion -> proteccion asignacion','asignacion',2,'p_asignacion','sintactico2.py',45),
  ('asignacion -> VARIABLE EQUALS brand','asignacion',3,'p_asignacion','sintactico2.py',46),
  ('asignacion -> VARIABLE EQUALS escribir','asignacion',3,'p_asignacion','sintactico2.py',47),
  ('asignacion -> VARIABLE EQUALS btrim','asignacion',3,'p_asignacion','sintactico2.py',48),
  ('asignacion -> VARIABLE EQUALS lectura','asignacion',3,'p_asignacion','sintactico2.py',49),
  ('asignacion -> VARIABLE EQUALS bconcat','asignacion',3,'p_asignacion','sintactico2.py',50),
  ('asignacion -> asignacion_array','asignacion',1,'p_asignacion','sintactico2.py',51),
  ('asignacion -> VARIABLE EQUALS operaciones_mat','asignacion',3,'p_asignacion','sintactico2.py',52),
  ('asignacion -> aumentoCasting','asignacion',1,'p_asignacion','sintactico2.py',53),
  ('asignacion -> VARIABLE EQUALS llamada_funcion','asignacion',3,'p_asignacion','sintactico2.py',54),
  ('asignacion_array -> VARIABLE EQUALS array_def SEMI','asignacion_array',4,'p_asignacion_array','sintactico2.py',60),
  ('constante -> DEFINE LPAREN CADENA COMMA valor RPAREN SEMI','constante',7,'p_constante','sintactico2.py',64),
  ('constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI','constante',7,'p_constante','sintactico2.py',65),
  ('valor -> tipoDato','valor',1,'p_valor','sintactico2.py',70),
  ('valor -> bcolas','valor',1,'p_valor','sintactico2.py',71),
  ('valor -> bpila','valor',1,'p_valor','sintactico2.py',72),
  ('tipoDato -> numero','tipoDato',1,'p_tipoDato','sintactico2.py',78),
  ('tipoDato -> CADENA','tipoDato',1,'p_tipoDato','sintactico2.py',79),
  ('tipoDato -> BOOLEANO','tipoDato',1,'p_tipoDato','sintactico2.py',80),
  ('numero -> ENTERO','numero',1,'p_numero','sintactico2.py',85),
  ('numero -> DECIMAL','numero',1,'p_numero','sintactico2.py',86),
  ('imprimir -> ECHO valor SEMI','imprimir',3,'p_imprimir','sintactico2.py',92),
  ('imprimir -> PRINT valor SEMI','imprimir',3,'p_imprimir','sintactico2.py',93),
  ('imprimir -> PRINT LPAREN valor RPAREN SEMI','imprimir',5,'p_imprimir','sintactico2.py',94),
  ('imprimir -> PRINT bconcat','imprimir',2,'p_imprimir','sintactico2.py',95),
  ('imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI','imprimir',6,'p_imprimir','sintactico2.py',96),
  ('imprimir -> ECHO bconcat','imprimir',2,'p_imprimir','sintactico2.py',97),
  ('imprimir -> ECHO operaciones_mat SEMI','imprimir',3,'p_imprimir','sintactico2.py',98),
  ('imprimir -> PRINT operaciones_mat SEMI','imprimir',3,'p_imprimir','sintactico2.py',99),
  ('imprimir -> ECHO VARIABLE SEMI','imprimir',3,'p_imprimir','sintactico2.py',100),
  ('imprimir -> PRINT VARIABLE SEMI','imprimir',3,'p_imprimir','sintactico2.py',101),
  ('condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_if',7,'p_condicion_if','sintactico2.py',108),
  ('condicion_if -> IF LPAREN condicion RPAREN llamada_funcion','condicion_if',5,'p_condicion_if','sintactico2.py',109),
  ('condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_elseif',7,'p_condicion_elseif','sintactico2.py',114),
  ('condicion_else -> ELSE LBRACE cuerpo RBRACE','condicion_else',4,'p_condicion_else','sintactico2.py',119),
  ('condicion_ifelse -> condicion_if','condicion_ifelse',1,'p_condicion_ifelse','sintactico2.py',124),
  ('condicion_ifelse -> condicion_if condicion_else','condicion_ifelse',2,'p_condicion_ifelse','sintactico2.py',125),
  ('condicion_ifelse -> condicion_if condicion_elseif','condicion_ifelse',2,'p_condicion_ifelse','sintactico2.py',126),
  ('condicion_ifelse -> condicion_if condicion_elseif condicion_else','condicion_ifelse',3,'p_condicion_ifelse','sintactico2.py',127),
  ('condicion -> VARIABLE operador_logico VARIABLE','condicion',3,'p_condicion','sintactico2.py',132),
  ('condicion -> valor operador_logico valor','condicion',3,'p_condicion','sintactico2.py',133),
  ('condicion -> VARIABLE operador_logico valor','condicion',3,'p_condicion','sintactico2.py',134),
  ('condicion -> VARIABLE condicion_booleana VARIABLE','condicion',3,'p_condicion','sintactico2.py',135),
  ('condicion -> valor condicion_booleana valor','condicion',3,'p_condicion','sintactico2.py',136),
  ('condicion -> VARIABLE condicion_booleana valor','condicion',3,'p_condicion','sintactico2.py',137),
  ('condicion -> LPAREN VARIABLE operadores valor RPAREN operador_logico valor','condicion',7,'p_condicion','sintactico2.py',138),
  ('condicion -> LPAREN VARIABLE operadores valor RPAREN condicion_booleana valor','condicion',7,'p_condicion','sintactico2.py',139),
  ('condicion -> condicion condicion_booleana condicion','condicion',3,'p_condicion','sintactico2.py',140),
  ('condicion -> condicion condicion_booleana comprobacion','condicion',3,'p_condicion','sintactico2.py',141),
  ('condicion -> aumentoCasting','condicion',1,'p_condicion','sintactico2.py',142),
  ('condicion -> VARIABLE','condicion',1,'p_condicion','sintactico2.py',143),
  ('bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def','bfor',8,'p_bfor','sintactico2.py',149),
  ('stc_bloque -> stc_bloque SEMI cuerpo','stc_bloque',3,'p_stc_bloque','sintactico2.py',153),
  ('stc_bloque -> breturn','stc_bloque',1,'p_stc_bloque','sintactico2.py',154),
  ('stc_bloque_def -> LBRACE stc_bloque RBRACE','stc_bloque_def',3,'p_stc_bloque_def','sintactico2.py',159),
  ('stc_bloque_def -> LBRACE cuerpo RBRACE','stc_bloque_def',3,'p_stc_bloque_def','sintactico2.py',160),
  ('for_incr -> VARIABLE SUMA SUMA','for_incr',3,'p_for_incr','sintactico2.py',165),
  ('for_incr -> SUMA SUMA VARIABLE','for_incr',3,'p_for_incr','sintactico2.py',166),
  ('for_incr -> VARIABLE RESTA RESTA','for_incr',3,'p_for_incr','sintactico2.py',167),
  ('for_incr -> RESTA RESTA VARIABLE','for_incr',3,'p_for_incr','sintactico2.py',168),
  ('for_incr -> VARIABLE SUMA EQUALS numero','for_incr',4,'p_for_incr','sintactico2.py',169),
  ('for_incr -> VARIABLE RESTA EQUALS numero','for_incr',4,'p_for_incr','sintactico2.py',170),
  ('incrementOp -> VARIABLE SUMA SUMA SEMI','incrementOp',4,'p_incrementOp','sintactico2.py',174),
  ('incrementOp -> VARIABLE RESTA RESTA SEMI','incrementOp',4,'p_incrementOp','sintactico2.py',175),
  ('bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def','bforeach',7,'p_bforeach','sintactico2.py',179),
  ('bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE','bwhile',7,'p_bwhile','sintactico2.py',184),
  ('bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque','bwhile',6,'p_bwhile','sintactico2.py',185),
  ('bwhile -> WHILE LPAREN condicion RPAREN SEMI','bwhile',5,'p_bwhile','sintactico2.py',186),
  ('bwhile -> <empty>','bwhile',0,'p_bwhile','sintactico2.py',187),
  ('bdo -> DO LBRACE cuerpo RBRACE bwhile','bdo',5,'p_bdo','sintactico2.py',192),
  ('bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE innerSwitch RBRACE','bswitch',7,'p_bswitch','sintactico2.py',198),
  ('bcase -> CASE ENTERO COLON','bcase',3,'p_bcase','sintactico2.py',202),
  ('bcase -> CASE CADENA COLON','bcase',3,'p_bcase','sintactico2.py',203),
  ('innerSwitch -> bcase cuerpo BREAK SEMI','innerSwitch',4,'p_innerSwitch','sintactico2.py',206),
  ('innerSwitch -> bcase cuerpo BREAK SEMI innerSwitch','innerSwitch',5,'p_innerSwitch','sintactico2.py',207),
  ('btry -> TRY LBRACE stc_bloque_def RBRACE catches','btry',5,'p_btry','sintactico2.py',213),
  ('catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def','catches',7,'p_catches','sintactico2.py',217),
  ('catches -> empty','catches',1,'p_catches','sintactico2.py',218),
  ('operadores -> SUMA','operadores',1,'p_operadores','sintactico2.py',224),
  ('operadores -> RESTA','operadores',1,'p_operadores','sintactico2.py',225),
  ('operadores -> MULTIPLICACION','operadores',1,'p_operadores','sintactico2.py',226),
  ('operadores -> DIVISION','operadores',1,'p_operadores','sintactico2.py',227),
  ('operadores -> MODULO','operadores',1,'p_operadores','sintactico2.py',228),
  ('operador_logico -> SMALLER','operador_logico',1,'p_operador_logico','sintactico2.py',233),
  ('operador_logico -> GREATER','operador_logico',1,'p_operador_logico','sintactico2.py',234),
  ('operador_logico -> IS_SMALLER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico2.py',235),
  ('operador_logico -> IS_GREATER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico2.py',236),
  ('incrementos_mat -> MINUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',241),
  ('incrementos_mat -> MOD_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',242),
  ('incrementos_mat -> MUL_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',243),
  ('incrementos_mat -> PLUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',244),
  ('incrementos_mat -> DIV_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',245),
  ('condicion_booleana -> AND','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',250),
  ('condicion_booleana -> OR','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',251),
  ('condicion_booleana -> XOR','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',252),
  ('condicion_booleana -> IS_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',253),
  ('condicion_booleana -> IS_NOT_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',254),
  ('condicion_booleana -> IS_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',255),
  ('condicion_booleana -> IS_NOT_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',256),
  ('operaciones_mat -> valor operadores valor','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',261),
  ('operaciones_mat -> valor operadores operaciones_mat','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',262),
  ('operaciones_mat -> VARIABLE operadores VARIABLE','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',263),
  ('operaciones_mat -> operaciones_mat_par','operaciones_mat',1,'p_operaciones_mat','sintactico2.py',264),
  ('operaciones_mat_par -> LPAREN valor operadores valor RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',269),
  ('operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',270),
  ('operaciones_mat_par -> LPAREN VARIABLE operadores VARIABLE RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',271),
  ('operaciones_mat_par -> LPAREN VARIABLE operadores valor RPAREN operadores valor','operaciones_mat_par',7,'p_operaciones_mat_par','sintactico2.py',272),
  ('operaciones_mat_par -> LPAREN VARIABLE operadores tipoDato RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',273),
  ('funciones -> funcion_nparams','funciones',1,'p_funciones','sintactico2.py',278),
  ('funciones -> proteccion funcion_nparams','funciones',2,'p_funciones','sintactico2.py',279),
  ('funciones -> funcion_blank','funciones',1,'p_funciones','sintactico2.py',280),
  ('funciones -> proteccion funcion_blank','funciones',2,'p_funciones','sintactico2.py',281),
  ('funciones -> funcion_void','funciones',1,'p_funciones','sintactico2.py',282),
  ('param -> VARIABLE','param',1,'p_param','sintactico2.py',287),
  ('param -> asignacion','param',1,'p_param','sintactico2.py',288),
  ('funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def','funcion_nparams',6,'p_funcion_nparams','sintactico2.py',293),
  ('params_list -> params_list COMMA param','params_list',3,'p_params_list','sintactico2.py',297),
  ('params_list -> param','params_list',1,'p_params_list','sintactico2.py',298),
  ('params_list -> empty','params_list',1,'p_params_list','sintactico2.py',299),
  ('funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE','funcion_void',9,'p_funcion_void','sintactico2.py',303),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def','funcion_blank',5,'p_funcion_blank','sintactico2.py',307),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE','funcion_blank',7,'p_funcion_blank','sintactico2.py',308),
  ('llamada_funcion -> NOMBRE LPAREN params_list RPAREN SEMI','llamada_funcion',5,'p_llamada_funcion','sintactico2.py',312),
  ('brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI','brand',7,'p_brand','sintactico2.py',315),
  ('proteccion -> PUBLIC','proteccion',1,'p_proteccion','sintactico2.py',319),
  ('proteccion -> PRIVATE','proteccion',1,'p_proteccion','sintactico2.py',320),
  ('proteccion -> PROTECTED','proteccion',1,'p_proteccion','sintactico2.py',321),
  ('proteccion -> STATIC','proteccion',1,'p_proteccion','sintactico2.py',322),
  ('breturn -> empty','breturn',1,'p_breturn','sintactico2.py',326),
  ('breturn -> RETURN SEMI','breturn',2,'p_breturn','sintactico2.py',327),
  ('breturn -> RETURN NULL SEMI','breturn',3,'p_breturn','sintactico2.py',328),
  ('breturn -> RETURN VARIABLE SEMI','breturn',3,'p_breturn','sintactico2.py',329),
  ('breturn -> RETURN BOOLEANO SEMI','breturn',3,'p_breturn','sintactico2.py',330),
  ('breturn -> breturn RBRACE','breturn',2,'p_breturn','sintactico2.py',331),
  ('array_def -> ARRAY LPAREN RPAREN','array_def',3,'p_array_def','sintactico2.py',338),
  ('array_def -> ARRAY LPAREN array_elmnt RPAREN','array_def',4,'p_array_def','sintactico2.py',339),
  ('array_elmnt -> array_elmnt COMMA valor','array_elmnt',3,'p_array_elmnt','sintactico2.py',342),
  ('array_elmnt -> valor','array_elmnt',1,'p_array_elmnt','sintactico2.py',343),
  ('empty -> <empty>','empty',0,'p_empty','sintactico2.py',346),
  ('bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI','bcolas',7,'p_bcolas','sintactico2.py',351),
  ('bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI','bpila',7,'p_bpila','sintactico2.py',356),
  ('lectura -> READLINE LPAREN CADENA RPAREN SEMI','lectura',5,'p_lectura','sintactico2.py',361),
  ('lectura -> READLINE LPAREN RPAREN SEMI','lectura',4,'p_lectura','sintactico2.py',362),
  ('escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI','escribir',7,'p_escribir','sintactico2.py',365),
  ('btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI','btrim',8,'p_btrim','sintactico2.py',369),
  ('comment -> COMENTARIOS','comment',1,'p_comment','sintactico2.py',374),
  ('comment -> DOC_COMENTARIOS','comment',1,'p_comment','sintactico2.py',375),
  ('bgoto -> GOTO NOMBRE SEMI','bgoto',3,'p_bgoto','sintactico2.py',379),
  ('bcortes -> EXIT SEMI','bcortes',2,'p_bcortes','sintactico2.py',383),
  ('bcortes -> BREAK SEMI','bcortes',2,'p_bcortes','sintactico2.py',384),
  ('bcortes -> DEFAULT SEMI','bcortes',2,'p_bcortes','sintactico2.py',385),
  ('bcortes -> CONTINUE SEMI','bcortes',2,'p_bcortes','sintactico2.py',386),
  ('otros -> SMALLER NOMBRE GREATER','otros',3,'p_otros','sintactico2.py',390),
  ('otros -> SMALLER DIVISION NOMBRE GREATER','otros',4,'p_otros','sintactico2.py',391),
  ('otros -> NOMBRE COLON','otros',2,'p_otros','sintactico2.py',392),
  ('comprobacion -> NOMBRE LPAREN valor RPAREN','comprobacion',4,'p_comprobacion','sintactico2.py',399),
  ('comprobacion -> NOMBRE LPAREN VARIABLE RPAREN','comprobacion',4,'p_comprobacion','sintactico2.py',400),
  ('simbolos -> LPAREN RPAREN','simbolos',2,'p_simbolos','sintactico2.py',404),
  ('simbolos -> LPAREN','simbolos',1,'p_simbolos','sintactico2.py',405),
  ('simbolos -> RPAREN','simbolos',1,'p_simbolos','sintactico2.py',406),
  ('simbolos -> LBRACKET RBRACKET','simbolos',2,'p_simbolos','sintactico2.py',407),
  ('simbolos -> LBRACKET','simbolos',1,'p_simbolos','sintactico2.py',408),
  ('simbolos -> RBRACKET','simbolos',1,'p_simbolos','sintactico2.py',409),
  ('simbolos -> LBRACE RBRACE','simbolos',2,'p_simbolos','sintactico2.py',410),
  ('simbolos -> LBRACE','simbolos',1,'p_simbolos','sintactico2.py',411),
  ('simbolos -> RBRACE instrucciones','simbolos',2,'p_simbolos','sintactico2.py',412),
  ('simbolos -> OPEN_TAG CLOSE_TAG','simbolos',2,'p_simbolos','sintactico2.py',413),
  ('simbolos -> OPEN_TAG','simbolos',1,'p_simbolos','sintactico2.py',414),
  ('simbolos -> CLOSE_TAG','simbolos',1,'p_simbolos','sintactico2.py',415),
  ('instrucciones -> condicion_else','instrucciones',1,'p_instrucciones','sintactico2.py',420),
  ('instrucciones -> condicion_elseif','instrucciones',1,'p_instrucciones','sintactico2.py',421),
  ('instrucciones -> bwhile','instrucciones',1,'p_instrucciones','sintactico2.py',422),
  ('instrucciones -> bfor','instrucciones',1,'p_instrucciones','sintactico2.py',423),
  ('instrucciones -> funciones','instrucciones',1,'p_instrucciones','sintactico2.py',424),
  ('instrucciones -> bswitch','instrucciones',1,'p_instrucciones','sintactico2.py',425),
  ('instrucciones -> bdo','instrucciones',1,'p_instrucciones','sintactico2.py',426),
  ('bconcat -> CADENA CONCAT CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',431),
  ('bconcat -> VARIABLE CONCAT CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',432),
  ('bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',433),
  ('bconcat -> CADENA CONCAT_EQUAL CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',434),
  ('bconcat -> VARIABLE CONCAT VARIABLE SEMI','bconcat',4,'p_bconcat','sintactico2.py',435),
  ('bconcat -> VARIABLE CONCAT CADENA CONCAT VARIABLE SEMI','bconcat',6,'p_bconcat','sintactico2.py',436),
  ('tiposCast -> STRING','tiposCast',1,'p_tiposCast','sintactico2.py',442),
  ('tiposCast -> BOOL','tiposCast',1,'p_tiposCast','sintactico2.py',443),
  ('tiposCast -> BOOLEAN','tiposCast',1,'p_tiposCast','sintactico2.py',444),
  ('tiposCast -> DOUBLE','tiposCast',1,'p_tiposCast','sintactico2.py',445),
  ('tiposCast -> FLOAT','tiposCast',1,'p_tiposCast','sintactico2.py',446),
  ('tiposCast -> ARRAY','tiposCast',1,'p_tiposCast','sintactico2.py',447),
  ('tiposCast -> OBJECT','tiposCast',1,'p_tiposCast','sintactico2.py',448),
  ('tiposCast -> INTEGER','tiposCast',1,'p_tiposCast','sintactico2.py',449),
  ('tiposCast -> INT','tiposCast',1,'p_tiposCast','sintactico2.py',450),
  ('casting -> VARIABLE EQUALS LPAREN tiposCast RPAREN VARIABLE SEMI','casting',7,'p_casting','sintactico2.py',456),
  ('casting -> LPAREN tiposCast RPAREN VARIABLE SEMI','casting',5,'p_casting','sintactico2.py',457),
  ('aumentoCasting -> VARIABLE incrementos_mat tipoDato SEMI','aumentoCasting',4,'p_aumentoCasting','sintactico2.py',461),
  ('aumentoCasting -> VARIABLE EQUALS VARIABLE operadores tipoDato SEMI','aumentoCasting',6,'p_aumentoCasting','sintactico2.py',462),
  ('aumentoCasting -> VARIABLE EQUALS VARIABLE operadores VARIABLE operadores operaciones_mat_par SEMI','aumentoCasting',8,'p_aumentoCasting','sintactico2.py',463),
  ('aumentoCasting -> VARIABLE operadores tipoDato condicion_booleana valor','aumentoCasting',5,'p_aumentoCasting','sintactico2.py',464),
  ('aumentoCasting -> VARIABLE incrementos_mat VARIABLE SEMI','aumentoCasting',4,'p_aumentoCasting','sintactico2.py',465),
]
