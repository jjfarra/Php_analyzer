
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY AS AT BOOL BOOLEAN_NOT BREAK CASE CATCH CLOSE_TAG COLON COMENTARIOS COMMA CONCAT CONCAT_EQUAL CONTINUE DECIMAL DEFAULT DEFINE DIVISION DIV_EQUAL DO DOC_COMENTARIOS DOUBLE ECHO ELSE ELSEIF ENTERO EQUALS EXIT FALSE FLOAT FOR FOREACH FUNCTION FWRITE GOTO GREATER IF INT IS_EQUAL IS_GREATER_OR_EQUAL IS_IDENTICAL IS_NOT_EQUAL IS_NOT_IDENTICAL IS_SMALLER_OR_EQUAL LBRACE LBRACKET LPAREN MINUS_EQUAL MODULO MOD_EQUAL MULTIPLICACION MUL_EQUAL NEW NOMBRE NOT NULL OPEN_TAG OR PLUS_EQUAL PRINT PRIVATE PROTECTED PUBLIC RAND RBRACE RBRACKET READLINE RESTA RETURN RPAREN SEMI SMALLER SPLQUEUE SPLSTACK STATIC STRING SUMA SWITCH TRIM TRUE TRY VAR VARIABLE VOID WHILE XORcuerpo : imprimir\n            | asignacion\n            | asignacion_array\n            | funciones\n            | constante\n            | lectura\n            | operadores\n            | operador_logico\n            | condicion_booleana\n            | bwhile\n            | bdo\n            | bfor\n            | bforeach\n            | btry\n            | operaciones_mat\n            | condicion_ifelse \n            | condicion_elseif\n            | condicion_else\n            | bswitch\n            | bcase\n            | bgoto\n            | bcolas\n            | bpila\n            | incrementos_mat\n            | bcortes\n            | brand\n            | bconcat\n            | escribir\n            | btrim\n            | leer\n            | boolean_answer\n            | otros\n            | breturn\n            | comment\n  imprimir : ECHO valor SEMI\n            | PRINT valor SEMI\n            | PRINT LPAREN valor RPAREN SEMI\n            | ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI\n            | ECHO bconcat\n  valor : numero\n            | VARIABLE\n            | STRING\n            | NOMBRE\n            | boolean_answer\n  numero : ENTERO\n          | DECIMAL\n  operadores : SUMA \n                  | RESTA\n                  | MULTIPLICACION\n                  | DIVISION\n                  | MODULO\n  operador_logico :  SMALLER\n                        | GREATER\n                        | IS_SMALLER_OR_EQUAL\n                        | IS_GREATER_OR_EQUAL\n  incrementos_mat :  MINUS_EQUAL\n                        | MOD_EQUAL\n                        | MUL_EQUAL\n                        | PLUS_EQUAL\n  boolean_answer :  TRUE\n                      | FALSE\n  condicion_if :  IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_elseif :  ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_else :  ELSE LBRACE cuerpo RBRACE\n                    | ELSE breturn\n  condicion_ifelse : condicion_if\n                      | condicion_if condicion_else\n                      | condicion_if condicion_elseif\n                      | condicion_if condicion_elseif condicion_else\n  condicion_booleana :  AND\n                        | OR\n                        | XOR\n                        | IS_EQUAL\n                        | IS_NOT_EQUAL\n                        | IS_IDENTICAL\n                        | IS_NOT_IDENTICAL\n                        | BOOLEAN_NOT\n  operaciones_mat :  valor operadores valor\n                        | valor operadores operaciones_mat\n                        | operaciones_mat_par\n                       \n  operaciones_mat_par :  LPAREN valor operadores valor RPAREN\n                          |  LPAREN valor operadores operaciones_mat_par RPAREN\n                          |  valor operadores operaciones_mat_par \n  asignacion : VARIABLE EQUALS valor SEMI\n                | VAR asignacion\n                | proteccion asignacion\n                | VARIABLE EQUALS brand\n                | VARIABLE EQUALS escribir\n                | VARIABLE EQUALS btrim\n                | VARIABLE EQUALS leer\n  asignacion_array : VARIABLE EQUALS array_def SEMIconstante : DEFINE LPAREN STRING COMMA valor RPAREN SEMI\n          | DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMIlectura : READLINE LPAREN STRING RPAREN SEMI\n          | READLINE LPAREN RPAREN SEMIbrand : RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMIproteccion : PUBLIC\n          | PRIVATE\n          | PROTECTED\n          | STATIC\n  funciones : funcion_nparams\n              | proteccion funcion_nparams\n              | funcion_blank\n              | proteccion funcion_blank\n              | funcion_void\n  param : VARIABLE\n          | asignacion\n          funcion_nparams : FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_defparams_list : params_list COMMA param\n                      | paramfuncion_void : FUNCTION NOMBRE LPAREN  RPAREN COLON VOID LBRACE empty RBRACE funcion_blank : FUNCTION NOMBRE LPAREN  RPAREN stc_bloque_def\n                    | FUNCTION NOMBRE LPAREN  RPAREN LBRACE empty RBRACE\n   condicion : VARIABLE operador_logico VARIABLE\n            | valor operador_logico valor \n            | VARIABLE operador_logico valor\n   bwhile : WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE \n  | WHILE LPAREN condicion RPAREN COLON stc_bloque  \n   bdo : DO LBRACE cuerpo RBRACE bwhile \n   bswitch : SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACEbcase : CASE ENTERO COLON bcolas : VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI\n  bfor : FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_defstc_bloque : stc_bloque SEMI cuerpo\n        | breturn\n        breturn : empty\n        | RETURN SEMI \n        | RETURN NULL SEMI\n        | RETURN VARIABLE SEMI\n        | RETURN NOMBRE SEMI\n        | RETURN boolean_answer SEMI\n        stc_bloque_def : LBRACE stc_bloque RBRACEfor_incr : VARIABLE SUMA SUMA\n          | SUMA SUMA VARIABLE\n          | VARIABLE RESTA RESTA\n          | RESTA RESTA VARIABLE\n          | VARIABLE SUMA EQUALS numero\n          | VARIABLE RESTA EQUALS numerobforeach :  FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_defarray_def : ARRAY LPAREN RPAREN\n          | ARRAY LPAREN array_elmnt RPARENarray_elmnt : array_elmnt COMMA valor\n            | valorbtry : TRY LBRACE stc_bloque_def RBRACE catchescatches : catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def\n          | emptyempty : bgoto : GOTO NOMBRE SEMIbpila : VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMIbcortes : EXIT SEMI\n              | BREAK SEMI\n              | DEFAULT SEMI\n              | CONTINUE SEMI\n   bconcat : STRING CONCAT STRING SEMI\n            | VARIABLE EQUALS VARIABLE CONCAT VARIABLE SEMI\n   escribir : FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI\n   btrim : TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI\n   leer : READLINE LPAREN STRING RPAREN SEMI\n   otros : SMALLER NOMBRE GREATER\n   comment : COMENTARIOS\n              | DOC_COMENTARIOS\n   '
    
_lr_action_items = {'ECHO':([0,130,137,271,274,275,284,],[36,36,36,36,36,36,36,]),'PRINT':([0,130,137,271,274,275,284,],[38,38,38,38,38,38,38,]),'VARIABLE':([0,36,38,39,43,44,51,52,53,54,55,57,58,59,94,97,98,99,100,111,113,117,118,120,121,129,130,131,132,136,137,139,155,158,164,167,168,169,170,175,187,204,211,212,217,218,219,225,226,227,230,248,268,271,274,275,280,284,293,317,325,326,331,332,344,346,],[42,108,114,114,119,119,-47,-48,-49,-50,-51,-53,-54,-55,151,-97,-98,-99,-100,114,114,165,-85,119,-86,184,42,119,188,184,42,194,184,207,114,-87,-88,-89,-90,114,184,243,251,-84,114,243,114,264,-52,114,269,114,299,42,42,42,243,42,114,-158,342,343,-96,-156,350,-157,]),'VAR':([0,43,44,97,98,99,100,120,130,131,137,204,218,271,274,275,280,284,],[43,43,43,-97,-98,-99,-100,43,43,43,43,43,43,43,43,43,43,43,]),'DEFINE':([0,130,137,271,274,275,284,],[48,48,48,48,48,48,48,]),'READLINE':([0,117,130,137,175,271,274,275,284,],[50,173,50,50,173,50,50,50,50,]),'SUMA':([0,32,37,40,41,42,49,91,92,102,104,110,114,115,116,130,137,159,209,268,271,274,275,284,286,299,300,323,],[51,-44,51,-43,-45,-41,-42,-60,-61,-40,-46,-44,-41,-42,51,51,51,51,51,300,51,51,51,51,51,323,325,338,]),'RESTA':([0,32,37,40,41,42,49,91,92,102,104,110,114,115,116,130,137,159,209,268,271,274,275,284,286,299,301,324,],[52,-44,52,-43,-45,-41,-42,-60,-61,-40,-46,-44,-41,-42,52,52,52,52,52,301,52,52,52,52,52,324,326,340,]),'MULTIPLICACION':([0,32,37,40,41,42,49,91,92,102,104,110,114,115,116,130,137,159,209,271,274,275,284,286,],[53,-44,53,-43,-45,-41,-42,-60,-61,-40,-46,-44,-41,-42,53,53,53,53,53,53,53,53,53,53,]),'DIVISION':([0,32,37,40,41,42,49,91,92,102,104,110,114,115,116,130,137,159,209,271,274,275,284,286,],[54,-44,54,-43,-45,-41,-42,-60,-61,-40,-46,-44,-41,-42,54,54,54,54,54,54,54,54,54,54,]),'MODULO':([0,32,37,40,41,42,49,91,92,102,104,110,114,115,116,130,137,159,209,271,274,275,284,286,],[55,-44,55,-43,-45,-41,-42,-60,-61,-40,-46,-44,-41,-42,55,55,55,55,55,55,55,55,55,55,]),'SMALLER':([0,40,41,91,92,102,104,110,115,130,137,184,185,271,274,275,284,],[56,-43,-45,-60,-61,-40,-46,-44,-42,56,56,226,226,56,56,56,56,]),'GREATER':([0,40,41,91,92,102,104,110,115,128,130,137,184,185,271,274,275,284,],[57,-43,-45,-60,-61,-40,-46,-44,-42,182,57,57,57,57,57,57,57,57,]),'IS_SMALLER_OR_EQUAL':([0,40,41,91,92,102,104,110,115,130,137,184,185,271,274,275,284,],[58,-43,-45,-60,-61,-40,-46,-44,-42,58,58,58,58,58,58,58,58,]),'IS_GREATER_OR_EQUAL':([0,40,41,91,92,102,104,110,115,130,137,184,185,271,274,275,284,],[59,-43,-45,-60,-61,-40,-46,-44,-42,59,59,59,59,59,59,59,59,]),'AND':([0,130,137,271,274,275,284,],[60,60,60,60,60,60,60,]),'OR':([0,130,137,271,274,275,284,],[61,61,61,61,61,61,61,]),'XOR':([0,130,137,271,274,275,284,],[62,62,62,62,62,62,62,]),'IS_EQUAL':([0,130,137,271,274,275,284,],[63,63,63,63,63,63,63,]),'IS_NOT_EQUAL':([0,130,137,271,274,275,284,],[64,64,64,64,64,64,64,]),'IS_IDENTICAL':([0,130,137,271,274,275,284,],[65,65,65,65,65,65,65,]),'IS_NOT_IDENTICAL':([0,130,137,271,274,275,284,],[66,66,66,66,66,66,66,]),'BOOLEAN_NOT':([0,130,137,271,274,275,284,],[67,67,67,67,67,67,67,]),'WHILE':([0,130,137,228,271,274,275,284,],[68,68,68,68,68,68,68,68,]),'DO':([0,130,137,271,274,275,284,],[69,69,69,69,69,69,69,]),'FOR':([0,130,137,271,274,275,284,],[70,70,70,70,70,70,70,]),'FOREACH':([0,130,137,271,274,275,284,],[71,71,71,71,71,71,71,]),'TRY':([0,130,137,271,274,275,284,],[72,72,72,72,72,72,72,]),'ELSEIF':([0,74,130,137,271,274,275,284,336,],[75,75,75,75,75,75,75,75,-62,]),'ELSE':([0,74,130,135,137,271,274,275,284,329,336,],[76,76,76,76,76,76,76,76,76,-63,-62,]),'SWITCH':([0,130,137,271,274,275,284,],[77,77,77,77,77,77,77,]),'CASE':([0,130,137,271,274,275,284,],[78,78,78,78,78,78,78,]),'GOTO':([0,130,137,271,274,275,284,],[79,79,79,79,79,79,79,]),'MINUS_EQUAL':([0,130,137,271,274,275,284,],[80,80,80,80,80,80,80,]),'MOD_EQUAL':([0,130,137,271,274,275,284,],[81,81,81,81,81,81,81,]),'MUL_EQUAL':([0,130,137,271,274,275,284,],[82,82,82,82,82,82,82,]),'PLUS_EQUAL':([0,130,137,271,274,275,284,],[83,83,83,83,83,83,83,]),'EXIT':([0,130,137,271,274,275,284,],[84,84,84,84,84,84,84,]),'BREAK':([0,130,137,271,274,275,284,],[85,85,85,85,85,85,85,]),'DEFAULT':([0,130,137,271,274,275,284,],[86,86,86,86,86,86,86,]),'CONTINUE':([0,130,137,271,274,275,284,],[87,87,87,87,87,87,87,]),'RAND':([0,117,130,137,175,271,274,275,284,],[88,88,88,88,88,88,88,88,88,]),'STRING':([0,36,38,39,51,52,53,54,55,57,58,59,111,113,117,118,121,125,126,127,129,130,136,137,155,164,167,168,169,170,175,187,212,216,217,219,225,226,227,238,248,271,274,275,284,293,317,331,332,346,],[49,109,115,115,-47,-48,-49,-50,-51,-53,-54,-55,115,115,115,-85,-86,177,179,180,115,49,115,49,115,115,-87,-88,-89,-90,115,115,-84,254,115,115,115,-52,115,277,115,49,49,49,49,115,-158,-96,-156,-157,]),'FWRITE':([0,117,130,137,175,271,274,275,284,],[89,89,89,89,89,89,89,89,89,]),'TRIM':([0,117,130,137,175,271,274,275,284,],[90,90,90,90,90,90,90,90,90,]),'TRUE':([0,36,38,39,51,52,53,54,55,57,58,59,94,111,113,117,118,121,129,130,136,137,155,164,167,168,169,170,175,187,212,217,219,225,226,227,248,271,274,275,284,293,317,331,332,346,],[91,91,91,91,-47,-48,-49,-50,-51,-53,-54,-55,91,91,91,91,-85,-86,91,91,91,91,91,91,-87,-88,-89,-90,91,91,-84,91,91,91,-52,91,91,91,91,91,91,91,-158,-96,-156,-157,]),'FALSE':([0,36,38,39,51,52,53,54,55,57,58,59,94,111,113,117,118,121,129,130,136,137,155,164,167,168,169,170,175,187,212,217,219,225,226,227,248,271,274,275,284,293,317,331,332,346,],[92,92,92,92,-47,-48,-49,-50,-51,-53,-54,-55,92,92,92,92,-85,-86,92,92,92,92,92,92,-87,-88,-89,-90,92,92,-84,92,92,92,-52,92,92,92,92,92,92,92,-158,-96,-156,-157,]),'RETURN':([0,76,130,137,189,262,263,271,274,275,282,284,],[94,94,94,94,94,94,94,94,94,94,94,94,]),'COMENTARIOS':([0,130,137,271,274,275,284,],[95,95,95,95,95,95,95,]),'DOC_COMENTARIOS':([0,130,137,271,274,275,284,],[96,96,96,96,96,96,96,]),'PUBLIC':([0,43,44,97,98,99,100,120,130,131,137,204,218,271,274,275,280,284,],[97,97,97,-97,-98,-99,-100,97,97,97,97,97,97,97,97,97,97,97,]),'PRIVATE':([0,43,44,97,98,99,100,120,130,131,137,204,218,271,274,275,280,284,],[98,98,98,-97,-98,-99,-100,98,98,98,98,98,98,98,98,98,98,98,]),'PROTECTED':([0,43,44,97,98,99,100,120,130,131,137,204,218,271,274,275,280,284,],[99,99,99,-97,-98,-99,-100,99,99,99,99,99,99,99,99,99,99,99,]),'STATIC':([0,43,44,97,98,99,100,120,130,131,137,204,218,271,274,275,280,284,],[100,100,100,-97,-98,-99,-100,100,100,100,100,100,100,100,100,100,100,100,]),'FUNCTION':([0,44,97,98,99,100,130,137,271,274,275,284,],[101,124,-97,-98,-99,-100,101,101,101,101,101,101,]),'NOMBRE':([0,36,38,39,51,52,53,54,55,56,57,58,59,79,94,101,111,113,117,118,121,124,125,129,130,136,137,147,148,155,164,167,168,169,170,175,187,212,217,219,225,226,227,239,248,271,274,275,284,293,317,328,331,332,346,],[40,106,40,40,-47,-48,-49,-50,-51,128,-53,-54,-55,141,152,154,40,40,40,-85,-86,176,178,40,40,40,40,198,199,40,40,-87,-88,-89,-90,40,40,-84,40,40,40,-52,40,278,40,40,40,40,40,40,-158,344,-96,-156,-157,]),'LPAREN':([0,38,48,50,51,52,53,54,55,68,70,71,75,77,88,89,90,103,111,130,137,154,164,173,174,176,199,214,215,248,271,274,275,284,304,],[39,113,125,127,-47,-48,-49,-50,-51,129,131,132,136,139,146,147,148,155,39,39,39,204,39,216,217,218,239,252,253,39,39,39,39,39,328,]),'IF':([0,130,137,271,274,275,284,],[103,103,103,103,103,103,103,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,40,41,45,46,47,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,73,74,76,80,81,82,83,91,92,93,95,96,102,104,107,110,114,115,118,121,122,123,134,135,138,142,143,144,145,149,156,159,160,161,162,167,168,169,170,182,191,195,196,200,201,202,203,212,213,221,223,232,233,235,247,249,250,261,263,267,270,271,272,273,281,285,288,297,303,310,315,316,317,319,320,321,327,329,331,332,334,336,337,345,346,351,353,],[-147,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-43,-45,-101,-103,-105,-47,-48,-49,-50,-51,-52,-53,-54,-55,-70,-71,-72,-73,-74,-75,-76,-77,-80,-66,-147,-56,-57,-58,-59,-60,-61,-126,-160,-161,-40,-46,-39,-44,-41,-42,-85,-86,-102,-104,-67,-68,-65,-150,-151,-152,-153,-127,-35,-78,-79,-80,-36,-87,-88,-89,-90,-159,-69,-121,-148,-128,-129,-130,-131,-84,-91,-154,-95,-125,-147,-64,-37,-81,-82,-94,-147,-119,-132,-147,-144,-146,-112,-38,-155,-118,-124,-108,-122,-149,-158,-92,-93,-117,-139,-63,-96,-156,-113,-62,-123,-120,-157,-111,-145,]),'ENTERO':([0,36,38,39,51,52,53,54,55,57,58,59,78,111,113,117,118,121,129,130,136,137,146,155,157,164,167,168,169,170,175,187,212,217,219,225,226,227,237,248,271,274,275,284,293,317,331,332,339,341,346,],[41,41,41,41,-47,-48,-49,-50,-51,-53,-54,-55,140,41,41,41,-85,-86,41,41,41,41,197,41,206,41,-87,-88,-89,-90,41,41,-84,41,41,41,-52,41,276,41,41,41,41,41,41,-158,-96,-156,41,41,-157,]),'DECIMAL':([0,36,38,39,51,52,53,54,55,57,58,59,111,113,117,118,121,129,130,136,137,155,164,167,168,169,170,175,187,212,217,219,225,226,227,248,271,274,275,284,293,317,331,332,339,341,346,],[104,104,104,104,-47,-48,-49,-50,-51,-53,-54,-55,104,104,104,-85,-86,104,104,104,104,104,104,-87,-88,-89,-90,104,104,-84,104,104,104,-52,104,104,104,104,104,104,104,-158,-96,-156,104,104,-157,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,40,41,45,46,47,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,73,74,76,80,81,82,83,91,92,93,95,96,102,104,107,110,114,115,118,121,122,123,130,134,135,137,138,142,143,144,145,149,156,159,160,161,162,167,168,169,170,182,186,189,190,191,193,195,196,200,201,202,203,212,213,221,223,231,232,233,235,247,249,250,261,262,263,267,270,271,272,273,274,281,282,284,285,288,296,297,303,305,310,312,314,315,316,317,319,320,321,327,329,330,331,332,334,335,336,337,345,346,347,351,353,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-43,-45,-101,-103,-105,-47,-48,-49,-50,-51,-52,-53,-54,-55,-70,-71,-72,-73,-74,-75,-76,-77,-80,-66,-147,-56,-57,-58,-59,-60,-61,-126,-160,-161,-40,-46,-39,-44,-41,-42,-85,-86,-102,-104,-147,-67,-68,-147,-65,-150,-151,-152,-153,-127,-35,-78,-79,-80,-36,-87,-88,-89,-90,-159,228,-147,233,-69,235,-121,-148,-128,-129,-130,-131,-84,-91,-154,-95,270,-125,-147,-64,-37,-81,-82,-94,-147,-147,-119,-132,-147,-144,-146,-147,-112,-147,-147,-38,-155,321,-118,-124,329,-108,334,336,-122,-149,-158,-92,-93,-117,-139,-63,345,-96,-156,-113,-147,-62,-123,-120,-157,351,-111,-145,]),'SEMI':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,40,41,45,46,47,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,73,74,76,80,81,82,83,84,85,86,87,91,92,93,94,95,96,102,104,105,106,107,108,109,110,112,114,115,118,121,122,123,134,135,138,141,142,143,144,145,149,150,151,152,153,156,159,160,161,162,165,166,167,168,169,170,171,179,181,182,189,191,195,196,200,201,202,203,208,212,213,221,222,223,229,231,232,233,235,246,247,249,250,251,255,261,262,263,264,265,266,267,270,271,272,273,275,281,282,285,288,289,290,291,292,294,295,296,297,303,306,307,308,310,312,315,316,317,319,320,321,327,329,331,332,333,334,336,337,345,346,351,353,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-43,-45,-101,-103,-105,-47,-48,-49,-50,-51,-52,-53,-54,-55,-70,-71,-72,-73,-74,-75,-76,-77,-80,-66,-147,-56,-57,-58,-59,142,143,144,145,-60,-61,-126,149,-160,-161,-40,-46,156,-43,-39,-41,-42,-44,162,-41,-42,-85,-86,-102,-104,-67,-68,-65,196,-150,-151,-152,-153,-127,200,201,202,203,-35,-78,-79,-80,-36,-41,212,-87,-88,-89,-90,213,221,223,-159,-147,-69,-121,-148,-128,-129,-130,-131,247,-84,-91,-154,261,-95,268,271,-125,-147,-64,285,-37,-81,-82,288,-140,-94,-147,-147,-41,-116,-115,-119,-132,-147,-144,-146,-147,-112,-147,-38,-155,315,316,317,-141,319,320,271,271,-124,330,331,332,-108,-126,-122,-149,-158,-92,-93,-117,-139,-63,-96,-156,346,-113,-62,-123,-120,-157,-111,-145,]),'RPAREN':([40,41,91,92,102,104,110,114,115,118,121,127,163,167,168,169,170,180,183,192,194,204,205,209,210,212,217,218,240,242,243,244,249,250,252,253,254,256,257,259,260,264,265,266,269,276,277,278,287,298,309,311,317,318,331,332,338,340,342,343,346,348,349,350,],[-43,-45,-60,-61,-40,-46,-44,-41,-42,-85,-86,181,208,-87,-88,-89,-90,222,224,234,236,241,245,249,250,-84,255,258,279,-110,-106,-107,-81,-82,289,290,291,292,-143,294,295,-41,-116,-115,302,307,308,309,-83,322,333,-109,-158,-142,-96,-156,-133,-135,-134,-136,-157,-137,-138,352,]),'COMMA':([40,41,91,92,102,104,110,114,115,118,121,167,168,169,170,177,178,197,198,212,240,242,243,244,256,257,311,317,318,331,332,346,],[-43,-45,-60,-61,-40,-46,-44,-41,-42,-85,-86,-87,-88,-89,-90,219,220,237,238,-84,280,-110,-106,-107,293,-143,-109,-158,-142,-96,-156,-157,]),'EQUALS':([42,108,119,243,323,324,],[117,158,175,175,339,341,]),'CONCAT':([49,109,165,207,],[126,126,211,211,]),'LBRACE':([69,72,76,133,224,234,236,241,245,258,279,302,313,322,352,],[130,133,137,189,262,274,275,282,284,282,189,189,335,189,189,]),'NULL':([94,],[150,]),'LBRACKET':([106,],[157,]),'NEW':([117,],[172,]),'ARRAY':([117,220,],[174,260,]),'COLON':([140,224,241,],[195,263,283,]),'SPLQUEUE':([172,],[214,]),'SPLSTACK':([172,],[215,]),'AS':([188,],[230,]),'RBRACKET':([206,],[246,]),'CATCH':([233,270,272,273,353,],[-147,-132,304,-146,-145,]),'VOID':([283,],[313,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,130,137,271,274,275,284,],[1,186,193,303,305,306,314,]),'imprimir':([0,130,137,271,274,275,284,],[2,2,2,2,2,2,2,]),'asignacion':([0,43,44,120,130,131,137,204,218,271,274,275,280,284,],[3,118,121,121,3,187,3,244,244,3,3,3,244,3,]),'asignacion_array':([0,130,137,271,274,275,284,],[4,4,4,4,4,4,4,]),'funciones':([0,130,137,271,274,275,284,],[5,5,5,5,5,5,5,]),'constante':([0,130,137,271,274,275,284,],[6,6,6,6,6,6,6,]),'lectura':([0,130,137,271,274,275,284,],[7,7,7,7,7,7,7,]),'operadores':([0,37,116,130,137,159,209,271,274,275,284,286,],[8,111,164,8,8,111,248,8,8,8,8,248,]),'operador_logico':([0,130,137,184,185,271,274,275,284,],[9,9,9,225,227,9,9,9,9,]),'condicion_booleana':([0,130,137,271,274,275,284,],[10,10,10,10,10,10,10,]),'bwhile':([0,130,137,228,271,274,275,284,],[11,11,11,267,11,11,11,11,]),'bdo':([0,130,137,271,274,275,284,],[12,12,12,12,12,12,12,]),'bfor':([0,130,137,271,274,275,284,],[13,13,13,13,13,13,13,]),'bforeach':([0,130,137,271,274,275,284,],[14,14,14,14,14,14,14,]),'btry':([0,130,137,271,274,275,284,],[15,15,15,15,15,15,15,]),'operaciones_mat':([0,111,130,137,271,274,275,284,],[16,160,16,16,16,16,16,16,]),'condicion_ifelse':([0,130,137,271,274,275,284,],[17,17,17,17,17,17,17,]),'condicion_elseif':([0,74,130,137,271,274,275,284,],[18,135,18,18,18,18,18,18,]),'condicion_else':([0,74,130,135,137,271,274,275,284,],[19,134,19,191,19,19,19,19,19,]),'bswitch':([0,130,137,271,274,275,284,],[20,20,20,20,20,20,20,]),'bcase':([0,130,137,271,274,275,284,],[21,21,21,21,21,21,21,]),'bgoto':([0,130,137,271,274,275,284,],[22,22,22,22,22,22,22,]),'bcolas':([0,130,137,271,274,275,284,],[23,23,23,23,23,23,23,]),'bpila':([0,130,137,271,274,275,284,],[24,24,24,24,24,24,24,]),'incrementos_mat':([0,130,137,271,274,275,284,],[25,25,25,25,25,25,25,]),'bcortes':([0,130,137,271,274,275,284,],[26,26,26,26,26,26,26,]),'brand':([0,117,130,137,175,271,274,275,284,],[27,167,27,27,167,27,27,27,27,]),'bconcat':([0,36,130,137,271,274,275,284,],[28,107,28,28,28,28,28,28,]),'escribir':([0,117,130,137,175,271,274,275,284,],[29,168,29,29,168,29,29,29,29,]),'btrim':([0,117,130,137,175,271,274,275,284,],[30,169,30,30,169,30,30,30,30,]),'leer':([0,117,130,137,175,271,274,275,284,],[31,170,31,31,170,31,31,31,31,]),'boolean_answer':([0,36,38,39,94,111,113,117,129,130,136,137,155,164,175,187,217,219,225,227,248,271,274,275,284,293,],[32,110,110,110,153,110,110,110,110,32,110,32,110,110,110,110,110,110,110,110,110,32,32,32,32,110,]),'otros':([0,130,137,271,274,275,284,],[33,33,33,33,33,33,33,]),'breturn':([0,76,130,137,189,262,263,271,274,275,282,284,],[34,138,34,34,232,232,232,34,34,34,232,34,]),'comment':([0,130,137,271,274,275,284,],[35,35,35,35,35,35,35,]),'valor':([0,36,38,39,111,113,117,129,130,136,137,155,164,175,187,217,219,225,227,248,271,274,275,284,293,],[37,105,112,116,159,163,166,185,37,185,37,185,209,166,185,257,259,265,266,286,37,37,37,37,318,]),'proteccion':([0,43,44,120,130,131,137,204,218,271,274,275,280,284,],[44,120,120,120,44,120,44,120,120,44,44,44,120,44,]),'funcion_nparams':([0,44,130,137,271,274,275,284,],[45,122,45,45,45,45,45,45,]),'funcion_blank':([0,44,130,137,271,274,275,284,],[46,123,46,46,46,46,46,46,]),'funcion_void':([0,130,137,271,274,275,284,],[47,47,47,47,47,47,47,]),'operaciones_mat_par':([0,111,130,137,164,248,271,274,275,284,],[73,161,73,73,210,287,73,73,73,73,]),'condicion_if':([0,130,137,271,274,275,284,],[74,74,74,74,74,74,74,]),'empty':([0,76,130,137,189,233,262,263,271,274,275,282,284,335,],[93,93,93,93,93,273,93,93,93,93,93,312,93,347,]),'numero':([0,36,38,39,111,113,117,129,130,136,137,155,164,175,187,217,219,225,227,248,271,274,275,284,293,339,341,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,348,349,]),'array_def':([117,],[171,]),'condicion':([129,136,155,187,],[183,192,205,229,]),'stc_bloque_def':([133,241,258,279,302,322,352,],[190,281,281,310,327,337,353,]),'stc_bloque':([189,262,263,282,],[231,296,297,231,]),'params_list':([204,218,],[240,240,]),'param':([204,218,280,],[242,242,311,]),'array_elmnt':([217,],[256,]),'catches':([233,],[272,]),'for_incr':([268,],[298,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> imprimir','cuerpo',1,'p_cuerpo','sintactico.py',7),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','sintactico.py',8),
  ('cuerpo -> asignacion_array','cuerpo',1,'p_cuerpo','sintactico.py',9),
  ('cuerpo -> funciones','cuerpo',1,'p_cuerpo','sintactico.py',10),
  ('cuerpo -> constante','cuerpo',1,'p_cuerpo','sintactico.py',11),
  ('cuerpo -> lectura','cuerpo',1,'p_cuerpo','sintactico.py',12),
  ('cuerpo -> operadores','cuerpo',1,'p_cuerpo','sintactico.py',13),
  ('cuerpo -> operador_logico','cuerpo',1,'p_cuerpo','sintactico.py',14),
  ('cuerpo -> condicion_booleana','cuerpo',1,'p_cuerpo','sintactico.py',15),
  ('cuerpo -> bwhile','cuerpo',1,'p_cuerpo','sintactico.py',16),
  ('cuerpo -> bdo','cuerpo',1,'p_cuerpo','sintactico.py',17),
  ('cuerpo -> bfor','cuerpo',1,'p_cuerpo','sintactico.py',18),
  ('cuerpo -> bforeach','cuerpo',1,'p_cuerpo','sintactico.py',19),
  ('cuerpo -> btry','cuerpo',1,'p_cuerpo','sintactico.py',20),
  ('cuerpo -> operaciones_mat','cuerpo',1,'p_cuerpo','sintactico.py',21),
  ('cuerpo -> condicion_ifelse','cuerpo',1,'p_cuerpo','sintactico.py',22),
  ('cuerpo -> condicion_elseif','cuerpo',1,'p_cuerpo','sintactico.py',23),
  ('cuerpo -> condicion_else','cuerpo',1,'p_cuerpo','sintactico.py',24),
  ('cuerpo -> bswitch','cuerpo',1,'p_cuerpo','sintactico.py',25),
  ('cuerpo -> bcase','cuerpo',1,'p_cuerpo','sintactico.py',26),
  ('cuerpo -> bgoto','cuerpo',1,'p_cuerpo','sintactico.py',27),
  ('cuerpo -> bcolas','cuerpo',1,'p_cuerpo','sintactico.py',28),
  ('cuerpo -> bpila','cuerpo',1,'p_cuerpo','sintactico.py',29),
  ('cuerpo -> incrementos_mat','cuerpo',1,'p_cuerpo','sintactico.py',30),
  ('cuerpo -> bcortes','cuerpo',1,'p_cuerpo','sintactico.py',31),
  ('cuerpo -> brand','cuerpo',1,'p_cuerpo','sintactico.py',32),
  ('cuerpo -> bconcat','cuerpo',1,'p_cuerpo','sintactico.py',33),
  ('cuerpo -> escribir','cuerpo',1,'p_cuerpo','sintactico.py',34),
  ('cuerpo -> btrim','cuerpo',1,'p_cuerpo','sintactico.py',35),
  ('cuerpo -> leer','cuerpo',1,'p_cuerpo','sintactico.py',36),
  ('cuerpo -> boolean_answer','cuerpo',1,'p_cuerpo','sintactico.py',37),
  ('cuerpo -> otros','cuerpo',1,'p_cuerpo','sintactico.py',38),
  ('cuerpo -> breturn','cuerpo',1,'p_cuerpo','sintactico.py',39),
  ('cuerpo -> comment','cuerpo',1,'p_cuerpo','sintactico.py',40),
  ('imprimir -> ECHO valor SEMI','imprimir',3,'p_imprimir','sintactico.py',45),
  ('imprimir -> PRINT valor SEMI','imprimir',3,'p_imprimir','sintactico.py',46),
  ('imprimir -> PRINT LPAREN valor RPAREN SEMI','imprimir',5,'p_imprimir','sintactico.py',47),
  ('imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI','imprimir',6,'p_imprimir','sintactico.py',48),
  ('imprimir -> ECHO bconcat','imprimir',2,'p_imprimir','sintactico.py',49),
  ('valor -> numero','valor',1,'p_valor','sintactico.py',54),
  ('valor -> VARIABLE','valor',1,'p_valor','sintactico.py',55),
  ('valor -> STRING','valor',1,'p_valor','sintactico.py',56),
  ('valor -> NOMBRE','valor',1,'p_valor','sintactico.py',57),
  ('valor -> boolean_answer','valor',1,'p_valor','sintactico.py',58),
  ('numero -> ENTERO','numero',1,'p_numero','sintactico.py',63),
  ('numero -> DECIMAL','numero',1,'p_numero','sintactico.py',64),
  ('operadores -> SUMA','operadores',1,'p_operadores','sintactico.py',69),
  ('operadores -> RESTA','operadores',1,'p_operadores','sintactico.py',70),
  ('operadores -> MULTIPLICACION','operadores',1,'p_operadores','sintactico.py',71),
  ('operadores -> DIVISION','operadores',1,'p_operadores','sintactico.py',72),
  ('operadores -> MODULO','operadores',1,'p_operadores','sintactico.py',73),
  ('operador_logico -> SMALLER','operador_logico',1,'p_operador_logico','sintactico.py',78),
  ('operador_logico -> GREATER','operador_logico',1,'p_operador_logico','sintactico.py',79),
  ('operador_logico -> IS_SMALLER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico.py',80),
  ('operador_logico -> IS_GREATER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico.py',81),
  ('incrementos_mat -> MINUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',87),
  ('incrementos_mat -> MOD_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',88),
  ('incrementos_mat -> MUL_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',89),
  ('incrementos_mat -> PLUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',90),
  ('boolean_answer -> TRUE','boolean_answer',1,'p_boolean_answer','sintactico.py',94),
  ('boolean_answer -> FALSE','boolean_answer',1,'p_boolean_answer','sintactico.py',95),
  ('condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_if',7,'p_condicion_if','sintactico.py',98),
  ('condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_elseif',7,'p_condicion_elseif','sintactico.py',102),
  ('condicion_else -> ELSE LBRACE cuerpo RBRACE','condicion_else',4,'p_condicion_else','sintactico.py',107),
  ('condicion_else -> ELSE breturn','condicion_else',2,'p_condicion_else','sintactico.py',108),
  ('condicion_ifelse -> condicion_if','condicion_ifelse',1,'p_condicion_ifelse','sintactico.py',113),
  ('condicion_ifelse -> condicion_if condicion_else','condicion_ifelse',2,'p_condicion_ifelse','sintactico.py',114),
  ('condicion_ifelse -> condicion_if condicion_elseif','condicion_ifelse',2,'p_condicion_ifelse','sintactico.py',115),
  ('condicion_ifelse -> condicion_if condicion_elseif condicion_else','condicion_ifelse',3,'p_condicion_ifelse','sintactico.py',116),
  ('condicion_booleana -> AND','condicion_booleana',1,'p_condicion_boolena','sintactico.py',121),
  ('condicion_booleana -> OR','condicion_booleana',1,'p_condicion_boolena','sintactico.py',122),
  ('condicion_booleana -> XOR','condicion_booleana',1,'p_condicion_boolena','sintactico.py',123),
  ('condicion_booleana -> IS_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',124),
  ('condicion_booleana -> IS_NOT_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',125),
  ('condicion_booleana -> IS_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',126),
  ('condicion_booleana -> IS_NOT_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',127),
  ('condicion_booleana -> BOOLEAN_NOT','condicion_booleana',1,'p_condicion_boolena','sintactico.py',128),
  ('operaciones_mat -> valor operadores valor','operaciones_mat',3,'p_operaciones_mat','sintactico.py',133),
  ('operaciones_mat -> valor operadores operaciones_mat','operaciones_mat',3,'p_operaciones_mat','sintactico.py',134),
  ('operaciones_mat -> operaciones_mat_par','operaciones_mat',1,'p_operaciones_mat','sintactico.py',135),
  ('operaciones_mat_par -> LPAREN valor operadores valor RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico.py',141),
  ('operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico.py',142),
  ('operaciones_mat_par -> valor operadores operaciones_mat_par','operaciones_mat_par',3,'p_operaciones_mat_par','sintactico.py',143),
  ('asignacion -> VARIABLE EQUALS valor SEMI','asignacion',4,'p_asignacion','sintactico.py',148),
  ('asignacion -> VAR asignacion','asignacion',2,'p_asignacion','sintactico.py',149),
  ('asignacion -> proteccion asignacion','asignacion',2,'p_asignacion','sintactico.py',150),
  ('asignacion -> VARIABLE EQUALS brand','asignacion',3,'p_asignacion','sintactico.py',151),
  ('asignacion -> VARIABLE EQUALS escribir','asignacion',3,'p_asignacion','sintactico.py',152),
  ('asignacion -> VARIABLE EQUALS btrim','asignacion',3,'p_asignacion','sintactico.py',153),
  ('asignacion -> VARIABLE EQUALS leer','asignacion',3,'p_asignacion','sintactico.py',154),
  ('asignacion_array -> VARIABLE EQUALS array_def SEMI','asignacion_array',4,'p_asignacion_array','sintactico.py',159),
  ('constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI','constante',7,'p_constante','sintactico.py',163),
  ('constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI','constante',7,'p_constante','sintactico.py',164),
  ('lectura -> READLINE LPAREN STRING RPAREN SEMI','lectura',5,'p_lectura','sintactico.py',168),
  ('lectura -> READLINE LPAREN RPAREN SEMI','lectura',4,'p_lectura','sintactico.py',169),
  ('brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI','brand',7,'p_brand','sintactico.py',173),
  ('proteccion -> PUBLIC','proteccion',1,'p_proteccion','sintactico.py',177),
  ('proteccion -> PRIVATE','proteccion',1,'p_proteccion','sintactico.py',178),
  ('proteccion -> PROTECTED','proteccion',1,'p_proteccion','sintactico.py',179),
  ('proteccion -> STATIC','proteccion',1,'p_proteccion','sintactico.py',180),
  ('funciones -> funcion_nparams','funciones',1,'p_funciones','sintactico.py',185),
  ('funciones -> proteccion funcion_nparams','funciones',2,'p_funciones','sintactico.py',186),
  ('funciones -> funcion_blank','funciones',1,'p_funciones','sintactico.py',187),
  ('funciones -> proteccion funcion_blank','funciones',2,'p_funciones','sintactico.py',188),
  ('funciones -> funcion_void','funciones',1,'p_funciones','sintactico.py',189),
  ('param -> VARIABLE','param',1,'p_param','sintactico.py',194),
  ('param -> asignacion','param',1,'p_param','sintactico.py',195),
  ('funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def','funcion_nparams',6,'p_funcion_nparams','sintactico.py',200),
  ('params_list -> params_list COMMA param','params_list',3,'p_params_list','sintactico.py',204),
  ('params_list -> param','params_list',1,'p_params_list','sintactico.py',205),
  ('funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE','funcion_void',9,'p_funcion_void','sintactico.py',209),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def','funcion_blank',5,'p_funcion_blank','sintactico.py',213),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE','funcion_blank',7,'p_funcion_blank','sintactico.py',214),
  ('condicion -> VARIABLE operador_logico VARIABLE','condicion',3,'p_condicion','sintactico.py',219),
  ('condicion -> valor operador_logico valor','condicion',3,'p_condicion','sintactico.py',220),
  ('condicion -> VARIABLE operador_logico valor','condicion',3,'p_condicion','sintactico.py',221),
  ('bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE','bwhile',7,'p_bwhile','sintactico.py',226),
  ('bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque','bwhile',6,'p_bwhile','sintactico.py',227),
  ('bdo -> DO LBRACE cuerpo RBRACE bwhile','bdo',5,'p_bdo','sintactico.py',232),
  ('bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE','bswitch',8,'p_bswitch','sintactico.py',237),
  ('bcase -> CASE ENTERO COLON','bcase',3,'p_bcase','sintactico.py',240),
  ('bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI','bcolas',7,'p_bcolas','sintactico.py',249),
  ('bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def','bfor',8,'p_bfor','sintactico.py',254),
  ('stc_bloque -> stc_bloque SEMI cuerpo','stc_bloque',3,'p_stc_bloque','sintactico.py',258),
  ('stc_bloque -> breturn','stc_bloque',1,'p_stc_bloque','sintactico.py',259),
  ('breturn -> empty','breturn',1,'p_breturn','sintactico.py',262),
  ('breturn -> RETURN SEMI','breturn',2,'p_breturn','sintactico.py',263),
  ('breturn -> RETURN NULL SEMI','breturn',3,'p_breturn','sintactico.py',264),
  ('breturn -> RETURN VARIABLE SEMI','breturn',3,'p_breturn','sintactico.py',265),
  ('breturn -> RETURN NOMBRE SEMI','breturn',3,'p_breturn','sintactico.py',266),
  ('breturn -> RETURN boolean_answer SEMI','breturn',3,'p_breturn','sintactico.py',267),
  ('stc_bloque_def -> LBRACE stc_bloque RBRACE','stc_bloque_def',3,'p_stc_bloque_def','sintactico.py',271),
  ('for_incr -> VARIABLE SUMA SUMA','for_incr',3,'p_for_incr','sintactico.py',275),
  ('for_incr -> SUMA SUMA VARIABLE','for_incr',3,'p_for_incr','sintactico.py',276),
  ('for_incr -> VARIABLE RESTA RESTA','for_incr',3,'p_for_incr','sintactico.py',277),
  ('for_incr -> RESTA RESTA VARIABLE','for_incr',3,'p_for_incr','sintactico.py',278),
  ('for_incr -> VARIABLE SUMA EQUALS numero','for_incr',4,'p_for_incr','sintactico.py',279),
  ('for_incr -> VARIABLE RESTA EQUALS numero','for_incr',4,'p_for_incr','sintactico.py',280),
  ('bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def','bforeach',7,'p_bforeach','sintactico.py',284),
  ('array_def -> ARRAY LPAREN RPAREN','array_def',3,'p_array_def','sintactico.py',288),
  ('array_def -> ARRAY LPAREN array_elmnt RPAREN','array_def',4,'p_array_def','sintactico.py',289),
  ('array_elmnt -> array_elmnt COMMA valor','array_elmnt',3,'p_array_elmnt','sintactico.py',293),
  ('array_elmnt -> valor','array_elmnt',1,'p_array_elmnt','sintactico.py',294),
  ('btry -> TRY LBRACE stc_bloque_def RBRACE catches','btry',5,'p_btry','sintactico.py',298),
  ('catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def','catches',7,'p_catches','sintactico.py',302),
  ('catches -> empty','catches',1,'p_catches','sintactico.py',303),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',307),
  ('bgoto -> GOTO NOMBRE SEMI','bgoto',3,'p_bgoto','sintactico.py',311),
  ('bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI','bpila',7,'p_bpila','sintactico.py',315),
  ('bcortes -> EXIT SEMI','bcortes',2,'p_bcortes','sintactico.py',319),
  ('bcortes -> BREAK SEMI','bcortes',2,'p_bcortes','sintactico.py',320),
  ('bcortes -> DEFAULT SEMI','bcortes',2,'p_bcortes','sintactico.py',321),
  ('bcortes -> CONTINUE SEMI','bcortes',2,'p_bcortes','sintactico.py',322),
  ('bconcat -> STRING CONCAT STRING SEMI','bconcat',4,'p_bconcat','sintactico.py',326),
  ('bconcat -> VARIABLE EQUALS VARIABLE CONCAT VARIABLE SEMI','bconcat',6,'p_bconcat','sintactico.py',327),
  ('escribir -> FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI','escribir',7,'p_escribir','sintactico.py',331),
  ('btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI','btrim',8,'p_btrim','sintactico.py',335),
  ('leer -> READLINE LPAREN STRING RPAREN SEMI','leer',5,'p_leer','sintactico.py',339),
  ('otros -> SMALLER NOMBRE GREATER','otros',3,'p_otros','sintactico.py',344),
  ('comment -> COMENTARIOS','comment',1,'p_comment','sintactico.py',348),
  ('comment -> DOC_COMENTARIOS','comment',1,'p_comment','sintactico.py',349),
]
