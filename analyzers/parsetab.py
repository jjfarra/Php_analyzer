
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY AS BOOL BOOLEANO BREAK CADENA CASE CATCH CLOSE_TAG COLON COMENTARIOS COMMA CONCAT CONCAT_EQUAL CONTINUE DECIMAL DEFAULT DEFINE DIVISION DIV_EQUAL DO DOC_COMENTARIOS DOUBLE ECHO ELSE ELSEIF ENTERO EQUALS EXIT FLOAT FOR FOREACH FUNCTION FWRITE GOTO GREATER IF INT INTEGER IS_EQUAL IS_GREATER_OR_EQUAL IS_IDENTICAL IS_NOT_EQUAL IS_NOT_IDENTICAL IS_SMALLER_OR_EQUAL LBRACE LBRACKET LPAREN MINUS_EQUAL MODULO MOD_EQUAL MULTIPLICACION MUL_EQUAL NEW NOMBRE NULL OBJECT OPEN_TAG OR PLUS_EQUAL PRINT PRIVATE PROTECTED PUBLIC RAND RBRACE RBRACKET READLINE RESTA RETURN RPAREN SEMI SMALLER SPLQUEUE SPLSTACK STATIC STRING SUMA SWITCH TRIM TRY VAR VARIABLE VOID WHILE XORcuerpo : imprimir\n            | asignacion\n            | asignacion_array\n            | funciones\n            | constante\n            | lectura\n            | bwhile\n            | bdo\n            | bfor\n            | bforeach\n            | btry\n            | operaciones_mat\n            | condicion_ifelse \n            | condicion_elseif\n            | condicion_else\n            | bswitch\n            | bcase\n            | bgoto\n            | bcolas\n            | bpila\n            | incrementos_mat\n            | bcortes\n            | brand\n            | escribir\n            | btrim\n            | otros\n            | breturn\n            | comment\n            | casting\n  asignacion : VARIABLE EQUALS valor SEMI\n                | VAR asignacion\n                | proteccion asignacion\n                | VARIABLE EQUALS brand\n                | VARIABLE EQUALS escribir\n                | VARIABLE EQUALS btrim\n                | VARIABLE EQUALS lectura\n                | VARIABLE EQUALS bconcat\n  asignacion_array : VARIABLE EQUALS array_def SEMIconstante : DEFINE LPAREN CADENA COMMA valor RPAREN SEMI\n          | DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMIvalor : tipoDato\n            | bcolas\n            | bpila\n  tipoDato : numero\n            | CADENA\n            | BOOLEANO\n  numero : ENTERO\n          | DECIMAL\n  imprimir : ECHO valor SEMI\n            | PRINT valor SEMI\n            | PRINT LPAREN valor RPAREN SEMI\n            | ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI\n            | ECHO bconcat\n  condicion_if :  IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_elseif :  ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_else :  ELSE LBRACE cuerpo RBRACE\n  condicion_ifelse : condicion_if\n                      | condicion_if condicion_else\n                      | condicion_if condicion_elseif\n                      | condicion_if condicion_elseif condicion_else\n   condicion : VARIABLE operador_logico VARIABLE\n            | valor operador_logico valor \n            | VARIABLE operador_logico valor\n            | VARIABLE condicion_booleana VARIABLE\n            | valor condicion_booleana valor\n            | VARIABLE condicion_booleana valor\n  bfor : FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_defstc_bloque : stc_bloque SEMI cuerpo\n        | breturn\n        stc_bloque_def : LBRACE stc_bloque RBRACEfor_incr : VARIABLE SUMA SUMA\n          | SUMA SUMA VARIABLE\n          | VARIABLE RESTA RESTA\n          | RESTA RESTA VARIABLE\n          | VARIABLE SUMA EQUALS numero\n          | VARIABLE RESTA EQUALS numerobforeach :  FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def bwhile : WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE \n  | WHILE LPAREN condicion RPAREN COLON stc_bloque  \n   bdo : DO LBRACE cuerpo RBRACE bwhile \n   bswitch : SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACEbcase : CASE ENTERO COLON innerSwitch : bcase cuerpo BREAK SEMI\n                 | CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch \n  btry : TRY LBRACE stc_bloque_def RBRACE catchescatches : catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def\n          | emptyoperadores : SUMA \n                  | RESTA\n                  | MULTIPLICACION\n                  | DIVISION\n                  | MODULO\n  operador_logico :  SMALLER\n                        | GREATER\n                        | IS_SMALLER_OR_EQUAL\n                        | IS_GREATER_OR_EQUAL\n  incrementos_mat :  MINUS_EQUAL\n                        | MOD_EQUAL\n                        | MUL_EQUAL\n                        | PLUS_EQUAL\n                        | DIV_EQUAL\n  condicion_booleana :  AND\n                        | OR\n                        | XOR\n                        | IS_EQUAL\n                        | IS_NOT_EQUAL\n                        | IS_IDENTICAL\n                        | IS_NOT_IDENTICAL\n  operaciones_mat :  valor operadores valor\n                        | valor operadores operaciones_mat\n                        | operaciones_mat_par\n                       \n  operaciones_mat_par :  LPAREN valor operadores valor RPAREN\n                          |  LPAREN valor operadores operaciones_mat_par RPAREN\n  funciones : funcion_nparams\n              | proteccion funcion_nparams\n              | funcion_blank\n              | proteccion funcion_blank\n              | funcion_void\n  param : VARIABLE\n          | asignacion\n          funcion_nparams : FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_defparams_list : params_list COMMA param\n                      | paramfuncion_void : FUNCTION NOMBRE LPAREN  RPAREN COLON VOID LBRACE empty RBRACE funcion_blank : FUNCTION NOMBRE LPAREN  RPAREN stc_bloque_def\n                    | FUNCTION NOMBRE LPAREN  RPAREN LBRACE empty RBRACE\n  brand : RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMIproteccion : PUBLIC\n          | PRIVATE\n          | PROTECTED\n          | STATIC\n  breturn : empty\n        | RETURN SEMI \n        | RETURN NULL SEMI\n        | RETURN VARIABLE SEMI\n        | RETURN BOOLEANO SEMI\n        array_def : ARRAY LPAREN RPAREN\n          | ARRAY LPAREN array_elmnt RPARENarray_elmnt : array_elmnt COMMA valor\n            | valorempty :  bcolas : VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI\n  bpila : VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMIlectura : READLINE LPAREN CADENA RPAREN SEMI\n          | READLINE LPAREN RPAREN SEMIescribir : FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI\n   btrim : TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI\n   comment : COMENTARIOS\n              | DOC_COMENTARIOS\n   bgoto : GOTO NOMBRE SEMIbcortes : EXIT SEMI\n              | BREAK SEMI\n              | DEFAULT SEMI\n              | CONTINUE SEMI\n   otros : SMALLER NOMBRE GREATER\n   bconcat : CADENA CONCAT CADENA SEMI\n            |  VARIABLE CONCAT VARIABLE SEMI\n            | VARIABLE CONCAT CADENA SEMI\n            | VARIABLE CONCAT_EQUAL CADENA SEMI\n            | CADENA CONCAT_EQUAL CADENA SEMI\n            \n   tiposCast :  STRING\n            | BOOL\n            | DOUBLE\n            | FLOAT\n            | ARRAY\n            | OBJECT \n            | INTEGER\n            | INT\n        \n            \n   casting : VARIABLE LPAREN tiposCast RPAREN VARIABLE SEMI         \n   '
    
_lr_action_items = {'ECHO':([0,113,120,282,285,286,295,],[31,31,31,31,31,31,31,]),'PRINT':([0,113,120,282,285,286,295,],[33,33,33,33,33,33,33,]),'VARIABLE':([0,31,33,34,37,38,71,75,76,77,78,91,92,93,94,95,96,98,101,103,105,106,112,113,114,115,119,120,121,137,142,149,151,152,153,154,155,168,178,195,206,210,211,212,213,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,235,252,253,254,255,256,269,279,282,285,286,291,295,300,332,333,338,339,351,353,],[36,90,99,99,104,104,134,-128,-129,-130,-131,99,-88,-89,-90,-91,-92,99,90,-31,104,-32,175,36,104,179,175,36,185,175,200,99,-33,-34,-35,-36,-37,90,175,248,-30,99,265,248,99,-145,272,274,-93,-94,-95,-96,-102,-103,-104,-105,-106,-107,-108,99,99,280,-156,-160,-157,-158,-159,-144,307,36,36,36,248,36,99,349,350,-127,-146,357,-147,]),'VAR':([0,37,38,75,76,77,78,105,113,114,120,195,212,282,285,286,291,295,],[37,37,37,-128,-129,-130,-131,37,37,37,37,37,37,37,37,37,37,37,]),'DEFINE':([0,113,120,282,285,286,295,],[42,42,42,42,42,42,42,]),'READLINE':([0,101,113,120,168,282,285,286,295,],[44,44,44,44,44,44,44,44,44,]),'WHILE':([0,113,120,233,282,285,286,295,],[45,45,45,45,45,45,45,45,]),'DO':([0,113,120,282,285,286,295,],[46,46,46,46,46,46,46,]),'FOR':([0,113,120,282,285,286,295,],[47,47,47,47,47,47,47,]),'FOREACH':([0,113,120,282,285,286,295,],[48,48,48,48,48,48,48,]),'TRY':([0,113,120,282,285,286,295,],[49,49,49,49,49,49,49,]),'ELSEIF':([0,51,113,120,282,285,286,295,343,],[52,52,52,52,52,52,52,52,-54,]),'ELSE':([0,51,113,118,120,282,285,286,295,336,343,],[53,53,53,53,53,53,53,53,53,-55,-54,]),'SWITCH':([0,113,120,282,285,286,295,],[54,54,54,54,54,54,54,]),'CASE':([0,113,120,282,285,286,295,],[55,55,55,55,55,55,55,]),'GOTO':([0,113,120,282,285,286,295,],[56,56,56,56,56,56,56,]),'MINUS_EQUAL':([0,113,120,282,285,286,295,],[57,57,57,57,57,57,57,]),'MOD_EQUAL':([0,113,120,282,285,286,295,],[58,58,58,58,58,58,58,]),'MUL_EQUAL':([0,113,120,282,285,286,295,],[59,59,59,59,59,59,59,]),'PLUS_EQUAL':([0,113,120,282,285,286,295,],[60,60,60,60,60,60,60,]),'DIV_EQUAL':([0,113,120,282,285,286,295,],[61,61,61,61,61,61,61,]),'EXIT':([0,113,120,282,285,286,295,],[62,62,62,62,62,62,62,]),'BREAK':([0,113,120,282,285,286,295,],[63,63,63,63,63,63,63,]),'DEFAULT':([0,113,120,282,285,286,295,],[64,64,64,64,64,64,64,]),'CONTINUE':([0,113,120,282,285,286,295,],[65,65,65,65,65,65,65,]),'RAND':([0,101,113,120,168,282,285,286,295,],[66,66,66,66,66,66,66,66,66,]),'FWRITE':([0,101,113,120,168,282,285,286,295,],[67,67,67,67,67,67,67,67,67,]),'TRIM':([0,101,113,120,168,282,285,286,295,],[68,68,68,68,68,68,68,68,68,]),'SMALLER':([0,35,43,72,80,82,83,87,88,113,120,175,176,282,285,286,295,323,324,],[69,-47,-45,-46,-41,-44,-48,-42,-43,69,69,220,220,69,69,69,69,-142,-143,]),'RETURN':([0,113,120,180,270,271,282,285,286,293,295,],[71,71,71,71,71,71,71,71,71,71,71,]),'COMENTARIOS':([0,113,120,282,285,286,295,],[73,73,73,73,73,73,73,]),'DOC_COMENTARIOS':([0,113,120,282,285,286,295,],[74,74,74,74,74,74,74,]),'PUBLIC':([0,37,38,75,76,77,78,105,113,114,120,195,212,282,285,286,291,295,],[75,75,75,-128,-129,-130,-131,75,75,75,75,75,75,75,75,75,75,75,]),'PRIVATE':([0,37,38,75,76,77,78,105,113,114,120,195,212,282,285,286,291,295,],[76,76,76,-128,-129,-130,-131,76,76,76,76,76,76,76,76,76,76,76,]),'PROTECTED':([0,37,38,75,76,77,78,105,113,114,120,195,212,282,285,286,291,295,],[77,77,77,-128,-129,-130,-131,77,77,77,77,77,77,77,77,77,77,77,]),'STATIC':([0,37,38,75,76,77,78,105,113,114,120,195,212,282,285,286,291,295,],[78,78,78,-128,-129,-130,-131,78,78,78,78,78,78,78,78,78,78,78,]),'FUNCTION':([0,38,75,76,77,78,113,120,282,285,286,295,],[79,109,-128,-129,-130,-131,79,79,79,79,79,79,]),'LPAREN':([0,33,36,42,44,45,47,48,52,54,66,67,68,81,91,92,93,94,95,96,113,120,136,149,158,169,190,208,209,282,285,286,295,312,],[34,98,102,110,111,112,114,115,119,121,128,129,130,137,34,-88,-89,-90,-91,-92,34,34,195,34,210,212,244,260,261,34,34,34,34,335,]),'IF':([0,113,120,282,285,286,295,],[81,81,81,81,81,81,81,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,39,40,41,43,50,51,57,58,59,60,61,70,72,73,74,80,82,83,86,87,88,103,106,107,108,117,118,124,125,126,127,132,138,145,146,147,151,152,153,154,155,182,186,187,191,192,193,194,206,207,216,237,238,240,252,253,254,255,256,257,258,259,269,271,278,281,282,283,284,292,296,301,305,311,318,323,324,326,327,328,334,336,338,339,341,343,344,352,353,358,360,],[-141,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-47,-114,-116,-118,-45,-111,-57,-97,-98,-99,-100,-101,-132,-46,-148,-149,-41,-44,-48,-53,-42,-43,-31,-32,-115,-117,-58,-59,-151,-152,-153,-154,-133,-49,-109,-110,-50,-33,-34,-35,-36,-37,-60,-82,-150,-155,-134,-135,-136,-30,-38,-145,-69,-141,-56,-156,-160,-157,-158,-159,-51,-112,-113,-144,-141,-80,-70,-141,-85,-87,-125,-52,-169,-79,-68,-121,-142,-143,-39,-40,-78,-77,-55,-127,-146,-126,-54,-67,-81,-147,-124,-86,]),'CADENA':([0,31,33,34,91,92,93,94,95,96,98,101,103,106,110,111,112,113,119,120,137,140,141,142,143,149,151,152,153,154,155,168,178,206,210,213,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,243,252,253,254,255,256,269,282,285,286,295,300,338,339,353,],[43,89,43,43,43,-88,-89,-90,-91,-92,43,89,-31,-32,170,172,43,43,43,43,43,198,199,201,202,43,-33,-34,-35,-36,-37,89,43,-30,43,43,-145,43,43,-93,-94,-95,-96,-102,-103,-104,-105,-106,-107,-108,43,43,288,-156,-160,-157,-158,-159,-144,43,43,43,43,43,-127,-146,-147,]),'BOOLEANO':([0,31,33,34,71,91,92,93,94,95,96,98,101,103,106,112,113,119,120,137,149,151,152,153,154,155,168,178,206,210,213,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,252,253,254,255,256,269,282,285,286,295,300,338,339,353,],[72,72,72,72,135,72,-88,-89,-90,-91,-92,72,72,-31,-32,72,72,72,72,72,72,-33,-34,-35,-36,-37,72,72,-30,72,72,-145,72,72,-93,-94,-95,-96,-102,-103,-104,-105,-106,-107,-108,72,72,-156,-160,-157,-158,-159,-144,72,72,72,72,72,-127,-146,-147,]),'ENTERO':([0,31,33,34,55,91,92,93,94,95,96,98,101,103,106,112,113,119,120,128,137,139,149,151,152,153,154,155,168,178,206,210,213,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,242,252,253,254,255,256,269,282,285,286,295,300,338,339,346,348,353,],[35,35,35,35,122,35,-88,-89,-90,-91,-92,35,35,-31,-32,35,35,35,35,188,35,197,35,-33,-34,-35,-36,-37,35,35,-30,35,35,-145,35,35,-93,-94,-95,-96,-102,-103,-104,-105,-106,-107,-108,35,35,287,-156,-160,-157,-158,-159,-144,35,35,35,35,35,-127,-146,35,35,-147,]),'DECIMAL':([0,31,33,34,91,92,93,94,95,96,98,101,103,106,112,113,119,120,137,149,151,152,153,154,155,168,178,206,210,213,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,252,253,254,255,256,269,282,285,286,295,300,338,339,346,348,353,],[83,83,83,83,83,-88,-89,-90,-91,-92,83,83,-31,-32,83,83,83,83,83,83,-33,-34,-35,-36,-37,83,83,-30,83,83,-145,83,83,-93,-94,-95,-96,-102,-103,-104,-105,-106,-107,-108,83,83,-156,-160,-157,-158,-159,-144,83,83,83,83,83,-127,-146,83,83,-147,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,39,40,41,43,50,51,57,58,59,60,61,70,72,73,74,80,82,83,86,87,88,103,106,107,108,113,117,118,120,124,125,126,127,132,138,145,146,147,151,152,153,154,155,177,180,181,182,184,186,187,191,192,193,194,206,207,216,236,237,238,240,252,253,254,255,256,257,258,259,269,270,271,278,281,282,283,284,285,292,293,295,296,301,304,305,311,313,318,320,322,323,324,326,327,328,334,336,337,338,339,341,342,343,344,352,353,354,358,360,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-47,-114,-116,-118,-45,-111,-57,-97,-98,-99,-100,-101,-132,-46,-148,-149,-41,-44,-48,-53,-42,-43,-31,-32,-115,-117,-141,-58,-59,-141,-151,-152,-153,-154,-133,-49,-109,-110,-50,-33,-34,-35,-36,-37,233,-141,238,-60,240,-82,-150,-155,-134,-135,-136,-30,-38,-145,281,-69,-141,-56,-156,-160,-157,-158,-159,-51,-112,-113,-144,-141,-141,-80,-70,-141,-85,-87,-141,-125,-141,-141,-52,-169,328,-79,-68,336,-121,341,343,-142,-143,-39,-40,-78,-77,-55,352,-127,-146,-126,-141,-54,-67,-81,-147,358,-124,-86,]),'SEMI':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,39,40,41,43,50,51,57,58,59,60,61,62,63,64,65,70,71,72,73,74,80,82,83,84,86,87,88,89,97,103,106,107,108,117,118,123,124,125,126,127,132,133,134,135,138,145,146,147,150,151,152,153,154,155,156,173,180,182,186,187,191,192,193,194,198,199,200,201,202,203,206,207,215,216,234,236,237,238,240,251,252,253,254,255,256,257,258,259,262,265,269,270,271,272,273,274,275,276,277,278,281,282,283,284,286,292,293,296,297,298,299,301,302,303,304,305,311,314,315,316,318,320,323,324,326,327,328,334,336,338,339,340,341,343,344,352,353,358,360,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-47,-114,-116,-118,-45,-111,-57,-97,-98,-99,-100,-101,124,125,126,127,-132,132,-46,-148,-149,-41,-44,-48,138,-53,-42,-43,-45,147,-31,-32,-115,-117,-58,-59,187,-151,-152,-153,-154,-133,192,193,194,-49,-109,-110,-50,206,-33,-34,-35,-36,-37,207,216,-141,-60,-82,-150,-155,-134,-135,-136,252,253,254,255,256,257,-30,-38,269,-145,279,282,-69,-141,-56,296,-156,-160,-157,-158,-159,-51,-112,-113,-137,301,-144,-141,-141,-61,-63,-64,-66,-62,-65,-80,-70,-141,-85,-87,-141,-125,-141,-52,323,324,-138,-169,326,327,282,282,-68,337,338,339,-121,-132,-142,-143,-39,-40,-78,-77,-55,-127,-146,353,-126,-54,-67,-81,-147,-124,-86,]),'SUMA':([20,21,32,35,43,72,80,82,83,87,88,100,145,279,307,308,323,324,330,],[-42,-43,92,-47,-45,-46,-41,-44,-48,-42,-43,92,92,308,330,332,-142,-143,345,]),'RESTA':([20,21,32,35,43,72,80,82,83,87,88,100,145,279,307,309,323,324,331,],[-42,-43,93,-47,-45,-46,-41,-44,-48,-42,-43,93,93,309,331,333,-142,-143,347,]),'MULTIPLICACION':([20,21,32,35,43,72,80,82,83,87,88,100,145,323,324,],[-42,-43,94,-47,-45,-46,-41,-44,-48,-42,-43,94,94,-142,-143,]),'DIVISION':([20,21,32,35,43,72,80,82,83,87,88,100,145,323,324,],[-42,-43,95,-47,-45,-46,-41,-44,-48,-42,-43,95,95,-142,-143,]),'MODULO':([20,21,32,35,43,72,80,82,83,87,88,100,145,323,324,],[-42,-43,96,-47,-45,-46,-41,-44,-48,-42,-43,96,96,-142,-143,]),'NOMBRE':([31,56,69,79,109,110,129,130,244,335,],[85,123,131,136,169,171,189,190,289,351,]),'RPAREN':([35,43,72,80,82,83,87,88,103,106,111,148,151,152,153,154,155,159,160,161,162,163,164,165,166,167,172,174,183,185,195,196,204,205,206,210,212,216,245,247,248,249,252,253,254,255,256,258,259,260,261,263,264,267,268,269,272,273,274,275,276,277,280,287,288,289,306,317,319,323,324,325,338,339,345,347,349,350,353,355,356,357,],[-47,-45,-46,-41,-44,-48,-42,-43,-31,-32,173,203,-33,-34,-35,-36,-37,211,-161,-162,-163,-164,-165,-166,-167,-168,215,217,239,241,246,250,258,259,-30,262,266,-145,290,-123,-119,-120,-156,-160,-157,-158,-159,-112,-113,297,298,299,-140,302,303,-144,-61,-63,-64,-66,-62,-65,310,315,316,317,329,340,-122,-142,-143,-139,-127,-146,-71,-73,-72,-74,-147,-75,-76,359,]),'GREATER':([35,43,72,80,82,83,87,88,131,175,176,323,324,],[-47,-45,-46,-41,-44,-48,-42,-43,191,221,221,-142,-143,]),'IS_SMALLER_OR_EQUAL':([35,43,72,80,82,83,87,88,175,176,323,324,],[-47,-45,-46,-41,-44,-48,-42,-43,222,222,-142,-143,]),'IS_GREATER_OR_EQUAL':([35,43,72,80,82,83,87,88,175,176,323,324,],[-47,-45,-46,-41,-44,-48,-42,-43,223,223,-142,-143,]),'AND':([35,43,72,80,82,83,87,88,175,176,323,324,],[-47,-45,-46,-41,-44,-48,-42,-43,224,224,-142,-143,]),'OR':([35,43,72,80,82,83,87,88,175,176,323,324,],[-47,-45,-46,-41,-44,-48,-42,-43,225,225,-142,-143,]),'XOR':([35,43,72,80,82,83,87,88,175,176,323,324,],[-47,-45,-46,-41,-44,-48,-42,-43,226,226,-142,-143,]),'IS_EQUAL':([35,43,72,80,82,83,87,88,175,176,323,324,],[-47,-45,-46,-41,-44,-48,-42,-43,227,227,-142,-143,]),'IS_NOT_EQUAL':([35,43,72,80,82,83,87,88,175,176,323,324,],[-47,-45,-46,-41,-44,-48,-42,-43,228,228,-142,-143,]),'IS_IDENTICAL':([35,43,72,80,82,83,87,88,175,176,323,324,],[-47,-45,-46,-41,-44,-48,-42,-43,229,229,-142,-143,]),'IS_NOT_IDENTICAL':([35,43,72,80,82,83,87,88,175,176,323,324,],[-47,-45,-46,-41,-44,-48,-42,-43,230,230,-142,-143,]),'COMMA':([35,43,72,80,82,83,87,88,103,106,151,152,153,154,155,170,171,188,189,206,216,245,247,248,249,252,253,254,255,256,263,264,269,319,323,324,325,338,339,353,],[-47,-45,-46,-41,-44,-48,-42,-43,-31,-32,-33,-34,-35,-36,-37,213,214,242,243,-30,-145,291,-123,-119,-120,-156,-160,-157,-158,-159,300,-140,-144,-122,-142,-143,-139,-127,-146,-147,]),'EQUALS':([36,90,99,104,175,248,272,274,330,331,],[101,144,144,168,144,168,144,144,346,348,]),'LBRACE':([46,49,53,116,217,239,241,246,250,266,290,310,321,329,359,],[113,116,120,180,270,285,286,293,295,293,180,180,342,180,180,]),'NULL':([71,],[133,]),'LBRACKET':([85,],[139,]),'CONCAT':([89,90,],[140,142,]),'CONCAT_EQUAL':([89,90,],[141,143,]),'NEW':([101,144,],[157,157,]),'ARRAY':([101,102,214,],[158,164,268,]),'STRING':([102,],[160,]),'BOOL':([102,],[161,]),'DOUBLE':([102,],[162,]),'FLOAT':([102,],[163,]),'OBJECT':([102,],[165,]),'INTEGER':([102,],[166,]),'INT':([102,],[167,]),'COLON':([122,217,246,],[186,271,294,]),'SPLQUEUE':([157,],[208,]),'SPLSTACK':([157,],[209,]),'AS':([179,],[235,]),'RBRACKET':([197,],[251,]),'CATCH':([238,281,283,284,360,],[-141,-70,312,-87,-86,]),'VOID':([294,],[321,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,113,120,282,285,286,295,],[1,177,184,311,313,314,322,]),'imprimir':([0,113,120,282,285,286,295,],[2,2,2,2,2,2,2,]),'asignacion':([0,37,38,105,113,114,120,195,212,282,285,286,291,295,],[3,103,106,106,3,178,3,249,249,3,3,3,249,3,]),'asignacion_array':([0,113,120,282,285,286,295,],[4,4,4,4,4,4,4,]),'funciones':([0,113,120,282,285,286,295,],[5,5,5,5,5,5,5,]),'constante':([0,113,120,282,285,286,295,],[6,6,6,6,6,6,6,]),'lectura':([0,101,113,120,168,282,285,286,295,],[7,154,7,7,154,7,7,7,7,]),'bwhile':([0,113,120,233,282,285,286,295,],[8,8,8,278,8,8,8,8,]),'bdo':([0,113,120,282,285,286,295,],[9,9,9,9,9,9,9,]),'bfor':([0,113,120,282,285,286,295,],[10,10,10,10,10,10,10,]),'bforeach':([0,113,120,282,285,286,295,],[11,11,11,11,11,11,11,]),'btry':([0,113,120,282,285,286,295,],[12,12,12,12,12,12,12,]),'operaciones_mat':([0,91,113,120,282,285,286,295,],[13,146,13,13,13,13,13,13,]),'condicion_ifelse':([0,113,120,282,285,286,295,],[14,14,14,14,14,14,14,]),'condicion_elseif':([0,51,113,120,282,285,286,295,],[15,118,15,15,15,15,15,15,]),'condicion_else':([0,51,113,118,120,282,285,286,295,],[16,117,16,182,16,16,16,16,16,]),'bswitch':([0,113,120,282,285,286,295,],[17,17,17,17,17,17,17,]),'bcase':([0,113,120,282,285,286,295,],[18,18,18,18,18,18,18,]),'bgoto':([0,113,120,282,285,286,295,],[19,19,19,19,19,19,19,]),'bcolas':([0,31,33,34,91,98,101,112,113,119,120,137,149,168,178,210,213,218,219,231,232,282,285,286,295,300,],[20,87,87,87,87,87,87,87,20,87,20,87,87,87,87,87,87,87,87,87,87,20,20,20,20,87,]),'bpila':([0,31,33,34,91,98,101,112,113,119,120,137,149,168,178,210,213,218,219,231,232,282,285,286,295,300,],[21,88,88,88,88,88,88,88,21,88,21,88,88,88,88,88,88,88,88,88,88,21,21,21,21,88,]),'incrementos_mat':([0,113,120,282,285,286,295,],[22,22,22,22,22,22,22,]),'bcortes':([0,113,120,282,285,286,295,],[23,23,23,23,23,23,23,]),'brand':([0,101,113,120,168,282,285,286,295,],[24,151,24,24,151,24,24,24,24,]),'escribir':([0,101,113,120,168,282,285,286,295,],[25,152,25,25,152,25,25,25,25,]),'btrim':([0,101,113,120,168,282,285,286,295,],[26,153,26,26,153,26,26,26,26,]),'otros':([0,113,120,282,285,286,295,],[27,27,27,27,27,27,27,]),'breturn':([0,113,120,180,270,271,282,285,286,293,295,],[28,28,28,237,237,237,28,28,28,237,28,]),'comment':([0,113,120,282,285,286,295,],[29,29,29,29,29,29,29,]),'casting':([0,113,120,282,285,286,295,],[30,30,30,30,30,30,30,]),'valor':([0,31,33,34,91,98,101,112,113,119,120,137,149,168,178,210,213,218,219,231,232,282,285,286,295,300,],[32,84,97,100,145,148,150,176,32,176,32,176,204,150,176,264,267,273,275,276,277,32,32,32,32,325,]),'proteccion':([0,37,38,105,113,114,120,195,212,282,285,286,291,295,],[38,105,105,105,38,105,38,105,105,38,38,38,105,38,]),'funcion_nparams':([0,38,113,120,282,285,286,295,],[39,107,39,39,39,39,39,39,]),'funcion_blank':([0,38,113,120,282,285,286,295,],[40,108,40,40,40,40,40,40,]),'funcion_void':([0,113,120,282,285,286,295,],[41,41,41,41,41,41,41,]),'operaciones_mat_par':([0,91,113,120,149,282,285,286,295,],[50,50,50,50,205,50,50,50,50,]),'condicion_if':([0,113,120,282,285,286,295,],[51,51,51,51,51,51,51,]),'empty':([0,113,120,180,238,270,271,282,285,286,293,295,342,],[70,70,70,70,284,70,70,70,70,70,320,70,354,]),'tipoDato':([0,31,33,34,91,98,101,112,113,119,120,137,149,168,178,210,213,218,219,231,232,282,285,286,295,300,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'numero':([0,31,33,34,91,98,101,112,113,119,120,137,149,168,178,210,213,218,219,231,232,282,285,286,295,300,346,348,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,355,356,]),'bconcat':([31,101,168,],[86,155,155,]),'operadores':([32,100,145,],[91,149,91,]),'array_def':([101,],[156,]),'tiposCast':([102,],[159,]),'condicion':([112,119,137,178,],[174,183,196,234,]),'stc_bloque_def':([116,246,266,290,310,329,359,],[181,292,292,318,334,344,360,]),'operador_logico':([175,176,],[218,231,]),'condicion_booleana':([175,176,],[219,232,]),'stc_bloque':([180,270,271,293,],[236,304,305,236,]),'params_list':([195,212,],[245,245,]),'param':([195,212,291,],[247,247,319,]),'array_elmnt':([210,],[263,]),'catches':([238,],[283,]),'for_incr':([279,],[306,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> imprimir','cuerpo',1,'p_cuerpo','sintactico2.py',10),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','sintactico2.py',11),
  ('cuerpo -> asignacion_array','cuerpo',1,'p_cuerpo','sintactico2.py',12),
  ('cuerpo -> funciones','cuerpo',1,'p_cuerpo','sintactico2.py',13),
  ('cuerpo -> constante','cuerpo',1,'p_cuerpo','sintactico2.py',14),
  ('cuerpo -> lectura','cuerpo',1,'p_cuerpo','sintactico2.py',15),
  ('cuerpo -> bwhile','cuerpo',1,'p_cuerpo','sintactico2.py',16),
  ('cuerpo -> bdo','cuerpo',1,'p_cuerpo','sintactico2.py',17),
  ('cuerpo -> bfor','cuerpo',1,'p_cuerpo','sintactico2.py',18),
  ('cuerpo -> bforeach','cuerpo',1,'p_cuerpo','sintactico2.py',19),
  ('cuerpo -> btry','cuerpo',1,'p_cuerpo','sintactico2.py',20),
  ('cuerpo -> operaciones_mat','cuerpo',1,'p_cuerpo','sintactico2.py',21),
  ('cuerpo -> condicion_ifelse','cuerpo',1,'p_cuerpo','sintactico2.py',22),
  ('cuerpo -> condicion_elseif','cuerpo',1,'p_cuerpo','sintactico2.py',23),
  ('cuerpo -> condicion_else','cuerpo',1,'p_cuerpo','sintactico2.py',24),
  ('cuerpo -> bswitch','cuerpo',1,'p_cuerpo','sintactico2.py',25),
  ('cuerpo -> bcase','cuerpo',1,'p_cuerpo','sintactico2.py',26),
  ('cuerpo -> bgoto','cuerpo',1,'p_cuerpo','sintactico2.py',27),
  ('cuerpo -> bcolas','cuerpo',1,'p_cuerpo','sintactico2.py',28),
  ('cuerpo -> bpila','cuerpo',1,'p_cuerpo','sintactico2.py',29),
  ('cuerpo -> incrementos_mat','cuerpo',1,'p_cuerpo','sintactico2.py',30),
  ('cuerpo -> bcortes','cuerpo',1,'p_cuerpo','sintactico2.py',31),
  ('cuerpo -> brand','cuerpo',1,'p_cuerpo','sintactico2.py',32),
  ('cuerpo -> escribir','cuerpo',1,'p_cuerpo','sintactico2.py',33),
  ('cuerpo -> btrim','cuerpo',1,'p_cuerpo','sintactico2.py',34),
  ('cuerpo -> otros','cuerpo',1,'p_cuerpo','sintactico2.py',35),
  ('cuerpo -> breturn','cuerpo',1,'p_cuerpo','sintactico2.py',36),
  ('cuerpo -> comment','cuerpo',1,'p_cuerpo','sintactico2.py',37),
  ('cuerpo -> casting','cuerpo',1,'p_cuerpo','sintactico2.py',38),
  ('asignacion -> VARIABLE EQUALS valor SEMI','asignacion',4,'p_asignacion','sintactico2.py',45),
  ('asignacion -> VAR asignacion','asignacion',2,'p_asignacion','sintactico2.py',46),
  ('asignacion -> proteccion asignacion','asignacion',2,'p_asignacion','sintactico2.py',47),
  ('asignacion -> VARIABLE EQUALS brand','asignacion',3,'p_asignacion','sintactico2.py',48),
  ('asignacion -> VARIABLE EQUALS escribir','asignacion',3,'p_asignacion','sintactico2.py',49),
  ('asignacion -> VARIABLE EQUALS btrim','asignacion',3,'p_asignacion','sintactico2.py',50),
  ('asignacion -> VARIABLE EQUALS lectura','asignacion',3,'p_asignacion','sintactico2.py',51),
  ('asignacion -> VARIABLE EQUALS bconcat','asignacion',3,'p_asignacion','sintactico2.py',52),
  ('asignacion_array -> VARIABLE EQUALS array_def SEMI','asignacion_array',4,'p_asignacion_array','sintactico2.py',59),
  ('constante -> DEFINE LPAREN CADENA COMMA valor RPAREN SEMI','constante',7,'p_constante','sintactico2.py',64),
  ('constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI','constante',7,'p_constante','sintactico2.py',65),
  ('valor -> tipoDato','valor',1,'p_valor','sintactico2.py',70),
  ('valor -> bcolas','valor',1,'p_valor','sintactico2.py',71),
  ('valor -> bpila','valor',1,'p_valor','sintactico2.py',72),
  ('tipoDato -> numero','tipoDato',1,'p_tipoDato','sintactico2.py',78),
  ('tipoDato -> CADENA','tipoDato',1,'p_tipoDato','sintactico2.py',79),
  ('tipoDato -> BOOLEANO','tipoDato',1,'p_tipoDato','sintactico2.py',80),
  ('numero -> ENTERO','numero',1,'p_numero','sintactico2.py',85),
  ('numero -> DECIMAL','numero',1,'p_numero','sintactico2.py',86),
  ('imprimir -> ECHO valor SEMI','imprimir',3,'p_imprimir','sintactico2.py',92),
  ('imprimir -> PRINT valor SEMI','imprimir',3,'p_imprimir','sintactico2.py',93),
  ('imprimir -> PRINT LPAREN valor RPAREN SEMI','imprimir',5,'p_imprimir','sintactico2.py',94),
  ('imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI','imprimir',6,'p_imprimir','sintactico2.py',95),
  ('imprimir -> ECHO bconcat','imprimir',2,'p_imprimir','sintactico2.py',96),
  ('condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_if',7,'p_condicion_if','sintactico2.py',103),
  ('condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_elseif',7,'p_condicion_elseif','sintactico2.py',108),
  ('condicion_else -> ELSE LBRACE cuerpo RBRACE','condicion_else',4,'p_condicion_else','sintactico2.py',113),
  ('condicion_ifelse -> condicion_if','condicion_ifelse',1,'p_condicion_ifelse','sintactico2.py',118),
  ('condicion_ifelse -> condicion_if condicion_else','condicion_ifelse',2,'p_condicion_ifelse','sintactico2.py',119),
  ('condicion_ifelse -> condicion_if condicion_elseif','condicion_ifelse',2,'p_condicion_ifelse','sintactico2.py',120),
  ('condicion_ifelse -> condicion_if condicion_elseif condicion_else','condicion_ifelse',3,'p_condicion_ifelse','sintactico2.py',121),
  ('condicion -> VARIABLE operador_logico VARIABLE','condicion',3,'p_condicion','sintactico2.py',126),
  ('condicion -> valor operador_logico valor','condicion',3,'p_condicion','sintactico2.py',127),
  ('condicion -> VARIABLE operador_logico valor','condicion',3,'p_condicion','sintactico2.py',128),
  ('condicion -> VARIABLE condicion_booleana VARIABLE','condicion',3,'p_condicion','sintactico2.py',129),
  ('condicion -> valor condicion_booleana valor','condicion',3,'p_condicion','sintactico2.py',130),
  ('condicion -> VARIABLE condicion_booleana valor','condicion',3,'p_condicion','sintactico2.py',131),
  ('bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def','bfor',8,'p_bfor','sintactico2.py',136),
  ('stc_bloque -> stc_bloque SEMI cuerpo','stc_bloque',3,'p_stc_bloque','sintactico2.py',140),
  ('stc_bloque -> breturn','stc_bloque',1,'p_stc_bloque','sintactico2.py',141),
  ('stc_bloque_def -> LBRACE stc_bloque RBRACE','stc_bloque_def',3,'p_stc_bloque_def','sintactico2.py',146),
  ('for_incr -> VARIABLE SUMA SUMA','for_incr',3,'p_for_incr','sintactico2.py',150),
  ('for_incr -> SUMA SUMA VARIABLE','for_incr',3,'p_for_incr','sintactico2.py',151),
  ('for_incr -> VARIABLE RESTA RESTA','for_incr',3,'p_for_incr','sintactico2.py',152),
  ('for_incr -> RESTA RESTA VARIABLE','for_incr',3,'p_for_incr','sintactico2.py',153),
  ('for_incr -> VARIABLE SUMA EQUALS numero','for_incr',4,'p_for_incr','sintactico2.py',154),
  ('for_incr -> VARIABLE RESTA EQUALS numero','for_incr',4,'p_for_incr','sintactico2.py',155),
  ('bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def','bforeach',7,'p_bforeach','sintactico2.py',159),
  ('bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE','bwhile',7,'p_bwhile','sintactico2.py',164),
  ('bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque','bwhile',6,'p_bwhile','sintactico2.py',165),
  ('bdo -> DO LBRACE cuerpo RBRACE bwhile','bdo',5,'p_bdo','sintactico2.py',170),
  ('bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE','bswitch',8,'p_bswitch','sintactico2.py',176),
  ('bcase -> CASE ENTERO COLON','bcase',3,'p_bcase','sintactico2.py',180),
  ('innerSwitch -> bcase cuerpo BREAK SEMI','innerSwitch',4,'p_innerSwitch','sintactico2.py',184),
  ('innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch','innerSwitch',7,'p_innerSwitch','sintactico2.py',185),
  ('btry -> TRY LBRACE stc_bloque_def RBRACE catches','btry',5,'p_btry','sintactico2.py',191),
  ('catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def','catches',7,'p_catches','sintactico2.py',195),
  ('catches -> empty','catches',1,'p_catches','sintactico2.py',196),
  ('operadores -> SUMA','operadores',1,'p_operadores','sintactico2.py',202),
  ('operadores -> RESTA','operadores',1,'p_operadores','sintactico2.py',203),
  ('operadores -> MULTIPLICACION','operadores',1,'p_operadores','sintactico2.py',204),
  ('operadores -> DIVISION','operadores',1,'p_operadores','sintactico2.py',205),
  ('operadores -> MODULO','operadores',1,'p_operadores','sintactico2.py',206),
  ('operador_logico -> SMALLER','operador_logico',1,'p_operador_logico','sintactico2.py',211),
  ('operador_logico -> GREATER','operador_logico',1,'p_operador_logico','sintactico2.py',212),
  ('operador_logico -> IS_SMALLER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico2.py',213),
  ('operador_logico -> IS_GREATER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico2.py',214),
  ('incrementos_mat -> MINUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',219),
  ('incrementos_mat -> MOD_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',220),
  ('incrementos_mat -> MUL_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',221),
  ('incrementos_mat -> PLUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',222),
  ('incrementos_mat -> DIV_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',223),
  ('condicion_booleana -> AND','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',228),
  ('condicion_booleana -> OR','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',229),
  ('condicion_booleana -> XOR','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',230),
  ('condicion_booleana -> IS_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',231),
  ('condicion_booleana -> IS_NOT_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',232),
  ('condicion_booleana -> IS_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',233),
  ('condicion_booleana -> IS_NOT_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',234),
  ('operaciones_mat -> valor operadores valor','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',239),
  ('operaciones_mat -> valor operadores operaciones_mat','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',240),
  ('operaciones_mat -> operaciones_mat_par','operaciones_mat',1,'p_operaciones_mat','sintactico2.py',241),
  ('operaciones_mat_par -> LPAREN valor operadores valor RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',247),
  ('operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',248),
  ('funciones -> funcion_nparams','funciones',1,'p_funciones','sintactico2.py',253),
  ('funciones -> proteccion funcion_nparams','funciones',2,'p_funciones','sintactico2.py',254),
  ('funciones -> funcion_blank','funciones',1,'p_funciones','sintactico2.py',255),
  ('funciones -> proteccion funcion_blank','funciones',2,'p_funciones','sintactico2.py',256),
  ('funciones -> funcion_void','funciones',1,'p_funciones','sintactico2.py',257),
  ('param -> VARIABLE','param',1,'p_param','sintactico2.py',262),
  ('param -> asignacion','param',1,'p_param','sintactico2.py',263),
  ('funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def','funcion_nparams',6,'p_funcion_nparams','sintactico2.py',268),
  ('params_list -> params_list COMMA param','params_list',3,'p_params_list','sintactico2.py',272),
  ('params_list -> param','params_list',1,'p_params_list','sintactico2.py',273),
  ('funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE','funcion_void',9,'p_funcion_void','sintactico2.py',277),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def','funcion_blank',5,'p_funcion_blank','sintactico2.py',281),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE','funcion_blank',7,'p_funcion_blank','sintactico2.py',282),
  ('brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI','brand',7,'p_brand','sintactico2.py',286),
  ('proteccion -> PUBLIC','proteccion',1,'p_proteccion','sintactico2.py',290),
  ('proteccion -> PRIVATE','proteccion',1,'p_proteccion','sintactico2.py',291),
  ('proteccion -> PROTECTED','proteccion',1,'p_proteccion','sintactico2.py',292),
  ('proteccion -> STATIC','proteccion',1,'p_proteccion','sintactico2.py',293),
  ('breturn -> empty','breturn',1,'p_breturn','sintactico2.py',297),
  ('breturn -> RETURN SEMI','breturn',2,'p_breturn','sintactico2.py',298),
  ('breturn -> RETURN NULL SEMI','breturn',3,'p_breturn','sintactico2.py',299),
  ('breturn -> RETURN VARIABLE SEMI','breturn',3,'p_breturn','sintactico2.py',300),
  ('breturn -> RETURN BOOLEANO SEMI','breturn',3,'p_breturn','sintactico2.py',301),
  ('array_def -> ARRAY LPAREN RPAREN','array_def',3,'p_array_def','sintactico2.py',308),
  ('array_def -> ARRAY LPAREN array_elmnt RPAREN','array_def',4,'p_array_def','sintactico2.py',309),
  ('array_elmnt -> array_elmnt COMMA valor','array_elmnt',3,'p_array_elmnt','sintactico2.py',312),
  ('array_elmnt -> valor','array_elmnt',1,'p_array_elmnt','sintactico2.py',313),
  ('empty -> <empty>','empty',0,'p_empty','sintactico2.py',316),
  ('bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI','bcolas',7,'p_bcolas','sintactico2.py',321),
  ('bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI','bpila',7,'p_bpila','sintactico2.py',326),
  ('lectura -> READLINE LPAREN CADENA RPAREN SEMI','lectura',5,'p_lectura','sintactico2.py',331),
  ('lectura -> READLINE LPAREN RPAREN SEMI','lectura',4,'p_lectura','sintactico2.py',332),
  ('escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI','escribir',7,'p_escribir','sintactico2.py',335),
  ('btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI','btrim',8,'p_btrim','sintactico2.py',339),
  ('comment -> COMENTARIOS','comment',1,'p_comment','sintactico2.py',344),
  ('comment -> DOC_COMENTARIOS','comment',1,'p_comment','sintactico2.py',345),
  ('bgoto -> GOTO NOMBRE SEMI','bgoto',3,'p_bgoto','sintactico2.py',349),
  ('bcortes -> EXIT SEMI','bcortes',2,'p_bcortes','sintactico2.py',353),
  ('bcortes -> BREAK SEMI','bcortes',2,'p_bcortes','sintactico2.py',354),
  ('bcortes -> DEFAULT SEMI','bcortes',2,'p_bcortes','sintactico2.py',355),
  ('bcortes -> CONTINUE SEMI','bcortes',2,'p_bcortes','sintactico2.py',356),
  ('otros -> SMALLER NOMBRE GREATER','otros',3,'p_otros','sintactico2.py',360),
  ('bconcat -> CADENA CONCAT CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',366),
  ('bconcat -> VARIABLE CONCAT VARIABLE SEMI','bconcat',4,'p_bconcat','sintactico2.py',367),
  ('bconcat -> VARIABLE CONCAT CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',368),
  ('bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',369),
  ('bconcat -> CADENA CONCAT_EQUAL CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',370),
  ('tiposCast -> STRING','tiposCast',1,'p_tiposCast','sintactico2.py',375),
  ('tiposCast -> BOOL','tiposCast',1,'p_tiposCast','sintactico2.py',376),
  ('tiposCast -> DOUBLE','tiposCast',1,'p_tiposCast','sintactico2.py',377),
  ('tiposCast -> FLOAT','tiposCast',1,'p_tiposCast','sintactico2.py',378),
  ('tiposCast -> ARRAY','tiposCast',1,'p_tiposCast','sintactico2.py',379),
  ('tiposCast -> OBJECT','tiposCast',1,'p_tiposCast','sintactico2.py',380),
  ('tiposCast -> INTEGER','tiposCast',1,'p_tiposCast','sintactico2.py',381),
  ('tiposCast -> INT','tiposCast',1,'p_tiposCast','sintactico2.py',382),
  ('casting -> VARIABLE LPAREN tiposCast RPAREN VARIABLE SEMI','casting',6,'p_casting','sintactico2.py',388),
]
