
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY AS AT BOOL BOOLEAN_NOT BREAK CASE CATCH CLOSE_TAG COLON COMENTARIOS COMMA CONCAT CONTINUE DECIMAL DEFAULT DEFINE DIVISION DIV_EQUAL DO DOC_COMENTARIOS DOUBLE ECHO ELSE ELSEIF ENTERO EQUALS EXIT FALSE FLOAT FOR FOREACH FUNCTION FWRITE GOTO GREATER IF INT IS_EQUAL IS_GREATER_OR_EQUAL IS_IDENTICAL IS_NOT_EQUAL IS_NOT_IDENTICAL IS_SMALLER_OR_EQUAL LBRACE LBRACKET LPAREN MINUS_EQUAL MODULO MOD_EQUAL MULTIPLICACION MUL_EQUAL NEW NOMBRE NOT NULL OPEN_TAG OR PLUS_EQUAL PRINT PRIVATE PROTECTED PUBLIC RAND RBRACE RBRACKET READLINE RESTA RETURN RPAREN SEMI SMALLER SPLQUEUE SPLSTACK STATIC STRING SUMA SWITCH TRIM TRUE TRY VAR VARIABLE VOID WHILE XORcuerpo : imprimir\n            | asignacion\n            | asignacion_array\n            | funciones\n            | constante\n            | lectura\n            | operadores\n            | operador_logico\n            | condicion_booleana\n            | bwhile\n            | bdo\n            | bfor\n            | bforeach\n            | btry\n            | operaciones_mat\n            | condicion_ifelse \n            | condicion_elseif\n            | condicion_else\n            | bswitch\n            | bcase\n            | bgoto\n            | bcolas\n            | bpila\n            | incrementos_mat\n            | bcortes\n            | brand\n            | bconcat\n            | escribir\n            | btrim\n            | leer\n            | boolean_answer\n            | otros\n            | breturn\n  imprimir : ECHO valor SEMI\n            | PRINT valor SEMI\n            | PRINT LPAREN valor RPAREN SEMI\n            | ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI\n            | ECHO bconcat\n  valor : numero\n            | VARIABLE\n            | STRING\n            | NOMBRE\n            | boolean_answer\n  numero : ENTERO\n          | DECIMAL\n  operadores : SUMA \n                  | RESTA\n                  | MULTIPLICACION\n                  | DIVISION\n                  | MODULO\n  operador_logico :  SMALLER\n                        | GREATER\n                        | IS_SMALLER_OR_EQUAL\n                        | IS_GREATER_OR_EQUAL\n  incrementos_mat :  MINUS_EQUAL\n                        | MOD_EQUAL\n                        | MUL_EQUAL\n                        | PLUS_EQUAL\n  boolean_answer :  TRUE\n                      | FALSE\n  condicion_if :  IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_elseif :  ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_else :  ELSE LBRACE cuerpo RBRACE\n                    | ELSE breturn\n  condicion_ifelse : condicion_if\n                      | condicion_if condicion_else\n                      | condicion_if condicion_elseif\n                      | condicion_if condicion_elseif condicion_else\n  condicion_booleana :  AND\n                        | OR\n                        | XOR\n                        | IS_EQUAL\n                        | IS_NOT_EQUAL\n                        | IS_IDENTICAL\n                        | IS_NOT_IDENTICAL\n                        | BOOLEAN_NOT\n  operaciones_mat :  valor operadores valor\n                        | valor operadores operaciones_mat\n                        | operaciones_mat_par\n                       \n  operaciones_mat_par :  LPAREN valor operadores valor RPAREN\n                          |  LPAREN valor operadores operaciones_mat_par RPAREN\n                          |  valor operadores operaciones_mat_par \n  asignacion : VARIABLE EQUALS valor SEMI\n                | VAR asignacion\n                | proteccion asignacion\n                | VARIABLE EQUALS brand\n                | VARIABLE EQUALS escribir\n                | VARIABLE EQUALS btrim\n                | VARIABLE EQUALS leer\n  asignacion_array : VARIABLE EQUALS array_def SEMIconstante : DEFINE LPAREN STRING COMMA valor RPAREN SEMI\n          | DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMIlectura : READLINE LPAREN STRING RPAREN SEMI\n          | READLINE LPAREN RPAREN SEMIbrand : RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMIproteccion : PUBLIC\n          | PRIVATE\n          | PROTECTED\n          | STATIC\n  funciones : funcion_nparams\n              | proteccion funcion_nparams\n              | funcion_blank\n              | proteccion funcion_blank\n              | funcion_void\n  param : VARIABLE\n          | asignacion\n          funcion_nparams : FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_defparams_list : params_list COMMA param\n                      | paramfuncion_void : FUNCTION NOMBRE LPAREN  RPAREN COLON VOID LBRACE empty RBRACE funcion_blank : FUNCTION NOMBRE LPAREN  RPAREN stc_bloque_def\n                    | FUNCTION NOMBRE LPAREN  RPAREN LBRACE empty RBRACE\n   condicion : VARIABLE operador_logico VARIABLE\n            | valor operador_logico valor \n            | VARIABLE operador_logico valor\n   bwhile : WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE \n  | WHILE LPAREN condicion RPAREN COLON stc_bloque  \n   bdo : DO LBRACE cuerpo RBRACE bwhile \n   bswitch : SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACEbcase : CASE ENTERO COLON bcolas : VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI\n  bfor : FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_defstc_bloque : stc_bloque SEMI cuerpo\n        | breturn\n        breturn : empty\n        | RETURN SEMI \n        | RETURN NULL SEMI\n        | RETURN VARIABLE SEMI\n        | RETURN NOMBRE SEMI\n        | RETURN boolean_answer SEMI\n        stc_bloque_def : LBRACE stc_bloque RBRACEfor_incr : VARIABLE SUMA SUMA\n          | SUMA SUMA VARIABLE\n          | VARIABLE RESTA RESTA\n          | RESTA RESTA VARIABLE\n          | VARIABLE SUMA EQUALS numero\n          | VARIABLE RESTA EQUALS numerobforeach :  FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_defarray_def : ARRAY LPAREN RPAREN\n          | ARRAY LPAREN array_elmnt RPARENarray_elmnt : array_elmnt COMMA valor\n            | valorbtry : TRY LBRACE stc_bloque_def RBRACE catchescatches : catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def\n          | emptyempty : bgoto : GOTO NOMBRE SEMIbpila : VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMIbcortes : EXIT SEMI\n              | BREAK SEMI\n              | DEFAULT SEMI\n              | CONTINUE SEMI\n   bconcat : STRING CONCAT STRING SEMI\n            | VARIABLE EQUALS VARIABLE CONCAT VARIABLE SEMI\n   escribir : FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI\n   btrim : TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI\n   leer : READLINE LPAREN STRING RPAREN SEMI\n   otros : SMALLER NOMBRE GREATER\n   '
    
_lr_action_items = {'ECHO':([0,127,134,268,271,272,281,],[35,35,35,35,35,35,35,]),'PRINT':([0,127,134,268,271,272,281,],[37,37,37,37,37,37,37,]),'VARIABLE':([0,35,37,38,42,43,50,51,52,53,54,56,57,58,93,94,95,96,97,108,110,114,115,117,118,126,127,128,129,133,134,136,152,155,161,164,165,166,167,172,184,201,208,209,214,215,216,222,223,224,227,245,265,268,271,272,277,281,290,314,322,323,328,329,341,343,],[41,105,111,111,116,116,-46,-47,-48,-49,-50,-52,-53,-54,148,-96,-97,-98,-99,111,111,162,-84,116,-85,181,41,116,185,181,41,191,181,204,111,-86,-87,-88,-89,111,181,240,248,-83,111,240,111,261,-51,111,266,111,296,41,41,41,240,41,111,-157,339,340,-95,-155,347,-156,]),'VAR':([0,42,43,94,95,96,97,117,127,128,134,201,215,268,271,272,277,281,],[42,42,42,-96,-97,-98,-99,42,42,42,42,42,42,42,42,42,42,42,]),'DEFINE':([0,127,134,268,271,272,281,],[47,47,47,47,47,47,47,]),'READLINE':([0,114,127,134,172,268,271,272,281,],[49,170,49,49,170,49,49,49,49,]),'SUMA':([0,32,36,39,40,41,48,90,91,99,101,107,111,112,113,127,134,156,206,265,268,271,272,281,283,296,297,320,],[50,-43,50,-42,-44,-40,-41,-59,-60,-39,-45,-43,-40,-41,50,50,50,50,50,297,50,50,50,50,50,320,322,335,]),'RESTA':([0,32,36,39,40,41,48,90,91,99,101,107,111,112,113,127,134,156,206,265,268,271,272,281,283,296,298,321,],[51,-43,51,-42,-44,-40,-41,-59,-60,-39,-45,-43,-40,-41,51,51,51,51,51,298,51,51,51,51,51,321,323,337,]),'MULTIPLICACION':([0,32,36,39,40,41,48,90,91,99,101,107,111,112,113,127,134,156,206,268,271,272,281,283,],[52,-43,52,-42,-44,-40,-41,-59,-60,-39,-45,-43,-40,-41,52,52,52,52,52,52,52,52,52,52,]),'DIVISION':([0,32,36,39,40,41,48,90,91,99,101,107,111,112,113,127,134,156,206,268,271,272,281,283,],[53,-43,53,-42,-44,-40,-41,-59,-60,-39,-45,-43,-40,-41,53,53,53,53,53,53,53,53,53,53,]),'MODULO':([0,32,36,39,40,41,48,90,91,99,101,107,111,112,113,127,134,156,206,268,271,272,281,283,],[54,-43,54,-42,-44,-40,-41,-59,-60,-39,-45,-43,-40,-41,54,54,54,54,54,54,54,54,54,54,]),'SMALLER':([0,39,40,90,91,99,101,107,112,127,134,181,182,268,271,272,281,],[55,-42,-44,-59,-60,-39,-45,-43,-41,55,55,223,223,55,55,55,55,]),'GREATER':([0,39,40,90,91,99,101,107,112,125,127,134,181,182,268,271,272,281,],[56,-42,-44,-59,-60,-39,-45,-43,-41,179,56,56,56,56,56,56,56,56,]),'IS_SMALLER_OR_EQUAL':([0,39,40,90,91,99,101,107,112,127,134,181,182,268,271,272,281,],[57,-42,-44,-59,-60,-39,-45,-43,-41,57,57,57,57,57,57,57,57,]),'IS_GREATER_OR_EQUAL':([0,39,40,90,91,99,101,107,112,127,134,181,182,268,271,272,281,],[58,-42,-44,-59,-60,-39,-45,-43,-41,58,58,58,58,58,58,58,58,]),'AND':([0,127,134,268,271,272,281,],[59,59,59,59,59,59,59,]),'OR':([0,127,134,268,271,272,281,],[60,60,60,60,60,60,60,]),'XOR':([0,127,134,268,271,272,281,],[61,61,61,61,61,61,61,]),'IS_EQUAL':([0,127,134,268,271,272,281,],[62,62,62,62,62,62,62,]),'IS_NOT_EQUAL':([0,127,134,268,271,272,281,],[63,63,63,63,63,63,63,]),'IS_IDENTICAL':([0,127,134,268,271,272,281,],[64,64,64,64,64,64,64,]),'IS_NOT_IDENTICAL':([0,127,134,268,271,272,281,],[65,65,65,65,65,65,65,]),'BOOLEAN_NOT':([0,127,134,268,271,272,281,],[66,66,66,66,66,66,66,]),'WHILE':([0,127,134,225,268,271,272,281,],[67,67,67,67,67,67,67,67,]),'DO':([0,127,134,268,271,272,281,],[68,68,68,68,68,68,68,]),'FOR':([0,127,134,268,271,272,281,],[69,69,69,69,69,69,69,]),'FOREACH':([0,127,134,268,271,272,281,],[70,70,70,70,70,70,70,]),'TRY':([0,127,134,268,271,272,281,],[71,71,71,71,71,71,71,]),'ELSEIF':([0,73,127,134,268,271,272,281,333,],[74,74,74,74,74,74,74,74,-61,]),'ELSE':([0,73,127,132,134,268,271,272,281,326,333,],[75,75,75,75,75,75,75,75,75,-62,-61,]),'SWITCH':([0,127,134,268,271,272,281,],[76,76,76,76,76,76,76,]),'CASE':([0,127,134,268,271,272,281,],[77,77,77,77,77,77,77,]),'GOTO':([0,127,134,268,271,272,281,],[78,78,78,78,78,78,78,]),'MINUS_EQUAL':([0,127,134,268,271,272,281,],[79,79,79,79,79,79,79,]),'MOD_EQUAL':([0,127,134,268,271,272,281,],[80,80,80,80,80,80,80,]),'MUL_EQUAL':([0,127,134,268,271,272,281,],[81,81,81,81,81,81,81,]),'PLUS_EQUAL':([0,127,134,268,271,272,281,],[82,82,82,82,82,82,82,]),'EXIT':([0,127,134,268,271,272,281,],[83,83,83,83,83,83,83,]),'BREAK':([0,127,134,268,271,272,281,],[84,84,84,84,84,84,84,]),'DEFAULT':([0,127,134,268,271,272,281,],[85,85,85,85,85,85,85,]),'CONTINUE':([0,127,134,268,271,272,281,],[86,86,86,86,86,86,86,]),'RAND':([0,114,127,134,172,268,271,272,281,],[87,87,87,87,87,87,87,87,87,]),'STRING':([0,35,37,38,50,51,52,53,54,56,57,58,108,110,114,115,118,122,123,124,126,127,133,134,152,161,164,165,166,167,172,184,209,213,214,216,222,223,224,235,245,268,271,272,281,290,314,328,329,343,],[48,106,112,112,-46,-47,-48,-49,-50,-52,-53,-54,112,112,112,-84,-85,174,176,177,112,48,112,48,112,112,-86,-87,-88,-89,112,112,-83,251,112,112,112,-51,112,274,112,48,48,48,48,112,-157,-95,-155,-156,]),'FWRITE':([0,114,127,134,172,268,271,272,281,],[88,88,88,88,88,88,88,88,88,]),'TRIM':([0,114,127,134,172,268,271,272,281,],[89,89,89,89,89,89,89,89,89,]),'TRUE':([0,35,37,38,50,51,52,53,54,56,57,58,93,108,110,114,115,118,126,127,133,134,152,161,164,165,166,167,172,184,209,214,216,222,223,224,245,268,271,272,281,290,314,328,329,343,],[90,90,90,90,-46,-47,-48,-49,-50,-52,-53,-54,90,90,90,90,-84,-85,90,90,90,90,90,90,-86,-87,-88,-89,90,90,-83,90,90,90,-51,90,90,90,90,90,90,90,-157,-95,-155,-156,]),'FALSE':([0,35,37,38,50,51,52,53,54,56,57,58,93,108,110,114,115,118,126,127,133,134,152,161,164,165,166,167,172,184,209,214,216,222,223,224,245,268,271,272,281,290,314,328,329,343,],[91,91,91,91,-46,-47,-48,-49,-50,-52,-53,-54,91,91,91,91,-84,-85,91,91,91,91,91,91,-86,-87,-88,-89,91,91,-83,91,91,91,-51,91,91,91,91,91,91,91,-157,-95,-155,-156,]),'RETURN':([0,75,127,134,186,259,260,268,271,272,279,281,],[93,93,93,93,93,93,93,93,93,93,93,93,]),'PUBLIC':([0,42,43,94,95,96,97,117,127,128,134,201,215,268,271,272,277,281,],[94,94,94,-96,-97,-98,-99,94,94,94,94,94,94,94,94,94,94,94,]),'PRIVATE':([0,42,43,94,95,96,97,117,127,128,134,201,215,268,271,272,277,281,],[95,95,95,-96,-97,-98,-99,95,95,95,95,95,95,95,95,95,95,95,]),'PROTECTED':([0,42,43,94,95,96,97,117,127,128,134,201,215,268,271,272,277,281,],[96,96,96,-96,-97,-98,-99,96,96,96,96,96,96,96,96,96,96,96,]),'STATIC':([0,42,43,94,95,96,97,117,127,128,134,201,215,268,271,272,277,281,],[97,97,97,-96,-97,-98,-99,97,97,97,97,97,97,97,97,97,97,97,]),'FUNCTION':([0,43,94,95,96,97,127,134,268,271,272,281,],[98,121,-96,-97,-98,-99,98,98,98,98,98,98,]),'NOMBRE':([0,35,37,38,50,51,52,53,54,55,56,57,58,78,93,98,108,110,114,115,118,121,122,126,127,133,134,144,145,152,161,164,165,166,167,172,184,209,214,216,222,223,224,236,245,268,271,272,281,290,314,325,328,329,343,],[39,103,39,39,-46,-47,-48,-49,-50,125,-52,-53,-54,138,149,151,39,39,39,-84,-85,173,175,39,39,39,39,195,196,39,39,-86,-87,-88,-89,39,39,-83,39,39,39,-51,39,275,39,39,39,39,39,39,-157,341,-95,-155,-156,]),'LPAREN':([0,37,47,49,50,51,52,53,54,67,69,70,74,76,87,88,89,100,108,127,134,151,161,170,171,173,196,211,212,245,268,271,272,281,301,],[38,110,122,124,-46,-47,-48,-49,-50,126,128,129,133,136,143,144,145,152,38,38,38,201,38,213,214,215,236,249,250,38,38,38,38,38,325,]),'IF':([0,127,134,268,271,272,281,],[100,100,100,100,100,100,100,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,39,40,44,45,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,73,75,79,80,81,82,90,91,92,99,101,104,107,111,112,115,118,119,120,131,132,135,139,140,141,142,146,153,156,157,158,159,164,165,166,167,179,188,192,193,197,198,199,200,209,210,218,220,229,230,232,244,246,247,258,260,264,267,268,269,270,278,282,285,294,300,307,312,313,314,316,317,318,324,326,328,329,331,333,334,342,343,348,350,],[-146,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-42,-44,-100,-102,-104,-46,-47,-48,-49,-50,-51,-52,-53,-54,-69,-70,-71,-72,-73,-74,-75,-76,-79,-65,-146,-55,-56,-57,-58,-59,-60,-125,-39,-45,-38,-43,-40,-41,-84,-85,-101,-103,-66,-67,-64,-149,-150,-151,-152,-126,-34,-77,-78,-79,-35,-86,-87,-88,-89,-158,-68,-120,-147,-127,-128,-129,-130,-83,-90,-153,-94,-124,-146,-63,-36,-80,-81,-93,-146,-118,-131,-146,-143,-145,-111,-37,-154,-117,-123,-107,-121,-148,-157,-91,-92,-116,-138,-62,-95,-155,-112,-61,-122,-119,-156,-110,-144,]),'ENTERO':([0,35,37,38,50,51,52,53,54,56,57,58,77,108,110,114,115,118,126,127,133,134,143,152,154,161,164,165,166,167,172,184,209,214,216,222,223,224,234,245,268,271,272,281,290,314,328,329,336,338,343,],[40,40,40,40,-46,-47,-48,-49,-50,-52,-53,-54,137,40,40,40,-84,-85,40,40,40,40,194,40,203,40,-86,-87,-88,-89,40,40,-83,40,40,40,-51,40,273,40,40,40,40,40,40,-157,-95,-155,40,40,-156,]),'DECIMAL':([0,35,37,38,50,51,52,53,54,56,57,58,108,110,114,115,118,126,127,133,134,152,161,164,165,166,167,172,184,209,214,216,222,223,224,245,268,271,272,281,290,314,328,329,336,338,343,],[101,101,101,101,-46,-47,-48,-49,-50,-52,-53,-54,101,101,101,-84,-85,101,101,101,101,101,101,-86,-87,-88,-89,101,101,-83,101,101,101,-51,101,101,101,101,101,101,101,-157,-95,-155,101,101,-156,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,39,40,44,45,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,73,75,79,80,81,82,90,91,92,99,101,104,107,111,112,115,118,119,120,127,131,132,134,135,139,140,141,142,146,153,156,157,158,159,164,165,166,167,179,183,186,187,188,190,192,193,197,198,199,200,209,210,218,220,228,229,230,232,244,246,247,258,259,260,264,267,268,269,270,271,278,279,281,282,285,293,294,300,302,307,309,311,312,313,314,316,317,318,324,326,327,328,329,331,332,333,334,342,343,344,348,350,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-42,-44,-100,-102,-104,-46,-47,-48,-49,-50,-51,-52,-53,-54,-69,-70,-71,-72,-73,-74,-75,-76,-79,-65,-146,-55,-56,-57,-58,-59,-60,-125,-39,-45,-38,-43,-40,-41,-84,-85,-101,-103,-146,-66,-67,-146,-64,-149,-150,-151,-152,-126,-34,-77,-78,-79,-35,-86,-87,-88,-89,-158,225,-146,230,-68,232,-120,-147,-127,-128,-129,-130,-83,-90,-153,-94,267,-124,-146,-63,-36,-80,-81,-93,-146,-146,-118,-131,-146,-143,-145,-146,-111,-146,-146,-37,-154,318,-117,-123,326,-107,331,333,-121,-148,-157,-91,-92,-116,-138,-62,342,-95,-155,-112,-146,-61,-122,-119,-156,348,-110,-144,]),'SEMI':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,39,40,44,45,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,73,75,79,80,81,82,83,84,85,86,90,91,92,93,99,101,102,103,104,105,106,107,109,111,112,115,118,119,120,131,132,135,138,139,140,141,142,146,147,148,149,150,153,156,157,158,159,162,163,164,165,166,167,168,176,178,179,186,188,192,193,197,198,199,200,205,209,210,218,219,220,226,228,229,230,232,243,244,246,247,248,252,258,259,260,261,262,263,264,267,268,269,270,272,278,279,282,285,286,287,288,289,291,292,293,294,300,303,304,305,307,309,312,313,314,316,317,318,324,326,328,329,330,331,333,334,342,343,348,350,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-42,-44,-100,-102,-104,-46,-47,-48,-49,-50,-51,-52,-53,-54,-69,-70,-71,-72,-73,-74,-75,-76,-79,-65,-146,-55,-56,-57,-58,139,140,141,142,-59,-60,-125,146,-39,-45,153,-42,-38,-40,-41,-43,159,-40,-41,-84,-85,-101,-103,-66,-67,-64,193,-149,-150,-151,-152,-126,197,198,199,200,-34,-77,-78,-79,-35,-40,209,-86,-87,-88,-89,210,218,220,-158,-146,-68,-120,-147,-127,-128,-129,-130,244,-83,-90,-153,258,-94,265,268,-124,-146,-63,282,-36,-80,-81,285,-139,-93,-146,-146,-40,-115,-114,-118,-131,-146,-143,-145,-146,-111,-146,-37,-154,312,313,314,-140,316,317,268,268,-123,327,328,329,-107,-125,-121,-148,-157,-91,-92,-116,-138,-62,-95,-155,343,-112,-61,-122,-119,-156,-110,-144,]),'RPAREN':([39,40,90,91,99,101,107,111,112,115,118,124,160,164,165,166,167,177,180,189,191,201,202,206,207,209,214,215,237,239,240,241,246,247,249,250,251,253,254,256,257,261,262,263,266,273,274,275,284,295,306,308,314,315,328,329,335,337,339,340,343,345,346,347,],[-42,-44,-59,-60,-39,-45,-43,-40,-41,-84,-85,178,205,-86,-87,-88,-89,219,221,231,233,238,242,246,247,-83,252,255,276,-109,-105,-106,-80,-81,286,287,288,289,-142,291,292,-40,-115,-114,299,304,305,306,-82,319,330,-108,-157,-141,-95,-155,-132,-134,-133,-135,-156,-136,-137,349,]),'COMMA':([39,40,90,91,99,101,107,111,112,115,118,164,165,166,167,174,175,194,195,209,237,239,240,241,253,254,308,314,315,328,329,343,],[-42,-44,-59,-60,-39,-45,-43,-40,-41,-84,-85,-86,-87,-88,-89,216,217,234,235,-83,277,-109,-105,-106,290,-142,-108,-157,-141,-95,-155,-156,]),'EQUALS':([41,105,116,240,320,321,],[114,155,172,172,336,338,]),'CONCAT':([48,106,162,204,],[123,123,208,208,]),'LBRACE':([68,71,75,130,221,231,233,238,242,255,276,299,310,319,349,],[127,130,134,186,259,271,272,279,281,279,186,186,332,186,186,]),'NULL':([93,],[147,]),'LBRACKET':([103,],[154,]),'NEW':([114,],[169,]),'ARRAY':([114,217,],[171,257,]),'COLON':([137,221,238,],[192,260,280,]),'SPLQUEUE':([169,],[211,]),'SPLSTACK':([169,],[212,]),'AS':([185,],[227,]),'RBRACKET':([203,],[243,]),'CATCH':([230,267,269,270,350,],[-146,-131,301,-145,-144,]),'VOID':([280,],[310,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,127,134,268,271,272,281,],[1,183,190,300,302,303,311,]),'imprimir':([0,127,134,268,271,272,281,],[2,2,2,2,2,2,2,]),'asignacion':([0,42,43,117,127,128,134,201,215,268,271,272,277,281,],[3,115,118,118,3,184,3,241,241,3,3,3,241,3,]),'asignacion_array':([0,127,134,268,271,272,281,],[4,4,4,4,4,4,4,]),'funciones':([0,127,134,268,271,272,281,],[5,5,5,5,5,5,5,]),'constante':([0,127,134,268,271,272,281,],[6,6,6,6,6,6,6,]),'lectura':([0,127,134,268,271,272,281,],[7,7,7,7,7,7,7,]),'operadores':([0,36,113,127,134,156,206,268,271,272,281,283,],[8,108,161,8,8,108,245,8,8,8,8,245,]),'operador_logico':([0,127,134,181,182,268,271,272,281,],[9,9,9,222,224,9,9,9,9,]),'condicion_booleana':([0,127,134,268,271,272,281,],[10,10,10,10,10,10,10,]),'bwhile':([0,127,134,225,268,271,272,281,],[11,11,11,264,11,11,11,11,]),'bdo':([0,127,134,268,271,272,281,],[12,12,12,12,12,12,12,]),'bfor':([0,127,134,268,271,272,281,],[13,13,13,13,13,13,13,]),'bforeach':([0,127,134,268,271,272,281,],[14,14,14,14,14,14,14,]),'btry':([0,127,134,268,271,272,281,],[15,15,15,15,15,15,15,]),'operaciones_mat':([0,108,127,134,268,271,272,281,],[16,157,16,16,16,16,16,16,]),'condicion_ifelse':([0,127,134,268,271,272,281,],[17,17,17,17,17,17,17,]),'condicion_elseif':([0,73,127,134,268,271,272,281,],[18,132,18,18,18,18,18,18,]),'condicion_else':([0,73,127,132,134,268,271,272,281,],[19,131,19,188,19,19,19,19,19,]),'bswitch':([0,127,134,268,271,272,281,],[20,20,20,20,20,20,20,]),'bcase':([0,127,134,268,271,272,281,],[21,21,21,21,21,21,21,]),'bgoto':([0,127,134,268,271,272,281,],[22,22,22,22,22,22,22,]),'bcolas':([0,127,134,268,271,272,281,],[23,23,23,23,23,23,23,]),'bpila':([0,127,134,268,271,272,281,],[24,24,24,24,24,24,24,]),'incrementos_mat':([0,127,134,268,271,272,281,],[25,25,25,25,25,25,25,]),'bcortes':([0,127,134,268,271,272,281,],[26,26,26,26,26,26,26,]),'brand':([0,114,127,134,172,268,271,272,281,],[27,164,27,27,164,27,27,27,27,]),'bconcat':([0,35,127,134,268,271,272,281,],[28,104,28,28,28,28,28,28,]),'escribir':([0,114,127,134,172,268,271,272,281,],[29,165,29,29,165,29,29,29,29,]),'btrim':([0,114,127,134,172,268,271,272,281,],[30,166,30,30,166,30,30,30,30,]),'leer':([0,114,127,134,172,268,271,272,281,],[31,167,31,31,167,31,31,31,31,]),'boolean_answer':([0,35,37,38,93,108,110,114,126,127,133,134,152,161,172,184,214,216,222,224,245,268,271,272,281,290,],[32,107,107,107,150,107,107,107,107,32,107,32,107,107,107,107,107,107,107,107,107,32,32,32,32,107,]),'otros':([0,127,134,268,271,272,281,],[33,33,33,33,33,33,33,]),'breturn':([0,75,127,134,186,259,260,268,271,272,279,281,],[34,135,34,34,229,229,229,34,34,34,229,34,]),'valor':([0,35,37,38,108,110,114,126,127,133,134,152,161,172,184,214,216,222,224,245,268,271,272,281,290,],[36,102,109,113,156,160,163,182,36,182,36,182,206,163,182,254,256,262,263,283,36,36,36,36,315,]),'proteccion':([0,42,43,117,127,128,134,201,215,268,271,272,277,281,],[43,117,117,117,43,117,43,117,117,43,43,43,117,43,]),'funcion_nparams':([0,43,127,134,268,271,272,281,],[44,119,44,44,44,44,44,44,]),'funcion_blank':([0,43,127,134,268,271,272,281,],[45,120,45,45,45,45,45,45,]),'funcion_void':([0,127,134,268,271,272,281,],[46,46,46,46,46,46,46,]),'operaciones_mat_par':([0,108,127,134,161,245,268,271,272,281,],[72,158,72,72,207,284,72,72,72,72,]),'condicion_if':([0,127,134,268,271,272,281,],[73,73,73,73,73,73,73,]),'empty':([0,75,127,134,186,230,259,260,268,271,272,279,281,332,],[92,92,92,92,92,270,92,92,92,92,92,309,92,344,]),'numero':([0,35,37,38,108,110,114,126,127,133,134,152,161,172,184,214,216,222,224,245,268,271,272,281,290,336,338,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,345,346,]),'array_def':([114,],[168,]),'condicion':([126,133,152,184,],[180,189,202,226,]),'stc_bloque_def':([130,238,255,276,299,319,349,],[187,278,278,307,324,334,350,]),'stc_bloque':([186,259,260,279,],[228,293,294,228,]),'params_list':([201,215,],[237,237,]),'param':([201,215,277,],[239,239,308,]),'array_elmnt':([214,],[253,]),'catches':([230,],[269,]),'for_incr':([265,],[295,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> imprimir','cuerpo',1,'p_cuerpo','sintactico.py',7),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','sintactico.py',8),
  ('cuerpo -> asignacion_array','cuerpo',1,'p_cuerpo','sintactico.py',9),
  ('cuerpo -> funciones','cuerpo',1,'p_cuerpo','sintactico.py',10),
  ('cuerpo -> constante','cuerpo',1,'p_cuerpo','sintactico.py',11),
  ('cuerpo -> lectura','cuerpo',1,'p_cuerpo','sintactico.py',12),
  ('cuerpo -> operadores','cuerpo',1,'p_cuerpo','sintactico.py',13),
  ('cuerpo -> operador_logico','cuerpo',1,'p_cuerpo','sintactico.py',14),
  ('cuerpo -> condicion_booleana','cuerpo',1,'p_cuerpo','sintactico.py',15),
  ('cuerpo -> bwhile','cuerpo',1,'p_cuerpo','sintactico.py',16),
  ('cuerpo -> bdo','cuerpo',1,'p_cuerpo','sintactico.py',17),
  ('cuerpo -> bfor','cuerpo',1,'p_cuerpo','sintactico.py',18),
  ('cuerpo -> bforeach','cuerpo',1,'p_cuerpo','sintactico.py',19),
  ('cuerpo -> btry','cuerpo',1,'p_cuerpo','sintactico.py',20),
  ('cuerpo -> operaciones_mat','cuerpo',1,'p_cuerpo','sintactico.py',21),
  ('cuerpo -> condicion_ifelse','cuerpo',1,'p_cuerpo','sintactico.py',22),
  ('cuerpo -> condicion_elseif','cuerpo',1,'p_cuerpo','sintactico.py',23),
  ('cuerpo -> condicion_else','cuerpo',1,'p_cuerpo','sintactico.py',24),
  ('cuerpo -> bswitch','cuerpo',1,'p_cuerpo','sintactico.py',25),
  ('cuerpo -> bcase','cuerpo',1,'p_cuerpo','sintactico.py',26),
  ('cuerpo -> bgoto','cuerpo',1,'p_cuerpo','sintactico.py',27),
  ('cuerpo -> bcolas','cuerpo',1,'p_cuerpo','sintactico.py',28),
  ('cuerpo -> bpila','cuerpo',1,'p_cuerpo','sintactico.py',29),
  ('cuerpo -> incrementos_mat','cuerpo',1,'p_cuerpo','sintactico.py',30),
  ('cuerpo -> bcortes','cuerpo',1,'p_cuerpo','sintactico.py',31),
  ('cuerpo -> brand','cuerpo',1,'p_cuerpo','sintactico.py',32),
  ('cuerpo -> bconcat','cuerpo',1,'p_cuerpo','sintactico.py',33),
  ('cuerpo -> escribir','cuerpo',1,'p_cuerpo','sintactico.py',34),
  ('cuerpo -> btrim','cuerpo',1,'p_cuerpo','sintactico.py',35),
  ('cuerpo -> leer','cuerpo',1,'p_cuerpo','sintactico.py',36),
  ('cuerpo -> boolean_answer','cuerpo',1,'p_cuerpo','sintactico.py',37),
  ('cuerpo -> otros','cuerpo',1,'p_cuerpo','sintactico.py',38),
  ('cuerpo -> breturn','cuerpo',1,'p_cuerpo','sintactico.py',39),
  ('imprimir -> ECHO valor SEMI','imprimir',3,'p_imprimir','sintactico.py',44),
  ('imprimir -> PRINT valor SEMI','imprimir',3,'p_imprimir','sintactico.py',45),
  ('imprimir -> PRINT LPAREN valor RPAREN SEMI','imprimir',5,'p_imprimir','sintactico.py',46),
  ('imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI','imprimir',6,'p_imprimir','sintactico.py',47),
  ('imprimir -> ECHO bconcat','imprimir',2,'p_imprimir','sintactico.py',48),
  ('valor -> numero','valor',1,'p_valor','sintactico.py',53),
  ('valor -> VARIABLE','valor',1,'p_valor','sintactico.py',54),
  ('valor -> STRING','valor',1,'p_valor','sintactico.py',55),
  ('valor -> NOMBRE','valor',1,'p_valor','sintactico.py',56),
  ('valor -> boolean_answer','valor',1,'p_valor','sintactico.py',57),
  ('numero -> ENTERO','numero',1,'p_numero','sintactico.py',62),
  ('numero -> DECIMAL','numero',1,'p_numero','sintactico.py',63),
  ('operadores -> SUMA','operadores',1,'p_operadores','sintactico.py',68),
  ('operadores -> RESTA','operadores',1,'p_operadores','sintactico.py',69),
  ('operadores -> MULTIPLICACION','operadores',1,'p_operadores','sintactico.py',70),
  ('operadores -> DIVISION','operadores',1,'p_operadores','sintactico.py',71),
  ('operadores -> MODULO','operadores',1,'p_operadores','sintactico.py',72),
  ('operador_logico -> SMALLER','operador_logico',1,'p_operador_logico','sintactico.py',77),
  ('operador_logico -> GREATER','operador_logico',1,'p_operador_logico','sintactico.py',78),
  ('operador_logico -> IS_SMALLER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico.py',79),
  ('operador_logico -> IS_GREATER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico.py',80),
  ('incrementos_mat -> MINUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',86),
  ('incrementos_mat -> MOD_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',87),
  ('incrementos_mat -> MUL_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',88),
  ('incrementos_mat -> PLUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico.py',89),
  ('boolean_answer -> TRUE','boolean_answer',1,'p_boolean_answer','sintactico.py',93),
  ('boolean_answer -> FALSE','boolean_answer',1,'p_boolean_answer','sintactico.py',94),
  ('condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_if',7,'p_condicion_if','sintactico.py',97),
  ('condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_elseif',7,'p_condicion_elseif','sintactico.py',101),
  ('condicion_else -> ELSE LBRACE cuerpo RBRACE','condicion_else',4,'p_condicion_else','sintactico.py',106),
  ('condicion_else -> ELSE breturn','condicion_else',2,'p_condicion_else','sintactico.py',107),
  ('condicion_ifelse -> condicion_if','condicion_ifelse',1,'p_condicion_ifelse','sintactico.py',112),
  ('condicion_ifelse -> condicion_if condicion_else','condicion_ifelse',2,'p_condicion_ifelse','sintactico.py',113),
  ('condicion_ifelse -> condicion_if condicion_elseif','condicion_ifelse',2,'p_condicion_ifelse','sintactico.py',114),
  ('condicion_ifelse -> condicion_if condicion_elseif condicion_else','condicion_ifelse',3,'p_condicion_ifelse','sintactico.py',115),
  ('condicion_booleana -> AND','condicion_booleana',1,'p_condicion_boolena','sintactico.py',120),
  ('condicion_booleana -> OR','condicion_booleana',1,'p_condicion_boolena','sintactico.py',121),
  ('condicion_booleana -> XOR','condicion_booleana',1,'p_condicion_boolena','sintactico.py',122),
  ('condicion_booleana -> IS_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',123),
  ('condicion_booleana -> IS_NOT_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',124),
  ('condicion_booleana -> IS_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',125),
  ('condicion_booleana -> IS_NOT_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico.py',126),
  ('condicion_booleana -> BOOLEAN_NOT','condicion_booleana',1,'p_condicion_boolena','sintactico.py',127),
  ('operaciones_mat -> valor operadores valor','operaciones_mat',3,'p_operaciones_mat','sintactico.py',132),
  ('operaciones_mat -> valor operadores operaciones_mat','operaciones_mat',3,'p_operaciones_mat','sintactico.py',133),
  ('operaciones_mat -> operaciones_mat_par','operaciones_mat',1,'p_operaciones_mat','sintactico.py',134),
  ('operaciones_mat_par -> LPAREN valor operadores valor RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico.py',140),
  ('operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico.py',141),
  ('operaciones_mat_par -> valor operadores operaciones_mat_par','operaciones_mat_par',3,'p_operaciones_mat_par','sintactico.py',142),
  ('asignacion -> VARIABLE EQUALS valor SEMI','asignacion',4,'p_asignacion','sintactico.py',147),
  ('asignacion -> VAR asignacion','asignacion',2,'p_asignacion','sintactico.py',148),
  ('asignacion -> proteccion asignacion','asignacion',2,'p_asignacion','sintactico.py',149),
  ('asignacion -> VARIABLE EQUALS brand','asignacion',3,'p_asignacion','sintactico.py',150),
  ('asignacion -> VARIABLE EQUALS escribir','asignacion',3,'p_asignacion','sintactico.py',151),
  ('asignacion -> VARIABLE EQUALS btrim','asignacion',3,'p_asignacion','sintactico.py',152),
  ('asignacion -> VARIABLE EQUALS leer','asignacion',3,'p_asignacion','sintactico.py',153),
  ('asignacion_array -> VARIABLE EQUALS array_def SEMI','asignacion_array',4,'p_asignacion_array','sintactico.py',158),
  ('constante -> DEFINE LPAREN STRING COMMA valor RPAREN SEMI','constante',7,'p_constante','sintactico.py',162),
  ('constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI','constante',7,'p_constante','sintactico.py',163),
  ('lectura -> READLINE LPAREN STRING RPAREN SEMI','lectura',5,'p_lectura','sintactico.py',167),
  ('lectura -> READLINE LPAREN RPAREN SEMI','lectura',4,'p_lectura','sintactico.py',168),
  ('brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI','brand',7,'p_brand','sintactico.py',172),
  ('proteccion -> PUBLIC','proteccion',1,'p_proteccion','sintactico.py',176),
  ('proteccion -> PRIVATE','proteccion',1,'p_proteccion','sintactico.py',177),
  ('proteccion -> PROTECTED','proteccion',1,'p_proteccion','sintactico.py',178),
  ('proteccion -> STATIC','proteccion',1,'p_proteccion','sintactico.py',179),
  ('funciones -> funcion_nparams','funciones',1,'p_funciones','sintactico.py',184),
  ('funciones -> proteccion funcion_nparams','funciones',2,'p_funciones','sintactico.py',185),
  ('funciones -> funcion_blank','funciones',1,'p_funciones','sintactico.py',186),
  ('funciones -> proteccion funcion_blank','funciones',2,'p_funciones','sintactico.py',187),
  ('funciones -> funcion_void','funciones',1,'p_funciones','sintactico.py',188),
  ('param -> VARIABLE','param',1,'p_param','sintactico.py',193),
  ('param -> asignacion','param',1,'p_param','sintactico.py',194),
  ('funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def','funcion_nparams',6,'p_funcion_nparams','sintactico.py',199),
  ('params_list -> params_list COMMA param','params_list',3,'p_params_list','sintactico.py',203),
  ('params_list -> param','params_list',1,'p_params_list','sintactico.py',204),
  ('funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE','funcion_void',9,'p_funcion_void','sintactico.py',208),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def','funcion_blank',5,'p_funcion_blank','sintactico.py',212),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE','funcion_blank',7,'p_funcion_blank','sintactico.py',213),
  ('condicion -> VARIABLE operador_logico VARIABLE','condicion',3,'p_condicion','sintactico.py',218),
  ('condicion -> valor operador_logico valor','condicion',3,'p_condicion','sintactico.py',219),
  ('condicion -> VARIABLE operador_logico valor','condicion',3,'p_condicion','sintactico.py',220),
  ('bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE','bwhile',7,'p_bwhile','sintactico.py',225),
  ('bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque','bwhile',6,'p_bwhile','sintactico.py',226),
  ('bdo -> DO LBRACE cuerpo RBRACE bwhile','bdo',5,'p_bdo','sintactico.py',231),
  ('bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE','bswitch',8,'p_bswitch','sintactico.py',236),
  ('bcase -> CASE ENTERO COLON','bcase',3,'p_bcase','sintactico.py',239),
  ('bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI','bcolas',7,'p_bcolas','sintactico.py',248),
  ('bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def','bfor',8,'p_bfor','sintactico.py',253),
  ('stc_bloque -> stc_bloque SEMI cuerpo','stc_bloque',3,'p_stc_bloque','sintactico.py',257),
  ('stc_bloque -> breturn','stc_bloque',1,'p_stc_bloque','sintactico.py',258),
  ('breturn -> empty','breturn',1,'p_breturn','sintactico.py',261),
  ('breturn -> RETURN SEMI','breturn',2,'p_breturn','sintactico.py',262),
  ('breturn -> RETURN NULL SEMI','breturn',3,'p_breturn','sintactico.py',263),
  ('breturn -> RETURN VARIABLE SEMI','breturn',3,'p_breturn','sintactico.py',264),
  ('breturn -> RETURN NOMBRE SEMI','breturn',3,'p_breturn','sintactico.py',265),
  ('breturn -> RETURN boolean_answer SEMI','breturn',3,'p_breturn','sintactico.py',266),
  ('stc_bloque_def -> LBRACE stc_bloque RBRACE','stc_bloque_def',3,'p_stc_bloque_def','sintactico.py',270),
  ('for_incr -> VARIABLE SUMA SUMA','for_incr',3,'p_for_incr','sintactico.py',274),
  ('for_incr -> SUMA SUMA VARIABLE','for_incr',3,'p_for_incr','sintactico.py',275),
  ('for_incr -> VARIABLE RESTA RESTA','for_incr',3,'p_for_incr','sintactico.py',276),
  ('for_incr -> RESTA RESTA VARIABLE','for_incr',3,'p_for_incr','sintactico.py',277),
  ('for_incr -> VARIABLE SUMA EQUALS numero','for_incr',4,'p_for_incr','sintactico.py',278),
  ('for_incr -> VARIABLE RESTA EQUALS numero','for_incr',4,'p_for_incr','sintactico.py',279),
  ('bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def','bforeach',7,'p_bforeach','sintactico.py',283),
  ('array_def -> ARRAY LPAREN RPAREN','array_def',3,'p_array_def','sintactico.py',287),
  ('array_def -> ARRAY LPAREN array_elmnt RPAREN','array_def',4,'p_array_def','sintactico.py',288),
  ('array_elmnt -> array_elmnt COMMA valor','array_elmnt',3,'p_array_elmnt','sintactico.py',292),
  ('array_elmnt -> valor','array_elmnt',1,'p_array_elmnt','sintactico.py',293),
  ('btry -> TRY LBRACE stc_bloque_def RBRACE catches','btry',5,'p_btry','sintactico.py',297),
  ('catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def','catches',7,'p_catches','sintactico.py',301),
  ('catches -> empty','catches',1,'p_catches','sintactico.py',302),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',306),
  ('bgoto -> GOTO NOMBRE SEMI','bgoto',3,'p_bgoto','sintactico.py',310),
  ('bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI','bpila',7,'p_bpila','sintactico.py',314),
  ('bcortes -> EXIT SEMI','bcortes',2,'p_bcortes','sintactico.py',318),
  ('bcortes -> BREAK SEMI','bcortes',2,'p_bcortes','sintactico.py',319),
  ('bcortes -> DEFAULT SEMI','bcortes',2,'p_bcortes','sintactico.py',320),
  ('bcortes -> CONTINUE SEMI','bcortes',2,'p_bcortes','sintactico.py',321),
  ('bconcat -> STRING CONCAT STRING SEMI','bconcat',4,'p_bconcat','sintactico.py',325),
  ('bconcat -> VARIABLE EQUALS VARIABLE CONCAT VARIABLE SEMI','bconcat',6,'p_bconcat','sintactico.py',326),
  ('escribir -> FWRITE LPAREN NOMBRE COMMA STRING RPAREN SEMI','escribir',7,'p_escribir','sintactico.py',330),
  ('btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI','btrim',8,'p_btrim','sintactico.py',334),
  ('leer -> READLINE LPAREN STRING RPAREN SEMI','leer',5,'p_leer','sintactico.py',338),
  ('otros -> SMALLER NOMBRE GREATER','otros',3,'p_otros','sintactico.py',341),
]
