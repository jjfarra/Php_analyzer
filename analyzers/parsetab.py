
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY AS BOOL BOOLEAN BOOLEANO BREAK CADENA CASE CATCH CLOSE_TAG COLON COMENTARIOS COMMA CONCAT CONCAT_EQUAL CONTINUE DECIMAL DEFAULT DEFINE DIVISION DIV_EQUAL DO DOC_COMENTARIOS DOUBLE ECHO ELSE ELSEIF ENTERO EQUALS EXIT FLOAT FOR FOREACH FUNCTION FWRITE GOTO GREATER IF INT INTEGER IS_EQUAL IS_GREATER_OR_EQUAL IS_IDENTICAL IS_NOT_EQUAL IS_NOT_IDENTICAL IS_SMALLER_OR_EQUAL LBRACE LBRACKET LPAREN MINUS_EQUAL MODULO MOD_EQUAL MULTIPLICACION MUL_EQUAL NEW NOMBRE NULL OBJECT OPEN_TAG OR PLUS_EQUAL PRINT PRIVATE PROTECTED PUBLIC RAND RBRACE RBRACKET READLINE RESTA RETURN RPAREN SEMI SMALLER SPLQUEUE SPLSTACK STATIC STRING SUMA SWITCH TRIM TRY VAR VARIABLE VOID WHILE XORcuerpo : imprimir\n            | asignacion\n            | funciones\n            | llamada_funcion\n            | constante\n            | lectura\n            | bwhile\n            | bdo\n            | bfor\n            | bforeach\n            | btry\n            | condicion_ifelse\n            | condicion_else\n            | condicion_elseif\n            | bswitch\n            | bcase\n            | bgoto\n            | bcolas\n            | bpila\n            | bcortes\n            | brand\n            | escribir\n            | btrim\n            | otros\n            | breturn\n            | comment\n            | casting\n            | bconcat\n            | simbolos\n  asignacion : VARIABLE EQUALS valor SEMI\n                | VAR asignacion\n                | proteccion asignacion\n                | VARIABLE EQUALS brand\n                | VARIABLE EQUALS escribir\n                | VARIABLE EQUALS btrim\n                | VARIABLE EQUALS lectura\n                | VARIABLE EQUALS bconcat\n                | asignacion_array\n                | VARIABLE EQUALS operaciones_mat SEMI\n                | aumentoCasting\n  asignacion_array : VARIABLE EQUALS array_def SEMIconstante : DEFINE LPAREN CADENA COMMA valor RPAREN SEMI\n          | DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMIvalor : tipoDato\n            | bcolas\n            | bpila\n  tipoDato : numero\n            | CADENA\n            | BOOLEANO\n  numero : ENTERO\n          | DECIMAL\n  imprimir : ECHO valor SEMI\n            | PRINT valor SEMI\n            | PRINT LPAREN valor RPAREN SEMI\n            | PRINT bconcat\n            | ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI\n            | ECHO bconcat\n            | ECHO operaciones_mat SEMI\n            | PRINT operaciones_mat SEMI\n  condicion_if :  IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_elseif :  ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_else :  ELSE LBRACE cuerpo RBRACE\n  condicion_ifelse : condicion_if\n                      | condicion_if condicion_else\n                      | condicion_if condicion_elseif\n                      | condicion_if condicion_elseif condicion_else\n   condicion : VARIABLE operador_logico VARIABLE\n            | valor operador_logico valor \n            | VARIABLE operador_logico valor\n            | VARIABLE condicion_booleana VARIABLE\n            | valor condicion_booleana valor\n            | VARIABLE condicion_booleana valor\n            | LPAREN VARIABLE operadores valor RPAREN operador_logico valor\n            | LPAREN VARIABLE operadores valor RPAREN condicion_booleana valor\n            | condicion condicion_booleana condicion\n            | condicion condicion_booleana comprobacion\n            \n  bfor : FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_defstc_bloque : stc_bloque SEMI cuerpo\n        | breturn\n        stc_bloque_def : LBRACE stc_bloque RBRACEfor_incr : VARIABLE SUMA SUMA\n          | SUMA SUMA VARIABLE\n          | VARIABLE RESTA RESTA\n          | RESTA RESTA VARIABLE\n          | VARIABLE SUMA EQUALS numero\n          | VARIABLE RESTA EQUALS numerobforeach :  FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def bwhile : WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE \n  | WHILE LPAREN condicion RPAREN COLON stc_bloque  \n   bdo : DO LBRACE cuerpo RBRACE bwhile \n   bswitch : SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACEbcase : CASE ENTERO COLON innerSwitch : bcase cuerpo BREAK SEMI\n                 | CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch \n  btry : TRY LBRACE stc_bloque_def RBRACE catchescatches : catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def\n          | emptyoperadores : SUMA \n                  | RESTA\n                  | MULTIPLICACION\n                  | DIVISION\n                  | MODULO\n  operador_logico :  SMALLER\n                        | GREATER\n                        | IS_SMALLER_OR_EQUAL\n                        | IS_GREATER_OR_EQUAL\n  incrementos_mat :  MINUS_EQUAL\n                        | MOD_EQUAL\n                        | MUL_EQUAL\n                        | PLUS_EQUAL\n                        | DIV_EQUAL\n  condicion_booleana :  AND\n                        | OR\n                        | XOR\n                        | IS_EQUAL\n                        | IS_NOT_EQUAL\n                        | IS_IDENTICAL\n                        | IS_NOT_IDENTICAL\n  operaciones_mat :  valor operadores valor\n                        | valor operadores operaciones_mat\n                        | VARIABLE operadores VARIABLE\n                        | operaciones_mat_par\n                       \n  operaciones_mat_par :  LPAREN valor operadores valor RPAREN\n                          |  LPAREN valor operadores operaciones_mat_par RPAREN\n                          | LPAREN VARIABLE operadores VARIABLE RPAREN\n                          | LPAREN VARIABLE operadores valor RPAREN operadores valor\n  funciones : funcion_nparams\n              | proteccion funcion_nparams\n              | funcion_blank\n              | proteccion funcion_blank\n              | funcion_void\n  param : VARIABLE\n          | asignacion\n          funcion_nparams : FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_defparams_list : params_list COMMA param\n                 | param\n  funcion_void : FUNCTION NOMBRE LPAREN  RPAREN COLON VOID LBRACE empty RBRACE funcion_blank : FUNCTION NOMBRE LPAREN  RPAREN stc_bloque_def\n                    | FUNCTION NOMBRE LPAREN  RPAREN LBRACE empty RBRACE\n  llamada_funcion : NOMBRE LPAREN params_list RPAREN SEMIbrand : RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMIproteccion : PUBLIC\n          | PRIVATE\n          | PROTECTED\n          | STATIC\n  breturn : empty\n        | RETURN SEMI \n        | RETURN NULL SEMI\n        | RETURN VARIABLE SEMI\n        | RETURN BOOLEANO SEMI\n        array_def : ARRAY LPAREN RPAREN\n          | ARRAY LPAREN array_elmnt RPARENarray_elmnt : array_elmnt COMMA valor\n            | valorempty :  bcolas : VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI\n  bpila : VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMIlectura : READLINE LPAREN CADENA RPAREN SEMI\n          | READLINE LPAREN RPAREN SEMIescribir : FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI\n   btrim : TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI\n   comment : COMENTARIOS\n              | DOC_COMENTARIOS\n   bgoto : GOTO NOMBRE SEMIbcortes : EXIT SEMI\n              | BREAK SEMI\n              | DEFAULT SEMI\n              | CONTINUE SEMI\n   otros : SMALLER NOMBRE GREATER\n            | NOMBRE COLON \n   \n    comprobacion : NOMBRE LPAREN valor RPAREN\n                  | NOMBRE LPAREN VARIABLE RPAREN\n  \n  simbolos : LPAREN RPAREN\n            | LPAREN\n            | RPAREN\n            | LBRACKET RBRACKET\n            | LBRACKET\n            | RBRACKET\n            | LBRACE RBRACE\n            | LBRACE\n            | RBRACE instrucciones\n            | OPEN_TAG CLOSE_TAG\n            | OPEN_TAG\n            | CLOSE_TAG\n  \n    instrucciones : condicion_else\n                  | condicion_elseif\n                  | bwhile\n                  | bfor\n  bconcat : CADENA CONCAT CADENA SEMI\n            |  VARIABLE CONCAT VARIABLE SEMI\n            | VARIABLE CONCAT CADENA SEMI\n            | VARIABLE CONCAT_EQUAL CADENA SEMI\n            | CADENA CONCAT_EQUAL CADENA SEMI\n            \n   tiposCast :  STRING\n            | BOOL\n            | BOOLEAN\n            | DOUBLE\n            | FLOAT\n            | ARRAY\n            | OBJECT \n            | INTEGER\n            | INT\n        \n            \n   casting : VARIABLE EQUALS LPAREN tiposCast RPAREN VARIABLE SEMI  \n              | LPAREN tiposCast RPAREN VARIABLE SEMI\n   \n    aumentoCasting : VARIABLE incrementos_mat tipoDato SEMI\n                    | VARIABLE EQUALS VARIABLE operadores tipoDato SEMI\n  '
    
_lr_action_items = {'ECHO':([0,142,148,338,341,342,350,],[31,31,31,31,31,31,31,]),'PRINT':([0,142,148,338,341,342,350,],[32,32,32,32,32,32,32,]),'VARIABLE':([0,31,32,39,40,41,42,71,76,77,78,79,95,98,112,115,116,124,126,127,135,142,143,144,148,149,150,167,169,170,171,172,173,174,177,185,192,193,194,195,196,199,206,214,219,236,243,244,248,249,250,251,255,256,257,258,259,260,261,262,264,265,267,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,288,314,321,322,335,338,341,342,350,356,361,367,384,398,399,404,405,411,412,422,424,],[38,91,91,125,125,-38,-40,163,-142,-143,-144,-145,180,180,188,190,202,-31,125,-32,216,38,125,220,38,216,226,216,240,-98,-99,-100,-101,-102,242,246,-33,-34,-35,-36,-37,180,190,268,216,188,304,305,188,242,-30,-39,-41,304,-190,-191,-192,-205,188,304,-189,-193,-159,216,-112,-113,-114,-115,-116,-117,-118,328,330,-103,-104,-105,-106,304,304,336,359,-158,304,369,38,38,38,38,-206,304,394,304,420,421,-141,-160,304,304,430,-161,]),'VAR':([0,39,40,76,77,78,79,112,126,142,143,148,236,248,261,338,341,342,350,],[39,39,39,-142,-143,-144,-145,39,39,39,39,39,39,39,39,39,39,39,39,]),'NOMBRE':([0,31,61,69,80,130,131,142,148,158,159,270,271,272,273,274,275,276,277,297,338,341,342,350,401,],[35,83,152,160,166,207,209,35,35,230,231,327,-112,-113,-114,-115,-116,-117,-118,345,35,35,35,35,422,]),'DEFINE':([0,142,148,338,341,342,350,],[46,46,46,46,46,46,46,]),'READLINE':([0,115,142,148,206,338,341,342,350,],[48,48,48,48,48,48,48,48,48,]),'WHILE':([0,51,142,148,286,338,341,342,350,],[49,49,49,49,49,49,49,49,49,]),'DO':([0,142,148,338,341,342,350,],[52,52,52,52,52,52,52,]),'FOR':([0,51,142,148,338,341,342,350,],[53,53,53,53,53,53,53,53,]),'FOREACH':([0,142,148,338,341,342,350,],[54,54,54,54,54,54,54,]),'TRY':([0,142,148,338,341,342,350,],[55,55,55,55,55,55,55,]),'ELSE':([0,51,56,142,147,148,338,341,342,350,402,409,],[57,57,57,57,57,57,57,57,57,57,-61,-60,]),'ELSEIF':([0,51,56,142,148,338,341,342,350,409,],[58,58,58,58,58,58,58,58,58,-60,]),'SWITCH':([0,142,148,338,341,342,350,],[59,59,59,59,59,59,59,]),'CASE':([0,142,148,338,341,342,350,],[60,60,60,60,60,60,60,]),'GOTO':([0,142,148,338,341,342,350,],[61,61,61,61,61,61,61,]),'EXIT':([0,142,148,338,341,342,350,],[62,62,62,62,62,62,62,]),'BREAK':([0,142,148,338,341,342,350,],[63,63,63,63,63,63,63,]),'DEFAULT':([0,142,148,338,341,342,350,],[64,64,64,64,64,64,64,]),'CONTINUE':([0,142,148,338,341,342,350,],[65,65,65,65,65,65,65,]),'RAND':([0,115,142,148,206,338,341,342,350,],[66,66,66,66,66,66,66,66,66,]),'FWRITE':([0,115,142,148,206,338,341,342,350,],[67,67,67,67,67,67,67,67,67,]),'TRIM':([0,115,142,148,206,338,341,342,350,],[68,68,68,68,68,68,68,68,68,]),'SMALLER':([0,84,87,88,89,93,94,96,142,148,181,216,217,338,341,342,350,385,386,391,],[69,-50,-44,-45,-46,-47,-49,-51,69,69,-48,280,280,69,69,69,69,-156,-157,280,]),'RETURN':([0,142,148,221,323,324,338,341,342,348,350,],[71,71,71,71,71,71,71,71,71,71,71,]),'COMENTARIOS':([0,142,148,338,341,342,350,],[72,72,72,72,72,72,72,]),'DOC_COMENTARIOS':([0,142,148,338,341,342,350,],[73,73,73,73,73,73,73,]),'LPAREN':([0,31,32,35,41,42,46,48,49,53,54,58,59,66,67,68,81,115,124,127,135,142,148,149,166,167,169,170,171,172,173,174,192,193,194,195,196,201,206,207,219,231,243,250,251,252,253,255,257,258,259,260,264,265,267,270,271,272,273,274,275,276,277,321,327,338,341,342,350,356,374,404,405,424,],[33,95,98,112,-38,-40,131,134,135,143,144,149,150,157,158,159,167,199,-31,-32,214,33,33,214,236,214,95,-98,-99,-100,-101,-102,-33,-34,-35,-36,-37,256,95,261,214,297,95,-30,-39,312,313,-41,-190,-191,-192,-205,-189,-193,-159,214,-112,-113,-114,-115,-116,-117,-118,-158,367,33,33,33,33,-206,401,-141,-160,-161,]),'CADENA':([0,31,32,41,42,95,98,115,116,117,118,119,120,121,122,123,124,127,131,132,133,134,135,142,148,149,167,169,170,171,172,173,174,192,193,194,195,196,199,206,219,243,244,249,250,251,255,256,257,258,259,260,262,264,265,267,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,296,321,322,338,341,342,350,356,361,367,384,404,405,411,412,424,],[47,90,90,-38,-40,181,181,90,203,204,181,-107,-108,-109,-110,-111,-31,-32,208,210,211,212,181,47,47,181,181,181,-98,-99,-100,-101,-102,-33,-34,-35,-36,-37,181,90,181,181,181,181,-30,-39,-41,181,-190,-191,-192,-205,181,-189,-193,-159,181,-112,-113,-114,-115,-116,-117,-118,181,181,-103,-104,-105,-106,181,181,344,-158,181,47,47,47,47,-206,181,181,181,-141,-160,181,181,-161,]),'RPAREN':([0,33,41,42,84,87,88,89,93,94,96,101,103,104,105,106,107,108,109,110,111,124,127,134,142,148,181,183,186,187,188,189,192,193,194,195,196,212,215,225,226,236,237,250,251,254,255,256,257,258,259,260,261,264,265,267,298,302,303,305,306,310,312,313,316,317,319,320,321,325,326,328,329,330,331,332,333,336,338,341,342,343,344,345,350,352,353,354,356,364,368,379,385,386,388,393,394,404,405,410,413,414,416,418,420,421,424,426,427,428,429,430,],[34,102,-38,-40,-50,-44,-45,-46,-47,-49,-51,185,-194,-195,-196,-197,-198,-199,-200,-201,-202,-31,-32,213,34,34,-48,245,247,-136,-132,-133,-33,-34,-35,-36,-37,266,269,293,294,299,300,-30,-39,314,-41,315,-190,-191,-192,-205,318,-189,-193,-159,346,352,353,354,355,-135,357,358,360,-154,362,363,-158,-75,-76,-67,-69,-70,-72,-68,-71,372,34,34,34,377,378,379,34,-123,-124,-125,-206,391,395,406,-156,-157,-153,413,414,-141,-160,-126,-171,-172,-81,-83,-82,-84,-161,-73,-74,-85,-86,432,]),'LBRACKET':([0,83,142,148,338,341,342,350,],[36,175,36,36,36,36,36,36,]),'RBRACKET':([0,36,142,148,241,338,341,342,350,],[37,114,37,37,301,37,37,37,37,]),'LBRACE':([0,52,55,57,142,145,148,269,293,294,299,300,318,338,341,342,346,350,372,382,395,432,],[50,142,145,148,50,221,50,323,341,342,348,350,348,50,50,50,221,50,221,408,221,221,]),'RBRACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,37,41,42,43,44,45,50,56,70,72,73,74,75,85,99,102,113,114,124,127,128,129,136,137,138,139,140,141,142,146,147,148,153,154,155,156,161,165,168,176,182,184,192,193,194,195,196,218,221,222,223,224,227,228,232,233,234,235,250,251,255,257,258,259,260,264,265,267,289,290,291,292,307,308,309,321,323,324,334,337,338,339,340,341,342,347,348,350,351,356,365,366,373,375,380,381,383,385,386,387,389,390,392,400,402,403,404,405,407,408,409,415,423,424,425,431,433,],[51,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-174,-175,-177,-178,-38,-40,-127,-129,-131,136,-63,-146,-162,-163,-183,-184,-57,-55,-173,-170,-176,-31,-32,-128,-130,-179,-181,-185,-186,-187,-188,51,-64,-65,51,-165,-166,-167,-168,-147,-182,-52,-58,-53,-59,-33,-34,-35,-36,-37,286,-155,291,-66,292,-92,-164,-169,-148,-149,-150,-30,-39,-41,-190,-191,-192,-205,-189,-193,-159,337,-79,-155,-62,-54,-204,-140,-158,-155,-155,-90,-80,51,-95,-97,51,51,-138,-155,51,-56,-206,392,-89,-78,402,-134,407,409,-156,-157,-203,-42,-43,-88,-87,-61,423,-141,-160,-139,-155,-60,-77,-91,-161,431,-137,-96,]),'OPEN_TAG':([0,142,148,338,341,342,350,],[74,74,74,74,74,74,74,]),'CLOSE_TAG':([0,74,142,148,338,341,342,350,],[75,165,75,75,75,75,75,75,]),'PUBLIC':([0,39,40,76,77,78,79,112,126,142,143,148,236,248,261,338,341,342,350,],[76,76,76,-142,-143,-144,-145,76,76,76,76,76,76,76,76,76,76,76,76,]),'PRIVATE':([0,39,40,76,77,78,79,112,126,142,143,148,236,248,261,338,341,342,350,],[77,77,77,-142,-143,-144,-145,77,77,77,77,77,77,77,77,77,77,77,77,]),'PROTECTED':([0,39,40,76,77,78,79,112,126,142,143,148,236,248,261,338,341,342,350,],[78,78,78,-142,-143,-144,-145,78,78,78,78,78,78,78,78,78,78,78,78,]),'STATIC':([0,39,40,76,77,78,79,112,126,142,143,148,236,248,261,338,341,342,350,],[79,79,79,-142,-143,-144,-145,79,79,79,79,79,79,79,79,79,79,79,79,]),'FUNCTION':([0,40,76,77,78,79,142,148,338,341,342,350,],[80,130,-142,-143,-144,-145,80,80,80,80,80,80,]),'IF':([0,142,148,338,341,342,350,],[81,81,81,81,81,81,81,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,37,41,42,43,44,45,50,56,70,72,73,74,75,85,99,102,113,114,124,127,128,129,136,137,138,139,140,141,146,147,153,154,155,156,161,165,168,176,182,184,192,193,194,195,196,223,227,228,232,233,234,235,250,251,255,257,258,259,260,264,265,267,290,291,292,307,308,309,321,324,334,337,338,339,340,347,351,356,366,373,380,385,386,387,389,390,392,400,402,404,405,407,409,415,423,424,431,433,],[-155,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-174,-175,-177,-178,-38,-40,-127,-129,-131,-180,-63,-146,-162,-163,-183,-184,-57,-55,-173,-170,-176,-31,-32,-128,-130,-179,-181,-185,-186,-187,-188,-64,-65,-165,-166,-167,-168,-147,-182,-52,-58,-53,-59,-33,-34,-35,-36,-37,-66,-92,-164,-169,-148,-149,-150,-30,-39,-41,-190,-191,-192,-205,-189,-193,-159,-79,-155,-62,-54,-204,-140,-158,-155,-90,-80,-155,-95,-97,-138,-56,-206,-89,-78,-134,-156,-157,-203,-42,-43,-88,-87,-61,-141,-160,-139,-60,-77,-91,-161,-137,-96,]),'SEMI':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,37,41,42,43,44,45,50,56,62,63,64,65,70,71,72,73,74,75,82,84,85,86,87,88,89,90,92,93,94,96,97,99,100,102,113,114,124,127,128,129,136,137,138,139,140,141,146,147,152,153,154,155,156,161,162,163,164,165,168,176,181,182,184,191,192,193,194,195,196,197,200,202,203,204,205,210,211,213,221,223,227,228,232,233,234,235,238,239,242,245,246,247,250,251,255,257,258,259,260,264,265,266,267,287,289,290,291,292,301,307,308,309,311,315,321,323,324,325,326,328,329,330,331,332,333,334,337,338,339,340,342,347,348,351,352,353,354,356,357,358,359,360,362,363,365,366,373,376,377,378,380,381,385,386,387,389,390,392,400,402,404,405,406,407,409,410,413,414,415,423,424,426,427,431,433,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-174,-175,-177,-178,-38,-40,-127,-129,-131,-180,-63,153,154,155,156,-146,161,-162,-163,-183,-184,168,-50,-57,176,-44,-45,-46,-48,-122,-47,-49,-51,182,-55,184,-173,-170,-176,-31,-32,-128,-130,-179,-181,-185,-186,-187,-188,-64,-65,228,-165,-166,-167,-168,-147,233,234,235,-182,-52,-58,-48,-53,-59,250,-33,-34,-35,-36,-37,251,255,257,258,259,260,264,265,267,-155,-66,-92,-164,-169,-148,-149,-150,-119,-120,-121,307,308,309,-30,-39,-41,-190,-191,-192,-205,-189,-193,321,-159,335,338,-79,-155,-62,351,-54,-204,-140,356,-151,-158,-155,-155,-75,-76,-67,-69,-70,-72,-68,-71,-90,-80,-155,-95,-97,-155,-138,-155,-56,-123,-124,-125,-206,385,386,387,-152,389,390,338,338,-78,403,404,405,-134,-146,-156,-157,-203,-42,-43,-88,-87,-61,-141,-160,424,-139,-60,-126,-171,-172,-77,-91,-161,-73,-74,-137,-96,]),'BOOLEANO':([31,32,41,42,71,95,98,115,118,119,120,121,122,123,124,127,135,149,167,169,170,171,172,173,174,192,193,194,195,196,199,206,219,243,244,249,250,251,255,256,257,258,259,260,262,264,265,267,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,321,322,356,361,367,384,404,405,411,412,424,],[94,94,-38,-40,164,94,94,94,94,-107,-108,-109,-110,-111,-31,-32,94,94,94,94,-98,-99,-100,-101,-102,-33,-34,-35,-36,-37,94,94,94,94,94,94,-30,-39,-41,94,-190,-191,-192,-205,94,-189,-193,-159,94,-112,-113,-114,-115,-116,-117,-118,94,94,-103,-104,-105,-106,94,94,-158,94,-206,94,94,94,-141,-160,94,94,-161,]),'ENTERO':([31,32,41,42,60,95,98,115,118,119,120,121,122,123,124,127,135,149,157,167,169,170,171,172,173,174,175,192,193,194,195,196,199,206,219,243,244,249,250,251,255,256,257,258,259,260,262,264,265,267,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,295,321,322,356,361,367,384,404,405,411,412,417,419,424,],[84,84,-38,-40,151,84,84,84,84,-107,-108,-109,-110,-111,-31,-32,84,84,229,84,84,-98,-99,-100,-101,-102,241,-33,-34,-35,-36,-37,84,84,84,84,84,84,-30,-39,-41,84,-190,-191,-192,-205,84,-189,-193,-159,84,-112,-113,-114,-115,-116,-117,-118,84,84,-103,-104,-105,-106,84,84,343,-158,84,-206,84,84,84,-141,-160,84,84,84,84,-161,]),'DECIMAL':([31,32,41,42,95,98,115,118,119,120,121,122,123,124,127,135,149,167,169,170,171,172,173,174,192,193,194,195,196,199,206,219,243,244,249,250,251,255,256,257,258,259,260,262,264,265,267,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,321,322,356,361,367,384,404,405,411,412,417,419,424,],[96,96,-38,-40,96,96,96,96,-107,-108,-109,-110,-111,-31,-32,96,96,96,96,-98,-99,-100,-101,-102,-33,-34,-35,-36,-37,96,96,96,96,96,96,-30,-39,-41,96,-190,-191,-192,-205,96,-189,-193,-159,96,-112,-113,-114,-115,-116,-117,-118,96,96,-103,-104,-105,-106,96,96,-158,96,-206,96,96,96,-141,-160,96,96,96,96,-161,]),'STRING':([33,199,],[103,103,]),'BOOL':([33,199,],[104,104,]),'BOOLEAN':([33,199,],[105,105,]),'DOUBLE':([33,199,],[106,106,]),'FLOAT':([33,199,],[107,107,]),'ARRAY':([33,115,199,206,263,],[108,201,108,201,320,]),'OBJECT':([33,199,],[109,109,]),'INTEGER':([33,199,],[110,110,]),'INT':([33,199,],[111,111,]),'COLON':([35,151,269,299,],[113,227,324,349,]),'EQUALS':([38,91,125,180,188,190,216,240,304,305,328,330,394,396,397,],[115,178,206,178,206,178,178,178,178,178,178,178,178,417,419,]),'CONCAT':([38,47,90,91,190,],[116,132,132,116,116,]),'CONCAT_EQUAL':([38,47,90,91,190,],[117,133,133,117,117,]),'MINUS_EQUAL':([38,125,188,],[119,119,119,]),'MOD_EQUAL':([38,125,188,],[120,120,120,]),'MUL_EQUAL':([38,125,188,],[121,121,121,]),'PLUS_EQUAL':([38,125,188,],[122,122,122,]),'DIV_EQUAL':([38,125,188,],[123,123,123,]),'COMMA':([41,42,84,87,88,89,93,94,96,124,127,181,186,187,188,189,192,193,194,195,196,208,209,229,230,250,251,255,257,258,259,260,264,265,267,298,310,316,317,321,356,385,386,388,404,405,424,],[-38,-40,-50,-44,-45,-46,-47,-49,-51,-31,-32,-48,248,-136,-132,-133,-33,-34,-35,-36,-37,262,263,295,296,-30,-39,-41,-190,-191,-192,-205,-189,-193,-159,248,-135,361,-154,-158,-206,-156,-157,-153,-141,-160,-161,]),'NULL':([71,],[162,]),'SUMA':([82,84,87,88,89,90,91,93,94,96,97,179,180,181,183,190,191,238,240,268,335,355,369,370,385,386,396,],[170,-50,-44,-45,-46,-48,170,-47,-49,-51,170,170,170,-48,170,170,170,170,170,170,370,170,396,398,-156,-157,416,]),'RESTA':([82,84,87,88,89,90,91,93,94,96,97,179,180,181,183,190,191,238,240,268,335,355,369,371,385,386,397,],[171,-50,-44,-45,-46,-48,171,-47,-49,-51,171,171,171,-48,171,171,171,171,171,171,371,171,397,399,-156,-157,418,]),'MULTIPLICACION':([82,84,87,88,89,90,91,93,94,96,97,179,180,181,183,190,191,238,240,268,355,385,386,],[172,-50,-44,-45,-46,-48,172,-47,-49,-51,172,172,172,-48,172,172,172,172,172,172,172,-156,-157,]),'DIVISION':([82,84,87,88,89,90,91,93,94,96,97,179,180,181,183,190,191,238,240,268,355,385,386,],[173,-50,-44,-45,-46,-48,173,-47,-49,-51,173,173,173,-48,173,173,173,173,173,173,173,-156,-157,]),'MODULO':([82,84,87,88,89,90,91,93,94,96,97,179,180,181,183,190,191,238,240,268,355,385,386,],[174,-50,-44,-45,-46,-48,174,-47,-49,-51,174,174,174,-48,174,174,174,174,174,174,174,-156,-157,]),'GREATER':([84,87,88,89,93,94,96,160,181,216,217,385,386,391,],[-50,-44,-45,-46,-47,-49,-51,232,-48,281,281,-156,-157,281,]),'IS_SMALLER_OR_EQUAL':([84,87,88,89,93,94,96,181,216,217,385,386,391,],[-50,-44,-45,-46,-47,-49,-51,-48,282,282,-156,-157,282,]),'IS_GREATER_OR_EQUAL':([84,87,88,89,93,94,96,181,216,217,385,386,391,],[-50,-44,-45,-46,-47,-49,-51,-48,283,283,-156,-157,283,]),'AND':([84,87,88,89,93,94,96,181,215,216,217,225,237,287,325,326,328,329,330,331,332,333,385,386,391,413,414,426,427,],[-50,-44,-45,-46,-47,-49,-51,-48,271,271,271,271,271,271,271,-76,-67,-69,-70,-72,-68,-71,-156,-157,271,-171,-172,-73,-74,]),'OR':([84,87,88,89,93,94,96,181,215,216,217,225,237,287,325,326,328,329,330,331,332,333,385,386,391,413,414,426,427,],[-50,-44,-45,-46,-47,-49,-51,-48,272,272,272,272,272,272,272,-76,-67,-69,-70,-72,-68,-71,-156,-157,272,-171,-172,-73,-74,]),'XOR':([84,87,88,89,93,94,96,181,215,216,217,225,237,287,325,326,328,329,330,331,332,333,385,386,391,413,414,426,427,],[-50,-44,-45,-46,-47,-49,-51,-48,273,273,273,273,273,273,273,-76,-67,-69,-70,-72,-68,-71,-156,-157,273,-171,-172,-73,-74,]),'IS_EQUAL':([84,87,88,89,93,94,96,181,215,216,217,225,237,287,325,326,328,329,330,331,332,333,385,386,391,413,414,426,427,],[-50,-44,-45,-46,-47,-49,-51,-48,274,274,274,274,274,274,274,-76,-67,-69,-70,-72,-68,-71,-156,-157,274,-171,-172,-73,-74,]),'IS_NOT_EQUAL':([84,87,88,89,93,94,96,181,215,216,217,225,237,287,325,326,328,329,330,331,332,333,385,386,391,413,414,426,427,],[-50,-44,-45,-46,-47,-49,-51,-48,275,275,275,275,275,275,275,-76,-67,-69,-70,-72,-68,-71,-156,-157,275,-171,-172,-73,-74,]),'IS_IDENTICAL':([84,87,88,89,93,94,96,181,215,216,217,225,237,287,325,326,328,329,330,331,332,333,385,386,391,413,414,426,427,],[-50,-44,-45,-46,-47,-49,-51,-48,276,276,276,276,276,276,276,-76,-67,-69,-70,-72,-68,-71,-156,-157,276,-171,-172,-73,-74,]),'IS_NOT_IDENTICAL':([84,87,88,89,93,94,96,181,215,216,217,225,237,287,325,326,328,329,330,331,332,333,385,386,391,413,414,426,427,],[-50,-44,-45,-46,-47,-49,-51,-48,277,277,277,277,277,277,277,-76,-67,-69,-70,-72,-68,-71,-156,-157,277,-171,-172,-73,-74,]),'NEW':([115,178,],[198,198,]),'SPLQUEUE':([198,],[252,]),'SPLSTACK':([198,],[253,]),'AS':([220,],[288,]),'CATCH':([291,337,339,340,433,],[-155,-80,374,-97,-96,]),'VOID':([349,],[382,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,142,148,338,341,342,350,],[1,218,224,373,375,376,383,]),'imprimir':([0,142,148,338,341,342,350,],[2,2,2,2,2,2,2,]),'asignacion':([0,39,40,112,126,142,143,148,236,248,261,338,341,342,350,],[3,124,127,189,127,3,219,3,189,189,189,3,3,3,3,]),'funciones':([0,142,148,338,341,342,350,],[4,4,4,4,4,4,4,]),'llamada_funcion':([0,142,148,338,341,342,350,],[5,5,5,5,5,5,5,]),'constante':([0,142,148,338,341,342,350,],[6,6,6,6,6,6,6,]),'lectura':([0,115,142,148,206,338,341,342,350,],[7,195,7,7,195,7,7,7,7,]),'bwhile':([0,51,142,148,286,338,341,342,350,],[8,140,8,8,334,8,8,8,8,]),'bdo':([0,142,148,338,341,342,350,],[9,9,9,9,9,9,9,]),'bfor':([0,51,142,148,338,341,342,350,],[10,141,10,10,10,10,10,10,]),'bforeach':([0,142,148,338,341,342,350,],[11,11,11,11,11,11,11,]),'btry':([0,142,148,338,341,342,350,],[12,12,12,12,12,12,12,]),'condicion_ifelse':([0,142,148,338,341,342,350,],[13,13,13,13,13,13,13,]),'condicion_else':([0,51,56,142,147,148,338,341,342,350,],[14,138,146,14,223,14,14,14,14,14,]),'condicion_elseif':([0,51,56,142,148,338,341,342,350,],[15,139,147,15,15,15,15,15,15,]),'bswitch':([0,142,148,338,341,342,350,],[16,16,16,16,16,16,16,]),'bcase':([0,142,148,338,341,342,350,],[17,17,17,17,17,17,17,]),'bgoto':([0,142,148,338,341,342,350,],[18,18,18,18,18,18,18,]),'bcolas':([0,31,32,95,98,115,135,142,148,149,167,169,199,206,219,243,244,256,262,270,278,279,284,285,322,338,341,342,350,361,367,384,411,412,],[19,88,88,88,88,88,88,19,19,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,19,19,19,19,88,88,88,88,88,]),'bpila':([0,31,32,95,98,115,135,142,148,149,167,169,199,206,219,243,244,256,262,270,278,279,284,285,322,338,341,342,350,361,367,384,411,412,],[20,89,89,89,89,89,89,20,20,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,20,20,20,20,89,89,89,89,89,]),'bcortes':([0,142,148,338,341,342,350,],[21,21,21,21,21,21,21,]),'brand':([0,115,142,148,206,338,341,342,350,],[22,192,22,22,192,22,22,22,22,]),'escribir':([0,115,142,148,206,338,341,342,350,],[23,193,23,23,193,23,23,23,23,]),'btrim':([0,115,142,148,206,338,341,342,350,],[24,194,24,24,194,24,24,24,24,]),'otros':([0,142,148,338,341,342,350,],[25,25,25,25,25,25,25,]),'breturn':([0,142,148,221,323,324,338,341,342,348,350,],[26,26,26,290,290,290,26,26,26,290,26,]),'comment':([0,142,148,338,341,342,350,],[27,27,27,27,27,27,27,]),'casting':([0,142,148,338,341,342,350,],[28,28,28,28,28,28,28,]),'bconcat':([0,31,32,115,142,148,206,338,341,342,350,],[29,85,99,196,29,29,196,29,29,29,29,]),'simbolos':([0,142,148,338,341,342,350,],[30,30,30,30,30,30,30,]),'proteccion':([0,39,40,112,126,142,143,148,236,248,261,338,341,342,350,],[40,126,126,126,126,40,126,40,126,126,126,40,40,40,40,]),'asignacion_array':([0,39,40,112,126,142,143,148,236,248,261,338,341,342,350,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'aumentoCasting':([0,39,40,112,126,142,143,148,236,248,261,338,341,342,350,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'funcion_nparams':([0,40,142,148,338,341,342,350,],[43,128,43,43,43,43,43,43,]),'funcion_blank':([0,40,142,148,338,341,342,350,],[44,129,44,44,44,44,44,44,]),'funcion_void':([0,142,148,338,341,342,350,],[45,45,45,45,45,45,45,]),'condicion_if':([0,142,148,338,341,342,350,],[56,56,56,56,56,56,56,]),'empty':([0,142,148,221,291,323,324,338,341,342,348,350,408,],[70,70,70,70,340,70,70,70,70,70,381,70,425,]),'valor':([31,32,95,98,115,135,149,167,169,199,206,219,243,244,256,262,270,278,279,284,285,322,361,367,384,411,412,],[82,97,179,183,191,217,217,217,238,179,191,217,302,306,317,319,217,329,331,332,333,364,388,393,410,426,427,]),'operaciones_mat':([31,32,115,169,206,],[86,100,197,239,197,]),'tipoDato':([31,32,95,98,115,118,135,149,167,169,199,206,219,243,244,249,256,262,270,278,279,284,285,322,361,367,384,411,412,],[87,87,87,87,87,205,87,87,87,87,87,87,87,87,87,311,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'operaciones_mat_par':([31,32,115,169,206,243,],[92,92,92,92,92,303,]),'numero':([31,32,95,98,115,118,135,149,167,169,199,206,219,243,244,249,256,262,270,278,279,284,285,322,361,367,384,411,412,417,419,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,428,429,]),'tiposCast':([33,199,],[101,254,]),'incrementos_mat':([38,125,188,],[118,118,118,]),'instrucciones':([51,],[137,]),'operadores':([82,91,97,179,180,183,190,191,238,240,268,355,],[169,177,169,243,244,243,249,169,169,177,322,384,]),'params_list':([112,236,261,],[186,298,298,]),'param':([112,236,248,261,],[187,187,310,187,]),'array_def':([115,206,],[200,200,]),'condicion':([135,149,167,219,270,],[215,225,237,287,325,]),'stc_bloque_def':([145,299,318,346,372,395,432,],[222,347,347,380,400,415,433,]),'condicion_booleana':([215,216,217,225,237,287,325,391,],[270,279,285,270,270,270,270,412,]),'operador_logico':([216,217,391,],[278,284,411,]),'stc_bloque':([221,323,324,348,],[289,365,366,289,]),'array_elmnt':([256,],[316,]),'comprobacion':([270,],[326,]),'catches':([291,],[339,]),'for_incr':([335,],[368,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> imprimir','cuerpo',1,'p_cuerpo','sintactico2.py',10),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','sintactico2.py',11),
  ('cuerpo -> funciones','cuerpo',1,'p_cuerpo','sintactico2.py',12),
  ('cuerpo -> llamada_funcion','cuerpo',1,'p_cuerpo','sintactico2.py',13),
  ('cuerpo -> constante','cuerpo',1,'p_cuerpo','sintactico2.py',14),
  ('cuerpo -> lectura','cuerpo',1,'p_cuerpo','sintactico2.py',15),
  ('cuerpo -> bwhile','cuerpo',1,'p_cuerpo','sintactico2.py',16),
  ('cuerpo -> bdo','cuerpo',1,'p_cuerpo','sintactico2.py',17),
  ('cuerpo -> bfor','cuerpo',1,'p_cuerpo','sintactico2.py',18),
  ('cuerpo -> bforeach','cuerpo',1,'p_cuerpo','sintactico2.py',19),
  ('cuerpo -> btry','cuerpo',1,'p_cuerpo','sintactico2.py',20),
  ('cuerpo -> condicion_ifelse','cuerpo',1,'p_cuerpo','sintactico2.py',21),
  ('cuerpo -> condicion_else','cuerpo',1,'p_cuerpo','sintactico2.py',22),
  ('cuerpo -> condicion_elseif','cuerpo',1,'p_cuerpo','sintactico2.py',23),
  ('cuerpo -> bswitch','cuerpo',1,'p_cuerpo','sintactico2.py',24),
  ('cuerpo -> bcase','cuerpo',1,'p_cuerpo','sintactico2.py',25),
  ('cuerpo -> bgoto','cuerpo',1,'p_cuerpo','sintactico2.py',26),
  ('cuerpo -> bcolas','cuerpo',1,'p_cuerpo','sintactico2.py',27),
  ('cuerpo -> bpila','cuerpo',1,'p_cuerpo','sintactico2.py',28),
  ('cuerpo -> bcortes','cuerpo',1,'p_cuerpo','sintactico2.py',29),
  ('cuerpo -> brand','cuerpo',1,'p_cuerpo','sintactico2.py',30),
  ('cuerpo -> escribir','cuerpo',1,'p_cuerpo','sintactico2.py',31),
  ('cuerpo -> btrim','cuerpo',1,'p_cuerpo','sintactico2.py',32),
  ('cuerpo -> otros','cuerpo',1,'p_cuerpo','sintactico2.py',33),
  ('cuerpo -> breturn','cuerpo',1,'p_cuerpo','sintactico2.py',34),
  ('cuerpo -> comment','cuerpo',1,'p_cuerpo','sintactico2.py',35),
  ('cuerpo -> casting','cuerpo',1,'p_cuerpo','sintactico2.py',36),
  ('cuerpo -> bconcat','cuerpo',1,'p_cuerpo','sintactico2.py',37),
  ('cuerpo -> simbolos','cuerpo',1,'p_cuerpo','sintactico2.py',38),
  ('asignacion -> VARIABLE EQUALS valor SEMI','asignacion',4,'p_asignacion','sintactico2.py',44),
  ('asignacion -> VAR asignacion','asignacion',2,'p_asignacion','sintactico2.py',45),
  ('asignacion -> proteccion asignacion','asignacion',2,'p_asignacion','sintactico2.py',46),
  ('asignacion -> VARIABLE EQUALS brand','asignacion',3,'p_asignacion','sintactico2.py',47),
  ('asignacion -> VARIABLE EQUALS escribir','asignacion',3,'p_asignacion','sintactico2.py',48),
  ('asignacion -> VARIABLE EQUALS btrim','asignacion',3,'p_asignacion','sintactico2.py',49),
  ('asignacion -> VARIABLE EQUALS lectura','asignacion',3,'p_asignacion','sintactico2.py',50),
  ('asignacion -> VARIABLE EQUALS bconcat','asignacion',3,'p_asignacion','sintactico2.py',51),
  ('asignacion -> asignacion_array','asignacion',1,'p_asignacion','sintactico2.py',52),
  ('asignacion -> VARIABLE EQUALS operaciones_mat SEMI','asignacion',4,'p_asignacion','sintactico2.py',53),
  ('asignacion -> aumentoCasting','asignacion',1,'p_asignacion','sintactico2.py',54),
  ('asignacion_array -> VARIABLE EQUALS array_def SEMI','asignacion_array',4,'p_asignacion_array','sintactico2.py',60),
  ('constante -> DEFINE LPAREN CADENA COMMA valor RPAREN SEMI','constante',7,'p_constante','sintactico2.py',64),
  ('constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI','constante',7,'p_constante','sintactico2.py',65),
  ('valor -> tipoDato','valor',1,'p_valor','sintactico2.py',70),
  ('valor -> bcolas','valor',1,'p_valor','sintactico2.py',71),
  ('valor -> bpila','valor',1,'p_valor','sintactico2.py',72),
  ('tipoDato -> numero','tipoDato',1,'p_tipoDato','sintactico2.py',78),
  ('tipoDato -> CADENA','tipoDato',1,'p_tipoDato','sintactico2.py',79),
  ('tipoDato -> BOOLEANO','tipoDato',1,'p_tipoDato','sintactico2.py',80),
  ('numero -> ENTERO','numero',1,'p_numero','sintactico2.py',85),
  ('numero -> DECIMAL','numero',1,'p_numero','sintactico2.py',86),
  ('imprimir -> ECHO valor SEMI','imprimir',3,'p_imprimir','sintactico2.py',92),
  ('imprimir -> PRINT valor SEMI','imprimir',3,'p_imprimir','sintactico2.py',93),
  ('imprimir -> PRINT LPAREN valor RPAREN SEMI','imprimir',5,'p_imprimir','sintactico2.py',94),
  ('imprimir -> PRINT bconcat','imprimir',2,'p_imprimir','sintactico2.py',95),
  ('imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI','imprimir',6,'p_imprimir','sintactico2.py',96),
  ('imprimir -> ECHO bconcat','imprimir',2,'p_imprimir','sintactico2.py',97),
  ('imprimir -> ECHO operaciones_mat SEMI','imprimir',3,'p_imprimir','sintactico2.py',98),
  ('imprimir -> PRINT operaciones_mat SEMI','imprimir',3,'p_imprimir','sintactico2.py',99),
  ('condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_if',7,'p_condicion_if','sintactico2.py',106),
  ('condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_elseif',7,'p_condicion_elseif','sintactico2.py',111),
  ('condicion_else -> ELSE LBRACE cuerpo RBRACE','condicion_else',4,'p_condicion_else','sintactico2.py',116),
  ('condicion_ifelse -> condicion_if','condicion_ifelse',1,'p_condicion_ifelse','sintactico2.py',121),
  ('condicion_ifelse -> condicion_if condicion_else','condicion_ifelse',2,'p_condicion_ifelse','sintactico2.py',122),
  ('condicion_ifelse -> condicion_if condicion_elseif','condicion_ifelse',2,'p_condicion_ifelse','sintactico2.py',123),
  ('condicion_ifelse -> condicion_if condicion_elseif condicion_else','condicion_ifelse',3,'p_condicion_ifelse','sintactico2.py',124),
  ('condicion -> VARIABLE operador_logico VARIABLE','condicion',3,'p_condicion','sintactico2.py',129),
  ('condicion -> valor operador_logico valor','condicion',3,'p_condicion','sintactico2.py',130),
  ('condicion -> VARIABLE operador_logico valor','condicion',3,'p_condicion','sintactico2.py',131),
  ('condicion -> VARIABLE condicion_booleana VARIABLE','condicion',3,'p_condicion','sintactico2.py',132),
  ('condicion -> valor condicion_booleana valor','condicion',3,'p_condicion','sintactico2.py',133),
  ('condicion -> VARIABLE condicion_booleana valor','condicion',3,'p_condicion','sintactico2.py',134),
  ('condicion -> LPAREN VARIABLE operadores valor RPAREN operador_logico valor','condicion',7,'p_condicion','sintactico2.py',135),
  ('condicion -> LPAREN VARIABLE operadores valor RPAREN condicion_booleana valor','condicion',7,'p_condicion','sintactico2.py',136),
  ('condicion -> condicion condicion_booleana condicion','condicion',3,'p_condicion','sintactico2.py',137),
  ('condicion -> condicion condicion_booleana comprobacion','condicion',3,'p_condicion','sintactico2.py',138),
  ('bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def','bfor',8,'p_bfor','sintactico2.py',144),
  ('stc_bloque -> stc_bloque SEMI cuerpo','stc_bloque',3,'p_stc_bloque','sintactico2.py',148),
  ('stc_bloque -> breturn','stc_bloque',1,'p_stc_bloque','sintactico2.py',149),
  ('stc_bloque_def -> LBRACE stc_bloque RBRACE','stc_bloque_def',3,'p_stc_bloque_def','sintactico2.py',154),
  ('for_incr -> VARIABLE SUMA SUMA','for_incr',3,'p_for_incr','sintactico2.py',158),
  ('for_incr -> SUMA SUMA VARIABLE','for_incr',3,'p_for_incr','sintactico2.py',159),
  ('for_incr -> VARIABLE RESTA RESTA','for_incr',3,'p_for_incr','sintactico2.py',160),
  ('for_incr -> RESTA RESTA VARIABLE','for_incr',3,'p_for_incr','sintactico2.py',161),
  ('for_incr -> VARIABLE SUMA EQUALS numero','for_incr',4,'p_for_incr','sintactico2.py',162),
  ('for_incr -> VARIABLE RESTA EQUALS numero','for_incr',4,'p_for_incr','sintactico2.py',163),
  ('bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def','bforeach',7,'p_bforeach','sintactico2.py',167),
  ('bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE','bwhile',7,'p_bwhile','sintactico2.py',172),
  ('bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque','bwhile',6,'p_bwhile','sintactico2.py',173),
  ('bdo -> DO LBRACE cuerpo RBRACE bwhile','bdo',5,'p_bdo','sintactico2.py',178),
  ('bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE','bswitch',8,'p_bswitch','sintactico2.py',184),
  ('bcase -> CASE ENTERO COLON','bcase',3,'p_bcase','sintactico2.py',188),
  ('innerSwitch -> bcase cuerpo BREAK SEMI','innerSwitch',4,'p_innerSwitch','sintactico2.py',192),
  ('innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch','innerSwitch',7,'p_innerSwitch','sintactico2.py',193),
  ('btry -> TRY LBRACE stc_bloque_def RBRACE catches','btry',5,'p_btry','sintactico2.py',199),
  ('catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def','catches',7,'p_catches','sintactico2.py',203),
  ('catches -> empty','catches',1,'p_catches','sintactico2.py',204),
  ('operadores -> SUMA','operadores',1,'p_operadores','sintactico2.py',210),
  ('operadores -> RESTA','operadores',1,'p_operadores','sintactico2.py',211),
  ('operadores -> MULTIPLICACION','operadores',1,'p_operadores','sintactico2.py',212),
  ('operadores -> DIVISION','operadores',1,'p_operadores','sintactico2.py',213),
  ('operadores -> MODULO','operadores',1,'p_operadores','sintactico2.py',214),
  ('operador_logico -> SMALLER','operador_logico',1,'p_operador_logico','sintactico2.py',219),
  ('operador_logico -> GREATER','operador_logico',1,'p_operador_logico','sintactico2.py',220),
  ('operador_logico -> IS_SMALLER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico2.py',221),
  ('operador_logico -> IS_GREATER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico2.py',222),
  ('incrementos_mat -> MINUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',227),
  ('incrementos_mat -> MOD_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',228),
  ('incrementos_mat -> MUL_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',229),
  ('incrementos_mat -> PLUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',230),
  ('incrementos_mat -> DIV_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',231),
  ('condicion_booleana -> AND','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',236),
  ('condicion_booleana -> OR','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',237),
  ('condicion_booleana -> XOR','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',238),
  ('condicion_booleana -> IS_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',239),
  ('condicion_booleana -> IS_NOT_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',240),
  ('condicion_booleana -> IS_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',241),
  ('condicion_booleana -> IS_NOT_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',242),
  ('operaciones_mat -> valor operadores valor','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',247),
  ('operaciones_mat -> valor operadores operaciones_mat','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',248),
  ('operaciones_mat -> VARIABLE operadores VARIABLE','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',249),
  ('operaciones_mat -> operaciones_mat_par','operaciones_mat',1,'p_operaciones_mat','sintactico2.py',250),
  ('operaciones_mat_par -> LPAREN valor operadores valor RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',255),
  ('operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',256),
  ('operaciones_mat_par -> LPAREN VARIABLE operadores VARIABLE RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',257),
  ('operaciones_mat_par -> LPAREN VARIABLE operadores valor RPAREN operadores valor','operaciones_mat_par',7,'p_operaciones_mat_par','sintactico2.py',258),
  ('funciones -> funcion_nparams','funciones',1,'p_funciones','sintactico2.py',263),
  ('funciones -> proteccion funcion_nparams','funciones',2,'p_funciones','sintactico2.py',264),
  ('funciones -> funcion_blank','funciones',1,'p_funciones','sintactico2.py',265),
  ('funciones -> proteccion funcion_blank','funciones',2,'p_funciones','sintactico2.py',266),
  ('funciones -> funcion_void','funciones',1,'p_funciones','sintactico2.py',267),
  ('param -> VARIABLE','param',1,'p_param','sintactico2.py',272),
  ('param -> asignacion','param',1,'p_param','sintactico2.py',273),
  ('funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def','funcion_nparams',6,'p_funcion_nparams','sintactico2.py',278),
  ('params_list -> params_list COMMA param','params_list',3,'p_params_list','sintactico2.py',282),
  ('params_list -> param','params_list',1,'p_params_list','sintactico2.py',283),
  ('funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE','funcion_void',9,'p_funcion_void','sintactico2.py',287),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def','funcion_blank',5,'p_funcion_blank','sintactico2.py',291),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE','funcion_blank',7,'p_funcion_blank','sintactico2.py',292),
  ('llamada_funcion -> NOMBRE LPAREN params_list RPAREN SEMI','llamada_funcion',5,'p_llamada_funcion','sintactico2.py',296),
  ('brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI','brand',7,'p_brand','sintactico2.py',299),
  ('proteccion -> PUBLIC','proteccion',1,'p_proteccion','sintactico2.py',303),
  ('proteccion -> PRIVATE','proteccion',1,'p_proteccion','sintactico2.py',304),
  ('proteccion -> PROTECTED','proteccion',1,'p_proteccion','sintactico2.py',305),
  ('proteccion -> STATIC','proteccion',1,'p_proteccion','sintactico2.py',306),
  ('breturn -> empty','breturn',1,'p_breturn','sintactico2.py',310),
  ('breturn -> RETURN SEMI','breturn',2,'p_breturn','sintactico2.py',311),
  ('breturn -> RETURN NULL SEMI','breturn',3,'p_breturn','sintactico2.py',312),
  ('breturn -> RETURN VARIABLE SEMI','breturn',3,'p_breturn','sintactico2.py',313),
  ('breturn -> RETURN BOOLEANO SEMI','breturn',3,'p_breturn','sintactico2.py',314),
  ('array_def -> ARRAY LPAREN RPAREN','array_def',3,'p_array_def','sintactico2.py',321),
  ('array_def -> ARRAY LPAREN array_elmnt RPAREN','array_def',4,'p_array_def','sintactico2.py',322),
  ('array_elmnt -> array_elmnt COMMA valor','array_elmnt',3,'p_array_elmnt','sintactico2.py',325),
  ('array_elmnt -> valor','array_elmnt',1,'p_array_elmnt','sintactico2.py',326),
  ('empty -> <empty>','empty',0,'p_empty','sintactico2.py',329),
  ('bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI','bcolas',7,'p_bcolas','sintactico2.py',334),
  ('bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI','bpila',7,'p_bpila','sintactico2.py',339),
  ('lectura -> READLINE LPAREN CADENA RPAREN SEMI','lectura',5,'p_lectura','sintactico2.py',344),
  ('lectura -> READLINE LPAREN RPAREN SEMI','lectura',4,'p_lectura','sintactico2.py',345),
  ('escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI','escribir',7,'p_escribir','sintactico2.py',348),
  ('btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI','btrim',8,'p_btrim','sintactico2.py',352),
  ('comment -> COMENTARIOS','comment',1,'p_comment','sintactico2.py',357),
  ('comment -> DOC_COMENTARIOS','comment',1,'p_comment','sintactico2.py',358),
  ('bgoto -> GOTO NOMBRE SEMI','bgoto',3,'p_bgoto','sintactico2.py',362),
  ('bcortes -> EXIT SEMI','bcortes',2,'p_bcortes','sintactico2.py',366),
  ('bcortes -> BREAK SEMI','bcortes',2,'p_bcortes','sintactico2.py',367),
  ('bcortes -> DEFAULT SEMI','bcortes',2,'p_bcortes','sintactico2.py',368),
  ('bcortes -> CONTINUE SEMI','bcortes',2,'p_bcortes','sintactico2.py',369),
  ('otros -> SMALLER NOMBRE GREATER','otros',3,'p_otros','sintactico2.py',373),
  ('otros -> NOMBRE COLON','otros',2,'p_otros','sintactico2.py',374),
  ('comprobacion -> NOMBRE LPAREN valor RPAREN','comprobacion',4,'p_comprobacion','sintactico2.py',381),
  ('comprobacion -> NOMBRE LPAREN VARIABLE RPAREN','comprobacion',4,'p_comprobacion','sintactico2.py',382),
  ('simbolos -> LPAREN RPAREN','simbolos',2,'p_simbolos','sintactico2.py',386),
  ('simbolos -> LPAREN','simbolos',1,'p_simbolos','sintactico2.py',387),
  ('simbolos -> RPAREN','simbolos',1,'p_simbolos','sintactico2.py',388),
  ('simbolos -> LBRACKET RBRACKET','simbolos',2,'p_simbolos','sintactico2.py',389),
  ('simbolos -> LBRACKET','simbolos',1,'p_simbolos','sintactico2.py',390),
  ('simbolos -> RBRACKET','simbolos',1,'p_simbolos','sintactico2.py',391),
  ('simbolos -> LBRACE RBRACE','simbolos',2,'p_simbolos','sintactico2.py',392),
  ('simbolos -> LBRACE','simbolos',1,'p_simbolos','sintactico2.py',393),
  ('simbolos -> RBRACE instrucciones','simbolos',2,'p_simbolos','sintactico2.py',394),
  ('simbolos -> OPEN_TAG CLOSE_TAG','simbolos',2,'p_simbolos','sintactico2.py',395),
  ('simbolos -> OPEN_TAG','simbolos',1,'p_simbolos','sintactico2.py',396),
  ('simbolos -> CLOSE_TAG','simbolos',1,'p_simbolos','sintactico2.py',397),
  ('instrucciones -> condicion_else','instrucciones',1,'p_instrucciones','sintactico2.py',402),
  ('instrucciones -> condicion_elseif','instrucciones',1,'p_instrucciones','sintactico2.py',403),
  ('instrucciones -> bwhile','instrucciones',1,'p_instrucciones','sintactico2.py',404),
  ('instrucciones -> bfor','instrucciones',1,'p_instrucciones','sintactico2.py',405),
  ('bconcat -> CADENA CONCAT CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',410),
  ('bconcat -> VARIABLE CONCAT VARIABLE SEMI','bconcat',4,'p_bconcat','sintactico2.py',411),
  ('bconcat -> VARIABLE CONCAT CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',412),
  ('bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',413),
  ('bconcat -> CADENA CONCAT_EQUAL CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',414),
  ('tiposCast -> STRING','tiposCast',1,'p_tiposCast','sintactico2.py',419),
  ('tiposCast -> BOOL','tiposCast',1,'p_tiposCast','sintactico2.py',420),
  ('tiposCast -> BOOLEAN','tiposCast',1,'p_tiposCast','sintactico2.py',421),
  ('tiposCast -> DOUBLE','tiposCast',1,'p_tiposCast','sintactico2.py',422),
  ('tiposCast -> FLOAT','tiposCast',1,'p_tiposCast','sintactico2.py',423),
  ('tiposCast -> ARRAY','tiposCast',1,'p_tiposCast','sintactico2.py',424),
  ('tiposCast -> OBJECT','tiposCast',1,'p_tiposCast','sintactico2.py',425),
  ('tiposCast -> INTEGER','tiposCast',1,'p_tiposCast','sintactico2.py',426),
  ('tiposCast -> INT','tiposCast',1,'p_tiposCast','sintactico2.py',427),
  ('casting -> VARIABLE EQUALS LPAREN tiposCast RPAREN VARIABLE SEMI','casting',7,'p_casting','sintactico2.py',433),
  ('casting -> LPAREN tiposCast RPAREN VARIABLE SEMI','casting',5,'p_casting','sintactico2.py',434),
  ('aumentoCasting -> VARIABLE incrementos_mat tipoDato SEMI','aumentoCasting',4,'p_aumentoCasting','sintactico2.py',438),
  ('aumentoCasting -> VARIABLE EQUALS VARIABLE operadores tipoDato SEMI','aumentoCasting',6,'p_aumentoCasting','sintactico2.py',439),
]
