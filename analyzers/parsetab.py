
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY AS BOOL BOOLEAN BOOLEANO BREAK CADENA CASE CATCH CLOSE_TAG COLON COMENTARIOS COMMA CONCAT CONCAT_EQUAL CONTINUE DECIMAL DEFAULT DEFINE DIVISION DIV_EQUAL DO DOC_COMENTARIOS DOUBLE ECHO ELSE ELSEIF ENTERO EQUALS EXIT FLOAT FOR FOREACH FUNCTION FWRITE GOTO GREATER IF INT INTEGER IS_EQUAL IS_GREATER_OR_EQUAL IS_IDENTICAL IS_NOT_EQUAL IS_NOT_IDENTICAL IS_SMALLER_OR_EQUAL LBRACE LBRACKET LPAREN MINUS_EQUAL MODULO MOD_EQUAL MULTIPLICACION MUL_EQUAL NEW NOMBRE NULL OBJECT OPEN_TAG OR PLUS_EQUAL PRINT PRIVATE PROTECTED PUBLIC RAND RBRACE RBRACKET READLINE RESTA RETURN RPAREN SEMI SMALLER SPLQUEUE SPLSTACK STATIC STRING SUMA SWITCH TRIM TRY VAR VARIABLE VOID WHILE XORcuerpo : imprimir\n            | asignacion\n            | funciones\n            | llamada_funcion\n            | constante\n            | lectura\n            | bwhile\n            | bdo\n            | bfor\n            | bforeach\n            | btry\n            | condicion_ifelse\n            | condicion_else\n            | condicion_elseif\n            | bswitch\n            | bcase\n            | bgoto\n            | bcolas\n            | bpila\n            | bcortes\n            | brand\n            | escribir\n            | btrim\n            | otros\n            | breturn\n            | comment\n            | casting\n            | bconcat\n            | simbolos\n  asignacion : VARIABLE EQUALS valor SEMI\n                | VAR asignacion\n                | proteccion asignacion\n                | VARIABLE EQUALS brand\n                | VARIABLE EQUALS escribir\n                | VARIABLE EQUALS btrim\n                | VARIABLE EQUALS lectura\n                | VARIABLE EQUALS bconcat\n                | asignacion_array\n                | VARIABLE EQUALS operaciones_mat SEMI\n                | aumentoCasting\n  asignacion_array : VARIABLE EQUALS array_def SEMIconstante : DEFINE LPAREN CADENA COMMA valor RPAREN SEMI\n          | DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMIvalor : tipoDato\n            | bcolas\n            | bpila\n  tipoDato : numero\n            | CADENA\n            | BOOLEANO\n  numero : ENTERO\n          | DECIMAL\n  imprimir : ECHO valor SEMI\n            | PRINT valor SEMI\n            | PRINT LPAREN valor RPAREN SEMI\n            | ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI\n            | ECHO bconcat\n            | ECHO operaciones_mat SEMI\n            | PRINT operaciones_mat SEMI\n  condicion_if :  IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_elseif :  ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE\n  condicion_else :  ELSE LBRACE cuerpo RBRACE\n  condicion_ifelse : condicion_if\n                      | condicion_if condicion_else\n                      | condicion_if condicion_elseif\n                      | condicion_if condicion_elseif condicion_else\n   condicion : VARIABLE operador_logico VARIABLE\n            | valor operador_logico valor \n            | VARIABLE operador_logico valor\n            | VARIABLE condicion_booleana VARIABLE\n            | valor condicion_booleana valor\n            | VARIABLE condicion_booleana valor\n            | LPAREN VARIABLE operadores valor RPAREN operador_logico valor\n            | LPAREN VARIABLE operadores valor RPAREN condicion_booleana valor\n            | condicion condicion_booleana condicion\n            | condicion condicion_booleana comprobacion\n            \n  bfor : FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_defstc_bloque : stc_bloque SEMI cuerpo\n        | breturn\n        stc_bloque_def : LBRACE stc_bloque RBRACEfor_incr : VARIABLE SUMA SUMA\n          | SUMA SUMA VARIABLE\n          | VARIABLE RESTA RESTA\n          | RESTA RESTA VARIABLE\n          | VARIABLE SUMA EQUALS numero\n          | VARIABLE RESTA EQUALS numerobforeach :  FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def bwhile : WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE \n  | WHILE LPAREN condicion RPAREN COLON stc_bloque  \n   bdo : DO LBRACE cuerpo RBRACE bwhile \n   bswitch : SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACEbcase : CASE ENTERO COLON innerSwitch : bcase cuerpo BREAK SEMI\n                 | CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch \n  btry : TRY LBRACE stc_bloque_def RBRACE catchescatches : catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def\n          | emptyoperadores : SUMA \n                  | RESTA\n                  | MULTIPLICACION\n                  | DIVISION\n                  | MODULO\n  operador_logico :  SMALLER\n                        | GREATER\n                        | IS_SMALLER_OR_EQUAL\n                        | IS_GREATER_OR_EQUAL\n  incrementos_mat :  MINUS_EQUAL\n                        | MOD_EQUAL\n                        | MUL_EQUAL\n                        | PLUS_EQUAL\n                        | DIV_EQUAL\n  condicion_booleana :  AND\n                        | OR\n                        | XOR\n                        | IS_EQUAL\n                        | IS_NOT_EQUAL\n                        | IS_IDENTICAL\n                        | IS_NOT_IDENTICAL\n  operaciones_mat :  valor operadores valor\n                        | valor operadores operaciones_mat\n                        | VARIABLE operadores VARIABLE\n                        | operaciones_mat_par\n                       \n  operaciones_mat_par :  LPAREN valor operadores valor RPAREN\n                          |  LPAREN valor operadores operaciones_mat_par RPAREN\n                          | LPAREN VARIABLE operadores valor RPAREN operadores valor\n  funciones : funcion_nparams\n              | proteccion funcion_nparams\n              | funcion_blank\n              | proteccion funcion_blank\n              | funcion_void\n  param : VARIABLE\n          | asignacion\n          funcion_nparams : FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_defparams_list : params_list COMMA param\n                 | param\n  funcion_void : FUNCTION NOMBRE LPAREN  RPAREN COLON VOID LBRACE empty RBRACE funcion_blank : FUNCTION NOMBRE LPAREN  RPAREN stc_bloque_def\n                    | FUNCTION NOMBRE LPAREN  RPAREN LBRACE empty RBRACE\n  llamada_funcion : NOMBRE LPAREN params_list RPAREN SEMIbrand : RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMIproteccion : PUBLIC\n          | PRIVATE\n          | PROTECTED\n          | STATIC\n  breturn : empty\n        | RETURN SEMI \n        | RETURN NULL SEMI\n        | RETURN VARIABLE SEMI\n        | RETURN BOOLEANO SEMI\n        array_def : ARRAY LPAREN RPAREN\n          | ARRAY LPAREN array_elmnt RPARENarray_elmnt : array_elmnt COMMA valor\n            | valorempty :  bcolas : VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI\n  bpila : VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMIlectura : READLINE LPAREN CADENA RPAREN SEMI\n          | READLINE LPAREN RPAREN SEMIescribir : FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI\n   btrim : TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI\n   comment : COMENTARIOS\n              | DOC_COMENTARIOS\n   bgoto : GOTO NOMBRE SEMIbcortes : EXIT SEMI\n              | BREAK SEMI\n              | DEFAULT SEMI\n              | CONTINUE SEMI\n   otros : SMALLER NOMBRE GREATER\n   \n    comprobacion : NOMBRE LPAREN valor RPAREN\n                  | NOMBRE LPAREN VARIABLE RPAREN\n  \n  simbolos : LPAREN RPAREN\n            | LPAREN\n            | RPAREN\n            | LBRACKET RBRACKET\n            | LBRACKET\n            | RBRACKET\n            | LBRACE RBRACE\n            | LBRACE\n            | RBRACE instrucciones\n            | OPEN_TAG CLOSE_TAG\n            | OPEN_TAG\n            | CLOSE_TAG\n  \n    instrucciones : condicion_else\n                  | condicion_elseif\n                  | bwhile\n                  | bfor\n  bconcat : CADENA CONCAT CADENA SEMI\n            |  VARIABLE CONCAT VARIABLE SEMI\n            | VARIABLE CONCAT CADENA SEMI\n            | VARIABLE CONCAT_EQUAL CADENA SEMI\n            | CADENA CONCAT_EQUAL CADENA SEMI\n            \n   tiposCast :  STRING\n            | BOOL\n            | BOOLEAN\n            | DOUBLE\n            | FLOAT\n            | ARRAY\n            | OBJECT \n            | INTEGER\n            | INT\n        \n            \n   casting : VARIABLE EQUALS LPAREN tiposCast RPAREN VARIABLE SEMI  \n              | LPAREN tiposCast RPAREN VARIABLE SEMI\n   \n    aumentoCasting : VARIABLE incrementos_mat tipoDato SEMI\n                    | VARIABLE EQUALS VARIABLE operadores tipoDato SEMI\n  '
    
_lr_action_items = {'ECHO':([0,142,148,335,338,339,347,],[31,31,31,31,31,31,31,]),'PRINT':([0,142,148,335,338,339,347,],[32,32,32,32,32,32,32,]),'VARIABLE':([0,31,32,39,40,41,42,71,76,77,78,79,95,98,113,115,116,124,126,127,135,142,143,144,148,149,150,167,169,170,171,172,173,174,177,184,191,192,193,194,195,198,205,213,218,235,241,242,246,247,248,249,253,254,255,256,257,258,259,260,262,263,265,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,286,311,318,319,332,335,338,339,347,352,357,363,380,394,395,400,401,407,408,418,420,],[38,91,100,125,125,-38,-40,163,-140,-141,-142,-143,180,180,187,189,201,-31,125,-32,215,38,125,219,38,215,225,215,100,-97,-98,-99,-100,-101,240,244,-33,-34,-35,-36,-37,180,189,266,215,187,302,302,187,240,-30,-39,-41,302,-187,-188,-189,-202,187,302,-186,-190,-157,215,-111,-112,-113,-114,-115,-116,-117,325,327,-102,-103,-104,-105,302,302,333,355,-156,302,365,38,38,38,38,-203,302,390,302,416,417,-139,-158,302,302,426,-159,]),'VAR':([0,39,40,76,77,78,79,113,126,142,143,148,235,246,259,335,338,339,347,],[39,39,39,-140,-141,-142,-143,39,39,39,39,39,39,39,39,39,39,39,39,]),'NOMBRE':([0,31,61,69,80,130,131,142,148,158,159,268,269,270,271,272,273,274,275,295,335,338,339,347,397,],[35,83,152,160,166,206,208,35,35,229,230,324,-111,-112,-113,-114,-115,-116,-117,342,35,35,35,35,418,]),'DEFINE':([0,142,148,335,338,339,347,],[46,46,46,46,46,46,46,]),'READLINE':([0,115,142,148,205,335,338,339,347,],[48,48,48,48,48,48,48,48,48,]),'WHILE':([0,51,142,148,284,335,338,339,347,],[49,49,49,49,49,49,49,49,49,]),'DO':([0,142,148,335,338,339,347,],[52,52,52,52,52,52,52,]),'FOR':([0,51,142,148,335,338,339,347,],[53,53,53,53,53,53,53,53,]),'FOREACH':([0,142,148,335,338,339,347,],[54,54,54,54,54,54,54,]),'TRY':([0,142,148,335,338,339,347,],[55,55,55,55,55,55,55,]),'ELSE':([0,51,56,142,147,148,335,338,339,347,398,405,],[57,57,57,57,57,57,57,57,57,57,-60,-59,]),'ELSEIF':([0,51,56,142,148,335,338,339,347,405,],[58,58,58,58,58,58,58,58,58,-59,]),'SWITCH':([0,142,148,335,338,339,347,],[59,59,59,59,59,59,59,]),'CASE':([0,142,148,335,338,339,347,],[60,60,60,60,60,60,60,]),'GOTO':([0,142,148,335,338,339,347,],[61,61,61,61,61,61,61,]),'EXIT':([0,142,148,335,338,339,347,],[62,62,62,62,62,62,62,]),'BREAK':([0,142,148,335,338,339,347,],[63,63,63,63,63,63,63,]),'DEFAULT':([0,142,148,335,338,339,347,],[64,64,64,64,64,64,64,]),'CONTINUE':([0,142,148,335,338,339,347,],[65,65,65,65,65,65,65,]),'RAND':([0,115,142,148,205,335,338,339,347,],[66,66,66,66,66,66,66,66,66,]),'FWRITE':([0,115,142,148,205,335,338,339,347,],[67,67,67,67,67,67,67,67,67,]),'TRIM':([0,115,142,148,205,335,338,339,347,],[68,68,68,68,68,68,68,68,68,]),'SMALLER':([0,84,87,88,89,93,94,96,101,142,148,215,216,335,338,339,347,381,382,387,],[69,-50,-44,-45,-46,-47,-49,-51,-48,69,69,278,278,69,69,69,69,-154,-155,278,]),'RETURN':([0,142,148,220,320,321,335,338,339,345,347,],[71,71,71,71,71,71,71,71,71,71,71,]),'COMENTARIOS':([0,142,148,335,338,339,347,],[72,72,72,72,72,72,72,]),'DOC_COMENTARIOS':([0,142,148,335,338,339,347,],[73,73,73,73,73,73,73,]),'LPAREN':([0,31,32,35,41,42,46,48,49,53,54,58,59,66,67,68,81,115,124,127,135,142,148,149,166,167,169,170,171,172,173,174,191,192,193,194,195,200,205,206,218,230,241,248,249,250,251,253,255,256,257,258,262,263,265,268,269,270,271,272,273,274,275,318,324,335,338,339,347,352,370,400,401,420,],[33,95,98,113,-38,-40,131,134,135,143,144,149,150,157,158,159,167,198,-31,-32,213,33,33,213,235,213,95,-97,-98,-99,-100,-101,-33,-34,-35,-36,-37,254,95,259,213,295,95,-30,-39,309,310,-41,-187,-188,-189,-202,-186,-190,-157,213,-111,-112,-113,-114,-115,-116,-117,-156,363,33,33,33,33,-203,397,-139,-158,-159,]),'CADENA':([0,31,32,41,42,95,98,115,116,117,118,119,120,121,122,123,124,127,131,132,133,134,135,142,148,149,167,169,170,171,172,173,174,191,192,193,194,195,198,205,218,241,242,247,248,249,253,254,255,256,257,258,260,262,263,265,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,294,318,319,335,338,339,347,352,357,363,380,400,401,407,408,420,],[47,90,101,-38,-40,101,101,90,202,203,101,-106,-107,-108,-109,-110,-31,-32,207,209,210,211,101,47,47,101,101,101,-97,-98,-99,-100,-101,-33,-34,-35,-36,-37,101,90,101,101,101,101,-30,-39,-41,101,-187,-188,-189,-202,101,-186,-190,-157,101,-111,-112,-113,-114,-115,-116,-117,101,101,-102,-103,-104,-105,101,101,341,-156,101,47,47,47,47,-203,101,101,101,-139,-158,101,101,-159,]),'RPAREN':([0,33,41,42,84,87,88,89,93,94,96,101,102,104,105,106,107,108,109,110,111,112,124,127,134,142,148,182,185,186,187,188,191,192,193,194,195,211,214,224,225,235,236,248,249,252,253,254,255,256,257,258,259,262,263,265,296,300,301,303,307,309,310,313,314,316,317,318,322,323,325,326,327,328,329,330,333,335,338,339,340,341,342,347,349,350,352,360,364,375,381,382,384,389,390,400,401,406,409,410,412,414,416,417,420,422,423,424,425,426,],[34,103,-38,-40,-50,-44,-45,-46,-47,-49,-51,-48,184,-191,-192,-193,-194,-195,-196,-197,-198,-199,-31,-32,212,34,34,243,245,-134,-130,-131,-33,-34,-35,-36,-37,264,267,291,292,297,298,-30,-39,311,-41,312,-187,-188,-189,-202,315,-186,-190,-157,343,349,350,351,-133,353,354,356,-152,358,359,-156,-74,-75,-66,-68,-69,-71,-67,-70,368,34,34,34,373,374,375,34,-122,-123,-203,387,391,402,-154,-155,-151,409,410,-139,-158,-124,-168,-169,-80,-82,-81,-83,-159,-72,-73,-84,-85,428,]),'LBRACKET':([0,83,142,148,335,338,339,347,],[36,175,36,36,36,36,36,36,]),'RBRACKET':([0,36,142,148,239,335,338,339,347,],[37,114,37,37,299,37,37,37,37,]),'LBRACE':([0,52,55,57,142,145,148,267,291,292,297,298,315,335,338,339,343,347,368,378,391,428,],[50,142,145,148,50,220,50,320,338,339,345,347,345,50,50,50,220,50,220,404,220,220,]),'RBRACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,37,41,42,43,44,45,50,56,70,72,73,74,75,85,103,114,124,127,128,129,136,137,138,139,140,141,142,146,147,148,153,154,155,156,161,165,168,176,181,183,191,192,193,194,195,217,220,221,222,223,226,227,231,232,233,234,248,249,253,255,256,257,258,262,263,265,287,288,289,290,304,305,306,318,320,321,331,334,335,336,337,338,339,344,345,347,348,352,361,362,369,371,376,377,379,381,382,383,385,386,388,396,398,399,400,401,403,404,405,411,419,420,421,427,429,],[51,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-171,-172,-174,-175,-38,-40,-125,-127,-129,136,-62,-144,-160,-161,-180,-181,-56,-170,-173,-31,-32,-126,-128,-176,-178,-182,-183,-184,-185,51,-63,-64,51,-163,-164,-165,-166,-145,-179,-52,-57,-53,-58,-33,-34,-35,-36,-37,284,-153,289,-65,290,-91,-162,-167,-146,-147,-148,-30,-39,-41,-187,-188,-189,-202,-186,-190,-157,334,-78,-153,-61,-54,-201,-138,-156,-153,-153,-89,-79,51,-94,-96,51,51,-136,-153,51,-55,-203,388,-88,-77,398,-132,403,405,-154,-155,-200,-42,-43,-87,-86,-60,419,-139,-158,-137,-153,-59,-76,-90,-159,427,-135,-95,]),'OPEN_TAG':([0,142,148,335,338,339,347,],[74,74,74,74,74,74,74,]),'CLOSE_TAG':([0,74,142,148,335,338,339,347,],[75,165,75,75,75,75,75,75,]),'PUBLIC':([0,39,40,76,77,78,79,113,126,142,143,148,235,246,259,335,338,339,347,],[76,76,76,-140,-141,-142,-143,76,76,76,76,76,76,76,76,76,76,76,76,]),'PRIVATE':([0,39,40,76,77,78,79,113,126,142,143,148,235,246,259,335,338,339,347,],[77,77,77,-140,-141,-142,-143,77,77,77,77,77,77,77,77,77,77,77,77,]),'PROTECTED':([0,39,40,76,77,78,79,113,126,142,143,148,235,246,259,335,338,339,347,],[78,78,78,-140,-141,-142,-143,78,78,78,78,78,78,78,78,78,78,78,78,]),'STATIC':([0,39,40,76,77,78,79,113,126,142,143,148,235,246,259,335,338,339,347,],[79,79,79,-140,-141,-142,-143,79,79,79,79,79,79,79,79,79,79,79,79,]),'FUNCTION':([0,40,76,77,78,79,142,148,335,338,339,347,],[80,130,-140,-141,-142,-143,80,80,80,80,80,80,]),'IF':([0,142,148,335,338,339,347,],[81,81,81,81,81,81,81,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,37,41,42,43,44,45,50,56,70,72,73,74,75,85,103,114,124,127,128,129,136,137,138,139,140,141,146,147,153,154,155,156,161,165,168,176,181,183,191,192,193,194,195,222,226,227,231,232,233,234,248,249,253,255,256,257,258,262,263,265,288,289,290,304,305,306,318,321,331,334,335,336,337,344,348,352,362,369,376,381,382,383,385,386,388,396,398,400,401,403,405,411,419,420,427,429,],[-153,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-171,-172,-174,-175,-38,-40,-125,-127,-129,-177,-62,-144,-160,-161,-180,-181,-56,-170,-173,-31,-32,-126,-128,-176,-178,-182,-183,-184,-185,-63,-64,-163,-164,-165,-166,-145,-179,-52,-57,-53,-58,-33,-34,-35,-36,-37,-65,-91,-162,-167,-146,-147,-148,-30,-39,-41,-187,-188,-189,-202,-186,-190,-157,-78,-153,-61,-54,-201,-138,-156,-153,-89,-79,-153,-94,-96,-136,-55,-203,-88,-77,-132,-154,-155,-200,-42,-43,-87,-86,-60,-139,-158,-137,-59,-76,-90,-159,-135,-95,]),'SEMI':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,36,37,41,42,43,44,45,50,56,62,63,64,65,70,71,72,73,74,75,82,84,85,86,87,88,89,90,92,93,94,96,97,99,101,103,114,124,127,128,129,136,137,138,139,140,141,146,147,152,153,154,155,156,161,162,163,164,165,168,176,181,183,190,191,192,193,194,195,196,199,201,202,203,204,209,210,212,220,222,226,227,231,232,233,234,237,238,240,243,244,245,248,249,253,255,256,257,258,262,263,264,265,285,287,288,289,290,299,304,305,306,308,312,318,320,321,322,323,325,326,327,328,329,330,331,334,335,336,337,339,344,345,348,349,350,352,353,354,355,356,358,359,361,362,369,372,373,374,376,377,381,382,383,385,386,388,396,398,400,401,402,403,405,406,409,410,411,419,420,422,423,427,429,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-171,-172,-174,-175,-38,-40,-125,-127,-129,-177,-62,153,154,155,156,-144,161,-160,-161,-180,-181,168,-50,-56,176,-44,-45,-46,-48,-121,-47,-49,-51,181,183,-48,-170,-173,-31,-32,-126,-128,-176,-178,-182,-183,-184,-185,-63,-64,227,-163,-164,-165,-166,-145,232,233,234,-179,-52,-57,-53,-58,248,-33,-34,-35,-36,-37,249,253,255,256,257,258,262,263,265,-153,-65,-91,-162,-167,-146,-147,-148,-118,-119,-120,304,305,306,-30,-39,-41,-187,-188,-189,-202,-186,-190,318,-157,332,335,-78,-153,-61,348,-54,-201,-138,352,-149,-156,-153,-153,-74,-75,-66,-68,-69,-71,-67,-70,-89,-79,-153,-94,-96,-153,-136,-153,-55,-122,-123,-203,381,382,383,-150,385,386,335,335,-77,399,400,401,-132,-144,-154,-155,-200,-42,-43,-87,-86,-60,-139,-158,420,-137,-59,-124,-168,-169,-76,-90,-159,-72,-73,-135,-95,]),'BOOLEANO':([31,32,41,42,71,95,98,115,118,119,120,121,122,123,124,127,135,149,167,169,170,171,172,173,174,191,192,193,194,195,198,205,218,241,242,247,248,249,253,254,255,256,257,258,260,262,263,265,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,318,319,352,357,363,380,400,401,407,408,420,],[94,94,-38,-40,164,94,94,94,94,-106,-107,-108,-109,-110,-31,-32,94,94,94,94,-97,-98,-99,-100,-101,-33,-34,-35,-36,-37,94,94,94,94,94,94,-30,-39,-41,94,-187,-188,-189,-202,94,-186,-190,-157,94,-111,-112,-113,-114,-115,-116,-117,94,94,-102,-103,-104,-105,94,94,-156,94,-203,94,94,94,-139,-158,94,94,-159,]),'ENTERO':([31,32,41,42,60,95,98,115,118,119,120,121,122,123,124,127,135,149,157,167,169,170,171,172,173,174,175,191,192,193,194,195,198,205,218,241,242,247,248,249,253,254,255,256,257,258,260,262,263,265,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,293,318,319,352,357,363,380,400,401,407,408,413,415,420,],[84,84,-38,-40,151,84,84,84,84,-106,-107,-108,-109,-110,-31,-32,84,84,228,84,84,-97,-98,-99,-100,-101,239,-33,-34,-35,-36,-37,84,84,84,84,84,84,-30,-39,-41,84,-187,-188,-189,-202,84,-186,-190,-157,84,-111,-112,-113,-114,-115,-116,-117,84,84,-102,-103,-104,-105,84,84,340,-156,84,-203,84,84,84,-139,-158,84,84,84,84,-159,]),'DECIMAL':([31,32,41,42,95,98,115,118,119,120,121,122,123,124,127,135,149,167,169,170,171,172,173,174,191,192,193,194,195,198,205,218,241,242,247,248,249,253,254,255,256,257,258,260,262,263,265,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,318,319,352,357,363,380,400,401,407,408,413,415,420,],[96,96,-38,-40,96,96,96,96,-106,-107,-108,-109,-110,-31,-32,96,96,96,96,-97,-98,-99,-100,-101,-33,-34,-35,-36,-37,96,96,96,96,96,96,-30,-39,-41,96,-187,-188,-189,-202,96,-186,-190,-157,96,-111,-112,-113,-114,-115,-116,-117,96,96,-102,-103,-104,-105,96,96,-156,96,-203,96,96,96,-139,-158,96,96,96,96,-159,]),'STRING':([33,198,],[104,104,]),'BOOL':([33,198,],[105,105,]),'BOOLEAN':([33,198,],[106,106,]),'DOUBLE':([33,198,],[107,107,]),'FLOAT':([33,198,],[108,108,]),'ARRAY':([33,115,198,205,261,],[109,200,109,200,317,]),'OBJECT':([33,198,],[110,110,]),'INTEGER':([33,198,],[111,111,]),'INT':([33,198,],[112,112,]),'EQUALS':([38,91,100,125,180,187,189,215,302,325,327,390,392,393,],[115,178,178,205,178,205,178,178,178,178,178,178,413,415,]),'CONCAT':([38,47,90,91,189,],[116,132,132,116,116,]),'CONCAT_EQUAL':([38,47,90,91,189,],[117,133,133,117,117,]),'MINUS_EQUAL':([38,125,187,],[119,119,119,]),'MOD_EQUAL':([38,125,187,],[120,120,120,]),'MUL_EQUAL':([38,125,187,],[121,121,121,]),'PLUS_EQUAL':([38,125,187,],[122,122,122,]),'DIV_EQUAL':([38,125,187,],[123,123,123,]),'COMMA':([41,42,84,87,88,89,93,94,96,101,124,127,185,186,187,188,191,192,193,194,195,207,208,228,229,248,249,253,255,256,257,258,262,263,265,296,307,313,314,318,352,381,382,384,400,401,420,],[-38,-40,-50,-44,-45,-46,-47,-49,-51,-48,-31,-32,246,-134,-130,-131,-33,-34,-35,-36,-37,260,261,293,294,-30,-39,-41,-187,-188,-189,-202,-186,-190,-157,246,-133,357,-152,-156,-203,-154,-155,-151,-139,-158,-159,]),'NULL':([71,],[162,]),'SUMA':([82,84,87,88,89,90,91,93,94,96,97,100,101,179,180,182,189,190,237,266,332,351,365,366,381,382,392,],[170,-50,-44,-45,-46,-48,170,-47,-49,-51,170,170,-48,170,170,170,170,170,170,170,366,170,392,394,-154,-155,412,]),'RESTA':([82,84,87,88,89,90,91,93,94,96,97,100,101,179,180,182,189,190,237,266,332,351,365,367,381,382,393,],[171,-50,-44,-45,-46,-48,171,-47,-49,-51,171,171,-48,171,171,171,171,171,171,171,367,171,393,395,-154,-155,414,]),'MULTIPLICACION':([82,84,87,88,89,90,91,93,94,96,97,100,101,179,180,182,189,190,237,266,351,381,382,],[172,-50,-44,-45,-46,-48,172,-47,-49,-51,172,172,-48,172,172,172,172,172,172,172,172,-154,-155,]),'DIVISION':([82,84,87,88,89,90,91,93,94,96,97,100,101,179,180,182,189,190,237,266,351,381,382,],[173,-50,-44,-45,-46,-48,173,-47,-49,-51,173,173,-48,173,173,173,173,173,173,173,173,-154,-155,]),'MODULO':([82,84,87,88,89,90,91,93,94,96,97,100,101,179,180,182,189,190,237,266,351,381,382,],[174,-50,-44,-45,-46,-48,174,-47,-49,-51,174,174,-48,174,174,174,174,174,174,174,174,-154,-155,]),'GREATER':([84,87,88,89,93,94,96,101,160,215,216,381,382,387,],[-50,-44,-45,-46,-47,-49,-51,-48,231,279,279,-154,-155,279,]),'IS_SMALLER_OR_EQUAL':([84,87,88,89,93,94,96,101,215,216,381,382,387,],[-50,-44,-45,-46,-47,-49,-51,-48,280,280,-154,-155,280,]),'IS_GREATER_OR_EQUAL':([84,87,88,89,93,94,96,101,215,216,381,382,387,],[-50,-44,-45,-46,-47,-49,-51,-48,281,281,-154,-155,281,]),'AND':([84,87,88,89,93,94,96,101,214,215,216,224,236,285,322,323,325,326,327,328,329,330,381,382,387,409,410,422,423,],[-50,-44,-45,-46,-47,-49,-51,-48,269,269,269,269,269,269,269,-75,-66,-68,-69,-71,-67,-70,-154,-155,269,-168,-169,-72,-73,]),'OR':([84,87,88,89,93,94,96,101,214,215,216,224,236,285,322,323,325,326,327,328,329,330,381,382,387,409,410,422,423,],[-50,-44,-45,-46,-47,-49,-51,-48,270,270,270,270,270,270,270,-75,-66,-68,-69,-71,-67,-70,-154,-155,270,-168,-169,-72,-73,]),'XOR':([84,87,88,89,93,94,96,101,214,215,216,224,236,285,322,323,325,326,327,328,329,330,381,382,387,409,410,422,423,],[-50,-44,-45,-46,-47,-49,-51,-48,271,271,271,271,271,271,271,-75,-66,-68,-69,-71,-67,-70,-154,-155,271,-168,-169,-72,-73,]),'IS_EQUAL':([84,87,88,89,93,94,96,101,214,215,216,224,236,285,322,323,325,326,327,328,329,330,381,382,387,409,410,422,423,],[-50,-44,-45,-46,-47,-49,-51,-48,272,272,272,272,272,272,272,-75,-66,-68,-69,-71,-67,-70,-154,-155,272,-168,-169,-72,-73,]),'IS_NOT_EQUAL':([84,87,88,89,93,94,96,101,214,215,216,224,236,285,322,323,325,326,327,328,329,330,381,382,387,409,410,422,423,],[-50,-44,-45,-46,-47,-49,-51,-48,273,273,273,273,273,273,273,-75,-66,-68,-69,-71,-67,-70,-154,-155,273,-168,-169,-72,-73,]),'IS_IDENTICAL':([84,87,88,89,93,94,96,101,214,215,216,224,236,285,322,323,325,326,327,328,329,330,381,382,387,409,410,422,423,],[-50,-44,-45,-46,-47,-49,-51,-48,274,274,274,274,274,274,274,-75,-66,-68,-69,-71,-67,-70,-154,-155,274,-168,-169,-72,-73,]),'IS_NOT_IDENTICAL':([84,87,88,89,93,94,96,101,214,215,216,224,236,285,322,323,325,326,327,328,329,330,381,382,387,409,410,422,423,],[-50,-44,-45,-46,-47,-49,-51,-48,275,275,275,275,275,275,275,-75,-66,-68,-69,-71,-67,-70,-154,-155,275,-168,-169,-72,-73,]),'NEW':([115,178,],[197,197,]),'COLON':([151,267,297,],[226,321,346,]),'SPLQUEUE':([197,],[250,]),'SPLSTACK':([197,],[251,]),'AS':([219,],[286,]),'CATCH':([289,334,336,337,429,],[-153,-79,370,-96,-95,]),'VOID':([346,],[378,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,142,148,335,338,339,347,],[1,217,223,369,371,372,379,]),'imprimir':([0,142,148,335,338,339,347,],[2,2,2,2,2,2,2,]),'asignacion':([0,39,40,113,126,142,143,148,235,246,259,335,338,339,347,],[3,124,127,188,127,3,218,3,188,188,188,3,3,3,3,]),'funciones':([0,142,148,335,338,339,347,],[4,4,4,4,4,4,4,]),'llamada_funcion':([0,142,148,335,338,339,347,],[5,5,5,5,5,5,5,]),'constante':([0,142,148,335,338,339,347,],[6,6,6,6,6,6,6,]),'lectura':([0,115,142,148,205,335,338,339,347,],[7,194,7,7,194,7,7,7,7,]),'bwhile':([0,51,142,148,284,335,338,339,347,],[8,140,8,8,331,8,8,8,8,]),'bdo':([0,142,148,335,338,339,347,],[9,9,9,9,9,9,9,]),'bfor':([0,51,142,148,335,338,339,347,],[10,141,10,10,10,10,10,10,]),'bforeach':([0,142,148,335,338,339,347,],[11,11,11,11,11,11,11,]),'btry':([0,142,148,335,338,339,347,],[12,12,12,12,12,12,12,]),'condicion_ifelse':([0,142,148,335,338,339,347,],[13,13,13,13,13,13,13,]),'condicion_else':([0,51,56,142,147,148,335,338,339,347,],[14,138,146,14,222,14,14,14,14,14,]),'condicion_elseif':([0,51,56,142,148,335,338,339,347,],[15,139,147,15,15,15,15,15,15,]),'bswitch':([0,142,148,335,338,339,347,],[16,16,16,16,16,16,16,]),'bcase':([0,142,148,335,338,339,347,],[17,17,17,17,17,17,17,]),'bgoto':([0,142,148,335,338,339,347,],[18,18,18,18,18,18,18,]),'bcolas':([0,31,32,95,98,115,135,142,148,149,167,169,198,205,218,241,242,254,260,268,276,277,282,283,319,335,338,339,347,357,363,380,407,408,],[19,88,88,88,88,88,88,19,19,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,19,19,19,19,88,88,88,88,88,]),'bpila':([0,31,32,95,98,115,135,142,148,149,167,169,198,205,218,241,242,254,260,268,276,277,282,283,319,335,338,339,347,357,363,380,407,408,],[20,89,89,89,89,89,89,20,20,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,20,20,20,20,89,89,89,89,89,]),'bcortes':([0,142,148,335,338,339,347,],[21,21,21,21,21,21,21,]),'brand':([0,115,142,148,205,335,338,339,347,],[22,191,22,22,191,22,22,22,22,]),'escribir':([0,115,142,148,205,335,338,339,347,],[23,192,23,23,192,23,23,23,23,]),'btrim':([0,115,142,148,205,335,338,339,347,],[24,193,24,24,193,24,24,24,24,]),'otros':([0,142,148,335,338,339,347,],[25,25,25,25,25,25,25,]),'breturn':([0,142,148,220,320,321,335,338,339,345,347,],[26,26,26,288,288,288,26,26,26,288,26,]),'comment':([0,142,148,335,338,339,347,],[27,27,27,27,27,27,27,]),'casting':([0,142,148,335,338,339,347,],[28,28,28,28,28,28,28,]),'bconcat':([0,31,115,142,148,205,335,338,339,347,],[29,85,195,29,29,195,29,29,29,29,]),'simbolos':([0,142,148,335,338,339,347,],[30,30,30,30,30,30,30,]),'proteccion':([0,39,40,113,126,142,143,148,235,246,259,335,338,339,347,],[40,126,126,126,126,40,126,40,126,126,126,40,40,40,40,]),'asignacion_array':([0,39,40,113,126,142,143,148,235,246,259,335,338,339,347,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'aumentoCasting':([0,39,40,113,126,142,143,148,235,246,259,335,338,339,347,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'funcion_nparams':([0,40,142,148,335,338,339,347,],[43,128,43,43,43,43,43,43,]),'funcion_blank':([0,40,142,148,335,338,339,347,],[44,129,44,44,44,44,44,44,]),'funcion_void':([0,142,148,335,338,339,347,],[45,45,45,45,45,45,45,]),'condicion_if':([0,142,148,335,338,339,347,],[56,56,56,56,56,56,56,]),'empty':([0,142,148,220,289,320,321,335,338,339,345,347,404,],[70,70,70,70,337,70,70,70,70,70,377,70,421,]),'valor':([31,32,95,98,115,135,149,167,169,198,205,218,241,242,254,260,268,276,277,282,283,319,357,363,380,407,408,],[82,97,179,182,190,216,216,216,237,179,190,216,300,303,314,316,216,326,328,329,330,360,384,389,406,422,423,]),'operaciones_mat':([31,32,115,169,205,],[86,99,196,238,196,]),'tipoDato':([31,32,95,98,115,118,135,149,167,169,198,205,218,241,242,247,254,260,268,276,277,282,283,319,357,363,380,407,408,],[87,87,87,87,87,204,87,87,87,87,87,87,87,87,87,308,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'operaciones_mat_par':([31,32,115,169,205,241,],[92,92,92,92,92,301,]),'numero':([31,32,95,98,115,118,135,149,167,169,198,205,218,241,242,247,254,260,268,276,277,282,283,319,357,363,380,407,408,413,415,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,424,425,]),'tiposCast':([33,198,],[102,252,]),'incrementos_mat':([38,125,187,],[118,118,118,]),'instrucciones':([51,],[137,]),'operadores':([82,91,97,100,179,180,182,189,190,237,266,351,],[169,177,169,177,241,242,241,247,169,169,319,380,]),'params_list':([113,235,259,],[185,296,296,]),'param':([113,235,246,259,],[186,186,307,186,]),'array_def':([115,205,],[199,199,]),'condicion':([135,149,167,218,268,],[214,224,236,285,322,]),'stc_bloque_def':([145,297,315,343,368,391,428,],[221,344,344,376,396,411,429,]),'condicion_booleana':([214,215,216,224,236,285,322,387,],[268,277,283,268,268,268,268,408,]),'operador_logico':([215,216,387,],[276,282,407,]),'stc_bloque':([220,320,321,345,],[287,361,362,287,]),'array_elmnt':([254,],[313,]),'comprobacion':([268,],[323,]),'catches':([289,],[336,]),'for_incr':([332,],[364,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> imprimir','cuerpo',1,'p_cuerpo','sintactico2.py',10),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','sintactico2.py',11),
  ('cuerpo -> funciones','cuerpo',1,'p_cuerpo','sintactico2.py',12),
  ('cuerpo -> llamada_funcion','cuerpo',1,'p_cuerpo','sintactico2.py',13),
  ('cuerpo -> constante','cuerpo',1,'p_cuerpo','sintactico2.py',14),
  ('cuerpo -> lectura','cuerpo',1,'p_cuerpo','sintactico2.py',15),
  ('cuerpo -> bwhile','cuerpo',1,'p_cuerpo','sintactico2.py',16),
  ('cuerpo -> bdo','cuerpo',1,'p_cuerpo','sintactico2.py',17),
  ('cuerpo -> bfor','cuerpo',1,'p_cuerpo','sintactico2.py',18),
  ('cuerpo -> bforeach','cuerpo',1,'p_cuerpo','sintactico2.py',19),
  ('cuerpo -> btry','cuerpo',1,'p_cuerpo','sintactico2.py',20),
  ('cuerpo -> condicion_ifelse','cuerpo',1,'p_cuerpo','sintactico2.py',21),
  ('cuerpo -> condicion_else','cuerpo',1,'p_cuerpo','sintactico2.py',22),
  ('cuerpo -> condicion_elseif','cuerpo',1,'p_cuerpo','sintactico2.py',23),
  ('cuerpo -> bswitch','cuerpo',1,'p_cuerpo','sintactico2.py',24),
  ('cuerpo -> bcase','cuerpo',1,'p_cuerpo','sintactico2.py',25),
  ('cuerpo -> bgoto','cuerpo',1,'p_cuerpo','sintactico2.py',26),
  ('cuerpo -> bcolas','cuerpo',1,'p_cuerpo','sintactico2.py',27),
  ('cuerpo -> bpila','cuerpo',1,'p_cuerpo','sintactico2.py',28),
  ('cuerpo -> bcortes','cuerpo',1,'p_cuerpo','sintactico2.py',29),
  ('cuerpo -> brand','cuerpo',1,'p_cuerpo','sintactico2.py',30),
  ('cuerpo -> escribir','cuerpo',1,'p_cuerpo','sintactico2.py',31),
  ('cuerpo -> btrim','cuerpo',1,'p_cuerpo','sintactico2.py',32),
  ('cuerpo -> otros','cuerpo',1,'p_cuerpo','sintactico2.py',33),
  ('cuerpo -> breturn','cuerpo',1,'p_cuerpo','sintactico2.py',34),
  ('cuerpo -> comment','cuerpo',1,'p_cuerpo','sintactico2.py',35),
  ('cuerpo -> casting','cuerpo',1,'p_cuerpo','sintactico2.py',36),
  ('cuerpo -> bconcat','cuerpo',1,'p_cuerpo','sintactico2.py',37),
  ('cuerpo -> simbolos','cuerpo',1,'p_cuerpo','sintactico2.py',38),
  ('asignacion -> VARIABLE EQUALS valor SEMI','asignacion',4,'p_asignacion','sintactico2.py',44),
  ('asignacion -> VAR asignacion','asignacion',2,'p_asignacion','sintactico2.py',45),
  ('asignacion -> proteccion asignacion','asignacion',2,'p_asignacion','sintactico2.py',46),
  ('asignacion -> VARIABLE EQUALS brand','asignacion',3,'p_asignacion','sintactico2.py',47),
  ('asignacion -> VARIABLE EQUALS escribir','asignacion',3,'p_asignacion','sintactico2.py',48),
  ('asignacion -> VARIABLE EQUALS btrim','asignacion',3,'p_asignacion','sintactico2.py',49),
  ('asignacion -> VARIABLE EQUALS lectura','asignacion',3,'p_asignacion','sintactico2.py',50),
  ('asignacion -> VARIABLE EQUALS bconcat','asignacion',3,'p_asignacion','sintactico2.py',51),
  ('asignacion -> asignacion_array','asignacion',1,'p_asignacion','sintactico2.py',52),
  ('asignacion -> VARIABLE EQUALS operaciones_mat SEMI','asignacion',4,'p_asignacion','sintactico2.py',53),
  ('asignacion -> aumentoCasting','asignacion',1,'p_asignacion','sintactico2.py',54),
  ('asignacion_array -> VARIABLE EQUALS array_def SEMI','asignacion_array',4,'p_asignacion_array','sintactico2.py',60),
  ('constante -> DEFINE LPAREN CADENA COMMA valor RPAREN SEMI','constante',7,'p_constante','sintactico2.py',64),
  ('constante -> DEFINE LPAREN NOMBRE COMMA ARRAY RPAREN SEMI','constante',7,'p_constante','sintactico2.py',65),
  ('valor -> tipoDato','valor',1,'p_valor','sintactico2.py',70),
  ('valor -> bcolas','valor',1,'p_valor','sintactico2.py',71),
  ('valor -> bpila','valor',1,'p_valor','sintactico2.py',72),
  ('tipoDato -> numero','tipoDato',1,'p_tipoDato','sintactico2.py',78),
  ('tipoDato -> CADENA','tipoDato',1,'p_tipoDato','sintactico2.py',79),
  ('tipoDato -> BOOLEANO','tipoDato',1,'p_tipoDato','sintactico2.py',80),
  ('numero -> ENTERO','numero',1,'p_numero','sintactico2.py',85),
  ('numero -> DECIMAL','numero',1,'p_numero','sintactico2.py',86),
  ('imprimir -> ECHO valor SEMI','imprimir',3,'p_imprimir','sintactico2.py',92),
  ('imprimir -> PRINT valor SEMI','imprimir',3,'p_imprimir','sintactico2.py',93),
  ('imprimir -> PRINT LPAREN valor RPAREN SEMI','imprimir',5,'p_imprimir','sintactico2.py',94),
  ('imprimir -> ECHO NOMBRE LBRACKET ENTERO RBRACKET SEMI','imprimir',6,'p_imprimir','sintactico2.py',95),
  ('imprimir -> ECHO bconcat','imprimir',2,'p_imprimir','sintactico2.py',96),
  ('imprimir -> ECHO operaciones_mat SEMI','imprimir',3,'p_imprimir','sintactico2.py',97),
  ('imprimir -> PRINT operaciones_mat SEMI','imprimir',3,'p_imprimir','sintactico2.py',98),
  ('condicion_if -> IF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_if',7,'p_condicion_if','sintactico2.py',105),
  ('condicion_elseif -> ELSEIF LPAREN condicion RPAREN LBRACE cuerpo RBRACE','condicion_elseif',7,'p_condicion_elseif','sintactico2.py',110),
  ('condicion_else -> ELSE LBRACE cuerpo RBRACE','condicion_else',4,'p_condicion_else','sintactico2.py',115),
  ('condicion_ifelse -> condicion_if','condicion_ifelse',1,'p_condicion_ifelse','sintactico2.py',120),
  ('condicion_ifelse -> condicion_if condicion_else','condicion_ifelse',2,'p_condicion_ifelse','sintactico2.py',121),
  ('condicion_ifelse -> condicion_if condicion_elseif','condicion_ifelse',2,'p_condicion_ifelse','sintactico2.py',122),
  ('condicion_ifelse -> condicion_if condicion_elseif condicion_else','condicion_ifelse',3,'p_condicion_ifelse','sintactico2.py',123),
  ('condicion -> VARIABLE operador_logico VARIABLE','condicion',3,'p_condicion','sintactico2.py',128),
  ('condicion -> valor operador_logico valor','condicion',3,'p_condicion','sintactico2.py',129),
  ('condicion -> VARIABLE operador_logico valor','condicion',3,'p_condicion','sintactico2.py',130),
  ('condicion -> VARIABLE condicion_booleana VARIABLE','condicion',3,'p_condicion','sintactico2.py',131),
  ('condicion -> valor condicion_booleana valor','condicion',3,'p_condicion','sintactico2.py',132),
  ('condicion -> VARIABLE condicion_booleana valor','condicion',3,'p_condicion','sintactico2.py',133),
  ('condicion -> LPAREN VARIABLE operadores valor RPAREN operador_logico valor','condicion',7,'p_condicion','sintactico2.py',134),
  ('condicion -> LPAREN VARIABLE operadores valor RPAREN condicion_booleana valor','condicion',7,'p_condicion','sintactico2.py',135),
  ('condicion -> condicion condicion_booleana condicion','condicion',3,'p_condicion','sintactico2.py',136),
  ('condicion -> condicion condicion_booleana comprobacion','condicion',3,'p_condicion','sintactico2.py',137),
  ('bfor -> FOR LPAREN asignacion condicion SEMI for_incr RPAREN stc_bloque_def','bfor',8,'p_bfor','sintactico2.py',143),
  ('stc_bloque -> stc_bloque SEMI cuerpo','stc_bloque',3,'p_stc_bloque','sintactico2.py',147),
  ('stc_bloque -> breturn','stc_bloque',1,'p_stc_bloque','sintactico2.py',148),
  ('stc_bloque_def -> LBRACE stc_bloque RBRACE','stc_bloque_def',3,'p_stc_bloque_def','sintactico2.py',153),
  ('for_incr -> VARIABLE SUMA SUMA','for_incr',3,'p_for_incr','sintactico2.py',157),
  ('for_incr -> SUMA SUMA VARIABLE','for_incr',3,'p_for_incr','sintactico2.py',158),
  ('for_incr -> VARIABLE RESTA RESTA','for_incr',3,'p_for_incr','sintactico2.py',159),
  ('for_incr -> RESTA RESTA VARIABLE','for_incr',3,'p_for_incr','sintactico2.py',160),
  ('for_incr -> VARIABLE SUMA EQUALS numero','for_incr',4,'p_for_incr','sintactico2.py',161),
  ('for_incr -> VARIABLE RESTA EQUALS numero','for_incr',4,'p_for_incr','sintactico2.py',162),
  ('bforeach -> FOREACH LPAREN VARIABLE AS VARIABLE RPAREN stc_bloque_def','bforeach',7,'p_bforeach','sintactico2.py',166),
  ('bwhile -> WHILE LPAREN condicion RPAREN LBRACE stc_bloque RBRACE','bwhile',7,'p_bwhile','sintactico2.py',171),
  ('bwhile -> WHILE LPAREN condicion RPAREN COLON stc_bloque','bwhile',6,'p_bwhile','sintactico2.py',172),
  ('bdo -> DO LBRACE cuerpo RBRACE bwhile','bdo',5,'p_bdo','sintactico2.py',177),
  ('bswitch -> SWITCH LPAREN VARIABLE RPAREN LBRACE cuerpo SEMI RBRACE','bswitch',8,'p_bswitch','sintactico2.py',183),
  ('bcase -> CASE ENTERO COLON','bcase',3,'p_bcase','sintactico2.py',187),
  ('innerSwitch -> bcase cuerpo BREAK SEMI','innerSwitch',4,'p_innerSwitch','sintactico2.py',191),
  ('innerSwitch -> CASE ENTERO COLON cuerpo BREAK SEMI innerSwitch','innerSwitch',7,'p_innerSwitch','sintactico2.py',192),
  ('btry -> TRY LBRACE stc_bloque_def RBRACE catches','btry',5,'p_btry','sintactico2.py',198),
  ('catches -> catches CATCH LPAREN NOMBRE VARIABLE RPAREN stc_bloque_def','catches',7,'p_catches','sintactico2.py',202),
  ('catches -> empty','catches',1,'p_catches','sintactico2.py',203),
  ('operadores -> SUMA','operadores',1,'p_operadores','sintactico2.py',209),
  ('operadores -> RESTA','operadores',1,'p_operadores','sintactico2.py',210),
  ('operadores -> MULTIPLICACION','operadores',1,'p_operadores','sintactico2.py',211),
  ('operadores -> DIVISION','operadores',1,'p_operadores','sintactico2.py',212),
  ('operadores -> MODULO','operadores',1,'p_operadores','sintactico2.py',213),
  ('operador_logico -> SMALLER','operador_logico',1,'p_operador_logico','sintactico2.py',218),
  ('operador_logico -> GREATER','operador_logico',1,'p_operador_logico','sintactico2.py',219),
  ('operador_logico -> IS_SMALLER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico2.py',220),
  ('operador_logico -> IS_GREATER_OR_EQUAL','operador_logico',1,'p_operador_logico','sintactico2.py',221),
  ('incrementos_mat -> MINUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',226),
  ('incrementos_mat -> MOD_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',227),
  ('incrementos_mat -> MUL_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',228),
  ('incrementos_mat -> PLUS_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',229),
  ('incrementos_mat -> DIV_EQUAL','incrementos_mat',1,'p_incrementos_mat','sintactico2.py',230),
  ('condicion_booleana -> AND','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',235),
  ('condicion_booleana -> OR','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',236),
  ('condicion_booleana -> XOR','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',237),
  ('condicion_booleana -> IS_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',238),
  ('condicion_booleana -> IS_NOT_EQUAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',239),
  ('condicion_booleana -> IS_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',240),
  ('condicion_booleana -> IS_NOT_IDENTICAL','condicion_booleana',1,'p_condicion_boolena','sintactico2.py',241),
  ('operaciones_mat -> valor operadores valor','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',246),
  ('operaciones_mat -> valor operadores operaciones_mat','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',247),
  ('operaciones_mat -> VARIABLE operadores VARIABLE','operaciones_mat',3,'p_operaciones_mat','sintactico2.py',248),
  ('operaciones_mat -> operaciones_mat_par','operaciones_mat',1,'p_operaciones_mat','sintactico2.py',249),
  ('operaciones_mat_par -> LPAREN valor operadores valor RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',254),
  ('operaciones_mat_par -> LPAREN valor operadores operaciones_mat_par RPAREN','operaciones_mat_par',5,'p_operaciones_mat_par','sintactico2.py',255),
  ('operaciones_mat_par -> LPAREN VARIABLE operadores valor RPAREN operadores valor','operaciones_mat_par',7,'p_operaciones_mat_par','sintactico2.py',256),
  ('funciones -> funcion_nparams','funciones',1,'p_funciones','sintactico2.py',261),
  ('funciones -> proteccion funcion_nparams','funciones',2,'p_funciones','sintactico2.py',262),
  ('funciones -> funcion_blank','funciones',1,'p_funciones','sintactico2.py',263),
  ('funciones -> proteccion funcion_blank','funciones',2,'p_funciones','sintactico2.py',264),
  ('funciones -> funcion_void','funciones',1,'p_funciones','sintactico2.py',265),
  ('param -> VARIABLE','param',1,'p_param','sintactico2.py',270),
  ('param -> asignacion','param',1,'p_param','sintactico2.py',271),
  ('funcion_nparams -> FUNCTION NOMBRE LPAREN params_list RPAREN stc_bloque_def','funcion_nparams',6,'p_funcion_nparams','sintactico2.py',276),
  ('params_list -> params_list COMMA param','params_list',3,'p_params_list','sintactico2.py',280),
  ('params_list -> param','params_list',1,'p_params_list','sintactico2.py',281),
  ('funcion_void -> FUNCTION NOMBRE LPAREN RPAREN COLON VOID LBRACE empty RBRACE','funcion_void',9,'p_funcion_void','sintactico2.py',285),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN stc_bloque_def','funcion_blank',5,'p_funcion_blank','sintactico2.py',289),
  ('funcion_blank -> FUNCTION NOMBRE LPAREN RPAREN LBRACE empty RBRACE','funcion_blank',7,'p_funcion_blank','sintactico2.py',290),
  ('llamada_funcion -> NOMBRE LPAREN params_list RPAREN SEMI','llamada_funcion',5,'p_llamada_funcion','sintactico2.py',294),
  ('brand -> RAND LPAREN ENTERO COMMA ENTERO RPAREN SEMI','brand',7,'p_brand','sintactico2.py',297),
  ('proteccion -> PUBLIC','proteccion',1,'p_proteccion','sintactico2.py',301),
  ('proteccion -> PRIVATE','proteccion',1,'p_proteccion','sintactico2.py',302),
  ('proteccion -> PROTECTED','proteccion',1,'p_proteccion','sintactico2.py',303),
  ('proteccion -> STATIC','proteccion',1,'p_proteccion','sintactico2.py',304),
  ('breturn -> empty','breturn',1,'p_breturn','sintactico2.py',308),
  ('breturn -> RETURN SEMI','breturn',2,'p_breturn','sintactico2.py',309),
  ('breturn -> RETURN NULL SEMI','breturn',3,'p_breturn','sintactico2.py',310),
  ('breturn -> RETURN VARIABLE SEMI','breturn',3,'p_breturn','sintactico2.py',311),
  ('breturn -> RETURN BOOLEANO SEMI','breturn',3,'p_breturn','sintactico2.py',312),
  ('array_def -> ARRAY LPAREN RPAREN','array_def',3,'p_array_def','sintactico2.py',319),
  ('array_def -> ARRAY LPAREN array_elmnt RPAREN','array_def',4,'p_array_def','sintactico2.py',320),
  ('array_elmnt -> array_elmnt COMMA valor','array_elmnt',3,'p_array_elmnt','sintactico2.py',323),
  ('array_elmnt -> valor','array_elmnt',1,'p_array_elmnt','sintactico2.py',324),
  ('empty -> <empty>','empty',0,'p_empty','sintactico2.py',327),
  ('bcolas -> VARIABLE EQUALS NEW SPLQUEUE LPAREN RPAREN SEMI','bcolas',7,'p_bcolas','sintactico2.py',332),
  ('bpila -> VARIABLE EQUALS NEW SPLSTACK LPAREN RPAREN SEMI','bpila',7,'p_bpila','sintactico2.py',337),
  ('lectura -> READLINE LPAREN CADENA RPAREN SEMI','lectura',5,'p_lectura','sintactico2.py',342),
  ('lectura -> READLINE LPAREN RPAREN SEMI','lectura',4,'p_lectura','sintactico2.py',343),
  ('escribir -> FWRITE LPAREN NOMBRE COMMA CADENA RPAREN SEMI','escribir',7,'p_escribir','sintactico2.py',346),
  ('btrim -> TRIM LPAREN NOMBRE LPAREN NOMBRE RPAREN RPAREN SEMI','btrim',8,'p_btrim','sintactico2.py',350),
  ('comment -> COMENTARIOS','comment',1,'p_comment','sintactico2.py',355),
  ('comment -> DOC_COMENTARIOS','comment',1,'p_comment','sintactico2.py',356),
  ('bgoto -> GOTO NOMBRE SEMI','bgoto',3,'p_bgoto','sintactico2.py',360),
  ('bcortes -> EXIT SEMI','bcortes',2,'p_bcortes','sintactico2.py',364),
  ('bcortes -> BREAK SEMI','bcortes',2,'p_bcortes','sintactico2.py',365),
  ('bcortes -> DEFAULT SEMI','bcortes',2,'p_bcortes','sintactico2.py',366),
  ('bcortes -> CONTINUE SEMI','bcortes',2,'p_bcortes','sintactico2.py',367),
  ('otros -> SMALLER NOMBRE GREATER','otros',3,'p_otros','sintactico2.py',371),
  ('comprobacion -> NOMBRE LPAREN valor RPAREN','comprobacion',4,'p_comprobacion','sintactico2.py',376),
  ('comprobacion -> NOMBRE LPAREN VARIABLE RPAREN','comprobacion',4,'p_comprobacion','sintactico2.py',377),
  ('simbolos -> LPAREN RPAREN','simbolos',2,'p_simbolos','sintactico2.py',381),
  ('simbolos -> LPAREN','simbolos',1,'p_simbolos','sintactico2.py',382),
  ('simbolos -> RPAREN','simbolos',1,'p_simbolos','sintactico2.py',383),
  ('simbolos -> LBRACKET RBRACKET','simbolos',2,'p_simbolos','sintactico2.py',384),
  ('simbolos -> LBRACKET','simbolos',1,'p_simbolos','sintactico2.py',385),
  ('simbolos -> RBRACKET','simbolos',1,'p_simbolos','sintactico2.py',386),
  ('simbolos -> LBRACE RBRACE','simbolos',2,'p_simbolos','sintactico2.py',387),
  ('simbolos -> LBRACE','simbolos',1,'p_simbolos','sintactico2.py',388),
  ('simbolos -> RBRACE instrucciones','simbolos',2,'p_simbolos','sintactico2.py',389),
  ('simbolos -> OPEN_TAG CLOSE_TAG','simbolos',2,'p_simbolos','sintactico2.py',390),
  ('simbolos -> OPEN_TAG','simbolos',1,'p_simbolos','sintactico2.py',391),
  ('simbolos -> CLOSE_TAG','simbolos',1,'p_simbolos','sintactico2.py',392),
  ('instrucciones -> condicion_else','instrucciones',1,'p_instrucciones','sintactico2.py',397),
  ('instrucciones -> condicion_elseif','instrucciones',1,'p_instrucciones','sintactico2.py',398),
  ('instrucciones -> bwhile','instrucciones',1,'p_instrucciones','sintactico2.py',399),
  ('instrucciones -> bfor','instrucciones',1,'p_instrucciones','sintactico2.py',400),
  ('bconcat -> CADENA CONCAT CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',405),
  ('bconcat -> VARIABLE CONCAT VARIABLE SEMI','bconcat',4,'p_bconcat','sintactico2.py',406),
  ('bconcat -> VARIABLE CONCAT CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',407),
  ('bconcat -> VARIABLE CONCAT_EQUAL CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',408),
  ('bconcat -> CADENA CONCAT_EQUAL CADENA SEMI','bconcat',4,'p_bconcat','sintactico2.py',409),
  ('tiposCast -> STRING','tiposCast',1,'p_tiposCast','sintactico2.py',414),
  ('tiposCast -> BOOL','tiposCast',1,'p_tiposCast','sintactico2.py',415),
  ('tiposCast -> BOOLEAN','tiposCast',1,'p_tiposCast','sintactico2.py',416),
  ('tiposCast -> DOUBLE','tiposCast',1,'p_tiposCast','sintactico2.py',417),
  ('tiposCast -> FLOAT','tiposCast',1,'p_tiposCast','sintactico2.py',418),
  ('tiposCast -> ARRAY','tiposCast',1,'p_tiposCast','sintactico2.py',419),
  ('tiposCast -> OBJECT','tiposCast',1,'p_tiposCast','sintactico2.py',420),
  ('tiposCast -> INTEGER','tiposCast',1,'p_tiposCast','sintactico2.py',421),
  ('tiposCast -> INT','tiposCast',1,'p_tiposCast','sintactico2.py',422),
  ('casting -> VARIABLE EQUALS LPAREN tiposCast RPAREN VARIABLE SEMI','casting',7,'p_casting','sintactico2.py',428),
  ('casting -> LPAREN tiposCast RPAREN VARIABLE SEMI','casting',5,'p_casting','sintactico2.py',429),
  ('aumentoCasting -> VARIABLE incrementos_mat tipoDato SEMI','aumentoCasting',4,'p_aumentoCasting','sintactico2.py',433),
  ('aumentoCasting -> VARIABLE EQUALS VARIABLE operadores tipoDato SEMI','aumentoCasting',6,'p_aumentoCasting','sintactico2.py',434),
]
